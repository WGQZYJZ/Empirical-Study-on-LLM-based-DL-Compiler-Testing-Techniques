==========mod==========
#[version = "0.0.5"]
def @func_4708() -> (Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) {
  %0 = @func_4354() /* ty=(Tensor[(336), uint32],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %4 = cast(meta[relay.Constant][2] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %5 = cast(meta[relay.Constant][3] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %6 = reshape(%1, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
  %7 = reshape(%2, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
  %8 = reshape(%3, newshape=[1050]) /* ty=Tensor[(1050), float64] */;
  %9 = reshape(%4, newshape=[400]) /* ty=Tensor[(400), float32] */;
  %10 = reshape(%5, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %11 = @func_1372(%6, %7, %8, %9, %10) /* ty=(Tensor[(2, 8, 9), bool], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(2, 8, 9), float32], Tensor[(10, 6, 6), float32], Tensor[(9, 4), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
  %12 = %0.0;
  %13 = cast(%12, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %14 = reshape(%13, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %15 = @func_1738(%14) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) */;
  %16 = %11.9;
  %17 = %15.8;
  (%12, %16, meta[relay.Constant][0] /* ty=Tensor[(144), float64] */, meta[relay.Constant][1] /* ty=Tensor[(1050), float64] */, meta[relay.Constant][2] /* ty=Tensor[(400), float32] */, meta[relay.Constant][3] /* ty=Tensor[(360), float32] */, %17)
}

def @func_7487() -> (Tensor[(7, 15, 14), float32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(360), float32]) {
  %18 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %19 = %18.3;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %21 = asin(%20) /* ty=Tensor[(7, 15, 14), float32] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %23 = @func_6161() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %24 = cast(meta[relay.Constant][4] /* ty=Tensor[(1144), bool] */, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %25 = cast(meta[relay.Constant][5] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %26 = cast(meta[relay.Constant][6] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %27 = cast(meta[relay.Constant][4] /* ty=Tensor[(1144), bool] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %28 = reshape(%24, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
  %29 = reshape(%25, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
  %30 = reshape(%26, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %31 = reshape(%27, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %32 = @func_6260(%28, %29, %30, %31) /* ty=(Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) */;
  %33 = sin(%22) /* ty=Tensor[(7, 15, 14), float32] */;
  %34 = %23.5;
  %35 = %32.0;
  (%33, %34, %35, meta[relay.Constant][4] /* ty=Tensor[(1144), bool] */, meta[relay.Constant][5] /* ty=Tensor[(36), float32] */, meta[relay.Constant][6] /* ty=Tensor[(360), float32] */)
}

def @func_4949() -> (Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) {
  %36 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %37 = %36.1;
  %38 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
  (%37, %38)
}

def @func_824(%var_804: Tensor[(3, 16, 7), uint32], %var_805: Tensor[(3, 16, 7), uint32]) -> (Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) {
  %39 = cast(%var_805, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
  %40 = shape_of(%var_804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%var_804, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %43 = cast(%var_805, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %44 = greater(%41, %42) /* ty=Tensor[(3, 16, 7), bool] */;
  %45 = sin(%43) /* ty=Tensor[(3, 16, 7), float64] */;
  (%44, %45)
}

def @func_5625(%var_5615: Tensor[(336), uint32]) -> (Tensor[(400), float32], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) {
  %46 = @func_4708() /* ty=(Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
  %47 = cast(%var_5615, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %48 = reshape(%47, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %49 = @func_1738(%48) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) */;
  %50 = %46.4;
  %51 = @func_1498() /* ty=Tensor[(1470), uint32] */;
  %52 = %49.5;
  (%50, %51, %52, %var_5615)
}

def @func_8973(%var_8968: Tensor[(15, 7, 10), float32]) -> Tensor[(15, 7, 10), bool] {
  %53 = @func_8560() /* ty=Tensor[(15, 7, 10), float32] */;
  %54 = cast(%var_8968, dtype="bool") /* ty=Tensor[(15, 7, 10), bool] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="bool") /* ty=Tensor[(15, 7, 10), bool] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%56, %57) /* ty=Tensor[(15, 7, 10), bool] */
}

def @func_9611(%var_9605: Tensor[(1050), float64]) -> (Tensor[(9, 7, 5), float32], Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64]) {
  %58 = @func_8440() /* ty=(Tensor[(9, 7, 5), float32],) */;
  %59 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
  %60 = cast(%var_9605, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %61 = reshape(%60, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %62 = @func_480(%61) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %63 = %58.0;
  %64 = %59.0;
  %65 = %62.0;
  (%63, %64, %65, %var_9605)
}

def @func_2815() -> (Tensor[(12, 5, 15), float32],) {
  %66 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %67 = %66.0;
  %68 = cast(%67, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  %69 = cos(%68) /* ty=Tensor[(12, 5, 15), float32] */;
  (%69,)
}

def @func_7437(%var_7410: Tensor[(1, 1, 2), float32]) -> (Tensor[(1470), uint32], Tensor[(1, 1, 2), float32]) {
  %70 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
  %71 = cast(%var_7410, dtype="float32") /* ty=Tensor[(1, 1, 2), float32] */;
  %72 = sinh(%71) /* ty=Tensor[(1, 1, 2), float32] */;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(1, 1, 2), float32] */;
  %74 = %70.0;
  %75 = cos(%73) /* ty=Tensor[(1, 1, 2), float32] */;
  (%74, %75)
}

def @func_8560() -> Tensor[(15, 7, 10), float32] {
  %76 = @func_5308() /* ty=(Tensor[(15, 7, 10), float32],) */;
  %76.0
}

def @func_7095() -> (Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  %77 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
  %78 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
  %79 = %77.0;
  %80 = %78.0;
  (%79, %80)
}

def @func_4419() -> (Tensor[(6, 14, 6), float32],) {
  %81 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
  %82 = sinh(%81) /* ty=Tensor[(6, 14, 6), float32] */;
  (%82,)
}

def @func_4569(%var_4556: Tensor[(360), float32]) -> (Tensor[(12, 5, 15), float32], Tensor[(360), float32], Tensor[(336), bool], Tensor[(360), float32], Tensor[(336), uint32]) {
  %83 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %84 = cast(meta[relay.Constant][8] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %85 = cast(%var_4556, dtype="float32") /* ty=Tensor[(360), float32] */;
  %86 = reshape(%84, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), bool] */;
  %87 = reshape(%85, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %88 = @func_1908(%86, %87) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) */;
  %89 = @func_4354() /* ty=(Tensor[(336), uint32],) */;
  %90 = %83.0;
  %91 = %88.8;
  %92 = %89.0;
  (%90, %91, meta[relay.Constant][8] /* ty=Tensor[(336), bool] */, %var_4556, %92)
}

def @func_5096() -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) {
  %93 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
  %94 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %95 = %93.0;
  %96 = %94.0;
  (%95, %96)
}

def @func_10620(%var_10613: Tensor[(10, 16, 4), float32]) -> (Tensor[(10, 16, 4), float32], Tensor[(1470), uint32]) {
  %97 = cast(%var_10613, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %98 = @func_4592() /* ty=(Tensor[(1470), uint32],) */;
  %99 = erf(%97) /* ty=Tensor[(10, 16, 4), float32] */;
  %100 = %98.0;
  (%99, %100)
}

def @func_2134(%var_2108: float32, %var_2109: Tensor[(8, 2, 3), float32]) -> (Tensor[(8, 2, 3), float32], Tensor[(15, 7, 10), float64], Tensor[(1050, 1), float64]) {
  %101 = cast(%var_2108, dtype="float32") /* ty=float32 */;
  %102 = cast(%var_2109, dtype="float32") /* ty=Tensor[(8, 2, 3), float32] */;
  %103 = cast(meta[relay.Constant][9] /* ty=Tensor[(1050, 1), float64] */, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
  %104 = reshape(%103, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %105 = @func_480(%104) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %106 = floor_divide(%101, %102) /* ty=Tensor[(8, 2, 3), float32] */;
  %107 = %105.0;
  (%106, %107, meta[relay.Constant][9] /* ty=Tensor[(1050, 1), float64] */)
}

def @func_8698(%var_8684: Tensor[(7, 1, 4), float32]) -> (Tensor[(7, 1, 4), float32], Tensor[(400), float32], Tensor[(24, 14), uint32]) {
  %108 = cast(%var_8684, dtype="float32") /* ty=Tensor[(7, 1, 4), float32] */;
  %109 = cast(meta[relay.Constant][10] /* ty=Tensor[(24, 14), uint32] */, dtype="uint32") /* ty=Tensor[(24, 14), uint32] */;
  %110 = reshape(%109, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %111 = @func_5625(%110) /* ty=(Tensor[(400), float32], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) */;
  %112 = cosh(%108) /* ty=Tensor[(7, 1, 4), float32] */;
  %113 = %111.0;
  (%112, %113, meta[relay.Constant][10] /* ty=Tensor[(24, 14), uint32] */)
}

def @func_4526() -> Tensor[(1470), uint32] {
  @func_1498() /* ty=Tensor[(1470), uint32] */
}

def @func_7398(%var_7391: Tensor[(4, 2, 3), float64]) -> (Tensor[(4, 2, 3), float64],) {
  %114 = cast(%var_7391, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
  %115 = asinh(%114) /* ty=Tensor[(4, 2, 3), float64] */;
  (%115,)
}

def @func_6610(%var_6594: Tensor[(15, 1, 14), uint16], %var_6603: Tensor[(1144), bool], %var_6604: Tensor[(36), float32]) -> (Tensor[(15, 1, 14), uint16], Tensor[(10, 6, 6), float32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(2, 180), float32]) {
  %116 = cast(meta[relay.Constant][11] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %117 = cast(%var_6594, dtype="uint16") /* ty=Tensor[(15, 1, 14), uint16] */;
  %118 = cast(%var_6603, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %119 = cast(%var_6604, dtype="float32") /* ty=Tensor[(36), float32] */;
  %120 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 180), float32] */, dtype="float32") /* ty=Tensor[(2, 180), float32] */;
  %121 = cast(%var_6603, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %122 = reshape(%118, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
  %123 = reshape(%119, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
  %124 = reshape(%120, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %125 = reshape(%121, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %126 = @func_6260(%122, %123, %124, %125) /* ty=(Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) */;
  %127 = bitwise_and(%116, %117) /* ty=Tensor[(15, 1, 14), uint16] */;
  %128 = %126.3;
  (%127, %128, %var_6603, %var_6604, meta[relay.Constant][12] /* ty=Tensor[(2, 180), float32] */)
}

def @func_8450() -> (Tensor[(1470), uint32],) {
  %129 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
  %130 = %129.0;
  (%130,)
}

def @func_5839() -> (Tensor[(336), uint32], Tensor[(1470), uint32]) {
  %131 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %132 = %131.3;
  %133 = @func_4526() /* ty=Tensor[(1470), uint32] */;
  (%132, %133)
}

def @func_22(%var_17: Tensor[(1, 6, 6), float32], %var_18: Tensor[(10, 6, 6), float32]) -> (Tensor[(10, 6, 6), float32],) {
  %134 = cast(%var_17, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
  %135 = cast(%var_18, dtype="float32") /* ty=Tensor[(10, 6, 6), float32] */;
  %136 = power(%134, %135) /* ty=Tensor[(10, 6, 6), float32] */;
  (%136,)
}

def @func_9530() -> (Tensor[(1470), uint32],) {
  %137 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %138 = %137.0;
  (%138,)
}

def @func_3429(%var_3344: Tensor[(1470), uint32]) -> (Tensor[(7, 15, 14), uint32], Tensor[(1470), float64], Tensor[(1470), uint32], Tensor[(5, 10, 11), int64]) {
  %139 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %140 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
  %141 = %140.0;
  %142 = cast(%var_3344, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(1), int32] */;
  %144 = cast(%141, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?), float64] */;
  %146 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
  %147 = cast(meta[relay.Constant][13] /* ty=Tensor[(550), bool] */, dtype="bool") /* ty=Tensor[(550), bool] */;
  %148 = reshape(%147, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), bool] */;
  %149 = @func_2622(%148) /* ty=(Tensor[(5, 10, 11), bool], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %150 = %149.0;
  %151 = cast(%150, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
  %152 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(550), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %153 = cast(meta[relay.Constant][13] /* ty=Tensor[(550), bool] */, dtype="bool") /* ty=Tensor[(550), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?), bool] */;
  %155 = less(%153, %154) /* ty=Tensor[(550), bool] */;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(550), float64] */;
  %157 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%150, dtype="float64") /* ty=Tensor[(5, 10, 11), float64] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %160 = power(%158, %159) /* ty=Tensor[(5, 10, 11), float64] */;
  %161 = cast(%150, dtype="int64") /* ty=Tensor[(5, 10, 11), int64] */;
  %162 = shape_of(%160, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%160, dtype="int64") /* ty=Tensor[(5, 10, 11), int64] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %165 = %139.0;
  %166 = floor_mod(%144, %145) /* ty=Tensor[(1470), float64] */;
  %167 = %146.0;
  %168 = bitwise_and(%163, %164) /* ty=Tensor[(5, 10, 11), int64] */;
  (%165, %166, %167, %168)
}

def @func_6337() -> (Tensor[(1470), uint32],) {
  %169 = @func_6161() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %170 = %169.5;
  (%170,)
}

def @func_8939() -> (Tensor[(7, 15, 14), uint32],) {
  %171 = @func_5960() /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %172 = %171.0;
  (%172,)
}

def @func_1372(%var_1314: Tensor[(2, 8, 9), float64], %var_1315: Tensor[(2, 8, 9), float64], %var_1329: Tensor[(1050), float64], %var_1332: Tensor[(400), float32], %var_1353: Tensor[(360), float32]) -> (Tensor[(2, 8, 9), bool], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(2, 8, 9), float32], Tensor[(10, 6, 6), float32], Tensor[(9, 4), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) {
  %173 = cast(%var_1315, dtype="bool") /* ty=Tensor[(2, 8, 9), bool] */;
  %174 = shape_of(%var_1314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%var_1314, dtype="bool") /* ty=Tensor[(2, 8, 9), bool] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %177 = cast(%var_1329, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %178 = reshape(%177, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %179 = @func_480(%178) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %180 = cast(%var_1332, dtype="float32") /* ty=Tensor[(400), float32] */;
  %181 = reshape(%180, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float32] */;
  %182 = @func_846(%181) /* ty=(Tensor[(4, 10, 10), float32],) */;
  %183 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %184 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %185 = reshape(%183, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %186 = reshape(%184, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %187 = @func_824(%185, %186) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %188 = cast(%var_1314, dtype="float64") /* ty=Tensor[(2, 8, 9), float64] */;
  %189 = acosh(%188) /* ty=Tensor[(2, 8, 9), float64] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(2, 8, 9), float32] */;
  %191 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %192 = cast(%var_1353, dtype="float32") /* ty=Tensor[(360), float32] */;
  %193 = reshape(%191, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %194 = reshape(%192, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float32] */;
  %195 = @func_22(%193, %194) /* ty=(Tensor[(10, 6, 6), float32],) */;
  %196 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %197 = cast(meta[relay.Constant][14] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %198 = reshape(%196, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %199 = reshape(%197, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %200 = @func_824(%198, %199) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %201 = less_equal(%175, %176) /* ty=Tensor[(2, 8, 9), bool] */;
  %202 = %179.0;
  %203 = %182.0;
  %204 = %187.0;
  %205 = sinh(%190) /* ty=Tensor[(2, 8, 9), float32] */;
  %206 = %195.0;
  %207 = %200.1;
  (%201, %202, %var_1329, %203, %var_1332, %204, meta[relay.Constant][14] /* ty=Tensor[(336), uint32] */, %205, %206, meta[relay.Constant][15] /* ty=Tensor[(9, 4), float32] */, %var_1353, %207)
}

def @func_9891(%var_9862: Tensor[(5, 4, 6), float32], %var_9867: Tensor[(28), float32], %var_9870: Tensor[(2), float32], %var_9877: Tensor[(6600), bool]) -> (Tensor[(5, 4, 6), float32], Tensor[(7, 1, 4), float32], Tensor[(28), float32], Tensor[(336), uint32], Tensor[(2), float32], Tensor[(12, 5, 15), float32], Tensor[(550), bool], Tensor[(6600), bool]) {
  %208 = cast(%var_9862, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
  %209 = cast(%var_9867, dtype="float32") /* ty=Tensor[(28), float32] */;
  %210 = reshape(%209, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float32] */;
  %211 = @func_8698(%210) /* ty=(Tensor[(7, 1, 4), float32], Tensor[(400), float32], Tensor[(24, 14), uint32]) */;
  %212 = cast(%var_9870, dtype="float32") /* ty=Tensor[(2), float32] */;
  %213 = reshape(%212, newshape=[2]) /* ty=Tensor[(2), float32] */;
  %214 = @func_9232(%213) /* ty=(Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(2), float32]) */;
  %215 = cast(meta[relay.Constant][16] /* ty=Tensor[(550), bool] */, dtype="bool") /* ty=Tensor[(550), bool] */;
  %216 = cast(%var_9877, dtype="bool") /* ty=Tensor[(6600), bool] */;
  %217 = reshape(%215, newshape=[1, 550]) /* ty=Tensor[(1, 550), bool] */;
  %218 = reshape(%216, newshape=[12, 550]) /* ty=Tensor[(12, 550), bool] */;
  %219 = @func_3991(%217, %218) /* ty=(Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) */;
  %220 = sin(%208) /* ty=Tensor[(5, 4, 6), float32] */;
  %221 = %211.0;
  %222 = %214.1;
  %223 = %219.1;
  (%220, %221, %var_9867, %222, %var_9870, %223, meta[relay.Constant][16] /* ty=Tensor[(550), bool] */, %var_9877)
}

def @func_9342() -> (Tensor[(12, 5, 15), float32], Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  %224 = @func_5096() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */;
  %225 = cast(meta[relay.Constant][17] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %226 = reshape(%225, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %227 = @func_2329(%226) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %228 = %224.1;
  %229 = %227.2;
  (%228, %229, meta[relay.Constant][17] /* ty=Tensor[(1470), uint32] */)
}

def @func_2261() -> Tensor[(12, 5, 15), float32] {
  %230 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %230.1
}

def @func_6555() -> Tensor[(3, 16, 7), float64] {
  %231 = @func_4949() /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) */;
  %231.0
}

def @func_7269() -> (Tensor[(1470), uint32],) {
  %232 = @func_5977() /* ty=(Tensor[(1470), uint32],) */;
  %233 = %232.0;
  (%233,)
}

def @func_9079() -> (Tensor[(12, 5, 15), float32],) {
  %234 = @func_4949() /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) */;
  %235 = %234.1;
  (%235,)
}

def @func_2477() -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) {
  %236 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %237 = @func_2360() /* ty=(Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %238 = %237.1;
  %239 = cast(%238, dtype="uint32") /* ty=Tensor[(7, 15, 14), uint32] */;
  %240 = reshape(%239, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %241 = @func_2329(%240) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %242 = %241.1;
  %243 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
  %244 = %243.0;
  %245 = cast(%244, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %246 = shape_of(%238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%238, dtype="bool") /* ty=Tensor[(7, 15, 14), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %249 = not_equal(%247, %248) /* ty=Tensor[(7, 15, 14), bool] */;
  %250 = cast(%249, dtype="int8") /* ty=Tensor[(7, 15, 14), int8] */;
  %251 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%242, dtype="int8") /* ty=Tensor[(7, 15, 14), int8] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %254 = cast(%238, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %255 = %236.0;
  %256 = multiply(%252, %253) /* ty=Tensor[(7, 15, 14), int8] */;
  %257 = erf(%254) /* ty=Tensor[(7, 15, 14), float64] */;
  (%255, %256, %257)
}

def @func_6765() -> (Tensor[(1470), uint32],) {
  %258 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %259 = %258.0;
  (%259,)
}

def @func_3325(%var_3318: Tensor[(12, 16, 6), float32]) -> Tensor[(12, 16, 6), float32] {
  %260 = cast(%var_3318, dtype="float32") /* ty=Tensor[(12, 16, 6), float32] */;
  cosh(%260) /* ty=Tensor[(12, 16, 6), float32] */
}

def @func_3924(%var_3881: Tensor[(1144), bool]) -> (Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) {
  %261 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %262 = cast(%var_3881, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %263 = reshape(%261, newshape=[]) /* ty=bool */;
  %264 = reshape(%262, newshape=[8, 13, 11]) /* ty=Tensor[(8, 13, 11), bool] */;
  %265 = @func_2042(%263, %264) /* ty=(Tensor[(8, 13, 11), bool],) */;
  %266 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %267 = %266.0;
  %268 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %269 = cast(%267, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
  %270 = %265.0;
  %271 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  %272 = less(%268, %269) /* ty=Tensor[(12, 5, 15), bool] */;
  (%270, %var_3881, %271, %272)
}

def @func_7626() -> (Tensor[(1470), uint32],) {
  %273 = @func_7066() /* ty=(Tensor[(1470), uint32],) */;
  %274 = %273.0;
  (%274,)
}

def @func_3202(%var_3196: Tensor[(14, 10, 4), float64]) -> (Tensor[(14, 10, 4), float64],) {
  %275 = cast(%var_3196, dtype="float64") /* ty=Tensor[(14, 10, 4), float64] */;
  %276 = cos(%275) /* ty=Tensor[(14, 10, 4), float64] */;
  (%276,)
}

def @func_3678() -> (Tensor[(12, 5, 15), float32],) {
  %277 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %278 = %277.0;
  (%278,)
}

def @func_5040() -> (Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  %279 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
  %280 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
  %281 = @func_1498() /* ty=Tensor[(1470), uint32] */;
  %282 = %279.0;
  %283 = %280.0;
  (%281, %282, %283)
}

def @func_8737() -> (Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  %284 = @func_5040() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32]) */;
  %285 = @func_6765() /* ty=(Tensor[(1470), uint32],) */;
  %286 = %284.1;
  %287 = %285.0;
  (%286, %287)
}

def @func_6678(%var_6672: Tensor[(1152), float32]) -> (Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32]) {
  %288 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %289 = cast(%var_6672, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %290 = reshape(%289, newshape=[12, 16, 6]) /* ty=Tensor[(12, 16, 6), float32] */;
  %291 = %288.1;
  %292 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
  %293 = @func_3325(%290) /* ty=Tensor[(12, 16, 6), float32] */;
  (%291, %292, %293, %var_6672)
}

def @func_8138(%var_8130: Tensor[(4, 14, 1), uint16], %var_8131: Tensor[(4, 14, 16), uint16]) -> (Tensor[(4, 14, 16), bool],) {
  %294 = cast(%var_8130, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %295 = cast(%var_8131, dtype="bool") /* ty=Tensor[(4, 14, 16), bool] */;
  %296 = less_equal(%294, %295) /* ty=Tensor[(4, 14, 16), bool] */;
  (%296,)
}

def @func_10711(%var_10675: Tensor[(4, 36), float64], %var_10677: Tensor[(400), float32], %var_10678: Tensor[(360), float32]) -> (Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(2, 8, 9), bool], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(4, 36), float32]) {
  %297 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %298 = @func_6337() /* ty=(Tensor[(1470), uint32],) */;
  %299 = cast(%var_10675, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %300 = cast(%var_10675, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
  %301 = cast(meta[relay.Constant][18] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %302 = cast(%var_10677, dtype="float32") /* ty=Tensor[(400), float32] */;
  %303 = cast(%var_10678, dtype="float32") /* ty=Tensor[(360), float32] */;
  %304 = reshape(%299, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
  %305 = reshape(%300, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
  %306 = reshape(%301, newshape=[1050]) /* ty=Tensor[(1050), float64] */;
  %307 = reshape(%302, newshape=[400]) /* ty=Tensor[(400), float32] */;
  %308 = reshape(%303, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %309 = @func_1372(%304, %305, %306, %307, %308) /* ty=(Tensor[(2, 8, 9), bool], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(2, 8, 9), float32], Tensor[(10, 6, 6), float32], Tensor[(9, 4), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
  %310 = cast(%var_10675, dtype="float32") /* ty=Tensor[(4, 36), float32] */;
  %311 = %297.4;
  %312 = %298.0;
  %313 = %309.0;
  %314 = cosh(%310) /* ty=Tensor[(4, 36), float32] */;
  (%311, %312, %313, meta[relay.Constant][18] /* ty=Tensor[(1050), float64] */, %var_10677, %var_10678, %314)
}

def @func_10016() -> (Tensor[(7, 15, 14), float32],) {
  %315 = @func_8939() /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %316 = %315.0;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %318 = sqrt(%317) /* ty=Tensor[(7, 15, 14), float32] */;
  (%318,)
}

def @func_4890(%var_4832: Tensor[(2, 10, 9), float32], %var_4836: Tensor[(1144), bool]) -> (Tensor[(2, 10, 9), float32], Tensor[(1144), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(6, 14, 6), float32], Tensor[(?, 1470), float64]) {
  %319 = cast(%var_4832, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
  %320 = cast(%var_4836, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %321 = reshape(%320, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
  %322 = @func_3924(%321) /* ty=(Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) */;
  %323 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %324 = cast(meta[relay.Constant][19] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %326 = reshape(%324, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %327 = reshape(%325, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %328 = @func_824(%326, %327) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %329 = @func_4708() /* ty=(Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
  %330 = @func_4419() /* ty=(Tensor[(6, 14, 6), float32],) */;
  %331 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 1470), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1470), uint32] */;
  %332 = reshape(%331, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %333 = @func_54(%332) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %334 = %333.0;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %336 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(1, 1470), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %337 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 1470), uint32] */, dtype="float64") /* ty=Tensor[(1, 1470), float64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %339 = cos(%319) /* ty=Tensor[(2, 10, 9), float32] */;
  %340 = %322.1;
  %341 = %323.0;
  %342 = %328.0;
  %343 = %329.1;
  %344 = %330.0;
  %345 = floor_mod(%337, %338) /* ty=Tensor[(?, 1470), float64] */;
  (%339, %340, %var_4836, %341, %342, meta[relay.Constant][19] /* ty=Tensor[(336), uint32] */, %343, %344, %345)
}

def @func_4330() -> (Tensor[(1470), uint32],) {
  %346 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %347 = %346.2;
  (%347,)
}

def @func_9085() -> Tensor[(15, 7, 10), float32] {
  @func_6579() /* ty=Tensor[(15, 7, 10), float32] */
}

def @func_2042(%var_2030: bool, %var_2031: Tensor[(8, 13, 11), bool]) -> (Tensor[(8, 13, 11), bool],) {
  %348 = cast(%var_2030, dtype="bool") /* ty=bool */;
  %349 = cast(%var_2031, dtype="bool") /* ty=Tensor[(8, 13, 11), bool] */;
  %350 = logical_or(%348, %349) /* ty=Tensor[(8, 13, 11), bool] */;
  (%350,)
}

def @func_5308() -> (Tensor[(15, 7, 10), float32],) {
  %351 = @func_4776() /* ty=(Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %352 = %351.1;
  %353 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %357 = subtract(%355, %356) /* ty=Tensor[(15, 7, 10), float32] */;
  (%357,)
}

def @func_10566(%var_10560: Tensor[(1, 16, 10), uint64]) -> Tensor[(9, 16, 10), uint64] {
  %358 = cast(%var_10560, dtype="uint64") /* ty=Tensor[(1, 16, 10), uint64] */;
  %359 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 16, 10), uint64] */, dtype="uint64") /* ty=Tensor[(9, 16, 10), uint64] */;
  subtract(%358, %359) /* ty=Tensor[(9, 16, 10), uint64] */
}

def @func_2203(%var_2193: Tensor[(11, 16, 6), int32], %var_2194: Tensor[(11, 16, 6), int32]) -> (Tensor[(11, 16, 6), int32], Tensor[(11, 16, 6), float32]) {
  %360 = cast(%var_2194, dtype="int32") /* ty=Tensor[(11, 16, 6), int32] */;
  %361 = shape_of(%var_2193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_2193, dtype="int32") /* ty=Tensor[(11, 16, 6), int32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %364 = cast(%var_2194, dtype="float32") /* ty=Tensor[(11, 16, 6), float32] */;
  %365 = logical_xor(%362, %363) /* ty=Tensor[(11, 16, 6), int32] */;
  %366 = atanh(%364) /* ty=Tensor[(11, 16, 6), float32] */;
  (%365, %366)
}

def @func_2105() -> (Tensor[(336), uint32],) {
  %367 = @func_1773() /* ty=Tensor[(336), uint32] */;
  (%367,)
}

def @func_4592() -> (Tensor[(1470), uint32],) {
  %368 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
  %369 = %368.0;
  (%369,)
}

def @func_8371() -> (Tensor[(336), uint32], Tensor[(1470), uint32]) {
  %370 = @func_6161() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %371 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %372 = %370.1;
  %373 = %371.0;
  (%372, %373)
}

def @func_7940() -> Tensor[(336), uint32] {
  %374 = @func_2360() /* ty=(Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %374.2
}

def @func_2622(%var_2578: Tensor[(5, 10, 11), bool]) -> (Tensor[(5, 10, 11), bool], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) {
  %375 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 10, 11), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
  %376 = shape_of(%var_2578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%var_2578, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %379 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %380 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %381 = logical_or(%377, %378) /* ty=Tensor[(5, 10, 11), bool] */;
  %382 = %379.1;
  %383 = %380.0;
  (%381, %382, %383)
}

def @func_9289() -> (Tensor[(7, 15, 14), uint32],) {
  %384 = @func_4776() /* ty=(Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %385 = %384.2;
  (%385,)
}

def @main(%var_11095: Tensor[(13, 6, 1), float32]) -> (Tensor[(13, 6, 1), float32],) {
  %386 = cast(%var_11095, dtype="float32") /* ty=Tensor[(13, 6, 1), float32] */;
  %387 = asinh(%386) /* ty=Tensor[(13, 6, 1), float32] */;
  %388 = cast(%387, dtype="float32") /* ty=Tensor[(13, 6, 1), float32] */;
  %389 = log2(%388) /* ty=Tensor[(13, 6, 1), float32] */;
  (%389,)
}

def @func_5657(%var_5649: Tensor[(13, 15, 2), float64]) -> Tensor[(13, 15, 2), float64] {
  %390 = cast(%var_5649, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  asin(%390) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_3651() -> (Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) {
  %391 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %392 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 100), float32] */, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
  %393 = reshape(%392, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float32] */;
  %394 = @func_846(%393) /* ty=(Tensor[(4, 10, 10), float32],) */;
  %395 = %391.2;
  %396 = %394.0;
  (%395, %396, meta[relay.Constant][24] /* ty=Tensor[(4, 100), float32] */)
}

def @func_7931(%var_7917: Tensor[(4, 100), float32], %var_7927: Tensor[(560), float64]) -> (Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(9, 4), float32], Tensor[(4, 100), bool], Tensor[(3, 1, 14), float32], Tensor[(42), uint64], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) {
  %397 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %398 = @func_4592() /* ty=(Tensor[(1470), uint32],) */;
  %399 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %400 = %399.0;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  %402 = @func_4708() /* ty=(Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
  %403 = @func_6849() /* ty=Tensor[(4, 100), float32] */;
  %404 = cast(%var_7917, dtype="bool") /* ty=Tensor[(4, 100), bool] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(2), int32] */;
  %406 = cast(%403, dtype="bool") /* ty=Tensor[(4, 100), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %408 = cast(meta[relay.Constant][25] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %409 = reshape(%408, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint64] */;
  %410 = @func_295(%409) /* ty=(Tensor[(3, 2, 14), uint64], Tensor[(3, 1, 14), float32]) */;
  %411 = cast(%var_7927, dtype="float64") /* ty=Tensor[(560), float64] */;
  %412 = reshape(%411, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %413 = @func_3202(%412) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %414 = %397.0;
  %415 = %398.0;
  %416 = exp(%401) /* ty=Tensor[(12, 5, 15), float32] */;
  %417 = %402.1;
  %418 = less_equal(%406, %407) /* ty=Tensor[(4, 100), bool] */;
  %419 = %410.1;
  %420 = %413.0;
  (%414, %415, %416, %417, %418, %419, meta[relay.Constant][25] /* ty=Tensor[(42), uint64] */, %420, %var_7927)
}

def @func_9451() -> (Tensor[(1470), uint32],) {
  %421 = @func_8737() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32]) */;
  %422 = %421.0;
  (%422,)
}

def @func_6260(%var_6203: Tensor[(1144), bool], %var_6234: Tensor[(3, 12), float32], %var_6235: Tensor[(360), float32], %var_6243: Tensor[(1144), float64]) -> (Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) {
  %423 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %424 = cast(%var_6203, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %425 = reshape(%424, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
  %426 = @func_3924(%425) /* ty=(Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) */;
  %427 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
  %428 = cast(%var_6234, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %429 = cast(%var_6235, dtype="float32") /* ty=Tensor[(360), float32] */;
  %430 = reshape(%428, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %431 = reshape(%429, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float32] */;
  %432 = @func_22(%430, %431) /* ty=(Tensor[(10, 6, 6), float32],) */;
  %433 = @func_5977() /* ty=(Tensor[(1470), uint32],) */;
  %434 = cast(%var_6203, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %435 = sin(%434) /* ty=Tensor[(1144), float64] */;
  %436 = cast(%var_6243, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(1), int32] */;
  %438 = cast(%435, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?), bool] */;
  %440 = cast(meta[relay.Constant][26] /* ty=Tensor[(65, 6), float64] */, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
  %441 = reshape(%440, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %442 = %423.0;
  %443 = %426.1;
  %444 = %427.0;
  %445 = %432.0;
  %446 = %433.0;
  %447 = less(%438, %439) /* ty=Tensor[(1144), bool] */;
  %448 = @func_5657(%441) /* ty=Tensor[(13, 15, 2), float64] */;
  (%442, %443, %444, %445, %var_6234, %var_6235, %446, %447, %448, meta[relay.Constant][26] /* ty=Tensor[(65, 6), float64] */)
}

def @func_10386(%var_10226: Tensor[(12, 5, 15), float32], %var_10322: Tensor[(12, 5, 15), float32], %var_10369: Tensor[(1056), int32]) -> (Tensor[(336), uint32], Tensor[(7, 15, 14), float64], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(400), float32], Tensor[(1, 28), float32], Tensor[(12, 5, 15), bool], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1056), int32], Tensor[(702), uint64], Tensor[(1056), int32], Tensor[(12, 550), uint64], Tensor[(275, 2), bool], Tensor[(6600), bool]) {
  %449 = @func_3222() /* ty=(Tensor[(336), uint32],) */;
  %450 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %451 = @func_8038() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(1470), uint32]) */;
  %452 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %453 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %454 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 28), float32] */, dtype="float32") /* ty=Tensor[(1, 28), float32] */;
  %455 = reshape(%454, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float32] */;
  %456 = @func_8698(%455) /* ty=(Tensor[(7, 1, 4), float32], Tensor[(400), float32], Tensor[(24, 14), uint32]) */;
  %457 = cast(%var_10226, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %458 = log2(%457) /* ty=Tensor[(12, 5, 15), float64] */;
  %459 = @func_7667() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %460 = %459.0;
  %461 = cast(%var_10226, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %465 = less_equal(%463, %464) /* ty=Tensor[(12, 5, 15), bool] */;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  %467 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%458, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %470 = floor_divide(%468, %469) /* ty=Tensor[(12, 5, 15), float32] */;
  %471 = cast(%var_10322, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
  %472 = shape_of(%470, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%470, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %475 = @func_4949() /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) */;
  %476 = cast(meta[relay.Constant][28] /* ty=Tensor[(702), uint64] */, dtype="uint64") /* ty=Tensor[(702), uint64] */;
  %477 = cast(meta[relay.Constant][28] /* ty=Tensor[(702), uint64] */, dtype="uint64") /* ty=Tensor[(702), uint64] */;
  %478 = cast(%var_10369, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %479 = reshape(%476, newshape=[13, 9, 6]) /* ty=Tensor[(13, 9, 6), uint64] */;
  %480 = reshape(%477, newshape=[13, 9, 6]) /* ty=Tensor[(13, 9, 6), uint64] */;
  %481 = reshape(%478, newshape=[1056]) /* ty=Tensor[(1056), int32] */;
  %482 = @func_4155(%479, %480, %481) /* ty=(Tensor[(13, 9, 6), float32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(11, 16, 6), float32], Tensor[(1056), int32]) */;
  %483 = cast(meta[relay.Constant][29] /* ty=Tensor[(275, 2), bool] */, dtype="bool") /* ty=Tensor[(275, 2), bool] */;
  %484 = cast(meta[relay.Constant][30] /* ty=Tensor[(6600), bool] */, dtype="bool") /* ty=Tensor[(6600), bool] */;
  %485 = reshape(%483, newshape=[1, 550]) /* ty=Tensor[(1, 550), bool] */;
  %486 = reshape(%484, newshape=[12, 550]) /* ty=Tensor[(12, 550), bool] */;
  %487 = @func_3991(%485, %486) /* ty=(Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) */;
  %488 = %449.0;
  %489 = %450.2;
  %490 = %451.2;
  %491 = %452.1;
  %492 = %453.0;
  %493 = %456.1;
  %494 = logical_or(%473, %474) /* ty=Tensor[(12, 5, 15), bool] */;
  %495 = %475.0;
  %496 = @func_1498() /* ty=Tensor[(1470), uint32] */;
  %497 = @func_7940() /* ty=Tensor[(336), uint32] */;
  %498 = %482.4;
  %499 = %487.2;
  (%488, %489, %490, %491, %492, %493, meta[relay.Constant][27] /* ty=Tensor[(1, 28), float32] */, %494, %495, %496, %497, %498, meta[relay.Constant][28] /* ty=Tensor[(702), uint64] */, %var_10369, %499, meta[relay.Constant][29] /* ty=Tensor[(275, 2), bool] */, meta[relay.Constant][30] /* ty=Tensor[(6600), bool] */)
}

def @func_6831() -> (Tensor[(6, 14, 6), float32], Tensor[(1470), uint32]) {
  %500 = @func_4419() /* ty=(Tensor[(6, 14, 6), float32],) */;
  %501 = @func_4592() /* ty=(Tensor[(1470), uint32],) */;
  %502 = %500.0;
  %503 = %501.0;
  (%502, %503)
}

def @func_10096() -> (Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) {
  %504 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
  %505 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %506 = @func_5096() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */;
  %507 = %504.0;
  %508 = %505.0;
  %509 = %506.1;
  (%507, %508, %509)
}

def @func_10869(%var_10864: Tensor[(12, 5, 15), float32]) -> (Tensor[(12, 5, 15), uint8],) {
  %510 = @func_7667() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %511 = %510.0;
  %512 = cast(%var_10864, dtype="uint8") /* ty=Tensor[(12, 5, 15), uint8] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="uint8") /* ty=Tensor[(12, 5, 15), uint8] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %516 = logical_xor(%514, %515) /* ty=Tensor[(12, 5, 15), uint8] */;
  (%516,)
}

def @func_295(%var_269: Tensor[(3, 1, 14), uint64]) -> (Tensor[(3, 2, 14), uint64], Tensor[(3, 1, 14), float32]) {
  %517 = cast(%var_269, dtype="uint64") /* ty=Tensor[(3, 1, 14), uint64] */;
  %518 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 2, 14), uint64] */, dtype="uint64") /* ty=Tensor[(3, 2, 14), uint64] */;
  %519 = cast(%var_269, dtype="float32") /* ty=Tensor[(3, 1, 14), float32] */;
  %520 = right_shift(%517, %518) /* ty=Tensor[(3, 2, 14), uint64] */;
  %521 = sigmoid(%519) /* ty=Tensor[(3, 1, 14), float32] */;
  (%520, %521)
}

def @func_480(%var_472: Tensor[(15, 7, 10), float64]) -> (Tensor[(15, 7, 10), float64],) {
  %522 = cast(%var_472, dtype="float64") /* ty=Tensor[(15, 7, 10), float64] */;
  %523 = erf(%522) /* ty=Tensor[(15, 7, 10), float64] */;
  (%523,)
}

def @func_4994() -> (Tensor[(12, 5, 15), float32],) {
  %524 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %525 = %524.0;
  (%525,)
}

def @func_2360() -> (Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) {
  %526 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
  %527 = %526.0;
  %528 = cast(%527, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %529 = reshape(%528, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %530 = @func_54(%529) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %531 = %530.0;
  %532 = @func_1773() /* ty=Tensor[(336), uint32] */;
  (%527, %531, %532)
}

def @func_8249() -> Tensor[(15, 7, 10), float64] {
  %533 = @func_2944() /* ty=(Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) */;
  %533.3
}

def @func_6161() -> (Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  %534 = @func_4354() /* ty=(Tensor[(336), uint32],) */;
  %535 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %536 = @func_2944() /* ty=(Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) */;
  %537 = @func_5839() /* ty=(Tensor[(336), uint32], Tensor[(1470), uint32]) */;
  %538 = cast(meta[relay.Constant][32] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %539 = reshape(%538, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %540 = @func_54(%539) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %541 = %534.0;
  %542 = %535.0;
  %543 = %536.2;
  %544 = %537.0;
  %545 = %540.0;
  (%541, %542, %543, %544, %545, meta[relay.Constant][32] /* ty=Tensor[(1470), uint32] */)
}

def @func_9422(%var_9396: Tensor[(7, 15, 14), int8]) -> (Tensor[(9, 7, 5), float32], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32]) {
  %546 = @func_8440() /* ty=(Tensor[(9, 7, 5), float32],) */;
  %547 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %548 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %549 = %548.1;
  %550 = cast(%var_9396, dtype="int8") /* ty=Tensor[(7, 15, 14), int8] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="int8") /* ty=Tensor[(7, 15, 14), int8] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %554 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %555 = cast(%var_9396, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %556 = %546.0;
  %557 = %547.4;
  %558 = left_shift(%552, %553) /* ty=Tensor[(7, 15, 14), int8] */;
  %559 = %554.0;
  %560 = log2(%555) /* ty=Tensor[(7, 15, 14), float32] */;
  (%556, %557, %558, %559, %560)
}

def @func_2832(%var_2827: bool) -> (Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), bool]) {
  %561 = cast(meta[relay.Constant][33] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %562 = reshape(%561, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float32] */;
  %563 = @func_846(%562) /* ty=(Tensor[(4, 10, 10), float32],) */;
  %564 = cast(%var_2827, dtype="bool") /* ty=bool */;
  %565 = cast(meta[relay.Constant][34] /* ty=Tensor[(1144), bool] */, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %566 = reshape(%564, newshape=[]) /* ty=bool */;
  %567 = reshape(%565, newshape=[8, 13, 11]) /* ty=Tensor[(8, 13, 11), bool] */;
  %568 = @func_2042(%566, %567) /* ty=(Tensor[(8, 13, 11), bool],) */;
  %569 = @func_1498() /* ty=Tensor[(1470), uint32] */;
  %570 = %563.0;
  %571 = %568.0;
  (%569, %570, meta[relay.Constant][33] /* ty=Tensor[(400), float32] */, %571, %var_2827, meta[relay.Constant][34] /* ty=Tensor[(1144), bool] */)
}

def @func_1498() -> Tensor[(1470), uint32] {
  %572 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %572.2
}

def @func_8613() -> Tensor[(12, 5, 15), float32] {
  @func_2261() /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_10765() -> (Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) {
  %573 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %574 = @func_8198() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */;
  %575 = %573.0;
  %576 = %574.2;
  (%575, %576)
}

def @func_9780(%var_9777: Tensor[(560), float64]) -> (Tensor[(1470), uint32], Tensor[(7, 15, 14), int8], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) {
  %577 = @func_4776() /* ty=(Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %578 = %577.3;
  %579 = cast(%578, dtype="int8") /* ty=Tensor[(1470), int8] */;
  %580 = reshape(%579, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), int8] */;
  %581 = @func_9422(%580) /* ty=(Tensor[(9, 7, 5), float32], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32]) */;
  %582 = cast(%var_9777, dtype="float64") /* ty=Tensor[(560), float64] */;
  %583 = reshape(%582, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %584 = @func_3202(%583) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %585 = %581.2;
  %586 = %584.0;
  (%578, %585, %586, %var_9777)
}

def @func_1298() -> Tensor[(12, 5, 15), float32] {
  %587 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  atan(%587) /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_4472() -> (Tensor[(1470), uint32],) {
  %588 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
  %589 = %588.0;
  (%589,)
}

def @func_3991(%var_3978: Tensor[(1, 550), bool], %var_3981: Tensor[(12, 550), bool]) -> (Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) {
  %590 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %591 = cast(%var_3978, dtype="bool") /* ty=Tensor[(1, 550), bool] */;
  %592 = reshape(%591, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), bool] */;
  %593 = @func_2622(%592) /* ty=(Tensor[(5, 10, 11), bool], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %594 = cast(%var_3978, dtype="uint64") /* ty=Tensor[(1, 550), uint64] */;
  %595 = cast(%var_3981, dtype="uint64") /* ty=Tensor[(12, 550), uint64] */;
  %596 = %590.4;
  %597 = %593.2;
  %598 = bitwise_xor(%594, %595) /* ty=Tensor[(12, 550), uint64] */;
  %599 = @func_1773() /* ty=Tensor[(336), uint32] */;
  (%596, %597, %598, %599)
}

def @func_8062() -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) {
  %600 = @func_5096() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */;
  %601 = %600.0;
  %602 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  (%601, %602)
}

def @func_7324() -> (Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(11, 16, 6), int32], Tensor[(1056), int32]) {
  %603 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %604 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %605 = cast(meta[relay.Constant][36] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %606 = cast(meta[relay.Constant][36] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %607 = reshape(%605, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int32] */;
  %608 = reshape(%606, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int32] */;
  %609 = @func_2203(%607, %608) /* ty=(Tensor[(11, 16, 6), int32], Tensor[(11, 16, 6), float32]) */;
  %610 = %603.2;
  %611 = %604.0;
  %612 = %609.0;
  (%610, %611, %612, meta[relay.Constant][36] /* ty=Tensor[(1056), int32] */)
}

def @func_2188() -> (Tensor[(1470), uint32],) {
  %613 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %614 = %613.2;
  (%614,)
}

def @func_8125(%var_8118: Tensor[(48), float32]) -> (Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(48), float32]) {
  %615 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %616 = cast(%var_8118, dtype="float32") /* ty=Tensor[(48), float32] */;
  %617 = reshape(%616, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %618 = @func_4274(%617) /* ty=(Tensor[(336), uint32], float32, Tensor[(48), float32]) */;
  %619 = %615.0;
  %620 = %618.0;
  (%619, %620, %var_8118)
}

def @func_6522() -> (Tensor[(1470), uint32],) {
  %621 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %622 = %621.0;
  (%622,)
}

def @func_2094(%var_2088: Tensor[(14, 13, 1), int64], %var_2089: Tensor[(14, 13, 9), int64]) -> Tensor[(14, 13, 9), bool] {
  %623 = cast(%var_2088, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
  %624 = cast(%var_2089, dtype="bool") /* ty=Tensor[(14, 13, 9), bool] */;
  greater(%623, %624) /* ty=Tensor[(14, 13, 9), bool] */
}

def @func_1738(%var_1686: Tensor[(336), uint32]) -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) {
  %625 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %626 = %625.1;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %628 = atanh(%627) /* ty=Tensor[(7, 15, 14), float64] */;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %630 = cast(%628, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %631 = cast(%626, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %632 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%628, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %635 = cast(%var_1686, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %636 = cast(%var_1686, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %637 = reshape(%635, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %638 = reshape(%636, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %639 = @func_824(%637, %638) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %640 = cast(meta[relay.Constant][37] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %641 = reshape(%640, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %642 = @func_480(%641) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %643 = cast(%var_1686, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %644 = %639.1;
  %645 = cast(%644, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %646 = reshape(%643, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %647 = reshape(%645, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %648 = @func_824(%646, %647) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %649 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  %650 = sinh(%629) /* ty=Tensor[(7, 15, 14), float32] */;
  %651 = asinh(%630) /* ty=Tensor[(7, 15, 14), float64] */;
  %652 = floor_mod(%633, %634) /* ty=Tensor[(7, 15, 14), float32] */;
  %653 = %642.0;
  %654 = %648.1;
  (%649, %650, %651, %652, %644, %var_1686, %653, meta[relay.Constant][37] /* ty=Tensor[(1050), float64] */, %654)
}

def @func_3742(%var_3684: Tensor[(4, 100), float32], %var_3728: Tensor[(336), bool], %var_3729: Tensor[(360), float32], %var_3736: Tensor[(4, 100), uint64]) -> (Tensor[(8, 13, 11), bool], bool, Tensor[(1, 1144), bool], Tensor[(4, 100), float64], Tensor[(4, 100), uint16], Tensor[(1470), uint32], Tensor[(336), bool], Tensor[(360), float32], Tensor[(4, 100), bool]) {
  %655 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %656 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 1144), bool] */, dtype="bool") /* ty=Tensor[(1, 1144), bool] */;
  %657 = reshape(%655, newshape=[]) /* ty=bool */;
  %658 = reshape(%656, newshape=[8, 13, 11]) /* ty=Tensor[(8, 13, 11), bool] */;
  %659 = @func_2042(%657, %658) /* ty=(Tensor[(8, 13, 11), bool],) */;
  %660 = @func_3651() /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) */;
  %661 = %660.2;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(4, 100), float64] */;
  %663 = cast(%661, dtype="float64") /* ty=Tensor[(4, 100), float64] */;
  %664 = rsqrt(%663) /* ty=Tensor[(4, 100), float64] */;
  %665 = cast(%var_3684, dtype="uint64") /* ty=Tensor[(4, 100), uint64] */;
  %666 = shape_of(%661, dtype="int32") /* ty=Tensor[(2), int32] */;
  %667 = cast(%661, dtype="uint64") /* ty=Tensor[(4, 100), uint64] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %669 = minimum(%667, %668) /* ty=Tensor[(4, 100), uint64] */;
  %670 = cast(%669, dtype="uint16") /* ty=Tensor[(4, 100), uint16] */;
  %671 = shape_of(%664, dtype="int32") /* ty=Tensor[(2), int32] */;
  %672 = cast(%664, dtype="uint16") /* ty=Tensor[(4, 100), uint16] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %674 = cast(%var_3728, dtype="bool") /* ty=Tensor[(336), bool] */;
  %675 = cast(%var_3729, dtype="float32") /* ty=Tensor[(360), float32] */;
  %676 = reshape(%674, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), bool] */;
  %677 = reshape(%675, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %678 = @func_1908(%676, %677) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) */;
  %679 = cast(%var_3736, dtype="bool") /* ty=Tensor[(4, 100), bool] */;
  %680 = shape_of(%669, dtype="int32") /* ty=Tensor[(2), int32] */;
  %681 = cast(%669, dtype="bool") /* ty=Tensor[(4, 100), bool] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %683 = %659.0;
  %684 = log10(%662) /* ty=Tensor[(4, 100), float64] */;
  %685 = maximum(%672, %673) /* ty=Tensor[(4, 100), uint16] */;
  %686 = %678.5;
  %687 = equal(%681, %682) /* ty=Tensor[(4, 100), bool] */;
  (%683, True /* ty=bool */, meta[relay.Constant][38] /* ty=Tensor[(1, 1144), bool] */, %684, %685, %686, %var_3728, %var_3729, %687)
}

def @func_2329(%var_2326: Tensor[(1470), uint32]) -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  %688 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %689 = cast(%var_2326, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %690 = reshape(%689, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %691 = @func_54(%690) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %692 = %688.1;
  %693 = %691.0;
  (%692, %693, %var_2326)
}

def @func_1908(%var_1862: Tensor[(3, 16, 7), bool], %var_1905: Tensor[(360), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) {
  %694 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %695 = %694.4;
  %696 = cast(%695, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %697 = cast(meta[relay.Constant][39] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %698 = cast(meta[relay.Constant][39] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %699 = reshape(%697, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %700 = reshape(%698, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %701 = @func_824(%699, %700) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %702 = %701.0;
  %703 = cast(%var_1862, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%702, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %707 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %708 = cast(meta[relay.Constant][40] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %709 = cast(%var_1905, dtype="float32") /* ty=Tensor[(360), float32] */;
  %710 = reshape(%708, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %711 = reshape(%709, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float32] */;
  %712 = @func_22(%710, %711) /* ty=(Tensor[(10, 6, 6), float32],) */;
  %713 = asinh(%696) /* ty=Tensor[(12, 5, 15), float64] */;
  %714 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  %715 = floor_mod(%705, %706) /* ty=Tensor[(3, 16, 7), float64] */;
  %716 = @func_1498() /* ty=Tensor[(1470), uint32] */;
  %717 = %707.2;
  %718 = %712.0;
  (%713, %714, meta[relay.Constant][39] /* ty=Tensor[(336), uint32] */, %715, %716, %717, %718, meta[relay.Constant][40] /* ty=Tensor[(36), float32] */, %var_1905)
}

def @func_846(%var_842: Tensor[(4, 10, 10), float32]) -> (Tensor[(4, 10, 10), float32],) {
  %719 = cast(%var_842, dtype="float32") /* ty=Tensor[(4, 10, 10), float32] */;
  %720 = sin(%719) /* ty=Tensor[(4, 10, 10), float32] */;
  (%720,)
}

def @func_2944() -> (Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) {
  %721 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %722 = %721.1;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %724 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 210), float64] */, dtype="float64") /* ty=Tensor[(5, 210), float64] */;
  %725 = reshape(%724, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %726 = @func_480(%725) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %727 = %726.0;
  %728 = cast(%727, dtype="float64") /* ty=Tensor[(15, 7, 10), float64] */;
  %729 = @func_1773() /* ty=Tensor[(336), uint32] */;
  %730 = rsqrt(%723) /* ty=Tensor[(7, 15, 14), float32] */;
  %731 = asinh(%728) /* ty=Tensor[(15, 7, 10), float64] */;
  (%729, %730, meta[relay.Constant][41] /* ty=Tensor[(5, 210), float64] */, %731)
}

def @func_2899() -> (Tensor[(336), uint32], Tensor[(3, 16, 7), float64]) {
  %732 = @func_1773() /* ty=Tensor[(336), uint32] */;
  %733 = cast(%732, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %734 = reshape(%733, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %735 = @func_1738(%734) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) */;
  %736 = %735.4;
  (%732, %736)
}

def @func_6454() -> (Tensor[(336), uint32],) {
  %737 = @func_2899() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64]) */;
  %738 = %737.0;
  (%738,)
}

def @func_9276() -> (Tensor[(1470), uint32],) {
  %739 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
  %740 = %739.0;
  (%740,)
}

def @func_10959(%var_10923: Tensor[(1152), float32], %var_10942: Tensor[(1050), float64]) -> (Tensor[(12, 5, 15), float32], Tensor[(15, 7, 10), float64], Tensor[(7, 15, 14), uint32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32], Tensor[(15, 7, 10), float64], Tensor[(1050), bool], Tensor[(12, 5, 15), float32]) {
  %741 = cast(meta[relay.Constant][42] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %742 = reshape(%741, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %743 = @func_480(%742) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %744 = @func_5960() /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %745 = cast(%var_10923, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %746 = reshape(%745, newshape=[12, 16, 6]) /* ty=Tensor[(12, 16, 6), float32] */;
  %747 = %743.0;
  %748 = cast(%747, dtype="float64") /* ty=Tensor[(15, 7, 10), float64] */;
  %749 = reshape(%748, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %750 = @func_480(%749) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %751 = cast(%var_10942, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %752 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(1050), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %753 = cast(meta[relay.Constant][42] /* ty=Tensor[(1050), float64] */, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?), bool] */;
  %755 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
  %756 = %744.0;
  %757 = @func_3325(%746) /* ty=Tensor[(12, 16, 6), float32] */;
  %758 = %750.0;
  %759 = greater_equal(%753, %754) /* ty=Tensor[(1050), bool] */;
  %760 = @func_8613() /* ty=Tensor[(12, 5, 15), float32] */;
  (%755, %747, %756, %757, %var_10923, %758, %759, %760)
}

def @func_2910() -> (Tensor[(1470), uint32],) {
  %761 = @func_2360() /* ty=(Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %762 = %761.0;
  (%762,)
}

def @func_2712(%var_2700: Tensor[(1144), bool], %var_2706: Tensor[(1144), float64]) -> (Tensor[(7, 15, 14), int8], Tensor[(336), uint32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), int8]) {
  %763 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %764 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %765 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %766 = cast(%var_2700, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %767 = reshape(%765, newshape=[]) /* ty=bool */;
  %768 = reshape(%766, newshape=[8, 13, 11]) /* ty=Tensor[(8, 13, 11), bool] */;
  %769 = @func_2042(%767, %768) /* ty=(Tensor[(8, 13, 11), bool],) */;
  %770 = cast(%var_2700, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %771 = asinh(%770) /* ty=Tensor[(1144), float64] */;
  %772 = cast(%var_2706, dtype="int8") /* ty=Tensor[(1144), int8] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(1), int32] */;
  %774 = cast(%771, dtype="int8") /* ty=Tensor[(1144), int8] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?), int8] */;
  %776 = %763.1;
  %777 = %764.0;
  %778 = %769.0;
  %779 = minimum(%774, %775) /* ty=Tensor[(1144), int8] */;
  (%776, %777, %778, False /* ty=bool */, %779)
}

def @func_9035() -> (Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) {
  %780 = @func_6522() /* ty=(Tensor[(1470), uint32],) */;
  %781 = @func_5960() /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %782 = %780.0;
  %783 = %781.0;
  %784 = @func_8613() /* ty=Tensor[(12, 5, 15), float32] */;
  (%782, %783, %784)
}

def @func_1773() -> Tensor[(336), uint32] {
  %785 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %785.3
}

def @func_9178() -> (Tensor[(9, 4), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) {
  %786 = @func_4708() /* ty=(Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
  %787 = @func_5040() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32]) */;
  %788 = %786.1;
  %789 = @func_8613() /* ty=Tensor[(12, 5, 15), float32] */;
  %790 = %787.1;
  (%788, %789, %790)
}

def @func_54(%var_50: Tensor[(7, 15, 14), uint32]) -> (Tensor[(7, 15, 14), uint32],) {
  %791 = cast(meta[relay.Constant][43] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %792 = cast(%var_50, dtype="uint32") /* ty=Tensor[(7, 15, 14), uint32] */;
  %793 = maximum(%791, %792) /* ty=Tensor[(7, 15, 14), uint32] */;
  (%793,)
}

def @func_3804(%var_3762: Tensor[(360), float32]) -> (Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(360), float32], Tensor[(12, 5, 15), float32], Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) {
  %794 = @func_1773() /* ty=Tensor[(336), uint32] */;
  %795 = cast(%794, dtype="bool") /* ty=Tensor[(336), bool] */;
  %796 = cast(%var_3762, dtype="float32") /* ty=Tensor[(360), float32] */;
  %797 = reshape(%795, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), bool] */;
  %798 = reshape(%796, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %799 = @func_1908(%797, %798) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) */;
  %800 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %801 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %802 = %799.1;
  %803 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
  %804 = %800.2;
  %805 = %801.0;
  (%794, %802, %var_3762, %803, %804, %805)
}

def @func_5977() -> (Tensor[(1470), uint32],) {
  %806 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
  %807 = %806.0;
  (%807,)
}

def @func_6440() -> (Tensor[(12, 5, 15), float32],) {
  %808 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %809 = %808.0;
  (%809,)
}

def @func_9232(%var_9202: Tensor[(2), float32]) -> (Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(2), float32]) {
  %810 = @func_7324() /* ty=(Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(11, 16, 6), int32], Tensor[(1056), int32]) */;
  %811 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
  %812 = cast(%var_9202, dtype="float32") /* ty=Tensor[(2), float32] */;
  %813 = reshape(%812, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
  %814 = @func_7437(%813) /* ty=(Tensor[(1470), uint32], Tensor[(1, 1, 2), float32]) */;
  %815 = @func_1498() /* ty=Tensor[(1470), uint32] */;
  %816 = %810.1;
  %817 = %811.0;
  %818 = %814.0;
  (%815, %816, %817, %818, %var_9202)
}

def @func_2286() -> (Tensor[(12, 5, 15), float32],) {
  %819 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %820 = %819.1;
  (%820,)
}

def @func_5926() -> (Tensor[(4, 8, ?), bool], Tensor[(1470), uint32], bool) {
  %821 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %822 = exp(%821) /* ty=Tensor[(4, 8, 1), float32] */;
  %823 = cast(%822, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
  %824 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(4, 8, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 8, 1), float32] */, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %827 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %828 = reshape(%827, newshape=[]) /* ty=bool */;
  %829 = @func_2832(%828) /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), bool]) */;
  %830 = greater(%825, %826) /* ty=Tensor[(4, 8, ?), bool] */;
  %831 = %829.0;
  (%830, %831, False /* ty=bool */)
}

def @func_9721(%var_9702: Tensor[(1152), float32]) -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(1152), float32], Tensor[(12, 5, 15), float32], Tensor[(48), float32], Tensor[(336), uint32]) {
  %832 = @func_8062() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */;
  %833 = cast(%var_9702, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %834 = reshape(%833, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %835 = @func_6678(%834) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32]) */;
  %836 = cast(meta[relay.Constant][45] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %837 = reshape(%836, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %838 = @func_8125(%837) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(48), float32]) */;
  %839 = @func_4354() /* ty=(Tensor[(336), uint32],) */;
  %840 = %832.0;
  %841 = %835.0;
  %842 = %838.0;
  %843 = %839.0;
  (%840, %841, %var_9702, %842, meta[relay.Constant][45] /* ty=Tensor[(48), float32] */, %843)
}

def @func_7822(%var_7807: int32, %var_7808: Tensor[(3, 1, 5), int32]) -> (Tensor[(3, 1, 5), int32], Tensor[(3, 1, 5), float32]) {
  %844 = cast(%var_7807, dtype="int32") /* ty=int32 */;
  %845 = cast(%var_7808, dtype="int32") /* ty=Tensor[(3, 1, 5), int32] */;
  %846 = cast(%var_7808, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
  %847 = right_shift(%844, %845) /* ty=Tensor[(3, 1, 5), int32] */;
  %848 = log10(%846) /* ty=Tensor[(3, 1, 5), float32] */;
  (%847, %848)
}

def @func_8038() -> (Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(1470), uint32]) {
  %849 = @func_6161() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %850 = @func_6454() /* ty=(Tensor[(336), uint32],) */;
  %851 = @func_6522() /* ty=(Tensor[(1470), uint32],) */;
  %852 = %849.1;
  %853 = %850.0;
  %854 = %851.0;
  (%852, %853, %854)
}

def @func_1808() -> (Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) {
  %855 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %856 = %855.1;
  %857 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  (%856, %857)
}

def @func_5960() -> (Tensor[(7, 15, 14), uint32],) {
  %858 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %859 = %858.3;
  (%859,)
}

def @func_10214(%var_10157: Tensor[(12, 5, 15), float32]) -> (Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(12, 5, 15), uint16]) {
  %860 = @func_8230() /* ty=(Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) */;
  %861 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %862 = %861.0;
  %863 = cast(%var_10157, dtype="uint16") /* ty=Tensor[(12, 5, 15), uint16] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="uint16") /* ty=Tensor[(12, 5, 15), uint16] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %867 = @func_7940() /* ty=Tensor[(336), uint32] */;
  %868 = %860.1;
  %869 = bitwise_xor(%865, %866) /* ty=Tensor[(12, 5, 15), uint16] */;
  (%867, %868, %869)
}

def @func_4274(%var_4264: Tensor[(48), float32]) -> (Tensor[(336), uint32], float32, Tensor[(48), float32]) {
  %870 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %871 = cast(%var_4264, dtype="float32") /* ty=Tensor[(48), float32] */;
  %872 = %870.0;
  %873 = cast(%872, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %874 = reshape(%871, newshape=[48, 1]) /* ty=Tensor[(48, 1), float32] */;
  %875 = reshape(%873, newshape=[24, 14]) /* ty=Tensor[(24, 14), uint32] */;
  %876 = @func_3548(%874, %875) /* ty=(Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], float32, Tensor[(48, 1), float32], Tensor[(3, 16, 7), float64], Tensor[(24, 14), uint32], Tensor[(7, 15, 14), float64]) */;
  %877 = %876.2;
  (%872, %877, %var_4264)
}

def @func_10113() -> (Tensor[(1470), uint32],) {
  %878 = @func_7269() /* ty=(Tensor[(1470), uint32],) */;
  %879 = %878.0;
  (%879,)
}

def @func_5192() -> (Tensor[(336), uint32], Tensor[(8, 13, 11), bool], Tensor[(572, 2), bool]) {
  %880 = @func_3222() /* ty=(Tensor[(336), uint32],) */;
  %881 = cast(meta[relay.Constant][46] /* ty=Tensor[(572, 2), bool] */, dtype="bool") /* ty=Tensor[(572, 2), bool] */;
  %882 = reshape(%881, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
  %883 = @func_3924(%882) /* ty=(Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) */;
  %884 = %880.0;
  %885 = %883.0;
  (%884, %885, meta[relay.Constant][46] /* ty=Tensor[(572, 2), bool] */)
}

def @func_2504() -> Tensor[(7, 15, 14), uint32] {
  %886 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %886.0
}

def @func_4354() -> (Tensor[(336), uint32],) {
  %887 = @func_1773() /* ty=Tensor[(336), uint32] */;
  (%887,)
}

def @func_1563() -> (Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) {
  %888 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %889 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %890 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %891 = cast(meta[relay.Constant][47] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %892 = reshape(%890, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %893 = reshape(%891, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %894 = @func_824(%892, %893) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %895 = %888.2;
  %896 = %889.2;
  %897 = %894.1;
  %898 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  (%895, %896, %897, meta[relay.Constant][47] /* ty=Tensor[(336), uint32] */, %898)
}

def @func_9632() -> (Tensor[(1470), uint32],) {
  %899 = @func_7095() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32]) */;
  %900 = %899.0;
  (%900,)
}

def @func_6849() -> Tensor[(4, 100), float32] {
  %901 = @func_3651() /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) */;
  %901.2
}

def @func_8230() -> (Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) {
  %902 = @func_7626() /* ty=(Tensor[(1470), uint32],) */;
  %903 = cast(meta[relay.Constant][48] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %904 = reshape(%903, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %905 = @func_5625(%904) /* ty=(Tensor[(400), float32], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) */;
  %906 = %902.0;
  %907 = %905.2;
  (%906, %907, meta[relay.Constant][48] /* ty=Tensor[(336), uint32] */)
}

def @func_3222() -> (Tensor[(336), uint32],) {
  %908 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %909 = %908.0;
  (%909,)
}

def @func_4456() -> (Tensor[(1470), uint32],) {
  %910 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %911 = %910.1;
  (%911,)
}

def @func_7066() -> (Tensor[(1470), uint32],) {
  %912 = @func_6522() /* ty=(Tensor[(1470), uint32],) */;
  %913 = %912.0;
  (%913,)
}

def @func_4219(%var_4196: Tensor[(36), float32], %var_4197: Tensor[(360), float32]) -> (Tensor[(7, 15, 14), float64], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32], Tensor[(7, 15, 14), float64]) {
  %914 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %915 = cast(%var_4196, dtype="float32") /* ty=Tensor[(36), float32] */;
  %916 = cast(%var_4197, dtype="float32") /* ty=Tensor[(360), float32] */;
  %917 = reshape(%915, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %918 = reshape(%916, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float32] */;
  %919 = @func_22(%917, %918) /* ty=(Tensor[(10, 6, 6), float32],) */;
  %920 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %921 = %914.2;
  %922 = %919.0;
  %923 = %920.2;
  (%921, %922, %var_4196, %var_4197, %923)
}

def @func_8440() -> (Tensor[(9, 7, 5), float32],) {
  %924 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 7, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 7, 5), float32] */;
  %925 = atanh(%924) /* ty=Tensor[(9, 7, 5), float32] */;
  (%925,)
}

def @func_8010() -> (Tensor[(336), uint32], Tensor[(1056), int32], Tensor[(336), uint32], Tensor[(1056, 702), int16]) {
  %926 = cast(meta[relay.Constant][50] /* ty=Tensor[(702), uint64] */, dtype="uint64") /* ty=Tensor[(702), uint64] */;
  %927 = cast(meta[relay.Constant][50] /* ty=Tensor[(702), uint64] */, dtype="uint64") /* ty=Tensor[(702), uint64] */;
  %928 = cast(meta[relay.Constant][51] /* ty=Tensor[(1056, 1), int32] */, dtype="int32") /* ty=Tensor[(1056, 1), int32] */;
  %929 = reshape(%926, newshape=[13, 9, 6]) /* ty=Tensor[(13, 9, 6), uint64] */;
  %930 = reshape(%927, newshape=[13, 9, 6]) /* ty=Tensor[(13, 9, 6), uint64] */;
  %931 = reshape(%928, newshape=[1056]) /* ty=Tensor[(1056), int32] */;
  %932 = @func_4155(%929, %930, %931) /* ty=(Tensor[(13, 9, 6), float32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(11, 16, 6), float32], Tensor[(1056), int32]) */;
  %933 = @func_6454() /* ty=(Tensor[(336), uint32],) */;
  %934 = cast(meta[relay.Constant][50] /* ty=Tensor[(702), uint64] */, dtype="float64") /* ty=Tensor[(702), float64] */;
  %935 = sqrt(%934) /* ty=Tensor[(702), float64] */;
  %936 = cast(meta[relay.Constant][50] /* ty=Tensor[(702), uint64] */, dtype="int64") /* ty=Tensor[(702), int64] */;
  %937 = cast(meta[relay.Constant][51] /* ty=Tensor[(1056, 1), int32] */, dtype="int64") /* ty=Tensor[(1056, 1), int64] */;
  %938 = bitwise_and(%936, %937) /* ty=Tensor[(1056, 702), int64] */;
  %939 = cast(%935, dtype="int16") /* ty=Tensor[(702), int16] */;
  %940 = cast(%938, dtype="int16") /* ty=Tensor[(1056, 702), int16] */;
  %941 = @func_1773() /* ty=Tensor[(336), uint32] */;
  %942 = %932.4;
  %943 = %933.0;
  %944 = add(%939, %940) /* ty=Tensor[(1056, 702), int16] */;
  (%941, %942, %943, %944)
}

def @func_4776() -> (Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  %945 = @func_2944() /* ty=(Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) */;
  %946 = %945.3;
  %947 = cast(%946, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %948 = cast(%946, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %949 = cast(meta[relay.Constant][52] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %950 = reshape(%949, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %951 = @func_54(%950) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %952 = cosh(%947) /* ty=Tensor[(15, 7, 10), float32] */;
  %953 = acos(%948) /* ty=Tensor[(15, 7, 10), float32] */;
  %954 = %951.0;
  (%952, %953, %954, meta[relay.Constant][52] /* ty=Tensor[(1470), uint32] */)
}

def @func_7371(%var_7333: Tensor[(13, 8, 14), uint32], %var_7334: Tensor[(13, 8, 14), uint32], %var_7362: Tensor[(1, 1144), bool], %var_7364: Tensor[(360), float32]) -> (Tensor[(13, 8, 14), uint32], Tensor[(1470), uint32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), int8], Tensor[(1470), uint32], Tensor[(1, 1144), bool], Tensor[(36), float32], Tensor[(360), float32]) {
  %955 = cast(%var_7334, dtype="uint32") /* ty=Tensor[(13, 8, 14), uint32] */;
  %956 = shape_of(%var_7333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%var_7333, dtype="uint32") /* ty=Tensor[(13, 8, 14), uint32] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %959 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
  %960 = @func_5308() /* ty=(Tensor[(15, 7, 10), float32],) */;
  %961 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %962 = cast(%var_7362, dtype="bool") /* ty=Tensor[(1, 1144), bool] */;
  %963 = cast(meta[relay.Constant][53] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %964 = cast(%var_7364, dtype="float32") /* ty=Tensor[(360), float32] */;
  %965 = cast(%var_7362, dtype="float64") /* ty=Tensor[(1, 1144), float64] */;
  %966 = reshape(%962, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
  %967 = reshape(%963, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
  %968 = reshape(%964, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %969 = reshape(%965, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %970 = @func_6260(%966, %967, %968, %969) /* ty=(Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) */;
  %971 = add(%957, %958) /* ty=Tensor[(13, 8, 14), uint32] */;
  %972 = %959.0;
  %973 = %960.0;
  %974 = %961.1;
  %975 = %970.2;
  (%971, %972, %973, %974, %975, %var_7362, meta[relay.Constant][53] /* ty=Tensor[(36), float32] */, %var_7364)
}

def @func_6390() -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), int8]) {
  %976 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
  %977 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  %978 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
  %979 = cast(%978, dtype="int8") /* ty=Tensor[(12, 5, 15), int8] */;
  %980 = shape_of(%977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %981 = cast(%977, dtype="int8") /* ty=Tensor[(12, 5, 15), int8] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %983 = %976.0;
  %984 = bitwise_or(%981, %982) /* ty=Tensor[(12, 5, 15), int8] */;
  (%983, %984)
}

def @func_8827() -> (Tensor[(7, 15, 14), float32], Tensor[(1470), uint32]) {
  %985 = @func_7487() /* ty=(Tensor[(7, 15, 14), float32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(360), float32]) */;
  %986 = @func_8198() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */;
  %987 = %985.0;
  %988 = %986.2;
  (%987, %988)
}

def @func_5536(%var_5482: Tensor[(12, 5, 15), float32], %var_5509: Tensor[(1152), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32], Tensor[(12, 5, 15), float64]) {
  %989 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %990 = %989.0;
  %991 = cast(%var_5482, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %992 = shape_of(%990, dtype="int32") /* ty=Tensor[(3), int32] */;
  %993 = cast(%990, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %995 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %996 = @func_4242() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %997 = cast(%var_5509, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %998 = reshape(%997, newshape=[12, 16, 6]) /* ty=Tensor[(12, 16, 6), float32] */;
  %999 = cast(%990, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %1000 = minimum(%993, %994) /* ty=Tensor[(12, 5, 15), float64] */;
  %1001 = %995.1;
  %1002 = %996.0;
  %1003 = @func_3325(%998) /* ty=Tensor[(12, 16, 6), float32] */;
  %1004 = tan(%999) /* ty=Tensor[(12, 5, 15), float64] */;
  (%1000, %1001, %1002, %1003, %var_5509, %1004)
}

def @func_8521() -> (Tensor[(1470), uint32], Tensor[(1470), float64], Tensor[(12, 5, 15), float32]) {
  %1005 = @func_8371() /* ty=(Tensor[(336), uint32], Tensor[(1470), uint32]) */;
  %1006 = %1005.1;
  %1007 = cast(%1006, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %1008 = reshape(%1007, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %1009 = @func_3429(%1008) /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(1470), float64], Tensor[(1470), uint32], Tensor[(5, 10, 11), int64]) */;
  %1010 = @func_8198() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */;
  %1011 = %1009.1;
  %1012 = %1010.1;
  (%1006, %1011, %1012)
}

def @func_1463() -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  %1013 = cast(meta[relay.Constant][54] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %1014 = reshape(%1013, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %1015 = @func_54(%1014) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %1016 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  %1017 = %1015.0;
  (%1016, %1017, meta[relay.Constant][54] /* ty=Tensor[(1470), uint32] */)
}

def @func_4242() -> (Tensor[(12, 5, 15), float32],) {
  %1018 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %1019 = %1018.0;
  (%1019,)
}

def @func_9970(%var_9935: Tensor[(4, 100), float32], %var_9967: Tensor[(550, 1), bool]) -> (Tensor[(336), uint32], Tensor[(6, 14, 6), float32], Tensor[(12, 5, 15), float32], Tensor[(48), float32], Tensor[(4, 100), float64], Tensor[(12, 550), uint64], Tensor[(550, 1), bool], Tensor[(6600), bool]) {
  %1020 = @func_6831() /* ty=(Tensor[(6, 14, 6), float32], Tensor[(1470), uint32]) */;
  %1021 = cast(meta[relay.Constant][55] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %1022 = reshape(%1021, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %1023 = @func_8125(%1022) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(48), float32]) */;
  %1024 = @func_3651() /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) */;
  %1025 = %1024.2;
  %1026 = cast(%var_9935, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
  %1027 = shape_of(%1025, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1028 = cast(%1025, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
  %1029 = dyn.reshape(%1026, %1027, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1030 = mod(%1028, %1029) /* ty=Tensor[(4, 100), float32] */;
  %1031 = cast(%1025, dtype="float64") /* ty=Tensor[(4, 100), float64] */;
  %1032 = shape_of(%1030, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1033 = cast(%1030, dtype="float64") /* ty=Tensor[(4, 100), float64] */;
  %1034 = dyn.reshape(%1031, %1032, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1035 = cast(%var_9967, dtype="bool") /* ty=Tensor[(550, 1), bool] */;
  %1036 = cast(meta[relay.Constant][56] /* ty=Tensor[(6600), bool] */, dtype="bool") /* ty=Tensor[(6600), bool] */;
  %1037 = reshape(%1035, newshape=[1, 550]) /* ty=Tensor[(1, 550), bool] */;
  %1038 = reshape(%1036, newshape=[12, 550]) /* ty=Tensor[(12, 550), bool] */;
  %1039 = @func_3991(%1037, %1038) /* ty=(Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) */;
  %1040 = @func_7940() /* ty=Tensor[(336), uint32] */;
  %1041 = %1020.0;
  %1042 = %1023.0;
  %1043 = floor_mod(%1033, %1034) /* ty=Tensor[(4, 100), float64] */;
  %1044 = %1039.2;
  (%1040, %1041, %1042, meta[relay.Constant][55] /* ty=Tensor[(48), float32] */, %1043, %1044, %var_9967, meta[relay.Constant][56] /* ty=Tensor[(6600), bool] */)
}

def @func_8198() -> (Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) {
  %1045 = @func_4994() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %1046 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %1047 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
  %1048 = %1045.0;
  %1049 = %1046.0;
  %1050 = %1047.0;
  (%1048, %1049, %1050)
}

def @func_4155(%var_4128: Tensor[(13, 9, 6), uint64], %var_4129: Tensor[(13, 9, 6), uint64], %var_4152: Tensor[(1056), int32]) -> (Tensor[(13, 9, 6), float32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(11, 16, 6), float32], Tensor[(1056), int32]) {
  %1051 = cast(%var_4129, dtype="uint64") /* ty=Tensor[(13, 9, 6), uint64] */;
  %1052 = shape_of(%var_4128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1053 = cast(%var_4128, dtype="uint64") /* ty=Tensor[(13, 9, 6), uint64] */;
  %1054 = dyn.reshape(%1051, %1052, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1055 = right_shift(%1053, %1054) /* ty=Tensor[(13, 9, 6), uint64] */;
  %1056 = cast(%1055, dtype="float32") /* ty=Tensor[(13, 9, 6), float32] */;
  %1057 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %1058 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
  %1059 = cast(%var_4152, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %1060 = cast(%var_4152, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %1061 = reshape(%1059, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int32] */;
  %1062 = reshape(%1060, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int32] */;
  %1063 = @func_2203(%1061, %1062) /* ty=(Tensor[(11, 16, 6), int32], Tensor[(11, 16, 6), float32]) */;
  %1064 = asinh(%1056) /* ty=Tensor[(13, 9, 6), float32] */;
  %1065 = %1057.0;
  %1066 = %1058.0;
  %1067 = %1063.1;
  (%1064, %1065, %1066, %1067, %var_4152)
}

def @func_3085() -> (Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) {
  %1068 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %1069 = @func_2899() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64]) */;
  %1070 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %1071 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %1072 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %1073 = %1068.0;
  %1074 = %1069.1;
  %1075 = %1070.0;
  %1076 = %1071.1;
  %1077 = %1072.3;
  (%1073, %1074, %1075, %1076, %1077)
}

def @func_3548(%var_3511: Tensor[(48, 1), float32], %var_3516: Tensor[(24, 14), uint32]) -> (Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], float32, Tensor[(48, 1), float32], Tensor[(3, 16, 7), float64], Tensor[(24, 14), uint32], Tensor[(7, 15, 14), float64]) {
  %1078 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
  %1079 = cast(-3.4377f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1080 = cast(%var_3511, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %1081 = reshape(%1079, newshape=[]) /* ty=float32 */;
  %1082 = reshape(%1080, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), float32] */;
  %1083 = @func_2134(%1081, %1082) /* ty=(Tensor[(8, 2, 3), float32], Tensor[(15, 7, 10), float64], Tensor[(1050, 1), float64]) */;
  %1084 = cast(%var_3516, dtype="uint32") /* ty=Tensor[(24, 14), uint32] */;
  %1085 = cast(%var_3516, dtype="uint32") /* ty=Tensor[(24, 14), uint32] */;
  %1086 = reshape(%1084, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %1087 = reshape(%1085, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %1088 = @func_824(%1086, %1087) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %1089 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %1090 = %1089.1;
  %1091 = cast(%1090, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %1092 = %1078.0;
  %1093 = %1083.1;
  %1094 = %1088.1;
  %1095 = tan(%1091) /* ty=Tensor[(7, 15, 14), float64] */;
  (%1092, %1093, -3.4377f /* ty=float32 */, %var_3511, %1094, %var_3516, %1095)
}

def @func_10542() -> Tensor[(12, 5, 15), float32] {
  %1096 = @func_8198() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */;
  %1097 = %1096.0;
  %1098 = cast(%1097, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  sqrt(%1098) /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_8394() -> (Tensor[(1470), uint32],) {
  %1099 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
  %1100 = %1099.0;
  (%1100,)
}

def @func_8888(%var_8872: Tensor[(15, 2, 12), float32], %var_8873: Tensor[(15, 2, 12), float32]) -> (Tensor[(15, 2, 12), float32],) {
  %1101 = cast(%var_8873, dtype="float32") /* ty=Tensor[(15, 2, 12), float32] */;
  %1102 = shape_of(%var_8872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1103 = cast(%var_8872, dtype="float32") /* ty=Tensor[(15, 2, 12), float32] */;
  %1104 = dyn.reshape(%1101, %1102, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1105 = divide(%1103, %1104) /* ty=Tensor[(15, 2, 12), float32] */;
  (%1105,)
}

def @func_6579() -> Tensor[(15, 7, 10), float32] {
  %1106 = @func_4776() /* ty=(Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %1106.1
}

def @func_7667() -> (Tensor[(12, 5, 15), float32],) {
  %1107 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %1108 = %1107.1;
  (%1108,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4274(%var_4264: Tensor[(48), float32]) -> (Tensor[(336), uint32], float32, Tensor[(48), float32]) {
  %0 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %1 = cast(%var_4264, dtype="float32") /* ty=Tensor[(48), float32] */;
  %2 = %0.0;
  %3 = cast(%2, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %4 = reshape(%1, newshape=[48, 1]) /* ty=Tensor[(48, 1), float32] */;
  %5 = reshape(%3, newshape=[24, 14]) /* ty=Tensor[(24, 14), uint32] */;
  %6 = @func_3548(%4, %5) /* ty=(Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], float32, Tensor[(48, 1), float32], Tensor[(3, 16, 7), float64], Tensor[(24, 14), uint32], Tensor[(7, 15, 14), float64]) */;
  %7 = %6.2;
  (%2, %7, %var_4264)
}

def @func_7941() -> Tensor[(336), uint32] {
  %9 = fn () -> Tensor[(336), uint32] {
    %8 = @func_2360() /* ty=(Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
    %8.2
  };
  %9() /* ty=Tensor[(336), uint32] */
}

def @func_3204(%var_3203: Tensor[(14, 10, 4), float64]) -> (Tensor[(14, 10, 4), float64],) {
  %12 = fn (%var_3196: Tensor[(14, 10, 4), float64]) -> (Tensor[(14, 10, 4), float64],) {
    %10 = cast(%var_3196, dtype="float64") /* ty=Tensor[(14, 10, 4), float64] */;
    %11 = cos(%10) /* ty=Tensor[(14, 10, 4), float64] */;
    (%11,)
  };
  %12(%var_3203) /* ty=(Tensor[(14, 10, 4), float64],) */
}

def @func_7488() -> (Tensor[(7, 15, 14), float32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(360), float32]) {
  %31 = fn () -> (Tensor[(7, 15, 14), float32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(360), float32]) {
    %13 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
    %14 = %13.3;
    %15 = cast(%14, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
    %16 = asin(%15) /* ty=Tensor[(7, 15, 14), float32] */;
    %17 = cast(%16, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
    %18 = @func_6161() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(1144), bool] */, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
    %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(1144), bool] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %23 = reshape(%19, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
    %24 = reshape(%20, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
    %25 = reshape(%21, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %26 = reshape(%22, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %27 = @func_6260(%23, %24, %25, %26) /* ty=(Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) */;
    %28 = sin(%17) /* ty=Tensor[(7, 15, 14), float32] */;
    %29 = %18.5;
    %30 = %27.0;
    (%28, %29, %30, meta[relay.Constant][0] /* ty=Tensor[(1144), bool] */, meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, meta[relay.Constant][2] /* ty=Tensor[(360), float32] */)
  };
  %31() /* ty=(Tensor[(7, 15, 14), float32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(360), float32]) */
}

def @func_4243() -> (Tensor[(12, 5, 15), float32],) {
  %34 = fn () -> (Tensor[(12, 5, 15), float32],) {
    %32 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %33 = %32.0;
    (%33,)
  };
  %34() /* ty=(Tensor[(12, 5, 15), float32],) */
}

def @func_8440() -> (Tensor[(9, 7, 5), float32],) {
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 7, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 7, 5), float32] */;
  %36 = atanh(%35) /* ty=Tensor[(9, 7, 5), float32] */;
  (%36,)
}

def @func_8561() -> Tensor[(15, 7, 10), float32] {
  %38 = fn () -> Tensor[(15, 7, 10), float32] {
    %37 = @func_5308() /* ty=(Tensor[(15, 7, 10), float32],) */;
    %37.0
  };
  %38() /* ty=Tensor[(15, 7, 10), float32] */
}

def @func_10872(%var_10870: Tensor[(12, 5, 15), float32]) -> (Tensor[(12, 5, 15), uint8],) {
  @func_10869(%var_10870) /* ty=(Tensor[(12, 5, 15), uint8],) */
}

def @func_5978() -> (Tensor[(1470), uint32],) {
  %41 = fn () -> (Tensor[(1470), uint32],) {
    %39 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
    %40 = %39.0;
    (%40,)
  };
  %41() /* ty=(Tensor[(1470), uint32],) */
}

def @func_6265(%var_6261: Tensor[(1144), bool], %var_6262: Tensor[(3, 12), float32], %var_6263: Tensor[(360), float32], %var_6264: Tensor[(1144), float64]) -> (Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) {
  %68 = fn (%var_6203: Tensor[(1144), bool], %var_6234: Tensor[(3, 12), float32], %var_6235: Tensor[(360), float32], %var_6243: Tensor[(1144), float64]) -> (Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) {
    %42 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
    %43 = cast(%var_6203, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %44 = reshape(%43, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
    %45 = @func_3924(%44) /* ty=(Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) */;
    %46 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
    %47 = cast(%var_6234, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
    %48 = cast(%var_6235, dtype="float32") /* ty=Tensor[(360), float32] */;
    %49 = reshape(%47, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
    %50 = reshape(%48, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float32] */;
    %51 = @func_22(%49, %50) /* ty=(Tensor[(10, 6, 6), float32],) */;
    %52 = @func_5977() /* ty=(Tensor[(1470), uint32],) */;
    %53 = cast(%var_6203, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %54 = sin(%53) /* ty=Tensor[(1144), float64] */;
    %55 = cast(%var_6243, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(1), int32] */;
    %57 = cast(%54, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?), bool] */;
    %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(65, 6), float64] */, dtype="float64") /* ty=Tensor[(65, 6), float64] */;
    %60 = reshape(%59, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
    %61 = %42.0;
    %62 = %45.1;
    %63 = %46.0;
    %64 = %51.0;
    %65 = %52.0;
    %66 = less(%57, %58) /* ty=Tensor[(1144), bool] */;
    %67 = @func_5657(%60) /* ty=Tensor[(13, 15, 2), float64] */;
    (%61, %62, %63, %64, %var_6234, %var_6235, %65, %66, %67, meta[relay.Constant][4] /* ty=Tensor[(65, 6), float64] */)
  };
  %68(%var_6261, %var_6262, %var_6263, %var_6264) /* ty=(Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) */
}

def @func_2288() -> (Tensor[(12, 5, 15), float32],) {
  @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */
}

def @func_8142(%var_8140: Tensor[(4, 14, 1), uint16], %var_8141: Tensor[(4, 14, 16), uint16]) -> (Tensor[(4, 14, 16), bool],) {
  @func_8138(%var_8140, %var_8141) /* ty=(Tensor[(4, 14, 16), bool],) */
}

def @func_6579() -> Tensor[(15, 7, 10), float32] {
  %69 = @func_4776() /* ty=(Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %69.1
}

def @func_9896(%var_9892: Tensor[(5, 4, 6), float32], %var_9893: Tensor[(28), float32], %var_9894: Tensor[(2), float32], %var_9895: Tensor[(6600), bool]) -> (Tensor[(5, 4, 6), float32], Tensor[(7, 1, 4), float32], Tensor[(28), float32], Tensor[(336), uint32], Tensor[(2), float32], Tensor[(12, 5, 15), float32], Tensor[(550), bool], Tensor[(6600), bool]) {
  %86 = fn (%var_9862: Tensor[(5, 4, 6), float32], %var_9867: Tensor[(28), float32], %var_9870: Tensor[(2), float32], %var_9877: Tensor[(6600), bool]) -> (Tensor[(5, 4, 6), float32], Tensor[(7, 1, 4), float32], Tensor[(28), float32], Tensor[(336), uint32], Tensor[(2), float32], Tensor[(12, 5, 15), float32], Tensor[(550), bool], Tensor[(6600), bool]) {
    %70 = cast(%var_9862, dtype="float32") /* ty=Tensor[(5, 4, 6), float32] */;
    %71 = cast(%var_9867, dtype="float32") /* ty=Tensor[(28), float32] */;
    %72 = reshape(%71, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float32] */;
    %73 = @func_8698(%72) /* ty=(Tensor[(7, 1, 4), float32], Tensor[(400), float32], Tensor[(24, 14), uint32]) */;
    %74 = cast(%var_9870, dtype="float32") /* ty=Tensor[(2), float32] */;
    %75 = reshape(%74, newshape=[2]) /* ty=Tensor[(2), float32] */;
    %76 = @func_9232(%75) /* ty=(Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(2), float32]) */;
    %77 = cast(meta[relay.Constant][5] /* ty=Tensor[(550), bool] */, dtype="bool") /* ty=Tensor[(550), bool] */;
    %78 = cast(%var_9877, dtype="bool") /* ty=Tensor[(6600), bool] */;
    %79 = reshape(%77, newshape=[1, 550]) /* ty=Tensor[(1, 550), bool] */;
    %80 = reshape(%78, newshape=[12, 550]) /* ty=Tensor[(12, 550), bool] */;
    %81 = @func_3991(%79, %80) /* ty=(Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) */;
    %82 = sin(%70) /* ty=Tensor[(5, 4, 6), float32] */;
    %83 = %73.0;
    %84 = %76.1;
    %85 = %81.1;
    (%82, %83, %var_9867, %84, %var_9870, %85, meta[relay.Constant][5] /* ty=Tensor[(550), bool] */, %var_9877)
  };
  %86(%var_9892, %var_9893, %var_9894, %var_9895) /* ty=(Tensor[(5, 4, 6), float32], Tensor[(7, 1, 4), float32], Tensor[(28), float32], Tensor[(336), uint32], Tensor[(2), float32], Tensor[(12, 5, 15), float32], Tensor[(550), bool], Tensor[(6600), bool]) */
}

def @func_57(%var_55: Tensor[(7, 15, 14), uint32]) -> (Tensor[(7, 15, 14), uint32],) {
  @func_54(%var_55) /* ty=(Tensor[(7, 15, 14), uint32],) */
}

def @func_8039() -> (Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(1470), uint32]) {
  %93 = fn () -> (Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(1470), uint32]) {
    %87 = @func_6161() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %88 = @func_6454() /* ty=(Tensor[(336), uint32],) */;
    %89 = @func_6522() /* ty=(Tensor[(1470), uint32],) */;
    %90 = %87.1;
    %91 = %88.0;
    %92 = %89.0;
    (%90, %91, %92)
  };
  %93() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(1470), uint32]) */
}

def @func_8442() -> (Tensor[(9, 7, 5), float32],) {
  @func_8440() /* ty=(Tensor[(9, 7, 5), float32],) */
}

def @func_4776() -> (Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  %94 = @func_2944() /* ty=(Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) */;
  %95 = %94.3;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %97 = cast(%95, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %98 = cast(meta[relay.Constant][6] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %99 = reshape(%98, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %100 = @func_54(%99) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %101 = cosh(%96) /* ty=Tensor[(15, 7, 10), float32] */;
  %102 = acos(%97) /* ty=Tensor[(15, 7, 10), float32] */;
  %103 = %100.0;
  (%101, %102, %103, meta[relay.Constant][6] /* ty=Tensor[(1470), uint32] */)
}

def @func_10016() -> (Tensor[(7, 15, 14), float32],) {
  %104 = @func_8939() /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %105 = %104.0;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %107 = sqrt(%106) /* ty=Tensor[(7, 15, 14), float32] */;
  (%107,)
}

def @func_1463() -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %109 = reshape(%108, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %110 = @func_54(%109) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %111 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  %112 = %110.0;
  (%111, %112, meta[relay.Constant][7] /* ty=Tensor[(1470), uint32] */)
}

def @func_5660(%var_5658: Tensor[(13, 15, 2), float64]) -> Tensor[(13, 15, 2), float64] {
  @func_5657(%var_5658) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_5097() -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) {
  %117 = fn () -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) {
    %113 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
    %114 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %115 = %113.0;
    %116 = %114.0;
    (%115, %116)
  };
  %117() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */
}

def @func_8975(%var_8974: Tensor[(15, 7, 10), float32]) -> Tensor[(15, 7, 10), bool] {
  %123 = fn (%var_8968: Tensor[(15, 7, 10), float32]) -> Tensor[(15, 7, 10), bool] {
    %118 = @func_8560() /* ty=Tensor[(15, 7, 10), float32] */;
    %119 = cast(%var_8968, dtype="bool") /* ty=Tensor[(15, 7, 10), bool] */;
    %120 = shape_of(%118, dtype="int32") /* ty=Tensor[(3), int32] */;
    %121 = cast(%118, dtype="bool") /* ty=Tensor[(15, 7, 10), bool] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%121, %122) /* ty=Tensor[(15, 7, 10), bool] */
  };
  %123(%var_8974) /* ty=Tensor[(15, 7, 10), bool] */
}

def @func_7439(%var_7438: Tensor[(1, 1, 2), float32]) -> (Tensor[(1470), uint32], Tensor[(1, 1, 2), float32]) {
  %130 = fn (%var_7410: Tensor[(1, 1, 2), float32]) -> (Tensor[(1470), uint32], Tensor[(1, 1, 2), float32]) {
    %124 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
    %125 = cast(%var_7410, dtype="float32") /* ty=Tensor[(1, 1, 2), float32] */;
    %126 = sinh(%125) /* ty=Tensor[(1, 1, 2), float32] */;
    %127 = cast(%126, dtype="float32") /* ty=Tensor[(1, 1, 2), float32] */;
    %128 = %124.0;
    %129 = cos(%127) /* ty=Tensor[(1, 1, 2), float32] */;
    (%128, %129)
  };
  %130(%var_7438) /* ty=(Tensor[(1470), uint32], Tensor[(1, 1, 2), float32]) */
}

def @func_9179() -> (Tensor[(9, 4), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) {
  %136 = fn () -> (Tensor[(9, 4), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) {
    %131 = @func_4708() /* ty=(Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
    %132 = @func_5040() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32]) */;
    %133 = %131.1;
    %134 = @func_8613() /* ty=Tensor[(12, 5, 15), float32] */;
    %135 = %132.1;
    (%133, %134, %135)
  };
  %136() /* ty=(Tensor[(9, 4), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */
}

def @func_2361() -> (Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) {
  %144 = fn () -> (Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) {
    %137 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
    %138 = %137.0;
    %139 = cast(%138, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
    %140 = reshape(%139, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
    %141 = @func_54(%140) /* ty=(Tensor[(7, 15, 14), uint32],) */;
    %142 = %141.0;
    %143 = @func_1773() /* ty=Tensor[(336), uint32] */;
    (%138, %142, %143)
  };
  %144() /* ty=(Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */
}

def @func_4354() -> (Tensor[(336), uint32],) {
  %145 = @func_1773() /* ty=Tensor[(336), uint32] */;
  (%145,)
}

def @func_6555() -> Tensor[(3, 16, 7), float64] {
  %146 = @func_4949() /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) */;
  %146.0
}

def @func_9723(%var_9722: Tensor[(1152), float32]) -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(1152), float32], Tensor[(12, 5, 15), float32], Tensor[(48), float32], Tensor[(336), uint32]) {
  %159 = fn (%var_9702: Tensor[(1152), float32]) -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(1152), float32], Tensor[(12, 5, 15), float32], Tensor[(48), float32], Tensor[(336), uint32]) {
    %147 = @func_8062() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */;
    %148 = cast(%var_9702, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %149 = reshape(%148, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %150 = @func_6678(%149) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32]) */;
    %151 = cast(meta[relay.Constant][8] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
    %152 = reshape(%151, newshape=[48]) /* ty=Tensor[(48), float32] */;
    %153 = @func_8125(%152) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(48), float32]) */;
    %154 = @func_4354() /* ty=(Tensor[(336), uint32],) */;
    %155 = %147.0;
    %156 = %150.0;
    %157 = %153.0;
    %158 = %154.0;
    (%155, %156, %var_9702, %157, meta[relay.Constant][8] /* ty=Tensor[(48), float32] */, %158)
  };
  %159(%var_9722) /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(1152), float32], Tensor[(12, 5, 15), float32], Tensor[(48), float32], Tensor[(336), uint32]) */
}

def @func_10543() -> Tensor[(12, 5, 15), float32] {
  %163 = fn () -> Tensor[(12, 5, 15), float32] {
    %160 = @func_8198() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */;
    %161 = %160.0;
    %162 = cast(%161, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
    sqrt(%162) /* ty=Tensor[(12, 5, 15), float32] */
  };
  %163() /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_2190() -> (Tensor[(1470), uint32],) {
  @func_2188() /* ty=(Tensor[(1470), uint32],) */
}

def @func_7825(%var_7823: int32, %var_7824: Tensor[(3, 1, 5), int32]) -> (Tensor[(3, 1, 5), int32], Tensor[(3, 1, 5), float32]) {
  %169 = fn (%var_7807: int32, %var_7808: Tensor[(3, 1, 5), int32]) -> (Tensor[(3, 1, 5), int32], Tensor[(3, 1, 5), float32]) {
    %164 = cast(%var_7807, dtype="int32") /* ty=int32 */;
    %165 = cast(%var_7808, dtype="int32") /* ty=Tensor[(3, 1, 5), int32] */;
    %166 = cast(%var_7808, dtype="float32") /* ty=Tensor[(3, 1, 5), float32] */;
    %167 = right_shift(%164, %165) /* ty=Tensor[(3, 1, 5), int32] */;
    %168 = log10(%166) /* ty=Tensor[(3, 1, 5), float32] */;
    (%167, %168)
  };
  %169(%var_7823, %var_7824) /* ty=(Tensor[(3, 1, 5), int32], Tensor[(3, 1, 5), float32]) */
}

def @func_4356() -> (Tensor[(336), uint32],) {
  @func_4354() /* ty=(Tensor[(336), uint32],) */
}

def @func_2045(%var_2043: bool, %var_2044: Tensor[(8, 13, 11), bool]) -> (Tensor[(8, 13, 11), bool],) {
  %173 = fn (%var_2030: bool, %var_2031: Tensor[(8, 13, 11), bool]) -> (Tensor[(8, 13, 11), bool],) {
    %170 = cast(%var_2030, dtype="bool") /* ty=bool */;
    %171 = cast(%var_2031, dtype="bool") /* ty=Tensor[(8, 13, 11), bool] */;
    %172 = logical_or(%170, %171) /* ty=Tensor[(8, 13, 11), bool] */;
    (%172,)
  };
  %173(%var_2043, %var_2044) /* ty=(Tensor[(8, 13, 11), bool],) */
}

def @func_6455() -> (Tensor[(336), uint32],) {
  %176 = fn () -> (Tensor[(336), uint32],) {
    %174 = @func_2899() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64]) */;
    %175 = %174.0;
    (%175,)
  };
  %176() /* ty=(Tensor[(336), uint32],) */
}

def @func_2286() -> (Tensor[(12, 5, 15), float32],) {
  %177 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %178 = %177.1;
  (%178,)
}

def @func_9974(%var_9972: Tensor[(4, 100), float32], %var_9973: Tensor[(550, 1), bool]) -> (Tensor[(336), uint32], Tensor[(6, 14, 6), float32], Tensor[(12, 5, 15), float32], Tensor[(48), float32], Tensor[(4, 100), float64], Tensor[(12, 550), uint64], Tensor[(550, 1), bool], Tensor[(6600), bool]) {
  @func_9970(%var_9972, %var_9973) /* ty=(Tensor[(336), uint32], Tensor[(6, 14, 6), float32], Tensor[(12, 5, 15), float32], Tensor[(48), float32], Tensor[(4, 100), float64], Tensor[(12, 550), uint64], Tensor[(550, 1), bool], Tensor[(6600), bool]) */
}

def @func_3926(%var_3925: Tensor[(1144), bool]) -> (Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) {
  %191 = fn (%var_3881: Tensor[(1144), bool]) -> (Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) {
    %179 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %180 = cast(%var_3881, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %181 = reshape(%179, newshape=[]) /* ty=bool */;
    %182 = reshape(%180, newshape=[8, 13, 11]) /* ty=Tensor[(8, 13, 11), bool] */;
    %183 = @func_2042(%181, %182) /* ty=(Tensor[(8, 13, 11), bool],) */;
    %184 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %185 = %184.0;
    %186 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %187 = cast(%185, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
    %188 = %183.0;
    %189 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
    %190 = less(%186, %187) /* ty=Tensor[(12, 5, 15), bool] */;
    (%188, %var_3881, %189, %190)
  };
  %191(%var_3925) /* ty=(Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) */
}

def @func_848(%var_847: Tensor[(4, 10, 10), float32]) -> (Tensor[(4, 10, 10), float32],) {
  %194 = fn (%var_842: Tensor[(4, 10, 10), float32]) -> (Tensor[(4, 10, 10), float32],) {
    %192 = cast(%var_842, dtype="float32") /* ty=Tensor[(4, 10, 10), float32] */;
    %193 = sin(%192) /* ty=Tensor[(4, 10, 10), float32] */;
    (%193,)
  };
  %194(%var_847) /* ty=(Tensor[(4, 10, 10), float32],) */
}

def @func_1300() -> Tensor[(12, 5, 15), float32] {
  @func_1298() /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_4594() -> (Tensor[(1470), uint32],) {
  @func_4592() /* ty=(Tensor[(1470), uint32],) */
}

def @func_3807(%var_3805: Tensor[(360), float32]) -> (Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(360), float32], Tensor[(12, 5, 15), float32], Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) {
  @func_3804(%var_3805) /* ty=(Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(360), float32], Tensor[(12, 5, 15), float32], Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) */
}

def @func_6850() -> Tensor[(4, 100), float32] {
  %196 = fn () -> Tensor[(4, 100), float32] {
    %195 = @func_3651() /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) */;
    %195.2
  };
  %196() /* ty=Tensor[(4, 100), float32] */
}

def @func_9080() -> (Tensor[(12, 5, 15), float32],) {
  %199 = fn () -> (Tensor[(12, 5, 15), float32],) {
    %197 = @func_4949() /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) */;
    %198 = %197.1;
    (%198,)
  };
  %199() /* ty=(Tensor[(12, 5, 15), float32],) */
}

def @func_9532() -> (Tensor[(1470), uint32],) {
  @func_9530() /* ty=(Tensor[(1470), uint32],) */
}

def @func_1773() -> Tensor[(336), uint32] {
  %200 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %200.3
}

def @func_2900() -> (Tensor[(336), uint32], Tensor[(3, 16, 7), float64]) {
  %206 = fn () -> (Tensor[(336), uint32], Tensor[(3, 16, 7), float64]) {
    %201 = @func_1773() /* ty=Tensor[(336), uint32] */;
    %202 = cast(%201, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %203 = reshape(%202, newshape=[336]) /* ty=Tensor[(336), uint32] */;
    %204 = @func_1738(%203) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) */;
    %205 = %204.4;
    (%201, %205)
  };
  %206() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64]) */
}

def @func_3994(%var_3992: Tensor[(1, 550), bool], %var_3993: Tensor[(12, 550), bool]) -> (Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) {
  %217 = fn (%var_3978: Tensor[(1, 550), bool], %var_3981: Tensor[(12, 550), bool]) -> (Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) {
    %207 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
    %208 = cast(%var_3978, dtype="bool") /* ty=Tensor[(1, 550), bool] */;
    %209 = reshape(%208, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), bool] */;
    %210 = @func_2622(%209) /* ty=(Tensor[(5, 10, 11), bool], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
    %211 = cast(%var_3978, dtype="uint64") /* ty=Tensor[(1, 550), uint64] */;
    %212 = cast(%var_3981, dtype="uint64") /* ty=Tensor[(12, 550), uint64] */;
    %213 = %207.4;
    %214 = %210.2;
    %215 = bitwise_xor(%211, %212) /* ty=Tensor[(12, 550), uint64] */;
    %216 = @func_1773() /* ty=Tensor[(336), uint32] */;
    (%213, %214, %215, %216)
  };
  %217(%var_3992, %var_3993) /* ty=(Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) */
}

def @func_4778() -> (Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  @func_4776() /* ty=(Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */
}

def @func_3086() -> (Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) {
  %228 = fn () -> (Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) {
    %218 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
    %219 = @func_2899() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64]) */;
    %220 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
    %221 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %222 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
    %223 = %218.0;
    %224 = %219.1;
    %225 = %220.0;
    %226 = %221.1;
    %227 = %222.3;
    (%223, %224, %225, %226, %227)
  };
  %228() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */
}

def @func_3652() -> (Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) {
  %235 = fn () -> (Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) {
    %229 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %230 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 100), float32] */, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
    %231 = reshape(%230, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float32] */;
    %232 = @func_846(%231) /* ty=(Tensor[(4, 10, 10), float32],) */;
    %233 = %229.2;
    %234 = %232.0;
    (%233, %234, meta[relay.Constant][9] /* ty=Tensor[(4, 100), float32] */)
  };
  %235() /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) */
}

def @func_6163() -> (Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  @func_6161() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */
}

def @func_6831() -> (Tensor[(6, 14, 6), float32], Tensor[(1470), uint32]) {
  %236 = @func_4419() /* ty=(Tensor[(6, 14, 6), float32],) */;
  %237 = @func_4592() /* ty=(Tensor[(1470), uint32],) */;
  %238 = %236.0;
  %239 = %237.0;
  (%238, %239)
}

def @func_3431(%var_3430: Tensor[(1470), uint32]) -> (Tensor[(7, 15, 14), uint32], Tensor[(1470), float64], Tensor[(1470), uint32], Tensor[(5, 10, 11), int64]) {
  %270 = fn (%var_3344: Tensor[(1470), uint32]) -> (Tensor[(7, 15, 14), uint32], Tensor[(1470), float64], Tensor[(1470), uint32], Tensor[(5, 10, 11), int64]) {
    %240 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
    %241 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
    %242 = %241.0;
    %243 = cast(%var_3344, dtype="float64") /* ty=Tensor[(1470), float64] */;
    %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(1), int32] */;
    %245 = cast(%242, dtype="float64") /* ty=Tensor[(1470), float64] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?), float64] */;
    %247 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
    %248 = cast(meta[relay.Constant][10] /* ty=Tensor[(550), bool] */, dtype="bool") /* ty=Tensor[(550), bool] */;
    %249 = reshape(%248, newshape=[5, 10, 11]) /* ty=Tensor[(5, 10, 11), bool] */;
    %250 = @func_2622(%249) /* ty=(Tensor[(5, 10, 11), bool], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
    %251 = %250.0;
    %252 = cast(%251, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
    %253 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(550), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %254 = cast(meta[relay.Constant][10] /* ty=Tensor[(550), bool] */, dtype="bool") /* ty=Tensor[(550), bool] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?), bool] */;
    %256 = less(%254, %255) /* ty=Tensor[(550), bool] */;
    %257 = cast(%256, dtype="float64") /* ty=Tensor[(550), float64] */;
    %258 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %259 = cast(%251, dtype="float64") /* ty=Tensor[(5, 10, 11), float64] */;
    %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %261 = power(%259, %260) /* ty=Tensor[(5, 10, 11), float64] */;
    %262 = cast(%251, dtype="int64") /* ty=Tensor[(5, 10, 11), int64] */;
    %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(%261, dtype="int64") /* ty=Tensor[(5, 10, 11), int64] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %266 = %240.0;
    %267 = floor_mod(%245, %246) /* ty=Tensor[(1470), float64] */;
    %268 = %247.0;
    %269 = bitwise_and(%264, %265) /* ty=Tensor[(5, 10, 11), int64] */;
    (%266, %267, %268, %269)
  };
  %270(%var_3430) /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(1470), float64], Tensor[(1470), uint32], Tensor[(5, 10, 11), int64]) */
}

def @func_1500() -> Tensor[(1470), uint32] {
  @func_1498() /* ty=Tensor[(1470), uint32] */
}

def @func_8892(%var_8890: Tensor[(15, 2, 12), float32], %var_8891: Tensor[(15, 2, 12), float32]) -> (Tensor[(15, 2, 12), float32],) {
  @func_8888(%var_8890, %var_8891) /* ty=(Tensor[(15, 2, 12), float32],) */
}

def @func_1564() -> (Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) {
  %282 = fn () -> (Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) {
    %271 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %272 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %273 = cast(meta[relay.Constant][11] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %274 = cast(meta[relay.Constant][11] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %275 = reshape(%273, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
    %276 = reshape(%274, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
    %277 = @func_824(%275, %276) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
    %278 = %271.2;
    %279 = %272.2;
    %280 = %277.1;
    %281 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
    (%278, %279, %280, meta[relay.Constant][11] /* ty=Tensor[(336), uint32] */, %281)
  };
  %282() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */
}

def @func_7095() -> (Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  %283 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
  %284 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
  %285 = %283.0;
  %286 = %284.0;
  (%285, %286)
}

def @func_7066() -> (Tensor[(1470), uint32],) {
  %287 = @func_6522() /* ty=(Tensor[(1470), uint32],) */;
  %288 = %287.0;
  (%288,)
}

def @func_9452() -> (Tensor[(1470), uint32],) {
  %291 = fn () -> (Tensor[(1470), uint32],) {
    %289 = @func_8737() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32]) */;
    %290 = %289.0;
    (%290,)
  };
  %291() /* ty=(Tensor[(1470), uint32],) */
}

def @func_5310() -> (Tensor[(15, 7, 10), float32],) {
  @func_5308() /* ty=(Tensor[(15, 7, 10), float32],) */
}

def @func_4330() -> (Tensor[(1470), uint32],) {
  %292 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %293 = %292.2;
  (%293,)
}

def @func_6524() -> (Tensor[(1470), uint32],) {
  @func_6522() /* ty=(Tensor[(1470), uint32],) */
}

def @func_8232() -> (Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) {
  @func_8230() /* ty=(Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) */
}

def @func_827(%var_825: Tensor[(3, 16, 7), uint32], %var_826: Tensor[(3, 16, 7), uint32]) -> (Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) {
  %301 = fn (%var_804: Tensor[(3, 16, 7), uint32], %var_805: Tensor[(3, 16, 7), uint32]) -> (Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) {
    %294 = cast(%var_805, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
    %295 = shape_of(%var_804, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%var_804, dtype="bool") /* ty=Tensor[(3, 16, 7), bool] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %298 = cast(%var_805, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
    %299 = greater(%296, %297) /* ty=Tensor[(3, 16, 7), bool] */;
    %300 = sin(%298) /* ty=Tensor[(3, 16, 7), float64] */;
    (%299, %300)
  };
  %301(%var_825, %var_826) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */
}

def @func_8613() -> Tensor[(12, 5, 15), float32] {
  @func_2261() /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_9086() -> Tensor[(15, 7, 10), float32] {
  %302 = fn () -> Tensor[(15, 7, 10), float32] {
    @func_6579() /* ty=Tensor[(15, 7, 10), float32] */
  };
  %302() /* ty=Tensor[(15, 7, 10), float32] */
}

def @func_4572(%var_4570: Tensor[(360), float32]) -> (Tensor[(12, 5, 15), float32], Tensor[(360), float32], Tensor[(336), bool], Tensor[(360), float32], Tensor[(336), uint32]) {
  @func_4569(%var_4570) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(360), float32], Tensor[(336), bool], Tensor[(360), float32], Tensor[(336), uint32]) */
}

def @func_2207(%var_2205: Tensor[(11, 16, 6), int32], %var_2206: Tensor[(11, 16, 6), int32]) -> (Tensor[(11, 16, 6), int32], Tensor[(11, 16, 6), float32]) {
  @func_2203(%var_2205, %var_2206) /* ty=(Tensor[(11, 16, 6), int32], Tensor[(11, 16, 6), float32]) */
}

def @func_8450() -> (Tensor[(1470), uint32],) {
  %303 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
  %304 = %303.0;
  (%304,)
}

def @func_5657(%var_5649: Tensor[(13, 15, 2), float64]) -> Tensor[(13, 15, 2), float64] {
  %305 = cast(%var_5649, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  asin(%305) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_3222() -> (Tensor[(336), uint32],) {
  %306 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %307 = %306.0;
  (%307,)
}

def @func_4592() -> (Tensor[(1470), uint32],) {
  %308 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
  %309 = %308.0;
  (%309,)
}

def @func_8452() -> (Tensor[(1470), uint32],) {
  @func_8450() /* ty=(Tensor[(1470), uint32],) */
}

def @func_1379(%var_1374: Tensor[(2, 8, 9), float64], %var_1375: Tensor[(2, 8, 9), float64], %var_1376: Tensor[(1050), float64], %var_1377: Tensor[(400), float32], %var_1378: Tensor[(360), float32]) -> (Tensor[(2, 8, 9), bool], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(2, 8, 9), float32], Tensor[(10, 6, 6), float32], Tensor[(9, 4), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) {
  @func_1372(%var_1374, %var_1375, %var_1376, %var_1377, %var_1378) /* ty=(Tensor[(2, 8, 9), bool], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(2, 8, 9), float32], Tensor[(10, 6, 6), float32], Tensor[(9, 4), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */
}

def @func_9613(%var_9612: Tensor[(1050), float64]) -> (Tensor[(9, 7, 5), float32], Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64]) {
  %318 = fn (%var_9605: Tensor[(1050), float64]) -> (Tensor[(9, 7, 5), float32], Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64]) {
    %310 = @func_8440() /* ty=(Tensor[(9, 7, 5), float32],) */;
    %311 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
    %312 = cast(%var_9605, dtype="float64") /* ty=Tensor[(1050), float64] */;
    %313 = reshape(%312, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
    %314 = @func_480(%313) /* ty=(Tensor[(15, 7, 10), float64],) */;
    %315 = %310.0;
    %316 = %311.0;
    %317 = %314.0;
    (%315, %316, %317, %var_9605)
  };
  %318(%var_9612) /* ty=(Tensor[(9, 7, 5), float32], Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64]) */
}

def @func_4159(%var_4156: Tensor[(13, 9, 6), uint64], %var_4157: Tensor[(13, 9, 6), uint64], %var_4158: Tensor[(1056), int32]) -> (Tensor[(13, 9, 6), float32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(11, 16, 6), float32], Tensor[(1056), int32]) {
  %336 = fn (%var_4128: Tensor[(13, 9, 6), uint64], %var_4129: Tensor[(13, 9, 6), uint64], %var_4152: Tensor[(1056), int32]) -> (Tensor[(13, 9, 6), float32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(11, 16, 6), float32], Tensor[(1056), int32]) {
    %319 = cast(%var_4129, dtype="uint64") /* ty=Tensor[(13, 9, 6), uint64] */;
    %320 = shape_of(%var_4128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%var_4128, dtype="uint64") /* ty=Tensor[(13, 9, 6), uint64] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %323 = right_shift(%321, %322) /* ty=Tensor[(13, 9, 6), uint64] */;
    %324 = cast(%323, dtype="float32") /* ty=Tensor[(13, 9, 6), float32] */;
    %325 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
    %326 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
    %327 = cast(%var_4152, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %328 = cast(%var_4152, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %329 = reshape(%327, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int32] */;
    %330 = reshape(%328, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int32] */;
    %331 = @func_2203(%329, %330) /* ty=(Tensor[(11, 16, 6), int32], Tensor[(11, 16, 6), float32]) */;
    %332 = asinh(%324) /* ty=Tensor[(13, 9, 6), float32] */;
    %333 = %325.0;
    %334 = %326.0;
    %335 = %331.1;
    (%332, %333, %334, %335, %var_4152)
  };
  %336(%var_4156, %var_4157, %var_4158) /* ty=(Tensor[(13, 9, 6), float32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(11, 16, 6), float32], Tensor[(1056), int32]) */
}

def @func_2188() -> (Tensor[(1470), uint32],) {
  %337 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %338 = %337.2;
  (%338,)
}

def @func_5960() -> (Tensor[(7, 15, 14), uint32],) {
  %339 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %340 = %339.3;
  (%340,)
}

def @func_10096() -> (Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) {
  %341 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
  %342 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %343 = @func_5096() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */;
  %344 = %341.0;
  %345 = %342.0;
  %346 = %343.1;
  (%344, %345, %346)
}

def @func_4458() -> (Tensor[(1470), uint32],) {
  @func_4456() /* ty=(Tensor[(1470), uint32],) */
}

def @func_8199() -> (Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) {
  %353 = fn () -> (Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) {
    %347 = @func_4994() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %348 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %349 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
    %350 = %347.0;
    %351 = %348.0;
    %352 = %349.0;
    (%350, %351, %352)
  };
  %353() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */
}

def @func_2911() -> (Tensor[(1470), uint32],) {
  %356 = fn () -> (Tensor[(1470), uint32],) {
    %354 = @func_2360() /* ty=(Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
    %355 = %354.0;
    (%355,)
  };
  %356() /* ty=(Tensor[(1470), uint32],) */
}

def @func_8827() -> (Tensor[(7, 15, 14), float32], Tensor[(1470), uint32]) {
  %357 = @func_7487() /* ty=(Tensor[(7, 15, 14), float32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(360), float32]) */;
  %358 = @func_8198() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */;
  %359 = %357.0;
  %360 = %358.2;
  (%359, %360)
}

def @func_10214(%var_10157: Tensor[(12, 5, 15), float32]) -> (Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(12, 5, 15), uint16]) {
  %361 = @func_8230() /* ty=(Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) */;
  %362 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %363 = %362.0;
  %364 = cast(%var_10157, dtype="uint16") /* ty=Tensor[(12, 5, 15), uint16] */;
  %365 = shape_of(%363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %366 = cast(%363, dtype="uint16") /* ty=Tensor[(12, 5, 15), uint16] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %368 = @func_7940() /* ty=Tensor[(336), uint32] */;
  %369 = %361.1;
  %370 = bitwise_xor(%366, %367) /* ty=Tensor[(12, 5, 15), uint16] */;
  (%368, %369, %370)
}

def @main(%var_11095: Tensor[(13, 6, 1), float32]) -> (Tensor[(13, 6, 1), float32],) {
  %371 = cast(%var_11095, dtype="float32") /* ty=Tensor[(13, 6, 1), float32] */;
  %372 = asinh(%371) /* ty=Tensor[(13, 6, 1), float32] */;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(13, 6, 1), float32] */;
  %374 = log2(%373) /* ty=Tensor[(13, 6, 1), float32] */;
  (%374,)
}

def @func_1498() -> Tensor[(1470), uint32] {
  %375 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %375.2
}

def @func_4710() -> (Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) {
  @func_4708() /* ty=(Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */
}

def @func_10390(%var_10387: Tensor[(12, 5, 15), float32], %var_10388: Tensor[(12, 5, 15), float32], %var_10389: Tensor[(1056), int32]) -> (Tensor[(336), uint32], Tensor[(7, 15, 14), float64], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(400), float32], Tensor[(1, 28), float32], Tensor[(12, 5, 15), bool], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1056), int32], Tensor[(702), uint64], Tensor[(1056), int32], Tensor[(12, 550), uint64], Tensor[(275, 2), bool], Tensor[(6600), bool]) {
  %427 = fn (%var_10226: Tensor[(12, 5, 15), float32], %var_10322: Tensor[(12, 5, 15), float32], %var_10369: Tensor[(1056), int32]) -> (Tensor[(336), uint32], Tensor[(7, 15, 14), float64], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(400), float32], Tensor[(1, 28), float32], Tensor[(12, 5, 15), bool], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1056), int32], Tensor[(702), uint64], Tensor[(1056), int32], Tensor[(12, 550), uint64], Tensor[(275, 2), bool], Tensor[(6600), bool]) {
    %376 = @func_3222() /* ty=(Tensor[(336), uint32],) */;
    %377 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
    %378 = @func_8038() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(1470), uint32]) */;
    %379 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
    %380 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
    %381 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 28), float32] */, dtype="float32") /* ty=Tensor[(1, 28), float32] */;
    %382 = reshape(%381, newshape=[7, 1, 4]) /* ty=Tensor[(7, 1, 4), float32] */;
    %383 = @func_8698(%382) /* ty=(Tensor[(7, 1, 4), float32], Tensor[(400), float32], Tensor[(24, 14), uint32]) */;
    %384 = cast(%var_10226, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
    %385 = log2(%384) /* ty=Tensor[(12, 5, 15), float64] */;
    %386 = @func_7667() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %387 = %386.0;
    %388 = cast(%var_10226, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
    %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %390 = cast(%387, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %392 = less_equal(%390, %391) /* ty=Tensor[(12, 5, 15), bool] */;
    %393 = cast(%392, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
    %394 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
    %395 = cast(%385, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
    %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %397 = floor_divide(%395, %396) /* ty=Tensor[(12, 5, 15), float32] */;
    %398 = cast(%var_10322, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
    %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
    %400 = cast(%397, dtype="bool") /* ty=Tensor[(12, 5, 15), bool] */;
    %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %402 = @func_4949() /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) */;
    %403 = cast(meta[relay.Constant][13] /* ty=Tensor[(702), uint64] */, dtype="uint64") /* ty=Tensor[(702), uint64] */;
    %404 = cast(meta[relay.Constant][13] /* ty=Tensor[(702), uint64] */, dtype="uint64") /* ty=Tensor[(702), uint64] */;
    %405 = cast(%var_10369, dtype="int32") /* ty=Tensor[(1056), int32] */;
    %406 = reshape(%403, newshape=[13, 9, 6]) /* ty=Tensor[(13, 9, 6), uint64] */;
    %407 = reshape(%404, newshape=[13, 9, 6]) /* ty=Tensor[(13, 9, 6), uint64] */;
    %408 = reshape(%405, newshape=[1056]) /* ty=Tensor[(1056), int32] */;
    %409 = @func_4155(%406, %407, %408) /* ty=(Tensor[(13, 9, 6), float32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(11, 16, 6), float32], Tensor[(1056), int32]) */;
    %410 = cast(meta[relay.Constant][14] /* ty=Tensor[(275, 2), bool] */, dtype="bool") /* ty=Tensor[(275, 2), bool] */;
    %411 = cast(meta[relay.Constant][15] /* ty=Tensor[(6600), bool] */, dtype="bool") /* ty=Tensor[(6600), bool] */;
    %412 = reshape(%410, newshape=[1, 550]) /* ty=Tensor[(1, 550), bool] */;
    %413 = reshape(%411, newshape=[12, 550]) /* ty=Tensor[(12, 550), bool] */;
    %414 = @func_3991(%412, %413) /* ty=(Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) */;
    %415 = %376.0;
    %416 = %377.2;
    %417 = %378.2;
    %418 = %379.1;
    %419 = %380.0;
    %420 = %383.1;
    %421 = logical_or(%400, %401) /* ty=Tensor[(12, 5, 15), bool] */;
    %422 = %402.0;
    %423 = @func_1498() /* ty=Tensor[(1470), uint32] */;
    %424 = @func_7940() /* ty=Tensor[(336), uint32] */;
    %425 = %409.4;
    %426 = %414.2;
    (%415, %416, %417, %418, %419, %420, meta[relay.Constant][12] /* ty=Tensor[(1, 28), float32] */, %421, %422, %423, %424, %425, meta[relay.Constant][13] /* ty=Tensor[(702), uint64] */, %var_10369, %426, meta[relay.Constant][14] /* ty=Tensor[(275, 2), bool] */, meta[relay.Constant][15] /* ty=Tensor[(6600), bool] */)
  };
  %427(%var_10387, %var_10388, %var_10389) /* ty=(Tensor[(336), uint32], Tensor[(7, 15, 14), float64], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(400), float32], Tensor[(1, 28), float32], Tensor[(12, 5, 15), bool], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1056), int32], Tensor[(702), uint64], Tensor[(1056), int32], Tensor[(12, 550), uint64], Tensor[(275, 2), bool], Tensor[(6600), bool]) */
}

def @func_2107() -> (Tensor[(336), uint32],) {
  @func_2105() /* ty=(Tensor[(336), uint32],) */
}

def @func_6338() -> (Tensor[(1470), uint32],) {
  %430 = fn () -> (Tensor[(1470), uint32],) {
    %428 = @func_6161() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %429 = %428.5;
    (%429,)
  };
  %430() /* ty=(Tensor[(1470), uint32],) */
}

def @func_1810() -> (Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) {
  @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */
}

def @func_1808() -> (Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) {
  %431 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %432 = %431.1;
  %433 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  (%432, %433)
}

def @func_1775() -> Tensor[(336), uint32] {
  @func_1773() /* ty=Tensor[(336), uint32] */
}

def @func_3747(%var_3743: Tensor[(4, 100), float32], %var_3744: Tensor[(336), bool], %var_3745: Tensor[(360), float32], %var_3746: Tensor[(4, 100), uint64]) -> (Tensor[(8, 13, 11), bool], bool, Tensor[(1, 1144), bool], Tensor[(4, 100), float64], Tensor[(4, 100), uint16], Tensor[(1470), uint32], Tensor[(336), bool], Tensor[(360), float32], Tensor[(4, 100), bool]) {
  %467 = fn (%var_3684: Tensor[(4, 100), float32], %var_3728: Tensor[(336), bool], %var_3729: Tensor[(360), float32], %var_3736: Tensor[(4, 100), uint64]) -> (Tensor[(8, 13, 11), bool], bool, Tensor[(1, 1144), bool], Tensor[(4, 100), float64], Tensor[(4, 100), uint16], Tensor[(1470), uint32], Tensor[(336), bool], Tensor[(360), float32], Tensor[(4, 100), bool]) {
    %434 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %435 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 1144), bool] */, dtype="bool") /* ty=Tensor[(1, 1144), bool] */;
    %436 = reshape(%434, newshape=[]) /* ty=bool */;
    %437 = reshape(%435, newshape=[8, 13, 11]) /* ty=Tensor[(8, 13, 11), bool] */;
    %438 = @func_2042(%436, %437) /* ty=(Tensor[(8, 13, 11), bool],) */;
    %439 = @func_3651() /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) */;
    %440 = %439.2;
    %441 = cast(%440, dtype="float64") /* ty=Tensor[(4, 100), float64] */;
    %442 = cast(%440, dtype="float64") /* ty=Tensor[(4, 100), float64] */;
    %443 = rsqrt(%442) /* ty=Tensor[(4, 100), float64] */;
    %444 = cast(%var_3684, dtype="uint64") /* ty=Tensor[(4, 100), uint64] */;
    %445 = shape_of(%440, dtype="int32") /* ty=Tensor[(2), int32] */;
    %446 = cast(%440, dtype="uint64") /* ty=Tensor[(4, 100), uint64] */;
    %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %448 = minimum(%446, %447) /* ty=Tensor[(4, 100), uint64] */;
    %449 = cast(%448, dtype="uint16") /* ty=Tensor[(4, 100), uint16] */;
    %450 = shape_of(%443, dtype="int32") /* ty=Tensor[(2), int32] */;
    %451 = cast(%443, dtype="uint16") /* ty=Tensor[(4, 100), uint16] */;
    %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %453 = cast(%var_3728, dtype="bool") /* ty=Tensor[(336), bool] */;
    %454 = cast(%var_3729, dtype="float32") /* ty=Tensor[(360), float32] */;
    %455 = reshape(%453, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), bool] */;
    %456 = reshape(%454, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %457 = @func_1908(%455, %456) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) */;
    %458 = cast(%var_3736, dtype="bool") /* ty=Tensor[(4, 100), bool] */;
    %459 = shape_of(%448, dtype="int32") /* ty=Tensor[(2), int32] */;
    %460 = cast(%448, dtype="bool") /* ty=Tensor[(4, 100), bool] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %462 = %438.0;
    %463 = log10(%441) /* ty=Tensor[(4, 100), float64] */;
    %464 = maximum(%451, %452) /* ty=Tensor[(4, 100), uint16] */;
    %465 = %457.5;
    %466 = equal(%460, %461) /* ty=Tensor[(4, 100), bool] */;
    (%462, True /* ty=bool */, meta[relay.Constant][16] /* ty=Tensor[(1, 1144), bool] */, %463, %464, %465, %var_3728, %var_3729, %466)
  };
  %467(%var_3743, %var_3744, %var_3745, %var_3746) /* ty=(Tensor[(8, 13, 11), bool], bool, Tensor[(1, 1144), bool], Tensor[(4, 100), float64], Tensor[(4, 100), uint16], Tensor[(1470), uint32], Tensor[(336), bool], Tensor[(360), float32], Tensor[(4, 100), bool]) */
}

def @func_6833() -> (Tensor[(6, 14, 6), float32], Tensor[(1470), uint32]) {
  @func_6831() /* ty=(Tensor[(6, 14, 6), float32], Tensor[(1470), uint32]) */
}

def @func_3804(%var_3762: Tensor[(360), float32]) -> (Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(360), float32], Tensor[(12, 5, 15), float32], Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) {
  %468 = @func_1773() /* ty=Tensor[(336), uint32] */;
  %469 = cast(%468, dtype="bool") /* ty=Tensor[(336), bool] */;
  %470 = cast(%var_3762, dtype="float32") /* ty=Tensor[(360), float32] */;
  %471 = reshape(%469, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), bool] */;
  %472 = reshape(%470, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %473 = @func_1908(%471, %472) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) */;
  %474 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %475 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %476 = %473.1;
  %477 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
  %478 = %474.2;
  %479 = %475.0;
  (%468, %476, %var_3762, %477, %478, %479)
}

def @func_1372(%var_1314: Tensor[(2, 8, 9), float64], %var_1315: Tensor[(2, 8, 9), float64], %var_1329: Tensor[(1050), float64], %var_1332: Tensor[(400), float32], %var_1353: Tensor[(360), float32]) -> (Tensor[(2, 8, 9), bool], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(2, 8, 9), float32], Tensor[(10, 6, 6), float32], Tensor[(9, 4), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) {
  %480 = cast(%var_1315, dtype="bool") /* ty=Tensor[(2, 8, 9), bool] */;
  %481 = shape_of(%var_1314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%var_1314, dtype="bool") /* ty=Tensor[(2, 8, 9), bool] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %484 = cast(%var_1329, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %485 = reshape(%484, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %486 = @func_480(%485) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %487 = cast(%var_1332, dtype="float32") /* ty=Tensor[(400), float32] */;
  %488 = reshape(%487, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float32] */;
  %489 = @func_846(%488) /* ty=(Tensor[(4, 10, 10), float32],) */;
  %490 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %491 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %492 = reshape(%490, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %493 = reshape(%491, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %494 = @func_824(%492, %493) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %495 = cast(%var_1314, dtype="float64") /* ty=Tensor[(2, 8, 9), float64] */;
  %496 = acosh(%495) /* ty=Tensor[(2, 8, 9), float64] */;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(2, 8, 9), float32] */;
  %498 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 4), float32] */, dtype="float32") /* ty=Tensor[(9, 4), float32] */;
  %499 = cast(%var_1353, dtype="float32") /* ty=Tensor[(360), float32] */;
  %500 = reshape(%498, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %501 = reshape(%499, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float32] */;
  %502 = @func_22(%500, %501) /* ty=(Tensor[(10, 6, 6), float32],) */;
  %503 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %504 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %505 = reshape(%503, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %506 = reshape(%504, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %507 = @func_824(%505, %506) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %508 = less_equal(%482, %483) /* ty=Tensor[(2, 8, 9), bool] */;
  %509 = %486.0;
  %510 = %489.0;
  %511 = %494.0;
  %512 = sinh(%497) /* ty=Tensor[(2, 8, 9), float32] */;
  %513 = %502.0;
  %514 = %507.1;
  (%508, %509, %var_1329, %510, %var_1332, %511, meta[relay.Constant][17] /* ty=Tensor[(336), uint32] */, %512, %513, meta[relay.Constant][18] /* ty=Tensor[(9, 4), float32] */, %var_1353, %514)
}

def @func_3224() -> (Tensor[(336), uint32],) {
  @func_3222() /* ty=(Tensor[(336), uint32],) */
}

def @func_2816() -> (Tensor[(12, 5, 15), float32],) {
  %519 = fn () -> (Tensor[(12, 5, 15), float32],) {
    %515 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %516 = %515.0;
    %517 = cast(%516, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
    %518 = cos(%517) /* ty=Tensor[(12, 5, 15), float32] */;
    (%518,)
  };
  %519() /* ty=(Tensor[(12, 5, 15), float32],) */
}

def @func_8011() -> (Tensor[(336), uint32], Tensor[(1056), int32], Tensor[(336), uint32], Tensor[(1056, 702), int16]) {
  %539 = fn () -> (Tensor[(336), uint32], Tensor[(1056), int32], Tensor[(336), uint32], Tensor[(1056, 702), int16]) {
    %520 = cast(meta[relay.Constant][19] /* ty=Tensor[(702), uint64] */, dtype="uint64") /* ty=Tensor[(702), uint64] */;
    %521 = cast(meta[relay.Constant][19] /* ty=Tensor[(702), uint64] */, dtype="uint64") /* ty=Tensor[(702), uint64] */;
    %522 = cast(meta[relay.Constant][20] /* ty=Tensor[(1056, 1), int32] */, dtype="int32") /* ty=Tensor[(1056, 1), int32] */;
    %523 = reshape(%520, newshape=[13, 9, 6]) /* ty=Tensor[(13, 9, 6), uint64] */;
    %524 = reshape(%521, newshape=[13, 9, 6]) /* ty=Tensor[(13, 9, 6), uint64] */;
    %525 = reshape(%522, newshape=[1056]) /* ty=Tensor[(1056), int32] */;
    %526 = @func_4155(%523, %524, %525) /* ty=(Tensor[(13, 9, 6), float32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(11, 16, 6), float32], Tensor[(1056), int32]) */;
    %527 = @func_6454() /* ty=(Tensor[(336), uint32],) */;
    %528 = cast(meta[relay.Constant][19] /* ty=Tensor[(702), uint64] */, dtype="float64") /* ty=Tensor[(702), float64] */;
    %529 = sqrt(%528) /* ty=Tensor[(702), float64] */;
    %530 = cast(meta[relay.Constant][19] /* ty=Tensor[(702), uint64] */, dtype="int64") /* ty=Tensor[(702), int64] */;
    %531 = cast(meta[relay.Constant][20] /* ty=Tensor[(1056, 1), int32] */, dtype="int64") /* ty=Tensor[(1056, 1), int64] */;
    %532 = bitwise_and(%530, %531) /* ty=Tensor[(1056, 702), int64] */;
    %533 = cast(%529, dtype="int16") /* ty=Tensor[(702), int16] */;
    %534 = cast(%532, dtype="int16") /* ty=Tensor[(1056, 702), int16] */;
    %535 = @func_1773() /* ty=Tensor[(336), uint32] */;
    %536 = %526.4;
    %537 = %527.0;
    %538 = add(%533, %534) /* ty=Tensor[(1056, 702), int16] */;
    (%535, %536, %537, %538)
  };
  %539() /* ty=(Tensor[(336), uint32], Tensor[(1056), int32], Tensor[(336), uint32], Tensor[(1056, 702), int16]) */
}

def @func_6680(%var_6679: Tensor[(1152), float32]) -> (Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32]) {
  %546 = fn (%var_6672: Tensor[(1152), float32]) -> (Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32]) {
    %540 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
    %541 = cast(%var_6672, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %542 = reshape(%541, newshape=[12, 16, 6]) /* ty=Tensor[(12, 16, 6), float32] */;
    %543 = %540.1;
    %544 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
    %545 = @func_3325(%542) /* ty=Tensor[(12, 16, 6), float32] */;
    (%543, %544, %545, %var_6672)
  };
  %546(%var_6679) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32]) */
}

def @func_10114() -> (Tensor[(1470), uint32],) {
  %549 = fn () -> (Tensor[(1470), uint32],) {
    %547 = @func_7269() /* ty=(Tensor[(1470), uint32],) */;
    %548 = %547.0;
    (%548,)
  };
  %549() /* ty=(Tensor[(1470), uint32],) */
}

def @func_5194() -> (Tensor[(336), uint32], Tensor[(8, 13, 11), bool], Tensor[(572, 2), bool]) {
  @func_5192() /* ty=(Tensor[(336), uint32], Tensor[(8, 13, 11), bool], Tensor[(572, 2), bool]) */
}

def @func_6557() -> Tensor[(3, 16, 7), float64] {
  @func_6555() /* ty=Tensor[(3, 16, 7), float64] */
}

def @func_9634() -> (Tensor[(1470), uint32],) {
  @func_9632() /* ty=(Tensor[(1470), uint32],) */
}

def @func_9277() -> (Tensor[(1470), uint32],) {
  %552 = fn () -> (Tensor[(1470), uint32],) {
    %550 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
    %551 = %550.0;
    (%551,)
  };
  %552() /* ty=(Tensor[(1470), uint32],) */
}

def @func_8125(%var_8118: Tensor[(48), float32]) -> (Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(48), float32]) {
  %553 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %554 = cast(%var_8118, dtype="float32") /* ty=Tensor[(48), float32] */;
  %555 = reshape(%554, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %556 = @func_4274(%555) /* ty=(Tensor[(336), uint32], float32, Tensor[(48), float32]) */;
  %557 = %553.0;
  %558 = %556.0;
  (%557, %558, %var_8118)
}

def @func_8888(%var_8872: Tensor[(15, 2, 12), float32], %var_8873: Tensor[(15, 2, 12), float32]) -> (Tensor[(15, 2, 12), float32],) {
  %559 = cast(%var_8873, dtype="float32") /* ty=Tensor[(15, 2, 12), float32] */;
  %560 = shape_of(%var_8872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%var_8872, dtype="float32") /* ty=Tensor[(15, 2, 12), float32] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %563 = divide(%561, %562) /* ty=Tensor[(15, 2, 12), float32] */;
  (%563,)
}

def @func_3548(%var_3511: Tensor[(48, 1), float32], %var_3516: Tensor[(24, 14), uint32]) -> (Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], float32, Tensor[(48, 1), float32], Tensor[(3, 16, 7), float64], Tensor[(24, 14), uint32], Tensor[(7, 15, 14), float64]) {
  %564 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
  %565 = cast(-3.4377f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %566 = cast(%var_3511, dtype="float32") /* ty=Tensor[(48, 1), float32] */;
  %567 = reshape(%565, newshape=[]) /* ty=float32 */;
  %568 = reshape(%566, newshape=[8, 2, 3]) /* ty=Tensor[(8, 2, 3), float32] */;
  %569 = @func_2134(%567, %568) /* ty=(Tensor[(8, 2, 3), float32], Tensor[(15, 7, 10), float64], Tensor[(1050, 1), float64]) */;
  %570 = cast(%var_3516, dtype="uint32") /* ty=Tensor[(24, 14), uint32] */;
  %571 = cast(%var_3516, dtype="uint32") /* ty=Tensor[(24, 14), uint32] */;
  %572 = reshape(%570, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %573 = reshape(%571, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %574 = @func_824(%572, %573) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %575 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %576 = %575.1;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %578 = %564.0;
  %579 = %569.1;
  %580 = %574.1;
  %581 = tan(%577) /* ty=Tensor[(7, 15, 14), float64] */;
  (%578, %579, -3.4377f /* ty=float32 */, %var_3511, %580, %var_3516, %581)
}

def @func_5962() -> (Tensor[(7, 15, 14), uint32],) {
  @func_5960() /* ty=(Tensor[(7, 15, 14), uint32],) */
}

def @func_4474() -> (Tensor[(1470), uint32],) {
  @func_4472() /* ty=(Tensor[(1470), uint32],) */
}

def @func_4949() -> (Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) {
  %582 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %583 = %582.1;
  %584 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
  (%583, %584)
}

def @func_7935(%var_7933: Tensor[(4, 100), float32], %var_7934: Tensor[(560), float64]) -> (Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(9, 4), float32], Tensor[(4, 100), bool], Tensor[(3, 1, 14), float32], Tensor[(42), uint64], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) {
  @func_7931(%var_7933, %var_7934) /* ty=(Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(9, 4), float32], Tensor[(4, 100), bool], Tensor[(3, 1, 14), float32], Tensor[(42), uint64], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) */
}

def @func_7400(%var_7399: Tensor[(4, 2, 3), float64]) -> (Tensor[(4, 2, 3), float64],) {
  %587 = fn (%var_7391: Tensor[(4, 2, 3), float64]) -> (Tensor[(4, 2, 3), float64],) {
    %585 = cast(%var_7391, dtype="float64") /* ty=Tensor[(4, 2, 3), float64] */;
    %586 = asinh(%585) /* ty=Tensor[(4, 2, 3), float64] */;
    (%586,)
  };
  %587(%var_7399) /* ty=(Tensor[(4, 2, 3), float64],) */
}

def @func_3679() -> (Tensor[(12, 5, 15), float32],) {
  %590 = fn () -> (Tensor[(12, 5, 15), float32],) {
    %588 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %589 = %588.0;
    (%589,)
  };
  %590() /* ty=(Tensor[(12, 5, 15), float32],) */
}

def @func_5192() -> (Tensor[(336), uint32], Tensor[(8, 13, 11), bool], Tensor[(572, 2), bool]) {
  %591 = @func_3222() /* ty=(Tensor[(336), uint32],) */;
  %592 = cast(meta[relay.Constant][21] /* ty=Tensor[(572, 2), bool] */, dtype="bool") /* ty=Tensor[(572, 2), bool] */;
  %593 = reshape(%592, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
  %594 = @func_3924(%593) /* ty=(Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) */;
  %595 = %591.0;
  %596 = %594.0;
  (%595, %596, meta[relay.Constant][21] /* ty=Tensor[(572, 2), bool] */)
}

def @func_482(%var_481: Tensor[(15, 7, 10), float64]) -> (Tensor[(15, 7, 10), float64],) {
  %599 = fn (%var_472: Tensor[(15, 7, 10), float64]) -> (Tensor[(15, 7, 10), float64],) {
    %597 = cast(%var_472, dtype="float64") /* ty=Tensor[(15, 7, 10), float64] */;
    %598 = erf(%597) /* ty=Tensor[(15, 7, 10), float64] */;
    (%598,)
  };
  %599(%var_481) /* ty=(Tensor[(15, 7, 10), float64],) */
}

def @func_8230() -> (Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) {
  %600 = @func_7626() /* ty=(Tensor[(1470), uint32],) */;
  %601 = cast(meta[relay.Constant][22] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %602 = reshape(%601, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %603 = @func_5625(%602) /* ty=(Tensor[(400), float32], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) */;
  %604 = %600.0;
  %605 = %603.2;
  (%604, %605, meta[relay.Constant][22] /* ty=Tensor[(336), uint32] */)
}

def @func_7068() -> (Tensor[(1470), uint32],) {
  @func_7066() /* ty=(Tensor[(1470), uint32],) */
}

def @func_7627() -> (Tensor[(1470), uint32],) {
  %608 = fn () -> (Tensor[(1470), uint32],) {
    %606 = @func_7066() /* ty=(Tensor[(1470), uint32],) */;
    %607 = %606.0;
    (%607,)
  };
  %608() /* ty=(Tensor[(1470), uint32],) */
}

def @func_1911(%var_1909: Tensor[(3, 16, 7), bool], %var_1910: Tensor[(360), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) {
  %634 = fn (%var_1862: Tensor[(3, 16, 7), bool], %var_1905: Tensor[(360), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) {
    %609 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
    %610 = %609.4;
    %611 = cast(%610, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
    %612 = cast(meta[relay.Constant][23] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %613 = cast(meta[relay.Constant][23] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %614 = reshape(%612, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
    %615 = reshape(%613, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
    %616 = @func_824(%614, %615) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
    %617 = %616.0;
    %618 = cast(%var_1862, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
    %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%617, dtype="float64") /* ty=Tensor[(3, 16, 7), float64] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %622 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %623 = cast(meta[relay.Constant][24] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %624 = cast(%var_1905, dtype="float32") /* ty=Tensor[(360), float32] */;
    %625 = reshape(%623, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
    %626 = reshape(%624, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float32] */;
    %627 = @func_22(%625, %626) /* ty=(Tensor[(10, 6, 6), float32],) */;
    %628 = asinh(%611) /* ty=Tensor[(12, 5, 15), float64] */;
    %629 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
    %630 = floor_mod(%620, %621) /* ty=Tensor[(3, 16, 7), float64] */;
    %631 = @func_1498() /* ty=Tensor[(1470), uint32] */;
    %632 = %622.2;
    %633 = %627.0;
    (%628, %629, meta[relay.Constant][23] /* ty=Tensor[(336), uint32] */, %630, %631, %632, %633, meta[relay.Constant][24] /* ty=Tensor[(36), float32] */, %var_1905)
  };
  %634(%var_1909, %var_1910) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) */
}

def @func_9780(%var_9777: Tensor[(560), float64]) -> (Tensor[(1470), uint32], Tensor[(7, 15, 14), int8], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) {
  %635 = @func_4776() /* ty=(Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %636 = %635.3;
  %637 = cast(%636, dtype="int8") /* ty=Tensor[(1470), int8] */;
  %638 = reshape(%637, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), int8] */;
  %639 = @func_9422(%638) /* ty=(Tensor[(9, 7, 5), float32], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32]) */;
  %640 = cast(%var_9777, dtype="float64") /* ty=Tensor[(560), float64] */;
  %641 = reshape(%640, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %642 = @func_3202(%641) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %643 = %639.2;
  %644 = %642.0;
  (%636, %643, %644, %var_9777)
}

def @func_7668() -> (Tensor[(12, 5, 15), float32],) {
  %647 = fn () -> (Tensor[(12, 5, 15), float32],) {
    %645 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
    %646 = %645.1;
    (%646,)
  };
  %647() /* ty=(Tensor[(12, 5, 15), float32],) */
}

def @func_7270() -> (Tensor[(1470), uint32],) {
  %650 = fn () -> (Tensor[(1470), uint32],) {
    %648 = @func_5977() /* ty=(Tensor[(1470), uint32],) */;
    %649 = %648.0;
    (%649,)
  };
  %650() /* ty=(Tensor[(1470), uint32],) */
}

def @func_2263() -> Tensor[(12, 5, 15), float32] {
  @func_2261() /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_2105() -> (Tensor[(336), uint32],) {
  %651 = @func_1773() /* ty=Tensor[(336), uint32] */;
  (%651,)
}

def @func_6392() -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), int8]) {
  @func_6390() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), int8]) */
}

def @func_8372() -> (Tensor[(336), uint32], Tensor[(1470), uint32]) {
  %656 = fn () -> (Tensor[(336), uint32], Tensor[(1470), uint32]) {
    %652 = @func_6161() /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %653 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
    %654 = %652.1;
    %655 = %653.0;
    (%654, %655)
  };
  %656() /* ty=(Tensor[(336), uint32], Tensor[(1470), uint32]) */
}

def @func_4456() -> (Tensor[(1470), uint32],) {
  %657 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
  %658 = %657.1;
  (%658,)
}

def @func_6522() -> (Tensor[(1470), uint32],) {
  %659 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %660 = %659.0;
  (%660,)
}

def @func_5840() -> (Tensor[(336), uint32], Tensor[(1470), uint32]) {
  %664 = fn () -> (Tensor[(336), uint32], Tensor[(1470), uint32]) {
    %661 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
    %662 = %661.3;
    %663 = @func_4526() /* ty=Tensor[(1470), uint32] */;
    (%662, %663)
  };
  %664() /* ty=(Tensor[(336), uint32], Tensor[(1470), uint32]) */
}

def @func_22(%var_17: Tensor[(1, 6, 6), float32], %var_18: Tensor[(10, 6, 6), float32]) -> (Tensor[(10, 6, 6), float32],) {
  %665 = cast(%var_17, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
  %666 = cast(%var_18, dtype="float32") /* ty=Tensor[(10, 6, 6), float32] */;
  %667 = power(%665, %666) /* ty=Tensor[(10, 6, 6), float32] */;
  (%667,)
}

def @func_4995() -> (Tensor[(12, 5, 15), float32],) {
  %670 = fn () -> (Tensor[(12, 5, 15), float32],) {
    %668 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %669 = %668.0;
    (%669,)
  };
  %670() /* ty=(Tensor[(12, 5, 15), float32],) */
}

def @func_6390() -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), int8]) {
  %671 = @func_2910() /* ty=(Tensor[(1470), uint32],) */;
  %672 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  %673 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
  %674 = cast(%673, dtype="int8") /* ty=Tensor[(12, 5, 15), int8] */;
  %675 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%672, dtype="int8") /* ty=Tensor[(12, 5, 15), int8] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %678 = %671.0;
  %679 = bitwise_or(%676, %677) /* ty=Tensor[(12, 5, 15), int8] */;
  (%678, %679)
}

def @func_9530() -> (Tensor[(1470), uint32],) {
  %680 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %681 = %680.0;
  (%681,)
}

def @func_9632() -> (Tensor[(1470), uint32],) {
  %682 = @func_7095() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32]) */;
  %683 = %682.0;
  (%683,)
}

def @func_7376(%var_7372: Tensor[(13, 8, 14), uint32], %var_7373: Tensor[(13, 8, 14), uint32], %var_7374: Tensor[(1, 1144), bool], %var_7375: Tensor[(360), float32]) -> (Tensor[(13, 8, 14), uint32], Tensor[(1470), uint32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), int8], Tensor[(1470), uint32], Tensor[(1, 1144), bool], Tensor[(36), float32], Tensor[(360), float32]) {
  %705 = fn (%var_7333: Tensor[(13, 8, 14), uint32], %var_7334: Tensor[(13, 8, 14), uint32], %var_7362: Tensor[(1, 1144), bool], %var_7364: Tensor[(360), float32]) -> (Tensor[(13, 8, 14), uint32], Tensor[(1470), uint32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), int8], Tensor[(1470), uint32], Tensor[(1, 1144), bool], Tensor[(36), float32], Tensor[(360), float32]) {
    %684 = cast(%var_7334, dtype="uint32") /* ty=Tensor[(13, 8, 14), uint32] */;
    %685 = shape_of(%var_7333, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%var_7333, dtype="uint32") /* ty=Tensor[(13, 8, 14), uint32] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %688 = @func_4472() /* ty=(Tensor[(1470), uint32],) */;
    %689 = @func_5308() /* ty=(Tensor[(15, 7, 10), float32],) */;
    %690 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
    %691 = cast(%var_7362, dtype="bool") /* ty=Tensor[(1, 1144), bool] */;
    %692 = cast(meta[relay.Constant][25] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %693 = cast(%var_7364, dtype="float32") /* ty=Tensor[(360), float32] */;
    %694 = cast(%var_7362, dtype="float64") /* ty=Tensor[(1, 1144), float64] */;
    %695 = reshape(%691, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
    %696 = reshape(%692, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
    %697 = reshape(%693, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %698 = reshape(%694, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
    %699 = @func_6260(%695, %696, %697, %698) /* ty=(Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) */;
    %700 = add(%686, %687) /* ty=Tensor[(13, 8, 14), uint32] */;
    %701 = %688.0;
    %702 = %689.0;
    %703 = %690.1;
    %704 = %699.2;
    (%700, %701, %702, %703, %704, %var_7362, meta[relay.Constant][25] /* ty=Tensor[(36), float32] */, %var_7364)
  };
  %705(%var_7372, %var_7373, %var_7374, %var_7375) /* ty=(Tensor[(13, 8, 14), uint32], Tensor[(1470), uint32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), int8], Tensor[(1470), uint32], Tensor[(1, 1144), bool], Tensor[(36), float32], Tensor[(360), float32]) */
}

def @func_10217(%var_10215: Tensor[(12, 5, 15), float32]) -> (Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(12, 5, 15), uint16]) {
  @func_10214(%var_10215) /* ty=(Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(12, 5, 15), uint16]) */
}

def @func_2137(%var_2135: float32, %var_2136: Tensor[(8, 2, 3), float32]) -> (Tensor[(8, 2, 3), float32], Tensor[(15, 7, 10), float64], Tensor[(1050, 1), float64]) {
  %713 = fn (%var_2108: float32, %var_2109: Tensor[(8, 2, 3), float32]) -> (Tensor[(8, 2, 3), float32], Tensor[(15, 7, 10), float64], Tensor[(1050, 1), float64]) {
    %706 = cast(%var_2108, dtype="float32") /* ty=float32 */;
    %707 = cast(%var_2109, dtype="float32") /* ty=Tensor[(8, 2, 3), float32] */;
    %708 = cast(meta[relay.Constant][26] /* ty=Tensor[(1050, 1), float64] */, dtype="float64") /* ty=Tensor[(1050, 1), float64] */;
    %709 = reshape(%708, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
    %710 = @func_480(%709) /* ty=(Tensor[(15, 7, 10), float64],) */;
    %711 = floor_divide(%706, %707) /* ty=Tensor[(8, 2, 3), float32] */;
    %712 = %710.0;
    (%711, %712, meta[relay.Constant][26] /* ty=Tensor[(1050, 1), float64] */)
  };
  %713(%var_2135, %var_2136) /* ty=(Tensor[(8, 2, 3), float32], Tensor[(15, 7, 10), float64], Tensor[(1050, 1), float64]) */
}

def @func_8829() -> (Tensor[(7, 15, 14), float32], Tensor[(1470), uint32]) {
  @func_8827() /* ty=(Tensor[(7, 15, 14), float32], Tensor[(1470), uint32]) */
}

def @func_2261() -> Tensor[(12, 5, 15), float32] {
  %714 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %714.1
}

def @func_6581() -> Tensor[(15, 7, 10), float32] {
  @func_6579() /* ty=Tensor[(15, 7, 10), float32] */
}

def @func_2097(%var_2095: Tensor[(14, 13, 1), int64], %var_2096: Tensor[(14, 13, 9), int64]) -> Tensor[(14, 13, 9), bool] {
  %717 = fn (%var_2088: Tensor[(14, 13, 1), int64], %var_2089: Tensor[(14, 13, 9), int64]) -> Tensor[(14, 13, 9), bool] {
    %715 = cast(%var_2088, dtype="bool") /* ty=Tensor[(14, 13, 1), bool] */;
    %716 = cast(%var_2089, dtype="bool") /* ty=Tensor[(14, 13, 9), bool] */;
    greater(%715, %716) /* ty=Tensor[(14, 13, 9), bool] */
  };
  %717(%var_2095, %var_2096) /* ty=Tensor[(14, 13, 9), bool] */
}

def @func_3328(%var_3326: Tensor[(12, 16, 6), float32]) -> Tensor[(12, 16, 6), float32] {
  @func_3325(%var_3326) /* ty=Tensor[(12, 16, 6), float32] */
}

def @func_4951() -> (Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) {
  @func_4949() /* ty=(Tensor[(3, 16, 7), float64], Tensor[(12, 5, 15), float32]) */
}

def @func_8138(%var_8130: Tensor[(4, 14, 1), uint16], %var_8131: Tensor[(4, 14, 16), uint16]) -> (Tensor[(4, 14, 16), bool],) {
  %718 = cast(%var_8130, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %719 = cast(%var_8131, dtype="bool") /* ty=Tensor[(4, 14, 16), bool] */;
  %720 = less_equal(%718, %719) /* ty=Tensor[(4, 14, 16), bool] */;
  (%720,)
}

def @func_2477() -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) {
  %721 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %722 = @func_2360() /* ty=(Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %723 = %722.1;
  %724 = cast(%723, dtype="uint32") /* ty=Tensor[(7, 15, 14), uint32] */;
  %725 = reshape(%724, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %726 = @func_2329(%725) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %727 = %726.1;
  %728 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
  %729 = %728.0;
  %730 = cast(%729, dtype="bool") /* ty=Tensor[(1470), bool] */;
  %731 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%723, dtype="bool") /* ty=Tensor[(7, 15, 14), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %734 = not_equal(%732, %733) /* ty=Tensor[(7, 15, 14), bool] */;
  %735 = cast(%734, dtype="int8") /* ty=Tensor[(7, 15, 14), int8] */;
  %736 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%727, dtype="int8") /* ty=Tensor[(7, 15, 14), int8] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %739 = cast(%723, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %740 = %721.0;
  %741 = multiply(%737, %738) /* ty=Tensor[(7, 15, 14), int8] */;
  %742 = erf(%739) /* ty=Tensor[(7, 15, 14), float64] */;
  (%740, %741, %742)
}

def @func_7324() -> (Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(11, 16, 6), int32], Tensor[(1056), int32]) {
  %743 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %744 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %745 = cast(meta[relay.Constant][27] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %746 = cast(meta[relay.Constant][27] /* ty=Tensor[(1056), int32] */, dtype="int32") /* ty=Tensor[(1056), int32] */;
  %747 = reshape(%745, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int32] */;
  %748 = reshape(%746, newshape=[11, 16, 6]) /* ty=Tensor[(11, 16, 6), int32] */;
  %749 = @func_2203(%747, %748) /* ty=(Tensor[(11, 16, 6), int32], Tensor[(11, 16, 6), float32]) */;
  %750 = %743.2;
  %751 = %744.0;
  %752 = %749.0;
  (%750, %751, %752, meta[relay.Constant][27] /* ty=Tensor[(1056), int32] */)
}

def @func_7097() -> (Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  @func_7095() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32]) */
}

def @func_10963(%var_10961: Tensor[(1152), float32], %var_10962: Tensor[(1050), float64]) -> (Tensor[(12, 5, 15), float32], Tensor[(15, 7, 10), float64], Tensor[(7, 15, 14), uint32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32], Tensor[(15, 7, 10), float64], Tensor[(1050), bool], Tensor[(12, 5, 15), float32]) {
  @func_10959(%var_10961, %var_10962) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(15, 7, 10), float64], Tensor[(7, 15, 14), uint32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32], Tensor[(15, 7, 10), float64], Tensor[(1050), bool], Tensor[(12, 5, 15), float32]) */
}

def @func_5308() -> (Tensor[(15, 7, 10), float32],) {
  %753 = @func_4776() /* ty=(Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %754 = %753.1;
  %755 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="float32") /* ty=Tensor[(15, 7, 10), float32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %759 = subtract(%757, %758) /* ty=Tensor[(15, 7, 10), float32] */;
  (%759,)
}

def @func_2203(%var_2193: Tensor[(11, 16, 6), int32], %var_2194: Tensor[(11, 16, 6), int32]) -> (Tensor[(11, 16, 6), int32], Tensor[(11, 16, 6), float32]) {
  %760 = cast(%var_2194, dtype="int32") /* ty=Tensor[(11, 16, 6), int32] */;
  %761 = shape_of(%var_2193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%var_2193, dtype="int32") /* ty=Tensor[(11, 16, 6), int32] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %764 = cast(%var_2194, dtype="float32") /* ty=Tensor[(11, 16, 6), float32] */;
  %765 = logical_xor(%762, %763) /* ty=Tensor[(11, 16, 6), int32] */;
  %766 = atanh(%764) /* ty=Tensor[(11, 16, 6), float32] */;
  (%765, %766)
}

def @func_8700(%var_8699: Tensor[(7, 1, 4), float32]) -> (Tensor[(7, 1, 4), float32], Tensor[(400), float32], Tensor[(24, 14), uint32]) {
  %773 = fn (%var_8684: Tensor[(7, 1, 4), float32]) -> (Tensor[(7, 1, 4), float32], Tensor[(400), float32], Tensor[(24, 14), uint32]) {
    %767 = cast(%var_8684, dtype="float32") /* ty=Tensor[(7, 1, 4), float32] */;
    %768 = cast(meta[relay.Constant][29] /* ty=Tensor[(24, 14), uint32] */, dtype="uint32") /* ty=Tensor[(24, 14), uint32] */;
    %769 = reshape(%768, newshape=[336]) /* ty=Tensor[(336), uint32] */;
    %770 = @func_5625(%769) /* ty=(Tensor[(400), float32], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) */;
    %771 = cosh(%767) /* ty=Tensor[(7, 1, 4), float32] */;
    %772 = %770.0;
    (%771, %772, meta[relay.Constant][29] /* ty=Tensor[(24, 14), uint32] */)
  };
  %773(%var_8699) /* ty=(Tensor[(7, 1, 4), float32], Tensor[(400), float32], Tensor[(24, 14), uint32]) */
}

def @func_9234(%var_9233: Tensor[(2), float32]) -> (Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(2), float32]) {
  %783 = fn (%var_9202: Tensor[(2), float32]) -> (Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(2), float32]) {
    %774 = @func_7324() /* ty=(Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(11, 16, 6), int32], Tensor[(1056), int32]) */;
    %775 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
    %776 = cast(%var_9202, dtype="float32") /* ty=Tensor[(2), float32] */;
    %777 = reshape(%776, newshape=[1, 1, 2]) /* ty=Tensor[(1, 1, 2), float32] */;
    %778 = @func_7437(%777) /* ty=(Tensor[(1470), uint32], Tensor[(1, 1, 2), float32]) */;
    %779 = @func_1498() /* ty=Tensor[(1470), uint32] */;
    %780 = %774.1;
    %781 = %775.0;
    %782 = %778.0;
    (%779, %780, %781, %782, %var_9202)
  };
  %783(%var_9233) /* ty=(Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(2), float32]) */
}

def @func_6765() -> (Tensor[(1470), uint32],) {
  %784 = @func_4456() /* ty=(Tensor[(1470), uint32],) */;
  %785 = %784.0;
  (%785,)
}

def @func_1738(%var_1686: Tensor[(336), uint32]) -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) {
  %786 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %787 = %786.1;
  %788 = cast(%787, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %789 = atanh(%788) /* ty=Tensor[(7, 15, 14), float64] */;
  %790 = cast(%789, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %791 = cast(%789, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %792 = cast(%787, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %793 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%789, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %796 = cast(%var_1686, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %797 = cast(%var_1686, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %798 = reshape(%796, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %799 = reshape(%797, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %800 = @func_824(%798, %799) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %801 = cast(meta[relay.Constant][30] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %802 = reshape(%801, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %803 = @func_480(%802) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %804 = cast(%var_1686, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %805 = %800.1;
  %806 = cast(%805, dtype="uint32") /* ty=Tensor[(3, 16, 7), uint32] */;
  %807 = reshape(%804, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %808 = reshape(%806, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
  %809 = @func_824(%807, %808) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
  %810 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  %811 = sinh(%790) /* ty=Tensor[(7, 15, 14), float32] */;
  %812 = asinh(%791) /* ty=Tensor[(7, 15, 14), float64] */;
  %813 = floor_mod(%794, %795) /* ty=Tensor[(7, 15, 14), float32] */;
  %814 = %803.0;
  %815 = %809.1;
  (%810, %811, %812, %813, %805, %var_1686, %814, meta[relay.Constant][30] /* ty=Tensor[(1050), float64] */, %815)
}

def @func_10568(%var_10567: Tensor[(1, 16, 10), uint64]) -> Tensor[(9, 16, 10), uint64] {
  %818 = fn (%var_10560: Tensor[(1, 16, 10), uint64]) -> Tensor[(9, 16, 10), uint64] {
    %816 = cast(%var_10560, dtype="uint64") /* ty=Tensor[(1, 16, 10), uint64] */;
    %817 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 16, 10), uint64] */, dtype="uint64") /* ty=Tensor[(9, 16, 10), uint64] */;
    subtract(%816, %817) /* ty=Tensor[(9, 16, 10), uint64] */
  };
  %818(%var_10567) /* ty=Tensor[(9, 16, 10), uint64] */
}

def @func_8941() -> (Tensor[(7, 15, 14), uint32],) {
  @func_8939() /* ty=(Tensor[(7, 15, 14), uint32],) */
}

def @func_9290() -> (Tensor[(7, 15, 14), uint32],) {
  %821 = fn () -> (Tensor[(7, 15, 14), uint32],) {
    %819 = @func_4776() /* ty=(Tensor[(15, 7, 10), float32], Tensor[(15, 7, 10), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %820 = %819.2;
    (%820,)
  };
  %821() /* ty=(Tensor[(7, 15, 14), uint32],) */
}

def @func_9783(%var_9781: Tensor[(560), float64]) -> (Tensor[(1470), uint32], Tensor[(7, 15, 14), int8], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) {
  @func_9780(%var_9781) /* ty=(Tensor[(1470), uint32], Tensor[(7, 15, 14), int8], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) */
}

def @func_8395() -> (Tensor[(1470), uint32],) {
  %824 = fn () -> (Tensor[(1470), uint32],) {
    %822 = @func_2188() /* ty=(Tensor[(1470), uint32],) */;
    %823 = %822.0;
    (%823,)
  };
  %824() /* ty=(Tensor[(1470), uint32],) */
}

def @func_8062() -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) {
  %825 = @func_5096() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */;
  %826 = %825.0;
  %827 = @func_1298() /* ty=Tensor[(12, 5, 15), float32] */;
  (%826, %827)
}

def @func_4472() -> (Tensor[(1470), uint32],) {
  %828 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
  %829 = %828.0;
  (%829,)
}

def @func_4528() -> Tensor[(1470), uint32] {
  @func_4526() /* ty=Tensor[(1470), uint32] */
}

def @func_8521() -> (Tensor[(1470), uint32], Tensor[(1470), float64], Tensor[(12, 5, 15), float32]) {
  %830 = @func_8371() /* ty=(Tensor[(336), uint32], Tensor[(1470), uint32]) */;
  %831 = %830.1;
  %832 = cast(%831, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %833 = reshape(%832, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %834 = @func_3429(%833) /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(1470), float64], Tensor[(1470), uint32], Tensor[(5, 10, 11), int64]) */;
  %835 = @func_8198() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */;
  %836 = %834.1;
  %837 = %835.1;
  (%831, %836, %837)
}

def @func_6615(%var_6612: Tensor[(15, 1, 14), uint16], %var_6613: Tensor[(1144), bool], %var_6614: Tensor[(36), float32]) -> (Tensor[(15, 1, 14), uint16], Tensor[(10, 6, 6), float32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(2, 180), float32]) {
  @func_6610(%var_6612, %var_6613, %var_6614) /* ty=(Tensor[(15, 1, 14), uint16], Tensor[(10, 6, 6), float32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(2, 180), float32]) */
}

def @func_2712(%var_2700: Tensor[(1144), bool], %var_2706: Tensor[(1144), float64]) -> (Tensor[(7, 15, 14), int8], Tensor[(336), uint32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), int8]) {
  %838 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %839 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %840 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %841 = cast(%var_2700, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %842 = reshape(%840, newshape=[]) /* ty=bool */;
  %843 = reshape(%841, newshape=[8, 13, 11]) /* ty=Tensor[(8, 13, 11), bool] */;
  %844 = @func_2042(%842, %843) /* ty=(Tensor[(8, 13, 11), bool],) */;
  %845 = cast(%var_2700, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %846 = asinh(%845) /* ty=Tensor[(1144), float64] */;
  %847 = cast(%var_2706, dtype="int8") /* ty=Tensor[(1144), int8] */;
  %848 = shape_of(%846, dtype="int32") /* ty=Tensor[(1), int32] */;
  %849 = cast(%846, dtype="int8") /* ty=Tensor[(1144), int8] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?), int8] */;
  %851 = %838.1;
  %852 = %839.0;
  %853 = %844.0;
  %854 = minimum(%849, %850) /* ty=Tensor[(1144), int8] */;
  (%851, %852, %853, False /* ty=bool */, %854)
}

def @func_2945() -> (Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) {
  %866 = fn () -> (Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) {
    %855 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %856 = %855.1;
    %857 = cast(%856, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
    %858 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 210), float64] */, dtype="float64") /* ty=Tensor[(5, 210), float64] */;
    %859 = reshape(%858, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
    %860 = @func_480(%859) /* ty=(Tensor[(15, 7, 10), float64],) */;
    %861 = %860.0;
    %862 = cast(%861, dtype="float64") /* ty=Tensor[(15, 7, 10), float64] */;
    %863 = @func_1773() /* ty=Tensor[(336), uint32] */;
    %864 = rsqrt(%857) /* ty=Tensor[(7, 15, 14), float32] */;
    %865 = asinh(%862) /* ty=Tensor[(15, 7, 10), float64] */;
    (%863, %864, meta[relay.Constant][32] /* ty=Tensor[(5, 210), float64] */, %865)
  };
  %866() /* ty=(Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) */
}

def @func_4893(%var_4891: Tensor[(2, 10, 9), float32], %var_4892: Tensor[(1144), bool]) -> (Tensor[(2, 10, 9), float32], Tensor[(1144), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(6, 14, 6), float32], Tensor[(?, 1470), float64]) {
  %894 = fn (%var_4832: Tensor[(2, 10, 9), float32], %var_4836: Tensor[(1144), bool]) -> (Tensor[(2, 10, 9), float32], Tensor[(1144), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(6, 14, 6), float32], Tensor[(?, 1470), float64]) {
    %867 = cast(%var_4832, dtype="float32") /* ty=Tensor[(2, 10, 9), float32] */;
    %868 = cast(%var_4836, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %869 = reshape(%868, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
    %870 = @func_3924(%869) /* ty=(Tensor[(8, 13, 11), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), bool]) */;
    %871 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %872 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %873 = cast(meta[relay.Constant][33] /* ty=Tensor[(336), uint32] */, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %874 = reshape(%872, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
    %875 = reshape(%873, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), uint32] */;
    %876 = @func_824(%874, %875) /* ty=(Tensor[(3, 16, 7), bool], Tensor[(3, 16, 7), float64]) */;
    %877 = @func_4708() /* ty=(Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
    %878 = @func_4419() /* ty=(Tensor[(6, 14, 6), float32],) */;
    %879 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 1470), uint32] */, dtype="uint32") /* ty=Tensor[(1, 1470), uint32] */;
    %880 = reshape(%879, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
    %881 = @func_54(%880) /* ty=(Tensor[(7, 15, 14), uint32],) */;
    %882 = %881.0;
    %883 = cast(%882, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
    %884 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(1, 1470), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %885 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 1470), uint32] */, dtype="float64") /* ty=Tensor[(1, 1470), float64] */;
    %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %887 = cos(%867) /* ty=Tensor[(2, 10, 9), float32] */;
    %888 = %870.1;
    %889 = %871.0;
    %890 = %876.0;
    %891 = %877.1;
    %892 = %878.0;
    %893 = floor_mod(%885, %886) /* ty=Tensor[(?, 1470), float64] */;
    (%887, %888, %var_4836, %889, %890, meta[relay.Constant][33] /* ty=Tensor[(336), uint32] */, %891, %892, %893)
  };
  %894(%var_4891, %var_4892) /* ty=(Tensor[(2, 10, 9), float32], Tensor[(1144), bool], Tensor[(1144), bool], Tensor[(12, 5, 15), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(6, 14, 6), float32], Tensor[(?, 1470), float64]) */
}

def @func_8738() -> (Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  %899 = fn () -> (Tensor[(1470), uint32], Tensor[(1470), uint32]) {
    %895 = @func_5040() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32]) */;
    %896 = @func_6765() /* ty=(Tensor[(1470), uint32],) */;
    %897 = %895.1;
    %898 = %896.0;
    (%897, %898)
  };
  %899() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32]) */
}

def @func_1298() -> Tensor[(12, 5, 15), float32] {
  %900 = cast(meta[relay.Constant][35] /* ty=Tensor[(12, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  atan(%900) /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_9424(%var_9423: Tensor[(7, 15, 14), int8]) -> (Tensor[(9, 7, 5), float32], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32]) {
  %916 = fn (%var_9396: Tensor[(7, 15, 14), int8]) -> (Tensor[(9, 7, 5), float32], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32]) {
    %901 = @func_8440() /* ty=(Tensor[(9, 7, 5), float32],) */;
    %902 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
    %903 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
    %904 = %903.1;
    %905 = cast(%var_9396, dtype="int8") /* ty=Tensor[(7, 15, 14), int8] */;
    %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
    %907 = cast(%904, dtype="int8") /* ty=Tensor[(7, 15, 14), int8] */;
    %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %909 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %910 = cast(%var_9396, dtype="float32") /* ty=Tensor[(7, 15, 14), float32] */;
    %911 = %901.0;
    %912 = %902.4;
    %913 = left_shift(%907, %908) /* ty=Tensor[(7, 15, 14), int8] */;
    %914 = %909.0;
    %915 = log2(%910) /* ty=Tensor[(7, 15, 14), float32] */;
    (%911, %912, %913, %914, %915)
  };
  %916(%var_9423) /* ty=(Tensor[(9, 7, 5), float32], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32]) */
}

def @func_7931(%var_7917: Tensor[(4, 100), float32], %var_7927: Tensor[(560), float64]) -> (Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(9, 4), float32], Tensor[(4, 100), bool], Tensor[(3, 1, 14), float32], Tensor[(42), uint64], Tensor[(14, 10, 4), float64], Tensor[(560), float64]) {
  %917 = @func_2105() /* ty=(Tensor[(336), uint32],) */;
  %918 = @func_4592() /* ty=(Tensor[(1470), uint32],) */;
  %919 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %920 = %919.0;
  %921 = cast(%920, dtype="float32") /* ty=Tensor[(12, 5, 15), float32] */;
  %922 = @func_4708() /* ty=(Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
  %923 = @func_6849() /* ty=Tensor[(4, 100), float32] */;
  %924 = cast(%var_7917, dtype="bool") /* ty=Tensor[(4, 100), bool] */;
  %925 = shape_of(%923, dtype="int32") /* ty=Tensor[(2), int32] */;
  %926 = cast(%923, dtype="bool") /* ty=Tensor[(4, 100), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %928 = cast(meta[relay.Constant][36] /* ty=Tensor[(42), uint64] */, dtype="uint64") /* ty=Tensor[(42), uint64] */;
  %929 = reshape(%928, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), uint64] */;
  %930 = @func_295(%929) /* ty=(Tensor[(3, 2, 14), uint64], Tensor[(3, 1, 14), float32]) */;
  %931 = cast(%var_7927, dtype="float64") /* ty=Tensor[(560), float64] */;
  %932 = reshape(%931, newshape=[14, 10, 4]) /* ty=Tensor[(14, 10, 4), float64] */;
  %933 = @func_3202(%932) /* ty=(Tensor[(14, 10, 4), float64],) */;
  %934 = %917.0;
  %935 = %918.0;
  %936 = exp(%921) /* ty=Tensor[(12, 5, 15), float32] */;
  %937 = %922.1;
  %938 = less_equal(%926, %927) /* ty=Tensor[(4, 100), bool] */;
  %939 = %930.1;
  %940 = %933.0;
  (%934, %935, %936, %937, %938, %939, meta[relay.Constant][36] /* ty=Tensor[(42), uint64] */, %940, %var_7927)
}

def @func_2624(%var_2623: Tensor[(5, 10, 11), bool]) -> (Tensor[(5, 10, 11), bool], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) {
  %950 = fn (%var_2578: Tensor[(5, 10, 11), bool]) -> (Tensor[(5, 10, 11), bool], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) {
    %941 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 10, 11), bool] */, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
    %942 = shape_of(%var_2578, dtype="int32") /* ty=Tensor[(3), int32] */;
    %943 = cast(%var_2578, dtype="bool") /* ty=Tensor[(5, 10, 11), bool] */;
    %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %945 = @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
    %946 = @func_2286() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %947 = logical_or(%943, %944) /* ty=Tensor[(5, 10, 11), bool] */;
    %948 = %945.1;
    %949 = %946.0;
    (%947, %948, %949)
  };
  %950(%var_2623) /* ty=(Tensor[(5, 10, 11), bool], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */
}

def @func_4569(%var_4556: Tensor[(360), float32]) -> (Tensor[(12, 5, 15), float32], Tensor[(360), float32], Tensor[(336), bool], Tensor[(360), float32], Tensor[(336), uint32]) {
  %951 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %952 = cast(meta[relay.Constant][38] /* ty=Tensor[(336), bool] */, dtype="bool") /* ty=Tensor[(336), bool] */;
  %953 = cast(%var_4556, dtype="float32") /* ty=Tensor[(360), float32] */;
  %954 = reshape(%952, newshape=[3, 16, 7]) /* ty=Tensor[(3, 16, 7), bool] */;
  %955 = reshape(%953, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %956 = @func_1908(%954, %955) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32]) */;
  %957 = @func_4354() /* ty=(Tensor[(336), uint32],) */;
  %958 = %951.0;
  %959 = %956.8;
  %960 = %957.0;
  (%958, %959, meta[relay.Constant][38] /* ty=Tensor[(336), bool] */, %var_4556, %960)
}

def @func_6161() -> (Tensor[(336), uint32], Tensor[(336), uint32], Tensor[(5, 210), float64], Tensor[(336), uint32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  %961 = @func_4354() /* ty=(Tensor[(336), uint32],) */;
  %962 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
  %963 = @func_2944() /* ty=(Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) */;
  %964 = @func_5839() /* ty=(Tensor[(336), uint32], Tensor[(1470), uint32]) */;
  %965 = cast(meta[relay.Constant][39] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %966 = reshape(%965, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %967 = @func_54(%966) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %968 = %961.0;
  %969 = %962.0;
  %970 = %963.2;
  %971 = %964.0;
  %972 = %967.0;
  (%968, %969, %970, %971, %972, meta[relay.Constant][39] /* ty=Tensor[(1470), uint32] */)
}

def @func_8615() -> Tensor[(12, 5, 15), float32] {
  @func_8613() /* ty=Tensor[(12, 5, 15), float32] */
}

def @func_9970(%var_9935: Tensor[(4, 100), float32], %var_9967: Tensor[(550, 1), bool]) -> (Tensor[(336), uint32], Tensor[(6, 14, 6), float32], Tensor[(12, 5, 15), float32], Tensor[(48), float32], Tensor[(4, 100), float64], Tensor[(12, 550), uint64], Tensor[(550, 1), bool], Tensor[(6600), bool]) {
  %973 = @func_6831() /* ty=(Tensor[(6, 14, 6), float32], Tensor[(1470), uint32]) */;
  %974 = cast(meta[relay.Constant][40] /* ty=Tensor[(48), float32] */, dtype="float32") /* ty=Tensor[(48), float32] */;
  %975 = reshape(%974, newshape=[48]) /* ty=Tensor[(48), float32] */;
  %976 = @func_8125(%975) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(48), float32]) */;
  %977 = @func_3651() /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(4, 100), float32]) */;
  %978 = %977.2;
  %979 = cast(%var_9935, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
  %980 = shape_of(%978, dtype="int32") /* ty=Tensor[(2), int32] */;
  %981 = cast(%978, dtype="float32") /* ty=Tensor[(4, 100), float32] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %983 = mod(%981, %982) /* ty=Tensor[(4, 100), float32] */;
  %984 = cast(%978, dtype="float64") /* ty=Tensor[(4, 100), float64] */;
  %985 = shape_of(%983, dtype="int32") /* ty=Tensor[(2), int32] */;
  %986 = cast(%983, dtype="float64") /* ty=Tensor[(4, 100), float64] */;
  %987 = dyn.reshape(%984, %985, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %988 = cast(%var_9967, dtype="bool") /* ty=Tensor[(550, 1), bool] */;
  %989 = cast(meta[relay.Constant][41] /* ty=Tensor[(6600), bool] */, dtype="bool") /* ty=Tensor[(6600), bool] */;
  %990 = reshape(%988, newshape=[1, 550]) /* ty=Tensor[(1, 550), bool] */;
  %991 = reshape(%989, newshape=[12, 550]) /* ty=Tensor[(12, 550), bool] */;
  %992 = @func_3991(%990, %991) /* ty=(Tensor[(336), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 550), uint64], Tensor[(336), uint32]) */;
  %993 = @func_7940() /* ty=Tensor[(336), uint32] */;
  %994 = %973.0;
  %995 = %976.0;
  %996 = floor_mod(%986, %987) /* ty=Tensor[(4, 100), float64] */;
  %997 = %992.2;
  (%993, %994, %995, meta[relay.Constant][40] /* ty=Tensor[(48), float32] */, %996, %997, %var_9967, meta[relay.Constant][41] /* ty=Tensor[(6600), bool] */)
}

def @func_8064() -> (Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) {
  @func_8062() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */
}

def @func_3325(%var_3318: Tensor[(12, 16, 6), float32]) -> Tensor[(12, 16, 6), float32] {
  %998 = cast(%var_3318, dtype="float32") /* ty=Tensor[(12, 16, 6), float32] */;
  cosh(%998) /* ty=Tensor[(12, 16, 6), float32] */
}

def @func_2332(%var_2330: Tensor[(1470), uint32]) -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  @func_2329(%var_2330) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */
}

def @func_9036() -> (Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) {
  %1004 = fn () -> (Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) {
    %999 = @func_6522() /* ty=(Tensor[(1470), uint32],) */;
    %1000 = @func_5960() /* ty=(Tensor[(7, 15, 14), uint32],) */;
    %1001 = %999.0;
    %1002 = %1000.0;
    %1003 = @func_8613() /* ty=Tensor[(12, 5, 15), float32] */;
    (%1001, %1002, %1003)
  };
  %1004() /* ty=(Tensor[(1470), uint32], Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */
}

def @func_9344() -> (Tensor[(12, 5, 15), float32], Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  @func_9342() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(1470), uint32], Tensor[(1470), uint32]) */
}

def @func_10098() -> (Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) {
  @func_10096() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */
}

def @func_8249() -> Tensor[(15, 7, 10), float64] {
  %1005 = @func_2944() /* ty=(Tensor[(336), uint32], Tensor[(7, 15, 14), float32], Tensor[(5, 210), float64], Tensor[(15, 7, 10), float64]) */;
  %1005.3
}

def @func_10622(%var_10621: Tensor[(10, 16, 4), float32]) -> (Tensor[(10, 16, 4), float32], Tensor[(1470), uint32]) {
  %1010 = fn (%var_10613: Tensor[(10, 16, 4), float32]) -> (Tensor[(10, 16, 4), float32], Tensor[(1470), uint32]) {
    %1006 = cast(%var_10613, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
    %1007 = @func_4592() /* ty=(Tensor[(1470), uint32],) */;
    %1008 = erf(%1006) /* ty=Tensor[(10, 16, 4), float32] */;
    %1009 = %1007.0;
    (%1008, %1009)
  };
  %1010(%var_10621) /* ty=(Tensor[(10, 16, 4), float32], Tensor[(1470), uint32]) */
}

def @func_10715(%var_10712: Tensor[(4, 36), float64], %var_10713: Tensor[(400), float32], %var_10714: Tensor[(360), float32]) -> (Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(2, 8, 9), bool], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(4, 36), float32]) {
  %1029 = fn (%var_10675: Tensor[(4, 36), float64], %var_10677: Tensor[(400), float32], %var_10678: Tensor[(360), float32]) -> (Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(2, 8, 9), bool], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(4, 36), float32]) {
    %1011 = @func_3085() /* ty=(Tensor[(336), uint32], Tensor[(3, 16, 7), float64], Tensor[(7, 15, 14), uint32], Tensor[(7, 15, 14), uint32], Tensor[(336), uint32]) */;
    %1012 = @func_6337() /* ty=(Tensor[(1470), uint32],) */;
    %1013 = cast(%var_10675, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
    %1014 = cast(%var_10675, dtype="float64") /* ty=Tensor[(4, 36), float64] */;
    %1015 = cast(meta[relay.Constant][42] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
    %1016 = cast(%var_10677, dtype="float32") /* ty=Tensor[(400), float32] */;
    %1017 = cast(%var_10678, dtype="float32") /* ty=Tensor[(360), float32] */;
    %1018 = reshape(%1013, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
    %1019 = reshape(%1014, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
    %1020 = reshape(%1015, newshape=[1050]) /* ty=Tensor[(1050), float64] */;
    %1021 = reshape(%1016, newshape=[400]) /* ty=Tensor[(400), float32] */;
    %1022 = reshape(%1017, newshape=[360]) /* ty=Tensor[(360), float32] */;
    %1023 = @func_1372(%1018, %1019, %1020, %1021, %1022) /* ty=(Tensor[(2, 8, 9), bool], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(2, 8, 9), float32], Tensor[(10, 6, 6), float32], Tensor[(9, 4), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
    %1024 = cast(%var_10675, dtype="float32") /* ty=Tensor[(4, 36), float32] */;
    %1025 = %1011.4;
    %1026 = %1012.0;
    %1027 = %1023.0;
    %1028 = cosh(%1024) /* ty=Tensor[(4, 36), float32] */;
    (%1025, %1026, %1027, meta[relay.Constant][42] /* ty=Tensor[(1050), float64] */, %var_10677, %var_10678, %1028)
  };
  %1029(%var_10712, %var_10713, %var_10714) /* ty=(Tensor[(336), uint32], Tensor[(1470), uint32], Tensor[(2, 8, 9), bool], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(4, 36), float32]) */
}

def @func_3552(%var_3550: Tensor[(48, 1), float32], %var_3551: Tensor[(24, 14), uint32]) -> (Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], float32, Tensor[(48, 1), float32], Tensor[(3, 16, 7), float64], Tensor[(24, 14), uint32], Tensor[(7, 15, 14), float64]) {
  @func_3548(%var_3550, %var_3551) /* ty=(Tensor[(1470), uint32], Tensor[(15, 7, 10), float64], float32, Tensor[(48, 1), float32], Tensor[(3, 16, 7), float64], Tensor[(24, 14), uint32], Tensor[(7, 15, 14), float64]) */
}

def @func_5041() -> (Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  %1035 = fn () -> (Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32]) {
    %1030 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
    %1031 = @func_4330() /* ty=(Tensor[(1470), uint32],) */;
    %1032 = @func_1498() /* ty=Tensor[(1470), uint32] */;
    %1033 = %1030.0;
    %1034 = %1031.0;
    (%1032, %1033, %1034)
  };
  %1035() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(1470), uint32]) */
}

def @func_9342() -> (Tensor[(12, 5, 15), float32], Tensor[(1470), uint32], Tensor[(1470), uint32]) {
  %1036 = @func_5096() /* ty=(Tensor[(1470), uint32], Tensor[(12, 5, 15), float32]) */;
  %1037 = cast(meta[relay.Constant][43] /* ty=Tensor[(1470), uint32] */, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %1038 = reshape(%1037, newshape=[1470]) /* ty=Tensor[(1470), uint32] */;
  %1039 = @func_2329(%1038) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */;
  %1040 = %1036.1;
  %1041 = %1039.2;
  (%1040, %1041, meta[relay.Constant][43] /* ty=Tensor[(1470), uint32] */)
}

def @func_4223(%var_4221: Tensor[(36), float32], %var_4222: Tensor[(360), float32]) -> (Tensor[(7, 15, 14), float64], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32], Tensor[(7, 15, 14), float64]) {
  @func_4219(%var_4221, %var_4222) /* ty=(Tensor[(7, 15, 14), float64], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32], Tensor[(7, 15, 14), float64]) */
}

def @func_6767() -> (Tensor[(1470), uint32],) {
  @func_6765() /* ty=(Tensor[(1470), uint32],) */
}

def @func_5627(%var_5626: Tensor[(336), uint32]) -> (Tensor[(400), float32], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) {
  %1049 = fn (%var_5615: Tensor[(336), uint32]) -> (Tensor[(400), float32], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) {
    %1042 = @func_4708() /* ty=(Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
    %1043 = cast(%var_5615, dtype="uint32") /* ty=Tensor[(336), uint32] */;
    %1044 = reshape(%1043, newshape=[336]) /* ty=Tensor[(336), uint32] */;
    %1045 = @func_1738(%1044) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) */;
    %1046 = %1042.4;
    %1047 = @func_1498() /* ty=Tensor[(1470), uint32] */;
    %1048 = %1045.5;
    (%1046, %1047, %1048, %var_5615)
  };
  %1049(%var_5626) /* ty=(Tensor[(400), float32], Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(336), uint32]) */
}

def @func_2505() -> Tensor[(7, 15, 14), uint32] {
  %1051 = fn () -> Tensor[(7, 15, 14), uint32] {
    %1050 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
    %1050.0
  };
  %1051() /* ty=Tensor[(7, 15, 14), uint32] */
}

def @func_10766() -> (Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) {
  %1056 = fn () -> (Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) {
    %1052 = @func_2815() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %1053 = @func_8198() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */;
    %1054 = %1052.0;
    %1055 = %1053.2;
    (%1054, %1055)
  };
  %1056() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(1470), uint32]) */
}

def @func_1741(%var_1739: Tensor[(336), uint32]) -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) {
  @func_1738(%var_1739) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) */
}

def @func_10869(%var_10864: Tensor[(12, 5, 15), float32]) -> (Tensor[(12, 5, 15), uint8],) {
  %1057 = @func_7667() /* ty=(Tensor[(12, 5, 15), float32],) */;
  %1058 = %1057.0;
  %1059 = cast(%var_10864, dtype="uint8") /* ty=Tensor[(12, 5, 15), uint8] */;
  %1060 = shape_of(%1058, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1061 = cast(%1058, dtype="uint8") /* ty=Tensor[(12, 5, 15), uint8] */;
  %1062 = dyn.reshape(%1059, %1060, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1063 = logical_xor(%1061, %1062) /* ty=Tensor[(12, 5, 15), uint8] */;
  (%1063,)
}

def @func_5539(%var_5537: Tensor[(12, 5, 15), float32], %var_5538: Tensor[(1152), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32], Tensor[(12, 5, 15), float64]) {
  %1080 = fn (%var_5482: Tensor[(12, 5, 15), float32], %var_5509: Tensor[(1152), float32]) -> (Tensor[(12, 5, 15), float64], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32], Tensor[(12, 5, 15), float64]) {
    %1064 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %1065 = %1064.0;
    %1066 = cast(%var_5482, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
    %1067 = shape_of(%1065, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1068 = cast(%1065, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
    %1069 = dyn.reshape(%1066, %1067, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1070 = @func_1563() /* ty=(Tensor[(1470), uint32], Tensor[(1470), uint32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(12, 5, 15), float32]) */;
    %1071 = @func_4242() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %1072 = cast(%var_5509, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %1073 = reshape(%1072, newshape=[12, 16, 6]) /* ty=Tensor[(12, 16, 6), float32] */;
    %1074 = cast(%1065, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
    %1075 = minimum(%1068, %1069) /* ty=Tensor[(12, 5, 15), float64] */;
    %1076 = %1070.1;
    %1077 = %1071.0;
    %1078 = @func_3325(%1073) /* ty=Tensor[(12, 16, 6), float32] */;
    %1079 = tan(%1074) /* ty=Tensor[(12, 5, 15), float64] */;
    (%1075, %1076, %1077, %1078, %var_5509, %1079)
  };
  %1080(%var_5537, %var_5538) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(1470), uint32], Tensor[(12, 5, 15), float32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32], Tensor[(12, 5, 15), float64]) */
}

def @func_5927() -> (Tensor[(4, 8, ?), bool], Tensor[(1470), uint32], bool) {
  %1092 = fn () -> (Tensor[(4, 8, ?), bool], Tensor[(1470), uint32], bool) {
    %1081 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 8, 1), float32] */, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
    %1082 = exp(%1081) /* ty=Tensor[(4, 8, 1), float32] */;
    %1083 = cast(%1082, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
    %1084 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(4, 8, 1), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1085 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 8, 1), float32] */, dtype="bool") /* ty=Tensor[(4, 8, 1), bool] */;
    %1086 = dyn.reshape(%1083, %1084, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1087 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %1088 = reshape(%1087, newshape=[]) /* ty=bool */;
    %1089 = @func_2832(%1088) /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), bool]) */;
    %1090 = greater(%1085, %1086) /* ty=Tensor[(4, 8, ?), bool] */;
    %1091 = %1089.0;
    (%1090, %1091, False /* ty=bool */)
  };
  %1092() /* ty=(Tensor[(4, 8, ?), bool], Tensor[(1470), uint32], bool) */
}

def @func_10959(%var_10923: Tensor[(1152), float32], %var_10942: Tensor[(1050), float64]) -> (Tensor[(12, 5, 15), float32], Tensor[(15, 7, 10), float64], Tensor[(7, 15, 14), uint32], Tensor[(12, 16, 6), float32], Tensor[(1152), float32], Tensor[(15, 7, 10), float64], Tensor[(1050), bool], Tensor[(12, 5, 15), float32]) {
  %1093 = cast(meta[relay.Constant][45] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %1094 = reshape(%1093, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %1095 = @func_480(%1094) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %1096 = @func_5960() /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %1097 = cast(%var_10923, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1098 = reshape(%1097, newshape=[12, 16, 6]) /* ty=Tensor[(12, 16, 6), float32] */;
  %1099 = %1095.0;
  %1100 = cast(%1099, dtype="float64") /* ty=Tensor[(15, 7, 10), float64] */;
  %1101 = reshape(%1100, newshape=[15, 7, 10]) /* ty=Tensor[(15, 7, 10), float64] */;
  %1102 = @func_480(%1101) /* ty=(Tensor[(15, 7, 10), float64],) */;
  %1103 = cast(%var_10942, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %1104 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(1050), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1105 = cast(meta[relay.Constant][45] /* ty=Tensor[(1050), float64] */, dtype="bool") /* ty=Tensor[(1050), bool] */;
  %1106 = dyn.reshape(%1103, %1104, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1107 = @func_2261() /* ty=Tensor[(12, 5, 15), float32] */;
  %1108 = %1096.0;
  %1109 = @func_3325(%1098) /* ty=Tensor[(12, 16, 6), float32] */;
  %1110 = %1102.0;
  %1111 = greater_equal(%1105, %1106) /* ty=Tensor[(1050), bool] */;
  %1112 = @func_8613() /* ty=Tensor[(12, 5, 15), float32] */;
  (%1107, %1099, %1108, %1109, %var_10923, %1110, %1111, %1112)
}

def @func_10018() -> (Tensor[(7, 15, 14), float32],) {
  @func_10016() /* ty=(Tensor[(7, 15, 14), float32],) */
}

def @func_6610(%var_6594: Tensor[(15, 1, 14), uint16], %var_6603: Tensor[(1144), bool], %var_6604: Tensor[(36), float32]) -> (Tensor[(15, 1, 14), uint16], Tensor[(10, 6, 6), float32], Tensor[(1144), bool], Tensor[(36), float32], Tensor[(2, 180), float32]) {
  %1113 = cast(meta[relay.Constant][46] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %1114 = cast(%var_6594, dtype="uint16") /* ty=Tensor[(15, 1, 14), uint16] */;
  %1115 = cast(%var_6603, dtype="bool") /* ty=Tensor[(1144), bool] */;
  %1116 = cast(%var_6604, dtype="float32") /* ty=Tensor[(36), float32] */;
  %1117 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 180), float32] */, dtype="float32") /* ty=Tensor[(2, 180), float32] */;
  %1118 = cast(%var_6603, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %1119 = reshape(%1115, newshape=[1144]) /* ty=Tensor[(1144), bool] */;
  %1120 = reshape(%1116, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
  %1121 = reshape(%1117, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %1122 = reshape(%1118, newshape=[1144]) /* ty=Tensor[(1144), float64] */;
  %1123 = @func_6260(%1119, %1120, %1121, %1122) /* ty=(Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(1470), uint32], Tensor[(10, 6, 6), float32], Tensor[(3, 12), float32], Tensor[(360), float32], Tensor[(1470), uint32], Tensor[(1144), bool], Tensor[(13, 15, 2), float64], Tensor[(65, 6), float64]) */;
  %1124 = bitwise_and(%1113, %1114) /* ty=Tensor[(15, 1, 14), uint16] */;
  %1125 = %1123.3;
  (%1124, %1125, %var_6603, %var_6604, meta[relay.Constant][47] /* ty=Tensor[(2, 180), float32] */)
}

def @func_4420() -> (Tensor[(6, 14, 6), float32],) {
  %1128 = fn () -> (Tensor[(6, 14, 6), float32],) {
    %1126 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 14, 6), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 6), float32] */;
    %1127 = sinh(%1126) /* ty=Tensor[(6, 14, 6), float32] */;
    (%1127,)
  };
  %1128() /* ty=(Tensor[(6, 14, 6), float32],) */
}

def @func_6441() -> (Tensor[(12, 5, 15), float32],) {
  %1131 = fn () -> (Tensor[(12, 5, 15), float32],) {
    %1129 = @func_3678() /* ty=(Tensor[(12, 5, 15), float32],) */;
    %1130 = %1129.0;
    (%1130,)
  };
  %1131() /* ty=(Tensor[(12, 5, 15), float32],) */
}

def @func_2329(%var_2326: Tensor[(1470), uint32]) -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  %1132 = @func_1808() /* ty=(Tensor[(7, 15, 14), uint32], Tensor[(12, 5, 15), float32]) */;
  %1133 = cast(%var_2326, dtype="uint32") /* ty=Tensor[(1470), uint32] */;
  %1134 = reshape(%1133, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), uint32] */;
  %1135 = @func_54(%1134) /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %1136 = %1132.1;
  %1137 = %1135.0;
  (%1136, %1137, %var_2326)
}

def @func_7326() -> (Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(11, 16, 6), int32], Tensor[(1056), int32]) {
  @func_7324() /* ty=(Tensor[(1470), uint32], Tensor[(336), uint32], Tensor[(11, 16, 6), int32], Tensor[(1056), int32]) */
}

def @func_8251() -> Tensor[(15, 7, 10), float64] {
  @func_8249() /* ty=Tensor[(15, 7, 10), float64] */
}

def @func_8523() -> (Tensor[(1470), uint32], Tensor[(1470), float64], Tensor[(12, 5, 15), float32]) {
  @func_8521() /* ty=(Tensor[(1470), uint32], Tensor[(1470), float64], Tensor[(12, 5, 15), float32]) */
}

def @func_4277(%var_4275: Tensor[(48), float32]) -> (Tensor[(336), uint32], float32, Tensor[(48), float32]) {
  @func_4274(%var_4275) /* ty=(Tensor[(336), uint32], float32, Tensor[(48), float32]) */
}

def @func_2716(%var_2714: Tensor[(1144), bool], %var_2715: Tensor[(1144), float64]) -> (Tensor[(7, 15, 14), int8], Tensor[(336), uint32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), int8]) {
  @func_2712(%var_2714, %var_2715) /* ty=(Tensor[(7, 15, 14), int8], Tensor[(336), uint32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), int8]) */
}

def @func_4526() -> Tensor[(1470), uint32] {
  @func_1498() /* ty=Tensor[(1470), uint32] */
}

def @func_2479() -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) {
  @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */
}

def @func_1465() -> (Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) {
  @func_1463() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), uint32], Tensor[(1470), uint32]) */
}

def @func_4708() -> (Tensor[(336), uint32], Tensor[(9, 4), float32], Tensor[(144), float64], Tensor[(1050), float64], Tensor[(400), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) {
  %1138 = @func_4354() /* ty=(Tensor[(336), uint32],) */;
  %1139 = cast(meta[relay.Constant][49] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %1140 = cast(meta[relay.Constant][49] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %1141 = cast(meta[relay.Constant][50] /* ty=Tensor[(1050), float64] */, dtype="float64") /* ty=Tensor[(1050), float64] */;
  %1142 = cast(meta[relay.Constant][51] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
  %1143 = cast(meta[relay.Constant][52] /* ty=Tensor[(360), float32] */, dtype="float32") /* ty=Tensor[(360), float32] */;
  %1144 = reshape(%1139, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
  %1145 = reshape(%1140, newshape=[2, 8, 9]) /* ty=Tensor[(2, 8, 9), float64] */;
  %1146 = reshape(%1141, newshape=[1050]) /* ty=Tensor[(1050), float64] */;
  %1147 = reshape(%1142, newshape=[400]) /* ty=Tensor[(400), float32] */;
  %1148 = reshape(%1143, newshape=[360]) /* ty=Tensor[(360), float32] */;
  %1149 = @func_1372(%1144, %1145, %1146, %1147, %1148) /* ty=(Tensor[(2, 8, 9), bool], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(3, 16, 7), bool], Tensor[(336), uint32], Tensor[(2, 8, 9), float32], Tensor[(10, 6, 6), float32], Tensor[(9, 4), float32], Tensor[(360), float32], Tensor[(3, 16, 7), float64]) */;
  %1150 = %1138.0;
  %1151 = cast(%1150, dtype="uint32") /* ty=Tensor[(336), uint32] */;
  %1152 = reshape(%1151, newshape=[336]) /* ty=Tensor[(336), uint32] */;
  %1153 = @func_1738(%1152) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), float32], Tensor[(7, 15, 14), float64], Tensor[(7, 15, 14), float32], Tensor[(3, 16, 7), float64], Tensor[(336), uint32], Tensor[(15, 7, 10), float64], Tensor[(1050), float64], Tensor[(3, 16, 7), float64]) */;
  %1154 = %1149.9;
  %1155 = %1153.8;
  (%1150, %1154, meta[relay.Constant][49] /* ty=Tensor[(144), float64] */, meta[relay.Constant][50] /* ty=Tensor[(1050), float64] */, meta[relay.Constant][51] /* ty=Tensor[(400), float32] */, meta[relay.Constant][52] /* ty=Tensor[(360), float32] */, %1155)
}

def @func_297(%var_296: Tensor[(3, 1, 14), uint64]) -> (Tensor[(3, 2, 14), uint64], Tensor[(3, 1, 14), float32]) {
  %1161 = fn (%var_269: Tensor[(3, 1, 14), uint64]) -> (Tensor[(3, 2, 14), uint64], Tensor[(3, 1, 14), float32]) {
    %1156 = cast(%var_269, dtype="uint64") /* ty=Tensor[(3, 1, 14), uint64] */;
    %1157 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 2, 14), uint64] */, dtype="uint64") /* ty=Tensor[(3, 2, 14), uint64] */;
    %1158 = cast(%var_269, dtype="float32") /* ty=Tensor[(3, 1, 14), float32] */;
    %1159 = right_shift(%1156, %1157) /* ty=Tensor[(3, 2, 14), uint64] */;
    %1160 = sigmoid(%1158) /* ty=Tensor[(3, 1, 14), float32] */;
    (%1159, %1160)
  };
  %1161(%var_296) /* ty=(Tensor[(3, 2, 14), uint64], Tensor[(3, 1, 14), float32]) */
}

def @func_54(%var_50: Tensor[(7, 15, 14), uint32]) -> (Tensor[(7, 15, 14), uint32],) {
  %1162 = cast(meta[relay.Constant][54] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1163 = cast(%var_50, dtype="uint32") /* ty=Tensor[(7, 15, 14), uint32] */;
  %1164 = maximum(%1162, %1163) /* ty=Tensor[(7, 15, 14), uint32] */;
  (%1164,)
}

def @func_4332() -> (Tensor[(1470), uint32],) {
  @func_4330() /* ty=(Tensor[(1470), uint32],) */
}

def @func_8939() -> (Tensor[(7, 15, 14), uint32],) {
  %1165 = @func_5960() /* ty=(Tensor[(7, 15, 14), uint32],) */;
  %1166 = %1165.0;
  (%1166,)
}

def @func_4219(%var_4196: Tensor[(36), float32], %var_4197: Tensor[(360), float32]) -> (Tensor[(7, 15, 14), float64], Tensor[(10, 6, 6), float32], Tensor[(36), float32], Tensor[(360), float32], Tensor[(7, 15, 14), float64]) {
  %1167 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %1168 = cast(%var_4196, dtype="float32") /* ty=Tensor[(36), float32] */;
  %1169 = cast(%var_4197, dtype="float32") /* ty=Tensor[(360), float32] */;
  %1170 = reshape(%1168, newshape=[1, 6, 6]) /* ty=Tensor[(1, 6, 6), float32] */;
  %1171 = reshape(%1169, newshape=[10, 6, 6]) /* ty=Tensor[(10, 6, 6), float32] */;
  %1172 = @func_22(%1170, %1171) /* ty=(Tensor[(10, 6, 6), float32],) */;
  %1173 = @func_2477() /* ty=(Tensor[(12, 5, 15), float32], Tensor[(7, 15, 14), int8], Tensor[(7, 15, 14), float64]) */;
  %1174 = %1167.2;
  %1175 = %1172.0;
  %1176 = %1173.2;
  (%1174, %1175, %var_4196, %var_4197, %1176)
}

def @func_2834(%var_2833: bool) -> (Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), bool]) {
  %1188 = fn (%var_2827: bool) -> (Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), bool]) {
    %1177 = cast(meta[relay.Constant][55] /* ty=Tensor[(400), float32] */, dtype="float32") /* ty=Tensor[(400), float32] */;
    %1178 = reshape(%1177, newshape=[4, 10, 10]) /* ty=Tensor[(4, 10, 10), float32] */;
    %1179 = @func_846(%1178) /* ty=(Tensor[(4, 10, 10), float32],) */;
    %1180 = cast(%var_2827, dtype="bool") /* ty=bool */;
    %1181 = cast(meta[relay.Constant][56] /* ty=Tensor[(1144), bool] */, dtype="bool") /* ty=Tensor[(1144), bool] */;
    %1182 = reshape(%1180, newshape=[]) /* ty=bool */;
    %1183 = reshape(%1181, newshape=[8, 13, 11]) /* ty=Tensor[(8, 13, 11), bool] */;
    %1184 = @func_2042(%1182, %1183) /* ty=(Tensor[(8, 13, 11), bool],) */;
    %1185 = @func_1498() /* ty=Tensor[(1470), uint32] */;
    %1186 = %1179.0;
    %1187 = %1184.0;
    (%1185, %1186, meta[relay.Constant][55] /* ty=Tensor[(400), float32] */, %1187, %var_2827, meta[relay.Constant][56] /* ty=Tensor[(1144), bool] */)
  };
  %1188(%var_2833) /* ty=(Tensor[(1470), uint32], Tensor[(4, 10, 10), float32], Tensor[(400), float32], Tensor[(8, 13, 11), bool], bool, Tensor[(1144), bool]) */
}

def @func_26(%var_24: Tensor[(1, 6, 6), float32], %var_25: Tensor[(10, 6, 6), float32]) -> (Tensor[(10, 6, 6), float32],) {
  @func_22(%var_24, %var_25) /* ty=(Tensor[(10, 6, 6), float32],) */
}

def @func_8128(%var_8126: Tensor[(48), float32]) -> (Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(48), float32]) {
  @func_8125(%var_8126) /* ty=(Tensor[(12, 5, 15), float32], Tensor[(336), uint32], Tensor[(48), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen669/build/output.py:3275: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen669/build/output.py", line 3280, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(78) tvmgen_default_fused_asinh_log2_kernel0(float* __restrict__ T_log2, float* __restrict__ placeholder) {
  T_log2[(((int)threadIdx.x))] = __log2f(asinhf(placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

