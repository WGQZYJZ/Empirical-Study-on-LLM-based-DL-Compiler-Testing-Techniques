==========mod==========
#[version = "0.0.5"]
def @func_1644(%var_1605: Tensor[(3, 360), float64], %var_1622: Tensor[(3, 360), float32], %var_1640: Tensor[(3, 360), float32]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(3, 360), float32], Tensor[(3, 360), float64], Tensor[(3, 360), float32]) {
  %0 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %1 = cast(%var_1605, dtype="float64") /* ty=Tensor[(3, 360), float64] */;
  %2 = reshape(%1, newshape=[10, 12, 9]) /* ty=Tensor[(10, 12, 9), float64] */;
  %3 = @func_1325(%2) /* ty=(Tensor[(10, 12, 9), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(2160), float64]) */;
  %4 = cast(%var_1605, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %5 = rsqrt(%4) /* ty=Tensor[(3, 360), float32] */;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %7 = sin(%6) /* ty=Tensor[(3, 360), float32] */;
  %8 = cast(%var_1622, dtype="bool") /* ty=Tensor[(3, 360), bool] */;
  %9 = shape_of(%5, dtype="int32") /* ty=Tensor[(2), int32] */;
  %10 = cast(%5, dtype="bool") /* ty=Tensor[(3, 360), bool] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %12 = not_equal(%10, %11) /* ty=Tensor[(3, 360), bool] */;
  %13 = cast(%12, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %14 = shape_of(%7, dtype="int32") /* ty=Tensor[(2), int32] */;
  %15 = cast(%7, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %17 = cast(%7, dtype="float64") /* ty=Tensor[(3, 360), float64] */;
  %18 = shape_of(%5, dtype="int32") /* ty=Tensor[(2), int32] */;
  %19 = cast(%5, dtype="float64") /* ty=Tensor[(3, 360), float64] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %21 = cast(%var_1640, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %22 = shape_of(%7, dtype="int32") /* ty=Tensor[(2), int32] */;
  %23 = cast(%7, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %25 = @func_1204() /* ty=Tensor[(182), int64] */;
  %26 = %0.1;
  %27 = %3.1;
  %28 = @func_1283() /* ty=Tensor[(182), int64] */;
  %29 = power(%15, %16) /* ty=Tensor[(3, 360), float32] */;
  %30 = floor_mod(%19, %20) /* ty=Tensor[(3, 360), float64] */;
  %31 = mod(%23, %24) /* ty=Tensor[(3, 360), float32] */;
  (%25, %26, %27, %28, %29, %30, %31)
}

def @func_2389(%var_2350: Tensor[(1, 624), float64], %var_2364: Tensor[(4, 624), float64]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(4, 624), int32]) {
  %32 = cast(%var_2350, dtype="float64") /* ty=Tensor[(1, 624), float64] */;
  %33 = reshape(%32, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %34 = @func_1381(%33) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %35 = @func_2210() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %36 = cast(%var_2350, dtype="int32") /* ty=Tensor[(1, 624), int32] */;
  %37 = cast(%var_2364, dtype="int32") /* ty=Tensor[(4, 624), int32] */;
  %38 = @func_1204() /* ty=Tensor[(182), int64] */;
  %39 = %34.1;
  %40 = %35.0;
  %41 = bitwise_and(%36, %37) /* ty=Tensor[(4, 624), int32] */;
  (%38, %39, %40, %41)
}

def @func_1497() -> (Tensor[(182), int64],) {
  %42 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %43 = %42.1;
  (%43,)
}

def @func_2690(%var_2679: Tensor[(10, 16, 6), float64], %var_2680: Tensor[(10, 16, 6), float64]) -> (Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) {
  %44 = cast(%var_2680, dtype="float64") /* ty=Tensor[(10, 16, 6), float64] */;
  %45 = shape_of(%var_2679, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_2679, dtype="float64") /* ty=Tensor[(10, 16, 6), float64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %48 = power(%46, %47) /* ty=Tensor[(10, 16, 6), float64] */;
  %49 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
  (%48, %49)
}

def @func_6048() -> (Tensor[(1, 2, 2), float64], Tensor[(182), int64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64]) {
  %50 = @func_5688() /* ty=(Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(1, 2, 2), float64]) */;
  %51 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %52 = cast(meta[relay.Constant][0] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %53 = cast(meta[relay.Constant][0] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %54 = reshape(%52, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %55 = reshape(%53, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %56 = @func_2690(%54, %55) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
  %57 = @func_5892() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) */;
  %58 = %50.2;
  %59 = %51.0;
  %60 = %56.0;
  %61 = %57.1;
  (%58, %59, %60, meta[relay.Constant][0] /* ty=Tensor[(960), float64] */, %61)
}

def @func_7210() -> Tensor[(182), int64] {
  %62 = @func_5523() /* ty=(Tensor[(624), float64], Tensor[(182), int64]) */;
  %62.1
}

def @func_5833() -> (Tensor[(10, 14, 9), float64],) {
  %63 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
  (%63,)
}

def @func_1751() -> Tensor[(10, 14, 9), float64] {
  %64 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %64.0
}

def @func_9687() -> (Tensor[(15, 3, ?), bool],) {
  %65 = @func_9448() /* ty=(Tensor[(15, 3, ?), bool], Tensor[(1, 2, 2), float64]) */;
  %66 = %65.0;
  (%66,)
}

def @func_2468(%var_2454: Tensor[(2496), float64]) -> (Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(2496), float64]) {
  %67 = @func_1736() /* ty=Tensor[(624), float64] */;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(624), float64] */;
  %69 = cast(%var_2454, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %70 = reshape(%68, newshape=[1, 624]) /* ty=Tensor[(1, 624), float64] */;
  %71 = reshape(%69, newshape=[4, 624]) /* ty=Tensor[(4, 624), float64] */;
  %72 = @func_2389(%70, %71) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(4, 624), int32]) */;
  %73 = @func_1851() /* ty=Tensor[(182), int64] */;
  %74 = %72.2;
  (%67, %73, %74, %var_2454)
}

def @func_135(%var_119: Tensor[(13, 2, 7), int64]) -> (Tensor[(13, 2, 7), int64],) {
  %75 = cast(%var_119, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
  %76 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(13, 2, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 2, 7), int64] */, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %79 = maximum(%77, %78) /* ty=Tensor[(13, 2, 7), int64] */;
  (%79,)
}

def @func_5995(%var_5975: bool) -> (Tensor[(624), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) {
  %80 = cast(%var_5975, dtype="bool") /* ty=bool */;
  %81 = cast(meta[relay.Constant][2] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %83 = reshape(%80, newshape=[]) /* ty=bool */;
  %84 = reshape(%81, newshape=[440]) /* ty=Tensor[(440), bool] */;
  %85 = reshape(%82, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %86 = @func_4867(%83, %84, %85) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %87 = @func_1736() /* ty=Tensor[(624), float64] */;
  %88 = %86.7;
  (%87, %88, %var_5975, meta[relay.Constant][2] /* ty=Tensor[(440), bool] */, meta[relay.Constant][3] /* ty=Tensor[(540), float64] */)
}

def @func_6802(%var_6770: float32) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) {
  %89 = @func_5748() /* ty=(Tensor[(182), int64],) */;
  %90 = @func_4951() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */;
  %91 = cast(%var_6770, dtype="float32") /* ty=float32 */;
  %92 = %89.0;
  %93 = cast(%92, dtype="int64") /* ty=Tensor[(182), int64] */;
  %94 = reshape(%91, newshape=[]) /* ty=float32 */;
  %95 = reshape(%93, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %96 = @func_3056(%94, %95) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
  %97 = @func_6322() /* ty=Tensor[(182), int64] */;
  %98 = %90.0;
  %99 = %96.1;
  (%97, %92, %98, %99, %var_6770)
}

def @func_4633(%var_4600: Tensor[(11, 12, 3), uint32], %var_4608: Tensor[(624), float64]) -> (Tensor[(11, 12, 3), uint32], Tensor[(182), int64], Tensor[(624), float64], Tensor[(2496), float64], Tensor[(11, 12, 3), float32]) {
  %100 = cast(meta[relay.Constant][4] /* ty=Tensor[(11, 12, 3), uint32] */, dtype="uint32") /* ty=Tensor[(11, 12, 3), uint32] */;
  %101 = shape_of(%var_4600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_4600, dtype="uint32") /* ty=Tensor[(11, 12, 3), uint32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %104 = cast(%var_4608, dtype="float64") /* ty=Tensor[(624), float64] */;
  %105 = cast(meta[relay.Constant][5] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %106 = reshape(%104, newshape=[1, 624]) /* ty=Tensor[(1, 624), float64] */;
  %107 = reshape(%105, newshape=[4, 624]) /* ty=Tensor[(4, 624), float64] */;
  %108 = @func_2389(%106, %107) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(4, 624), int32]) */;
  %109 = cast(%var_4600, dtype="float32") /* ty=Tensor[(11, 12, 3), float32] */;
  %110 = bitwise_xor(%102, %103) /* ty=Tensor[(11, 12, 3), uint32] */;
  %111 = %108.1;
  %112 = exp(%109) /* ty=Tensor[(11, 12, 3), float32] */;
  (%110, %111, %var_4608, meta[relay.Constant][5] /* ty=Tensor[(2496), float64] */, %112)
}

def @func_4906() -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  %113 = @func_3797() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %114 = %113.0;
  %115 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
  (%114, %115)
}

def @func_10838() -> (Tensor[(624), float64],) {
  %116 = @func_1736() /* ty=Tensor[(624), float64] */;
  (%116,)
}

def @func_6223() -> Tensor[(182), int64] {
  %117 = @func_5609() /* ty=(Tensor[(182), int64],) */;
  %117.0
}

def @func_4572() -> (Tensor[(10, 14, 9), float64],) {
  %118 = @func_4307() /* ty=Tensor[(10, 14, 9), float64] */;
  (%118,)
}

def @func_10412() -> (Tensor[(182), int64],) {
  %119 = @func_6322() /* ty=Tensor[(182), int64] */;
  (%119,)
}

def @func_10222() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %120 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %121 = @func_3272() /* ty=Tensor[(182), int64] */;
  %122 = %120.0;
  (%121, %122)
}

def @func_7895() -> (Tensor[(1, 2, 2), float64],) {
  %123 = @func_6347() /* ty=(Tensor[(1, 2, 2), float64],) */;
  %124 = %123.0;
  (%124,)
}

def @func_10617() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %125 = @func_10412() /* ty=(Tensor[(182), int64],) */;
  %126 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %127 = %125.0;
  %128 = %126.0;
  (%127, %128)
}

def @func_3056(%var_3051: float32, %var_3053: Tensor[(182), int64]) -> (Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) {
  %129 = @func_2864() /* ty=Tensor[(10, 14, 9), float64] */;
  %130 = cast(%129, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %131 = cast(%var_3051, dtype="float32") /* ty=float32 */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %133 = cast(%var_3053, dtype="int64") /* ty=Tensor[(182), int64] */;
  %134 = reshape(%131, newshape=[]) /* ty=float32 */;
  %135 = reshape(%132, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %136 = reshape(%133, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %137 = @func_684(%134, %135, %136) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) */;
  %138 = tan(%130) /* ty=Tensor[(10, 14, 9), float64] */;
  %139 = %137.1;
  (%138, %139, %var_3051, meta[relay.Constant][6] /* ty=Tensor[(648), float32] */, %var_3053)
}

def @func_9566() -> Tensor[(182), int64] {
  @func_1204() /* ty=Tensor[(182), int64] */
}

def @func_9258() -> (Tensor[(182), int64],) {
  %140 = @func_6246() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %141 = %140.0;
  (%141,)
}

def @func_7344() -> (Tensor[(624), float64],) {
  %142 = @func_1736() /* ty=Tensor[(624), float64] */;
  (%142,)
}

def @func_3487(%var_3465: int32, %var_3466: Tensor[(9, 1, 1), int32], %var_3479: Tensor[(1080), float64]) -> (Tensor[(10, 14, 9), bool], Tensor[(1080), float64], Tensor[(9, 1, 1), float32]) {
  %143 = cast(%var_3479, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %144 = reshape(%143, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %145 = @func_1963(%144) /* ty=(Tensor[(182), int64], Tensor[(624), float64], Tensor[(10, 14, 9), bool], Tensor[(182), int64], Tensor[(1080), float64], Tensor[(182), int64]) */;
  %146 = cast(%var_3465, dtype="bool") /* ty=bool */;
  %147 = cast(%var_3466, dtype="bool") /* ty=Tensor[(9, 1, 1), bool] */;
  %148 = equal(%146, %147) /* ty=Tensor[(9, 1, 1), bool] */;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(9, 1, 1), float32] */;
  %150 = cast(%var_3465, dtype="float32") /* ty=float32 */;
  %151 = %145.2;
  %152 = maximum(%149, %150) /* ty=Tensor[(9, 1, 1), float32] */;
  (%151, %var_3479, %152)
}

def @func_4266() -> (Tensor[(182), int64],) {
  %153 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %154 = %153.1;
  (%154,)
}

def @func_8048() -> Tensor[(182), int64] {
  @func_6223() /* ty=Tensor[(182), int64] */
}

def @func_6443() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %155 = @func_4410() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %156 = @func_5590() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %157 = %155.1;
  %158 = %156.0;
  (%157, %158)
}

def @func_5892() -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) {
  %159 = @func_5117() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %160 = %159.2;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %162 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %163 = @func_4410() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %164 = @func_5590() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %165 = cast(0.870233f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %166 = reshape(%165, newshape=[]) /* ty=float32 */;
  %167 = @func_3771(%166) /* ty=(Tensor[(624), float64], Tensor[(624), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) */;
  %168 = asinh(%161) /* ty=Tensor[(10, 14, 9), float64] */;
  %169 = %162.0;
  %170 = %163.1;
  %171 = %164.0;
  %172 = %167.2;
  (%168, %169, %170, %171, %172, 0.870233f /* ty=float32 */)
}

def @func_5000() -> Tensor[(182), int64] {
  @func_2331() /* ty=Tensor[(182), int64] */
}

def @func_7324() -> (Tensor[(10, 14, 9), float32],) {
  %173 = @func_6414() /* ty=Tensor[(10, 14, 9), float64] */;
  %174 = cast(%173, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %175 = rsqrt(%174) /* ty=Tensor[(10, 14, 9), float32] */;
  (%175,)
}

def @func_3272() -> Tensor[(182), int64] {
  @func_1851() /* ty=Tensor[(182), int64] */
}

def @func_6647() -> (Tensor[(182), int64],) {
  %176 = @func_1851() /* ty=Tensor[(182), int64] */;
  (%176,)
}

def @func_7139() -> Tensor[(182), int64] {
  @func_1204() /* ty=Tensor[(182), int64] */
}

def @func_2907() -> (Tensor[(10, 14, 9), float64],) {
  %177 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
  (%177,)
}

def @func_10499(%var_10492: Tensor[(240), float32]) -> (Tensor[(8, 3, 10), bool], Tensor[(240), float32], Tensor[(10, 2, 2), bool]) {
  %178 = cast(%var_10492, dtype="float32") /* ty=Tensor[(240), float32] */;
  %179 = reshape(%178, newshape=[8, 3, 10]) /* ty=Tensor[(8, 3, 10), float32] */;
  %180 = @func_4895(%179) /* ty=(Tensor[(8, 3, 10), bool], Tensor[(10, 14, 9), float64]) */;
  %181 = @func_10127() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="int32") /* ty=Tensor[(1, 2, 2), int32] */;
  %184 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 2, 2), float64] */, dtype="int32") /* ty=Tensor[(10, 2, 2), int32] */;
  %185 = add(%183, %184) /* ty=Tensor[(10, 2, 2), int32] */;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(10, 2, 2), float64] */;
  %187 = sigmoid(%186) /* ty=Tensor[(10, 2, 2), float64] */;
  %188 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 2, 2), float64] */, dtype="bool") /* ty=Tensor[(10, 2, 2), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(10, 2, 2), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = %180.0;
  %193 = not_equal(%190, %191) /* ty=Tensor[(10, 2, 2), bool] */;
  (%192, %var_10492, %193)
}

def @func_10005(%var_10003: Tensor[(960), float64]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(960), float64]) {
  %194 = cast(%var_10003, dtype="float64") /* ty=Tensor[(960), float64] */;
  %195 = reshape(%194, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %196 = @func_4515(%195) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %197 = @func_5395() /* ty=Tensor[(182), int64] */;
  %198 = %196.0;
  (%197, %198, %var_10003)
}

def @func_2505(%var_2490: Tensor[(1080), float64], %var_2493: float32) -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 12, 9), float64], Tensor[(1080), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) {
  %199 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %200 = cast(%var_2490, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %201 = reshape(%200, newshape=[10, 12, 9]) /* ty=Tensor[(10, 12, 9), float64] */;
  %202 = @func_1325(%201) /* ty=(Tensor[(10, 12, 9), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(2160), float64]) */;
  %203 = cast(%var_2493, dtype="float32") /* ty=float32 */;
  %204 = cast(meta[relay.Constant][8] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
  %205 = %199.0;
  %206 = cast(%205, dtype="int64") /* ty=Tensor[(182), int64] */;
  %207 = reshape(%203, newshape=[]) /* ty=float32 */;
  %208 = reshape(%204, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %209 = reshape(%206, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %210 = @func_684(%207, %208, %209) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) */;
  %211 = @func_2293() /* ty=(Tensor[(182), int64],) */;
  %212 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
  %213 = %202.0;
  %214 = %210.1;
  %215 = %211.0;
  (%205, %212, %213, %var_2490, %214, %var_2493, meta[relay.Constant][8] /* ty=Tensor[(648), float32] */, %215)
}

def @func_4283(%var_4272: Tensor[(15, 15, 5), float32], %var_4273: Tensor[(15, 15, 5), float32]) -> (Tensor[(15, 15, 5), float64],) {
  %216 = cast(%var_4273, dtype="float32") /* ty=Tensor[(15, 15, 5), float32] */;
  %217 = shape_of(%var_4272, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%var_4272, dtype="float32") /* ty=Tensor[(15, 15, 5), float32] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %220 = mod(%218, %219) /* ty=Tensor[(15, 15, 5), float32] */;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(15, 15, 5), float64] */;
  %222 = cosh(%221) /* ty=Tensor[(15, 15, 5), float64] */;
  (%222,)
}

def @func_8430(%var_8394: float32) -> (Tensor[(182), int64], Tensor[(1080), float64], Tensor[(1080), float64], float32, Tensor[(182), int64]) {
  %223 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %224 = cast(meta[relay.Constant][9] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %225 = cast(%var_8394, dtype="float32") /* ty=float32 */;
  %226 = reshape(%224, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %227 = reshape(%225, newshape=[]) /* ty=float32 */;
  %228 = @func_2505(%226, %227) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 12, 9), float64], Tensor[(1080), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
  %229 = @func_7635() /* ty=(Tensor[(182), int64],) */;
  %230 = %223.0;
  %231 = %228.3;
  %232 = %229.0;
  (%230, %231, meta[relay.Constant][9] /* ty=Tensor[(1080), float64] */, %var_8394, %232)
}

def @func_1283() -> Tensor[(182), int64] {
  %233 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %233.0
}

def @func_6214() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) {
  %234 = @func_2562() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %235 = @func_2293() /* ty=(Tensor[(182), int64],) */;
  %236 = %234.1;
  %237 = %235.0;
  %238 = @func_1283() /* ty=Tensor[(182), int64] */;
  (%236, %237, %238)
}

def @func_4109() -> (Tensor[(182), int64],) {
  %239 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %240 = %239.0;
  (%240,)
}

def @func_2562() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) {
  %241 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %242 = cast(meta[relay.Constant][10] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %243 = reshape(%242, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %244 = @func_1381(%243) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %245 = %241.0;
  %246 = %244.1;
  (%245, %246, meta[relay.Constant][10] /* ty=Tensor[(624), float64] */)
}

def @func_7437() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  %247 = @func_6246() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %248 = @func_4479() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %249 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %250 = %249.0;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %252 = %247.0;
  %253 = %248.0;
  %254 = log(%251) /* ty=Tensor[(10, 14, 9), float64] */;
  (%252, %253, %254)
}

def @func_10333() -> Tensor[(10, 14, 9), float64] {
  @func_1751() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_10390(%var_10368: bool) -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64], Tensor[(440), bool], bool, Tensor[(960), float64], Tensor[(182), int64]) {
  %255 = @func_5261() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(2496), float64], Tensor[(26, 96), float64]) */;
  %256 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %257 = cast(%var_10368, dtype="bool") /* ty=bool */;
  %258 = reshape(%257, newshape=[]) /* ty=bool */;
  %259 = @func_5995(%258) /* ty=(Tensor[(624), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) */;
  %260 = @func_6048() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(182), int64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64]) */;
  %261 = %255.0;
  %262 = %256.0;
  %263 = %259.3;
  %264 = %260.3;
  %265 = @func_7139() /* ty=Tensor[(182), int64] */;
  (%261, %262, %263, %var_10368, %264, %265)
}

def @func_3403(%var_3324: Tensor[(2160), float32], %var_3365: Tensor[(90), uint32], %var_3387: Tensor[(9, 2, 5), float64]) -> (Tensor[(2160), float32], Tensor[(13, 2, 7), float32], Tensor[(90), uint32], Tensor[(9, 2, 5), bool]) {
  %266 = cast(%var_3324, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %267 = cast(%var_3324, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
  %268 = reshape(%266, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %269 = reshape(%267, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
  %270 = @func_604(%268, %269) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
  %271 = %270.5;
  %272 = @func_2210() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %273 = %272.1;
  %274 = cast(%273, dtype="float32") /* ty=Tensor[(182), float32] */;
  %275 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%271, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %278 = cast(%var_3365, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %279 = cast(%var_3365, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %280 = cast(%var_3365, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %281 = reshape(%278, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), uint32] */;
  %282 = reshape(%279, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), uint32] */;
  %283 = reshape(%280, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), uint32] */;
  %284 = @func_2672(%281, %282, %283) /* ty=(Tensor[(9, 2, 5), int32], Tensor[(9, 2, 5), float64], Tensor[(9, 2, 5), float32], Tensor[(10, 14, 9), float64], Tensor[(9, 2, 5), float64]) */;
  %285 = %284.4;
  %286 = cast(%var_3387, dtype="bool") /* ty=Tensor[(9, 2, 5), bool] */;
  %287 = shape_of(%285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%285, dtype="bool") /* ty=Tensor[(9, 2, 5), bool] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %290 = multiply(%276, %277) /* ty=Tensor[(13, 2, 7), float32] */;
  %291 = less_equal(%288, %289) /* ty=Tensor[(9, 2, 5), bool] */;
  (%var_3324, %290, %var_3365, %291)
}

def @func_4515(%var_4500: Tensor[(960), float64]) -> (Tensor[(182), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) {
  %292 = @func_2034() /* ty=(Tensor[(182), int64],) */;
  %293 = cast(%var_4500, dtype="float64") /* ty=Tensor[(960), float64] */;
  %294 = cast(%var_4500, dtype="float64") /* ty=Tensor[(960), float64] */;
  %295 = reshape(%293, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %296 = reshape(%294, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %297 = @func_2690(%295, %296) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
  %298 = %292.0;
  %299 = %297.1;
  (%298, %299, %var_4500)
}

def @func_6414() -> Tensor[(10, 14, 9), float64] {
  @func_4307() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_3907(%var_3826: Tensor[(1080), float64], %var_3827: float32, %var_3871: Tensor[(2160), float32], %var_3894: Tensor[(624, 1), float64]) -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(1080), uint16], Tensor[(90), uint32], Tensor[(2160), float32], Tensor[(90), uint32], Tensor[(182), int64], Tensor[(182), int64], Tensor[(624, 1), float64]) {
  %300 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %301 = cast(%var_3826, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %302 = cast(%var_3827, dtype="float32") /* ty=float32 */;
  %303 = reshape(%301, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %304 = reshape(%302, newshape=[]) /* ty=float32 */;
  %305 = @func_2505(%303, %304) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 12, 9), float64], Tensor[(1080), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
  %306 = @func_2185() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %307 = cast(%var_3826, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %308 = cast(%var_3827, dtype="uint16") /* ty=uint16 */;
  %309 = cast(%var_3871, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %310 = cast(meta[relay.Constant][11] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %311 = cast(meta[relay.Constant][11] /* ty=Tensor[(90), uint32] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %312 = reshape(%309, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %313 = reshape(%310, newshape=[90]) /* ty=Tensor[(90), uint32] */;
  %314 = reshape(%311, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), float64] */;
  %315 = @func_3403(%312, %313, %314) /* ty=(Tensor[(2160), float32], Tensor[(13, 2, 7), float32], Tensor[(90), uint32], Tensor[(9, 2, 5), bool]) */;
  %316 = cast(%var_3894, dtype="float64") /* ty=Tensor[(624, 1), float64] */;
  %317 = reshape(%316, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %318 = @func_830(%317) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %319 = %300.0;
  %320 = %305.7;
  %321 = %306.1;
  %322 = right_shift(%307, %308) /* ty=Tensor[(1080), uint16] */;
  %323 = %315.2;
  %324 = @func_2331() /* ty=Tensor[(182), int64] */;
  %325 = %318.1;
  (%319, %320, %321, %322, %323, %var_3871, meta[relay.Constant][11] /* ty=Tensor[(90), uint32] */, %324, %325, %var_3894)
}

def @func_5748() -> (Tensor[(182), int64],) {
  %326 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %327 = %326.0;
  (%327,)
}

def @func_10785() -> Tensor[(15, 3, ?), bool] {
  %328 = @func_9687() /* ty=(Tensor[(15, 3, ?), bool],) */;
  %328.0
}

def @func_684(%var_664: float32, %var_665: Tensor[(9, 9, 8), float32], %var_682: Tensor[(182), int64]) -> (Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) {
  %329 = cast(%var_664, dtype="float32") /* ty=float32 */;
  %330 = cast(%var_665, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %331 = cast(%var_682, dtype="int64") /* ty=Tensor[(182), int64] */;
  %332 = reshape(%331, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
  %333 = @func_135(%332) /* ty=(Tensor[(13, 2, 7), int64],) */;
  %334 = divide(%329, %330) /* ty=Tensor[(9, 9, 8), float32] */;
  %335 = %333.0;
  (%334, %335, %var_682)
}

def @func_8747() -> Tensor[(13, 12, 1), float32] {
  %336 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 12, 1), float32] */;
  acos(%336) /* ty=Tensor[(13, 12, 1), float32] */
}

def @func_2104(%var_2088: Tensor[(6, 16, 14), int32]) -> (Tensor[(6, 16, 14), int32], Tensor[(10, 14, 9), float64]) {
  %337 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 16, 14), int32] */, dtype="int32") /* ty=Tensor[(6, 16, 14), int32] */;
  %338 = shape_of(%var_2088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_2088, dtype="int32") /* ty=Tensor[(6, 16, 14), int32] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %341 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %342 = multiply(%339, %340) /* ty=Tensor[(6, 16, 14), int32] */;
  %343 = %341.0;
  (%342, %343)
}

def @func_3208(%var_3195: Tensor[(2160), float32], %var_3200: Tensor[(1344), int32]) -> (Tensor[(624), float64], Tensor[(182), int64], Tensor[(2160), float32], Tensor[(6, 16, 14), int32], Tensor[(1344), int32]) {
  %344 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %345 = cast(%var_3195, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %346 = cast(%var_3195, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
  %347 = reshape(%345, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %348 = reshape(%346, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
  %349 = @func_604(%347, %348) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
  %350 = cast(%var_3200, dtype="int32") /* ty=Tensor[(1344), int32] */;
  %351 = reshape(%350, newshape=[6, 16, 14]) /* ty=Tensor[(6, 16, 14), int32] */;
  %352 = @func_2104(%351) /* ty=(Tensor[(6, 16, 14), int32], Tensor[(10, 14, 9), float64]) */;
  %353 = %344.2;
  %354 = %349.1;
  %355 = %352.0;
  (%353, %354, %var_3195, %355, %var_3200)
}

def @func_9448() -> (Tensor[(15, 3, ?), bool], Tensor[(1, 2, 2), float64]) {
  %356 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
  %357 = acosh(%356) /* ty=Tensor[(15, 3, 1), float64] */;
  %358 = cast(%357, dtype="bool") /* ty=Tensor[(15, 3, 1), bool] */;
  %359 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(15, 3, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %360 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 3, 1), float64] */, dtype="bool") /* ty=Tensor[(15, 3, 1), bool] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %362 = @func_6347() /* ty=(Tensor[(1, 2, 2), float64],) */;
  %363 = greater(%360, %361) /* ty=Tensor[(15, 3, ?), bool] */;
  %364 = %362.0;
  (%363, %364)
}

def @func_2743(%var_2705: uint64, %var_2722: Tensor[(6, 15, 9), bool]) -> (Tensor[(6, 15, 9), float64],) {
  %365 = cast(%var_2705, dtype="bool") /* ty=bool */;
  %366 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 15, 9), uint64] */, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %367 = less(%365, %366) /* ty=Tensor[(1, 15, 9), bool] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %369 = cast(%var_2722, dtype="float64") /* ty=Tensor[(6, 15, 9), float64] */;
  %370 = maximum(%368, %369) /* ty=Tensor[(6, 15, 9), float64] */;
  (%370,)
}

def @func_6926(%var_6914: Tensor[(1, 8, 3), float32]) -> (Tensor[(?, 8, 3), float32],) {
  %371 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 3), float32] */;
  %372 = acosh(%371) /* ty=Tensor[(1, 8, 3), float32] */;
  %373 = cast(%var_6914, dtype="float32") /* ty=Tensor[(1, 8, 3), float32] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="float32") /* ty=Tensor[(1, 8, 3), float32] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %377 = subtract(%375, %376) /* ty=Tensor[(?, 8, 3), float32] */;
  (%377,)
}

def @func_604(%var_542: Tensor[(15, 12, 12), float32], %var_579: Tensor[(15, 12, 12), uint64]) -> (Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) {
  %378 = cast(meta[relay.Constant][17] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
  %379 = reshape(%378, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
  %380 = @func_135(%379) /* ty=(Tensor[(13, 2, 7), int64],) */;
  %381 = cast(meta[relay.Constant][17] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
  %382 = reshape(%381, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %383 = @func_353(%382) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %384 = cast(%var_542, dtype="float32") /* ty=Tensor[(15, 12, 12), float32] */;
  %385 = asinh(%384) /* ty=Tensor[(15, 12, 12), float32] */;
  %386 = cast(%var_542, dtype="uint64") /* ty=Tensor[(15, 12, 12), uint64] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="uint64") /* ty=Tensor[(15, 12, 12), uint64] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %390 = multiply(%388, %389) /* ty=Tensor[(15, 12, 12), uint64] */;
  %391 = cast(%var_579, dtype="uint32") /* ty=Tensor[(15, 12, 12), uint32] */;
  %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%390, dtype="uint32") /* ty=Tensor[(15, 12, 12), uint32] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %395 = %380.0;
  %396 = cast(%395, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
  %397 = reshape(%396, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %398 = @func_353(%397) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %399 = %398.3;
  %400 = cast(%399, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
  %401 = reshape(%400, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
  %402 = @func_135(%401) /* ty=(Tensor[(13, 2, 7), int64],) */;
  %403 = %383.2;
  %404 = logical_xor(%393, %394) /* ty=Tensor[(15, 12, 12), uint32] */;
  %405 = %402.0;
  (%395, meta[relay.Constant][17] /* ty=Tensor[(182), int64] */, %403, %404, %399, %405)
}

def @func_4307() -> Tensor[(10, 14, 9), float64] {
  %406 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %406.0
}

def @func_9497(%var_9494: Tensor[(8, 4, 13), float32]) -> (Tensor[(8, 4, 13), float32],) {
  %407 = cast(%var_9494, dtype="float32") /* ty=Tensor[(8, 4, 13), float32] */;
  %408 = asin(%407) /* ty=Tensor[(8, 4, 13), float32] */;
  (%408,)
}

def @func_10015() -> (Tensor[(10, 14, 9), float64],) {
  %409 = @func_7650() /* ty=Tensor[(10, 14, 9), float64] */;
  (%409,)
}

def @func_6713() -> Tensor[(182), int64] {
  %410 = @func_5523() /* ty=(Tensor[(624), float64], Tensor[(182), int64]) */;
  %410.1
}

def @func_2331() -> Tensor[(182), int64] {
  @func_1851() /* ty=Tensor[(182), int64] */
}

def @func_1963(%var_1946: Tensor[(1080), float64]) -> (Tensor[(182), int64], Tensor[(624), float64], Tensor[(10, 14, 9), bool], Tensor[(182), int64], Tensor[(1080), float64], Tensor[(182), int64]) {
  %411 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %412 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %413 = cast(%var_1946, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %414 = cast(%var_1946, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %415 = cast(%var_1946, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %416 = reshape(%413, newshape=[3, 360]) /* ty=Tensor[(3, 360), float64] */;
  %417 = reshape(%414, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
  %418 = reshape(%415, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
  %419 = @func_1644(%416, %417, %418) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(3, 360), float32], Tensor[(3, 360), float64], Tensor[(3, 360), float32]) */;
  %420 = %412.2;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(624), float64] */;
  %422 = reshape(%421, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %423 = @func_1381(%422) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %424 = %411.0;
  %425 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
  %426 = %419.1;
  %427 = %423.0;
  (%424, %420, %425, %426, %var_1946, %427)
}

def @func_9977() -> Tensor[(182), int64] {
  @func_5395() /* ty=Tensor[(182), int64] */
}

def @func_4410() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %428 = @func_2034() /* ty=(Tensor[(182), int64],) */;
  %429 = %428.0;
  %430 = cast(%429, dtype="int64") /* ty=Tensor[(182), int64] */;
  %431 = reshape(%430, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %432 = @func_353(%431) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %433 = %432.2;
  (%429, %433)
}

def @func_1257(%var_1230: int64) -> (Tensor[(15, 11, 15), bool], Tensor[(1, 12, 4), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) {
  %434 = cast(%var_1230, dtype="bool") /* ty=bool */;
  %435 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 11, 15), int64] */, dtype="bool") /* ty=Tensor[(15, 11, 15), bool] */;
  %436 = cast(%var_1230, dtype="float64") /* ty=float64 */;
  %437 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 12, 4), int64] */, dtype="float64") /* ty=Tensor[(1, 12, 4), float64] */;
  %438 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %439 = %438.0;
  %440 = cast(%439, dtype="int64") /* ty=Tensor[(182), int64] */;
  %441 = reshape(%440, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
  %442 = @func_135(%441) /* ty=(Tensor[(13, 2, 7), int64],) */;
  %443 = cast(%439, dtype="int64") /* ty=Tensor[(182), int64] */;
  %444 = reshape(%443, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
  %445 = @func_135(%444) /* ty=(Tensor[(13, 2, 7), int64],) */;
  %446 = less(%434, %435) /* ty=Tensor[(15, 11, 15), bool] */;
  %447 = power(%436, %437) /* ty=Tensor[(1, 12, 4), float64] */;
  %448 = %442.0;
  %449 = %445.0;
  (%446, %447, %439, %448, %449)
}

def @func_2672(%var_2615: Tensor[(9, 2, 5), uint32], %var_2637: Tensor[(9, 2, 5), uint32], %var_2643: Tensor[(9, 2, 5), uint32]) -> (Tensor[(9, 2, 5), int32], Tensor[(9, 2, 5), float64], Tensor[(9, 2, 5), float32], Tensor[(10, 14, 9), float64], Tensor[(9, 2, 5), float64]) {
  %450 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 2, 1), uint32] */, dtype="uint32") /* ty=Tensor[(9, 2, 1), uint32] */;
  %451 = cast(%var_2615, dtype="uint32") /* ty=Tensor[(9, 2, 5), uint32] */;
  %452 = maximum(%450, %451) /* ty=Tensor[(9, 2, 5), uint32] */;
  %453 = cast(%var_2637, dtype="int32") /* ty=Tensor[(9, 2, 5), int32] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="int32") /* ty=Tensor[(9, 2, 5), int32] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %457 = cast(%var_2643, dtype="float64") /* ty=Tensor[(9, 2, 5), float64] */;
  %458 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%452, dtype="float64") /* ty=Tensor[(9, 2, 5), float64] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %461 = cast(%var_2615, dtype="float32") /* ty=Tensor[(9, 2, 5), float32] */;
  %462 = cast(%452, dtype="float64") /* ty=Tensor[(9, 2, 5), float64] */;
  %463 = logical_xor(%455, %456) /* ty=Tensor[(9, 2, 5), int32] */;
  %464 = floor_mod(%459, %460) /* ty=Tensor[(9, 2, 5), float64] */;
  %465 = tan(%461) /* ty=Tensor[(9, 2, 5), float32] */;
  %466 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
  %467 = asinh(%462) /* ty=Tensor[(9, 2, 5), float64] */;
  (%463, %464, %465, %466, %467)
}

def @func_9745() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %468 = @func_8048() /* ty=Tensor[(182), int64] */;
  %469 = @func_6713() /* ty=Tensor[(182), int64] */;
  (%468, %469)
}

def @func_1547() -> (Tensor[(10, 14, 9), float64],) {
  %470 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %472 = atanh(%471) /* ty=Tensor[(10, 14, 9), float64] */;
  (%472,)
}

def @func_11011() -> (Tensor[(182), int64],) {
  %473 = @func_7742() /* ty=(Tensor[(182), int64], Tensor[(648), float32], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) */;
  %474 = %473.0;
  (%474,)
}

def @func_1381(%var_1377: Tensor[(624), float64]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) {
  %475 = cast(%var_1377, dtype="float64") /* ty=Tensor[(624), float64] */;
  %476 = reshape(%475, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %477 = @func_830(%476) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %478 = @func_1204() /* ty=Tensor[(182), int64] */;
  %479 = %477.1;
  (%478, %479, %var_1377)
}

def @func_830(%var_822: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) {
  %480 = cast(%var_822, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %481 = cast(meta[relay.Constant][21] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
  %482 = reshape(%481, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %483 = @func_353(%482) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %484 = cosh(%480) /* ty=Tensor[(12, 13, 4), float64] */;
  %485 = %483.2;
  (%484, %485, meta[relay.Constant][21] /* ty=Tensor[(182), int64] */)
}

def @func_2816() -> Tensor[(10, 14, 9), float64] {
  @func_1820() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_5313(%var_5276: Tensor[(8, 5, 1), float64], %var_5277: Tensor[(8, 5, 5), float64], %var_5296: Tensor[(9, 1), int32]) -> (Tensor[(8, 5, 5), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(1080), float64], int32, Tensor[(9, 1), int32], Tensor[(1080), float64], Tensor[(10, 14, 9), float64]) {
  %486 = cast(%var_5276, dtype="float64") /* ty=Tensor[(8, 5, 1), float64] */;
  %487 = cast(%var_5277, dtype="float64") /* ty=Tensor[(8, 5, 5), float64] */;
  %488 = @func_2562() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %489 = @func_2860() /* ty=(Tensor[(182), int64],) */;
  %490 = cast(-6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %491 = cast(%var_5296, dtype="int32") /* ty=Tensor[(9, 1), int32] */;
  %492 = cast(meta[relay.Constant][22] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %493 = reshape(%490, newshape=[]) /* ty=int32 */;
  %494 = reshape(%491, newshape=[9, 1, 1]) /* ty=Tensor[(9, 1, 1), int32] */;
  %495 = reshape(%492, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %496 = @func_3487(%493, %494, %495) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(1080), float64], Tensor[(9, 1, 1), float32]) */;
  %497 = floor_divide(%486, %487) /* ty=Tensor[(8, 5, 5), float64] */;
  %498 = %488.0;
  %499 = %489.0;
  %500 = %496.1;
  %501 = @func_1820() /* ty=Tensor[(10, 14, 9), float64] */;
  (%497, %498, %499, %500, -6 /* ty=int32 */, %var_5296, meta[relay.Constant][22] /* ty=Tensor[(1080), float64] */, %501)
}

def @func_5395() -> Tensor[(182), int64] {
  @func_1204() /* ty=Tensor[(182), int64] */
}

def @func_10269(%var_10242: Tensor[(12, 15, 1), float32]) -> (Tensor[(12, 15, 1), float32], Tensor[(12, 15, 1), float32], Tensor[(12, 15, ?), float32]) {
  %502 = cast(%var_10242, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %503 = cast(%var_10242, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %504 = cast(%var_10242, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %505 = log10(%504) /* ty=Tensor[(12, 15, 1), float32] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %507 = shape_of(%var_10242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_10242, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %510 = sin(%502) /* ty=Tensor[(12, 15, 1), float32] */;
  %511 = asin(%503) /* ty=Tensor[(12, 15, 1), float32] */;
  %512 = power(%508, %509) /* ty=Tensor[(12, 15, ?), float32] */;
  (%510, %511, %512)
}

def @func_3771(%var_3732: float32) -> (Tensor[(624), float64], Tensor[(624), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) {
  %513 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %514 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %515 = cast(%var_3732, dtype="float32") /* ty=float32 */;
  %516 = cast(meta[relay.Constant][23] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
  %517 = reshape(%515, newshape=[]) /* ty=float32 */;
  %518 = reshape(%516, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %519 = @func_3056(%517, %518) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
  %520 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %521 = %513.2;
  %522 = %514.2;
  %523 = %519.1;
  %524 = @func_2816() /* ty=Tensor[(10, 14, 9), float64] */;
  %525 = %520.0;
  (%521, %522, %523, %var_3732, meta[relay.Constant][23] /* ty=Tensor[(182), int64] */, %524, %525)
}

def @func_3578(%var_3515: Tensor[(10, 14, 9), float64], %var_3573: Tensor[(10, 14, 9), int16]) -> (Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), float64], Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 13, 13), float64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  %526 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %527 = %526.0;
  %528 = cast(%var_3515, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %533 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %534 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %535 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %536 = %535.0;
  %537 = cast(%var_3515, dtype="int16") /* ty=Tensor[(10, 14, 9), int16] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%536, dtype="int16") /* ty=Tensor[(10, 14, 9), int16] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %541 = left_shift(%539, %540) /* ty=Tensor[(10, 14, 9), int16] */;
  %542 = cast(%var_3573, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %546 = equal(%530, %531) /* ty=Tensor[(10, 14, 9), bool] */;
  %547 = %532.0;
  %548 = @func_1736() /* ty=Tensor[(624), float64] */;
  %549 = @func_3272() /* ty=Tensor[(182), int64] */;
  %550 = %533.0;
  %551 = %534.0;
  %552 = @func_2864() /* ty=Tensor[(10, 14, 9), float64] */;
  %553 = floor_divide(%544, %545) /* ty=Tensor[(10, 14, 9), float64] */;
  (%546, %547, %548, %549, %550, %551, %552, %553)
}

def @func_4770() -> (Tensor[(182), int64],) {
  %554 = @func_2034() /* ty=(Tensor[(182), int64],) */;
  %555 = %554.0;
  (%555,)
}

def @func_6347() -> (Tensor[(1, 2, 2), float64],) {
  %556 = @func_6048() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(182), int64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64]) */;
  %557 = %556.0;
  (%557,)
}

def @func_6180(%var_6175: Tensor[(4, 1, 14), int64], %var_6176: Tensor[(4, 6, 14), int64]) -> Tensor[(4, 6, 14), bool] {
  %558 = cast(%var_6175, dtype="bool") /* ty=Tensor[(4, 1, 14), bool] */;
  %559 = cast(%var_6176, dtype="bool") /* ty=Tensor[(4, 6, 14), bool] */;
  greater_equal(%558, %559) /* ty=Tensor[(4, 6, 14), bool] */
}

def @func_2864() -> Tensor[(10, 14, 9), float64] {
  @func_2816() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_8139(%var_8130: Tensor[(2160), float32]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(2160), float32]) {
  %560 = @func_5609() /* ty=(Tensor[(182), int64],) */;
  %561 = cast(%var_8130, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %562 = cast(%var_8130, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
  %563 = reshape(%561, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %564 = reshape(%562, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
  %565 = @func_604(%563, %564) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
  %566 = %560.0;
  %567 = %565.1;
  (%566, %567, %var_8130)
}

def @func_8626(%var_8622: Tensor[(2160), float32]) -> (Tensor[(8, 13, 13), float64], Tensor[(90), uint32], Tensor[(2160), float32], Tensor[(90), uint32]) {
  %568 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %569 = cast(%var_8622, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %570 = cast(meta[relay.Constant][24] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %571 = cast(meta[relay.Constant][24] /* ty=Tensor[(90), uint32] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %572 = reshape(%569, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %573 = reshape(%570, newshape=[90]) /* ty=Tensor[(90), uint32] */;
  %574 = reshape(%571, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), float64] */;
  %575 = @func_3403(%572, %573, %574) /* ty=(Tensor[(2160), float32], Tensor[(13, 2, 7), float32], Tensor[(90), uint32], Tensor[(9, 2, 5), bool]) */;
  %576 = %568.0;
  %577 = %575.2;
  (%576, %577, %var_8622, meta[relay.Constant][24] /* ty=Tensor[(90), uint32] */)
}

def @func_4895(%var_4877: Tensor[(8, 3, 10), float32]) -> (Tensor[(8, 3, 10), bool], Tensor[(10, 14, 9), float64]) {
  %578 = cast(%var_4877, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
  %579 = asin(%578) /* ty=Tensor[(8, 3, 10), float32] */;
  %580 = cast(%var_4877, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %584 = logical_or(%582, %583) /* ty=Tensor[(8, 3, 10), bool] */;
  %585 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
  (%584, %585)
}

def @func_5020() -> Tensor[(624), float64] {
  %586 = @func_2562() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %586.2
}

def @func_8030(%var_8013: Tensor[(9, 1, 9), float32], %var_8018: float32) -> (Tensor[(9, 1, 9), float32], float32, float32, Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float32]) {
  %587 = cast(%var_8013, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
  %588 = cast(%var_8018, dtype="float32") /* ty=float32 */;
  %589 = reshape(%588, newshape=[]) /* ty=float32 */;
  %590 = @func_6802(%589) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) */;
  %591 = @func_7324() /* ty=(Tensor[(10, 14, 9), float32],) */;
  %592 = cos(%587) /* ty=Tensor[(9, 1, 9), float32] */;
  %593 = %590.4;
  %594 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
  %595 = %591.0;
  (%592, %593, %var_8018, %594, %595)
}

def @func_7878() -> (Tensor[(182), int64],) {
  %596 = @func_1497() /* ty=(Tensor[(182), int64],) */;
  %597 = %596.0;
  (%597,)
}

def @func_2293() -> (Tensor[(182), int64],) {
  %598 = @func_1204() /* ty=Tensor[(182), int64] */;
  (%598,)
}

def @func_3227() -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) {
  %599 = @func_2895() /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %600 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
  %601 = @func_1851() /* ty=Tensor[(182), int64] */;
  %602 = %599.2;
  (%600, %601, %602)
}

def @func_9907() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %603 = @func_7635() /* ty=(Tensor[(182), int64],) */;
  %604 = %603.0;
  %605 = @func_8048() /* ty=Tensor[(182), int64] */;
  (%604, %605)
}

def @func_4184() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) {
  %606 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %607 = @func_1851() /* ty=Tensor[(182), int64] */;
  %608 = @func_1283() /* ty=Tensor[(182), int64] */;
  %609 = %606.1;
  (%607, %608, %609)
}

def @func_2860() -> (Tensor[(182), int64],) {
  %610 = @func_2185() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %611 = %610.0;
  (%611,)
}

def @func_4479() -> (Tensor[(10, 14, 9), float64],) {
  %612 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %613 = %612.0;
  (%613,)
}

def @func_2988(%var_2958: Tensor[(10, 14, 9), float64]) -> (Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(10, 14, 9), uint16]) {
  %614 = @func_2864() /* ty=Tensor[(10, 14, 9), float64] */;
  %615 = cast(%var_2958, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%614, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %619 = @func_2860() /* ty=(Tensor[(182), int64],) */;
  %620 = cast(%var_2958, dtype="uint16") /* ty=Tensor[(10, 14, 9), uint16] */;
  %621 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%614, dtype="uint16") /* ty=Tensor[(10, 14, 9), uint16] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %624 = power(%617, %618) /* ty=Tensor[(10, 14, 9), float32] */;
  %625 = %619.0;
  %626 = minimum(%622, %623) /* ty=Tensor[(10, 14, 9), uint16] */;
  (%624, %625, %626)
}

def @func_5706() -> Tensor[(9, 8, 10), bool] {
  @func_4719() /* ty=Tensor[(9, 8, 10), bool] */
}

def @func_6879(%var_6868: Tensor[(15, 7, 6), int8]) -> (Tensor[(15, 7, 6), bool], Tensor[(182), int64]) {
  %627 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 7, 6), int8] */, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %628 = shape_of(%var_6868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_6868, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = @func_4184() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %632 = greater(%629, %630) /* ty=Tensor[(15, 7, 6), bool] */;
  %633 = %631.2;
  (%632, %633)
}

def @func_4383() -> (Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) {
  %634 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %635 = cast(1.58534f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %636 = cast(meta[relay.Constant][26] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
  %637 = reshape(%635, newshape=[]) /* ty=float32 */;
  %638 = reshape(%636, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %639 = @func_3056(%637, %638) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
  %640 = %634.0;
  %641 = %639.3;
  (%640, %641, 1.58534f /* ty=float32 */, meta[relay.Constant][26] /* ty=Tensor[(182), int64] */)
}

def @func_8087() -> (Tensor[(182), int64],) {
  %642 = @func_7635() /* ty=(Tensor[(182), int64],) */;
  %643 = %642.0;
  (%643,)
}

def @func_10138() -> (Tensor[(182), int64],) {
  %644 = @func_6958() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %645 = %644.1;
  (%645,)
}

def @func_10650() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %646 = @func_5000() /* ty=Tensor[(182), int64] */;
  %647 = @func_6414() /* ty=Tensor[(10, 14, 9), float64] */;
  (%646, %647)
}

def @func_1851() -> Tensor[(182), int64] {
  %648 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %648.0
}

def @func_9240() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(240), float32]) {
  %649 = @func_8813() /* ty=(Tensor[(182), int64],) */;
  %650 = cast(meta[relay.Constant][27] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %651 = reshape(%650, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %652 = @func_5927(%651) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(240), float32]) */;
  %653 = %649.0;
  %654 = @func_3272() /* ty=Tensor[(182), int64] */;
  %655 = @func_1283() /* ty=Tensor[(182), int64] */;
  %656 = %652.0;
  (%653, %654, %655, %656, meta[relay.Constant][27] /* ty=Tensor[(240), float32] */)
}

def @func_8889(%var_8831: Tensor[(648), float32]) -> (Tensor[(182), int64], Tensor[(2160), float32], Tensor[(10, 14, 9), bool], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(648), int32]) {
  %657 = cast(meta[relay.Constant][28] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %658 = reshape(%657, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %659 = @func_8139(%658) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(2160), float32]) */;
  %660 = cast(meta[relay.Constant][28] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %661 = cast(meta[relay.Constant][28] /* ty=Tensor[(2160), float32] */, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
  %662 = reshape(%660, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %663 = reshape(%661, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
  %664 = @func_604(%662, %663) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
  %665 = @func_2895() /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %666 = @func_4383() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) */;
  %667 = %666.1;
  %668 = cast(%var_8831, dtype="uint8") /* ty=Tensor[(648), uint8] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(1), int32] */;
  %670 = cast(%667, dtype="uint8") /* ty=Tensor[(648), uint8] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %672 = multiply(%670, %671) /* ty=Tensor[(648), uint8] */;
  %673 = cast(%672, dtype="float64") /* ty=Tensor[(648), float64] */;
  %674 = cosh(%673) /* ty=Tensor[(648), float64] */;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(648), float32] */;
  %676 = log2(%675) /* ty=Tensor[(648), float32] */;
  %677 = cast(%672, dtype="int32") /* ty=Tensor[(648), int32] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(1), int32] */;
  %679 = cast(%676, dtype="int32") /* ty=Tensor[(648), int32] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?), int32] */;
  %681 = %659.1;
  %682 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
  %683 = %664.3;
  %684 = %665.2;
  %685 = maximum(%679, %680) /* ty=Tensor[(648), int32] */;
  (%681, meta[relay.Constant][28] /* ty=Tensor[(2160), float32] */, %682, %683, %684, %685)
}

def @func_2034() -> (Tensor[(182), int64],) {
  %686 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %687 = %686.0;
  (%687,)
}

def @func_1204() -> Tensor[(182), int64] {
  %688 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %688.1
}

def @func_1470() -> Tensor[(10, 14, 9), bool] {
  %689 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %690 = atan(%689) /* ty=Tensor[(10, 14, 9), float32] */;
  %691 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 14, 9), float32] */, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%693, %694) /* ty=Tensor[(10, 14, 9), bool] */
}

def @func_8813() -> (Tensor[(182), int64],) {
  %695 = @func_5444() /* ty=(Tensor[(182), int64],) */;
  %696 = %695.0;
  (%696,)
}

def @func_353(%var_329: Tensor[(182), int64]) -> (Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) {
  %697 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 5), float64] */;
  %698 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(5, 3, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 5), float64] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %701 = maximum(%699, %700) /* ty=Tensor[(5, 3, 5), float64] */;
  %702 = cast(%701, dtype="float64") /* ty=Tensor[(5, 3, 5), float64] */;
  %703 = cast(%var_329, dtype="int64") /* ty=Tensor[(182), int64] */;
  %704 = reshape(%703, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
  %705 = @func_135(%704) /* ty=(Tensor[(13, 2, 7), int64],) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
  %708 = reshape(%707, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
  %709 = @func_135(%708) /* ty=(Tensor[(13, 2, 7), int64],) */;
  %710 = log2(%702) /* ty=Tensor[(5, 3, 5), float64] */;
  %711 = %709.0;
  (%710, %706, %var_329, %711)
}

def @func_4139() -> Tensor[(182), int64] {
  %712 = @func_2034() /* ty=(Tensor[(182), int64],) */;
  %712.0
}

def @func_5688() -> (Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(1, 2, 2), float64]) {
  %713 = @func_5523() /* ty=(Tensor[(624), float64], Tensor[(182), int64]) */;
  %714 = %713.1;
  %715 = cast(%714, dtype="int64") /* ty=Tensor[(182), int64] */;
  %716 = reshape(%715, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %717 = @func_353(%716) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %718 = @func_5117() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %719 = %717.1;
  %720 = %718.0;
  (%714, %719, %720)
}

def @func_6596(%var_6511: uint8, %var_6512: Tensor[(7, 13, 5), uint8]) -> (Tensor[(7, 13, 5), uint8], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(1344), int32], Tensor[(7, 13, 5), uint64], Tensor[(7, 13, 5), uint16], Tensor[(10, 14, 9), uint16]) {
  %721 = cast(%var_6511, dtype="uint8") /* ty=uint8 */;
  %722 = cast(%var_6512, dtype="uint8") /* ty=Tensor[(7, 13, 5), uint8] */;
  %723 = @func_2034() /* ty=(Tensor[(182), int64],) */;
  %724 = cast(meta[relay.Constant][32] /* ty=Tensor[(1344), int32] */, dtype="int32") /* ty=Tensor[(1344), int32] */;
  %725 = reshape(%724, newshape=[6, 16, 14]) /* ty=Tensor[(6, 16, 14), int32] */;
  %726 = @func_2104(%725) /* ty=(Tensor[(6, 16, 14), int32], Tensor[(10, 14, 9), float64]) */;
  %727 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 13, 5), uint8] */, dtype="uint64") /* ty=Tensor[(7, 13, 5), uint64] */;
  %728 = shape_of(%var_6512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%var_6512, dtype="uint64") /* ty=Tensor[(7, 13, 5), uint64] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %731 = cast(%var_6512, dtype="bool") /* ty=Tensor[(7, 13, 5), bool] */;
  %732 = cast(%var_6511, dtype="bool") /* ty=bool */;
  %733 = greater(%731, %732) /* ty=Tensor[(7, 13, 5), bool] */;
  %734 = cast(%733, dtype="uint16") /* ty=Tensor[(7, 13, 5), uint16] */;
  %735 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(7, 13, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 13, 5), uint8] */, dtype="uint16") /* ty=Tensor[(7, 13, 5), uint16] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %738 = %726.1;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %740 = reshape(%739, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %741 = @func_2988(%740) /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(10, 14, 9), uint16]) */;
  %742 = add(%721, %722) /* ty=Tensor[(7, 13, 5), uint8] */;
  %743 = %723.0;
  %744 = bitwise_xor(%729, %730) /* ty=Tensor[(7, 13, 5), uint64] */;
  %745 = bitwise_or(%736, %737) /* ty=Tensor[(7, 13, 5), uint16] */;
  %746 = %741.2;
  (%742, %743, %738, meta[relay.Constant][32] /* ty=Tensor[(1344), int32] */, %744, %745, %746)
}

def @func_4867(%var_4812: bool, %var_4813: Tensor[(440), bool], %var_4837: Tensor[(540), float64]) -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) {
  %747 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %748 = cast(%var_4812, dtype="bool") /* ty=bool */;
  %749 = cast(%var_4813, dtype="bool") /* ty=Tensor[(440), bool] */;
  %750 = reshape(%748, newshape=[]) /* ty=bool */;
  %751 = reshape(%749, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), bool] */;
  %752 = @func_4014(%750, %751) /* ty=(Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 5, 11), float64]) */;
  %753 = cast(%var_4837, dtype="float64") /* ty=Tensor[(540), float64] */;
  %754 = reshape(%753, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), float64] */;
  %755 = @func_2293() /* ty=(Tensor[(182), int64],) */;
  %756 = %747.0;
  %757 = %752.2;
  %758 = @func_4064(%754) /* ty=Tensor[(6, 10, 9), float64] */;
  %759 = @func_4139() /* ty=Tensor[(182), int64] */;
  %760 = %755.0;
  (%756, %757, %var_4812, %var_4813, %758, %var_4837, %759, %760)
}

def @func_7635() -> (Tensor[(182), int64],) {
  %761 = @func_1497() /* ty=(Tensor[(182), int64],) */;
  %762 = %761.0;
  (%762,)
}

def @func_7742() -> (Tensor[(182), int64], Tensor[(648), float32], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) {
  %763 = @func_6990() /* ty=(Tensor[(182), int64],) */;
  %764 = @func_4383() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) */;
  %765 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %766 = cast(meta[relay.Constant][34] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %767 = cast(meta[relay.Constant][35] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %768 = reshape(%765, newshape=[]) /* ty=bool */;
  %769 = reshape(%766, newshape=[440]) /* ty=Tensor[(440), bool] */;
  %770 = reshape(%767, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %771 = @func_4867(%768, %769, %770) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %772 = %763.0;
  %773 = %764.1;
  %774 = %771.6;
  (%772, %773, %774, False /* ty=bool */, meta[relay.Constant][34] /* ty=Tensor[(440), bool] */, meta[relay.Constant][35] /* ty=Tensor[(540), float64] */)
}

def @func_8312(%var_8288: Tensor[(6, 1, 12), float32], %var_8289: Tensor[(6, 14, 12), float32]) -> (Tensor[(6, 14, 12), float32], Tensor[(6, 14, 12), float32]) {
  %775 = cast(%var_8288, dtype="float32") /* ty=Tensor[(6, 1, 12), float32] */;
  %776 = cast(%var_8289, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  %777 = cast(%var_8289, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  %778 = divide(%775, %776) /* ty=Tensor[(6, 14, 12), float32] */;
  %779 = tan(%777) /* ty=Tensor[(6, 14, 12), float32] */;
  (%778, %779)
}

def @func_5117() -> (Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) {
  %780 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 2, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 2, 2), float64] */;
  %781 = @func_2895() /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %782 = cast(meta[relay.Constant][37] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %783 = cast(meta[relay.Constant][37] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %784 = reshape(%782, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %785 = reshape(%783, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %786 = @func_2690(%784, %785) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
  %787 = log2(%780) /* ty=Tensor[(1, 2, 2), float64] */;
  %788 = %781.2;
  %789 = %786.1;
  (%787, %788, %789, meta[relay.Constant][37] /* ty=Tensor[(960), float64] */)
}

def @func_9874(%var_9855: Tensor[(16, 4, 16), uint8], %var_9856: Tensor[(16, 4, 16), uint8]) -> (Tensor[(16, 4, 16), uint8], Tensor[(16, 4, 16), float32], Tensor[(16, 4, 16), float32]) {
  %790 = cast(%var_9856, dtype="uint8") /* ty=Tensor[(16, 4, 16), uint8] */;
  %791 = shape_of(%var_9855, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%var_9855, dtype="uint8") /* ty=Tensor[(16, 4, 16), uint8] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %794 = cast(%var_9856, dtype="float32") /* ty=Tensor[(16, 4, 16), float32] */;
  %795 = cast(%var_9856, dtype="float32") /* ty=Tensor[(16, 4, 16), float32] */;
  %796 = bitwise_xor(%792, %793) /* ty=Tensor[(16, 4, 16), uint8] */;
  %797 = acos(%794) /* ty=Tensor[(16, 4, 16), float32] */;
  %798 = sigmoid(%795) /* ty=Tensor[(16, 4, 16), float32] */;
  (%796, %797, %798)
}

def @func_6106(%var_6065: Tensor[(540), float64], %var_6094: int64) -> (Tensor[(182), int64], Tensor[(540), float64], Tensor[(13, 2, 7), int64], Tensor[(6, 10, 9), float64], Tensor[(6, 10, 9), float32]) {
  %799 = cast(%var_6094, dtype="int64") /* ty=int64 */;
  %800 = reshape(%799, newshape=[]) /* ty=int64 */;
  %801 = @func_1257(%800) /* ty=(Tensor[(15, 11, 15), bool], Tensor[(1, 12, 4), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
  %802 = cast(%var_6065, dtype="float64") /* ty=Tensor[(540), float64] */;
  %803 = reshape(%802, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), float64] */;
  %804 = @func_4064(%803) /* ty=Tensor[(6, 10, 9), float64] */;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(6, 10, 9), float64] */;
  %806 = cast(%var_6094, dtype="float64") /* ty=float64 */;
  %807 = cast(%804, dtype="float32") /* ty=Tensor[(6, 10, 9), float32] */;
  %808 = cast(%var_6094, dtype="float32") /* ty=float32 */;
  %809 = @func_5000() /* ty=Tensor[(182), int64] */;
  %810 = %801.4;
  %811 = floor_divide(%805, %806) /* ty=Tensor[(6, 10, 9), float64] */;
  %812 = floor_mod(%807, %808) /* ty=Tensor[(6, 10, 9), float32] */;
  (%809, %var_6065, %810, %811, %812)
}

def @func_5523() -> (Tensor[(624), float64], Tensor[(182), int64]) {
  %813 = @func_4184() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %814 = @func_5020() /* ty=Tensor[(624), float64] */;
  %815 = %813.2;
  (%814, %815)
}

def @func_5927(%var_5918: Tensor[(240), float32]) -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(240), float32]) {
  %816 = @func_2185() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %817 = cast(%var_5918, dtype="float32") /* ty=Tensor[(240), float32] */;
  %818 = reshape(%817, newshape=[8, 3, 10]) /* ty=Tensor[(8, 3, 10), float32] */;
  %819 = @func_4895(%818) /* ty=(Tensor[(8, 3, 10), bool], Tensor[(10, 14, 9), float64]) */;
  %820 = %816.0;
  %821 = %819.1;
  (%820, %821, %var_5918)
}

def @func_3631() -> (Tensor[(182), int64],) {
  %822 = @func_3272() /* ty=Tensor[(182), int64] */;
  (%822,)
}

def @func_11060() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %823 = @func_1851() /* ty=Tensor[(182), int64] */;
  %824 = @func_7032() /* ty=Tensor[(182), int64] */;
  (%823, %824)
}

def @func_10950() -> (Tensor[(7, 7, 12), bool], Tensor[(182), int64], Tensor[(182), int64]) {
  %825 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 12), float64] */;
  %826 = atanh(%825) /* ty=Tensor[(7, 7, 12), float64] */;
  %827 = cast(%826, dtype="bool") /* ty=Tensor[(7, 7, 12), bool] */;
  %828 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(7, 7, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 7, 12), float64] */, dtype="bool") /* ty=Tensor[(7, 7, 12), bool] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %831 = @func_10412() /* ty=(Tensor[(182), int64],) */;
  %832 = less(%829, %830) /* ty=Tensor[(7, 7, 12), bool] */;
  %833 = @func_6223() /* ty=Tensor[(182), int64] */;
  %834 = %831.0;
  (%832, %833, %834)
}

def @func_5261() -> (Tensor[(10, 14, 9), float64], Tensor[(2496), float64], Tensor[(26, 96), float64]) {
  %835 = cast(meta[relay.Constant][39] /* ty=Tensor[(26, 96), float64] */, dtype="float64") /* ty=Tensor[(26, 96), float64] */;
  %836 = reshape(%835, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
  %837 = @func_2468(%836) /* ty=(Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(2496), float64]) */;
  %838 = @func_1820() /* ty=Tensor[(10, 14, 9), float64] */;
  %839 = %837.3;
  (%838, %839, meta[relay.Constant][39] /* ty=Tensor[(26, 96), float64] */)
}

def @func_5444() -> (Tensor[(182), int64],) {
  %840 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %841 = %840.0;
  (%841,)
}

def @func_4663() -> (Tensor[(10, 14, 9), float64],) {
  %842 = @func_4572() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %843 = %842.0;
  (%843,)
}

def @func_8593() -> Tensor[(182), int64] {
  %844 = @func_6214() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %844.0
}

def @func_7607(%var_7596: int32, %var_7597: Tensor[(3, 1, 1), int32]) -> (Tensor[(3, 1, 1), int32],) {
  %845 = cast(%var_7596, dtype="int32") /* ty=int32 */;
  %846 = cast(%var_7597, dtype="int32") /* ty=Tensor[(3, 1, 1), int32] */;
  %847 = right_shift(%845, %846) /* ty=Tensor[(3, 1, 1), int32] */;
  (%847,)
}

def @func_8516(%var_8473: Tensor[(2, 8, 6), float32], %var_8474: Tensor[(2, 8, 6), float32], %var_8499: Tensor[(1080), float64]) -> (Tensor[(2, 8, 6), float32], Tensor[(960), float64], Tensor[(182), int64], Tensor[(1080), float64]) {
  %848 = cast(%var_8474, dtype="float32") /* ty=Tensor[(2, 8, 6), float32] */;
  %849 = shape_of(%var_8473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%var_8473, dtype="float32") /* ty=Tensor[(2, 8, 6), float32] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %852 = @func_5117() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %853 = cast(%var_8499, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %854 = cast(%var_8499, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %855 = cast(%var_8499, dtype="float32") /* ty=Tensor[(1080), float32] */;
  %856 = reshape(%853, newshape=[3, 360]) /* ty=Tensor[(3, 360), float64] */;
  %857 = reshape(%854, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
  %858 = reshape(%855, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
  %859 = @func_1644(%856, %857, %858) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(3, 360), float32], Tensor[(3, 360), float64], Tensor[(3, 360), float32]) */;
  %860 = maximum(%850, %851) /* ty=Tensor[(2, 8, 6), float32] */;
  %861 = %852.3;
  %862 = %859.3;
  (%860, %861, %862, %var_8499)
}

def @func_1158() -> (Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) {
  %863 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 13, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
  %864 = erf(%863) /* ty=Tensor[(8, 13, 13), float64] */;
  %865 = cast(%864, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
  %866 = cast(meta[relay.Constant][41] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %867 = reshape(%866, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %868 = @func_830(%867) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %869 = acos(%865) /* ty=Tensor[(8, 13, 13), float64] */;
  %870 = %868.2;
  (%869, %870, meta[relay.Constant][41] /* ty=Tensor[(624), float64] */)
}

def @func_10127() -> (Tensor[(1, 2, 2), float64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) {
  %871 = @func_7895() /* ty=(Tensor[(1, 2, 2), float64],) */;
  %872 = cast(meta[relay.Constant][42] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %873 = cast(meta[relay.Constant][42] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %874 = reshape(%872, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %875 = reshape(%873, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %876 = @func_2690(%874, %875) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
  %877 = %871.0;
  %878 = %876.1;
  (%877, %878, meta[relay.Constant][42] /* ty=Tensor[(960), float64] */)
}

def @func_5590() -> (Tensor[(10, 14, 9), float64],) {
  %879 = @func_4479() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %880 = %879.0;
  (%880,)
}

def @func_4064(%var_4059: Tensor[(6, 10, 9), float64]) -> Tensor[(6, 10, 9), float64] {
  %881 = cast(-4.87528f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %882 = cast(%var_4059, dtype="float64") /* ty=Tensor[(6, 10, 9), float64] */;
  mod(%881, %882) /* ty=Tensor[(6, 10, 9), float64] */
}

def @func_8278() -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) {
  %883 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
  %884 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
  %885 = @func_5766() /* ty=Tensor[(182), int64] */;
  (%883, %884, %885)
}

def @func_4719() -> Tensor[(9, 8, 10), bool] {
  %886 = cast(meta[relay.Constant][44] /* ty=Tensor[(9, 8, 10), int16] */, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
  %887 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(9, 8, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 8, 10), int16] */, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%888, %889) /* ty=Tensor[(9, 8, 10), bool] */
}

def @func_7032() -> Tensor[(182), int64] {
  @func_1204() /* ty=Tensor[(182), int64] */
}

def @func_8456() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %890 = @func_7210() /* ty=Tensor[(182), int64] */;
  %891 = @func_4139() /* ty=Tensor[(182), int64] */;
  (%890, %891)
}

def @func_9477(%var_9471: int64) -> (Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], int64) {
  %892 = @func_4479() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %893 = cast(%var_9471, dtype="int64") /* ty=int64 */;
  %894 = reshape(%893, newshape=[]) /* ty=int64 */;
  %895 = @func_1257(%894) /* ty=(Tensor[(15, 11, 15), bool], Tensor[(1, 12, 4), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
  %896 = %892.0;
  %897 = %895.4;
  (%896, %897, %var_9471)
}

def @func_10563() -> Tensor[(182), int64] {
  @func_6322() /* ty=Tensor[(182), int64] */
}

def @func_10591() -> Tensor[(11, 15, 14), float64] {
  %898 = cast(meta[relay.Constant][45] /* ty=Tensor[(11, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 14), float64] */;
  cos(%898) /* ty=Tensor[(11, 15, 14), float64] */
}

def @func_7709() -> (Tensor[(182), int64],) {
  %899 = @func_2562() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %900 = %899.0;
  (%900,)
}

def @func_7160() -> (Tensor[(182), int64],) {
  %901 = @func_5609() /* ty=(Tensor[(182), int64],) */;
  %902 = %901.0;
  (%902,)
}

def @func_1325(%var_1287: Tensor[(10, 12, 9), float64]) -> (Tensor[(10, 12, 9), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(2160), float64]) {
  %903 = cast(%var_1287, dtype="float64") /* ty=Tensor[(10, 12, 9), float64] */;
  %904 = cast(meta[relay.Constant][46] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %905 = cast(meta[relay.Constant][46] /* ty=Tensor[(2160), float32] */, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
  %906 = reshape(%904, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %907 = reshape(%905, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
  %908 = @func_604(%906, %907) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
  %909 = cast(meta[relay.Constant][46] /* ty=Tensor[(2160), float32] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %910 = sqrt(%903) /* ty=Tensor[(10, 12, 9), float64] */;
  %911 = %908.4;
  %912 = @func_1283() /* ty=Tensor[(182), int64] */;
  %913 = atan(%909) /* ty=Tensor[(2160), float64] */;
  (%910, %911, %912, %913)
}

def @func_1820() -> Tensor[(10, 14, 9), float64] {
  @func_1751() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_9602(%var_9589: Tensor[(72), float32], %var_9590: Tensor[(1008), float32], %var_9597: Tensor[(6, 108), float32]) -> (Tensor[(10, 14, 9), float64], Tensor[(6, 14, 12), float32], Tensor[(72), float32], Tensor[(1008), float32], Tensor[(9, 9, 8), float32], float32, Tensor[(6, 108), float32], Tensor[(1, 182), int64]) {
  %914 = @func_4906() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */;
  %915 = cast(%var_9589, dtype="float32") /* ty=Tensor[(72), float32] */;
  %916 = cast(%var_9590, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %917 = reshape(%915, newshape=[6, 1, 12]) /* ty=Tensor[(6, 1, 12), float32] */;
  %918 = reshape(%916, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float32] */;
  %919 = @func_8312(%917, %918) /* ty=(Tensor[(6, 14, 12), float32], Tensor[(6, 14, 12), float32]) */;
  %920 = cast(-9.07677f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %921 = cast(%var_9597, dtype="float32") /* ty=Tensor[(6, 108), float32] */;
  %922 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 182), int64] */, dtype="int64") /* ty=Tensor[(1, 182), int64] */;
  %923 = reshape(%920, newshape=[]) /* ty=float32 */;
  %924 = reshape(%921, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %925 = reshape(%922, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %926 = @func_684(%923, %924, %925) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) */;
  %927 = %914.0;
  %928 = %919.1;
  %929 = %926.0;
  (%927, %928, %var_9589, %var_9590, %929, -9.07677f /* ty=float32 */, %var_9597, meta[relay.Constant][47] /* ty=Tensor[(1, 182), int64] */)
}

def @func_5766() -> Tensor[(182), int64] {
  %930 = @func_4383() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) */;
  %930.3
}

def @func_2185() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %931 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %932 = @func_1497() /* ty=(Tensor[(182), int64],) */;
  %933 = %931.1;
  %934 = %932.0;
  (%933, %934)
}

def @func_2427() -> Tensor[(10, 14, 9), float64] {
  @func_1751() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_1176() -> (Tensor[(182), int64],) {
  %935 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %936 = %935.1;
  (%936,)
}

def @func_9410(%var_9361: Tensor[(630, 2), float64], %var_9364: bool) -> (Tensor[(182), int64], Tensor[(10, 14, 9), float32], Tensor[(630, 2), float64], Tensor[(624), float64], bool, Tensor[(26, 96), float64], Tensor[(440), float64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) {
  %937 = @func_7635() /* ty=(Tensor[(182), int64],) */;
  %938 = cast(%var_9361, dtype="float64") /* ty=Tensor[(630, 2), float64] */;
  %939 = reshape(%938, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %940 = @func_2988(%939) /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(10, 14, 9), uint16]) */;
  %941 = cast(%var_9364, dtype="bool") /* ty=bool */;
  %942 = cast(meta[relay.Constant][48] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %943 = reshape(%941, newshape=[]) /* ty=bool */;
  %944 = reshape(%942, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), bool] */;
  %945 = @func_4014(%943, %944) /* ty=(Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 5, 11), float64]) */;
  %946 = @func_5261() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(2496), float64], Tensor[(26, 96), float64]) */;
  %947 = cast(meta[relay.Constant][48] /* ty=Tensor[(440), bool] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %948 = cast(meta[relay.Constant][49] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %949 = cast(meta[relay.Constant][49] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %950 = reshape(%948, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %951 = reshape(%949, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %952 = @func_2690(%950, %951) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
  %953 = cast(meta[relay.Constant][49] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %954 = reshape(%953, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %955 = @func_4515(%954) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %956 = @func_5444() /* ty=(Tensor[(182), int64],) */;
  %957 = @func_7709() /* ty=(Tensor[(182), int64],) */;
  %958 = %937.0;
  %959 = %940.0;
  %960 = %945.0;
  %961 = %946.2;
  %962 = exp(%947) /* ty=Tensor[(440), float64] */;
  %963 = %952.0;
  %964 = @func_7032() /* ty=Tensor[(182), int64] */;
  %965 = %955.0;
  %966 = %956.0;
  %967 = %957.0;
  (%958, %959, %var_9361, %960, %var_9364, %961, %962, %963, meta[relay.Constant][49] /* ty=Tensor[(960), float64] */, %964, %965, %966, %967)
}

def @func_9073() -> (Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(182), int64], float32) {
  %968 = @func_7324() /* ty=(Tensor[(10, 14, 9), float32],) */;
  %969 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %970 = @func_4383() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) */;
  %971 = %968.0;
  %972 = @func_3145() /* ty=Tensor[(182), int64] */;
  %973 = %969.1;
  %974 = %970.2;
  (%971, %972, %973, %974)
}

def @func_6322() -> Tensor[(182), int64] {
  %975 = @func_6246() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %975.1
}

def @func_2210() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) {
  %976 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %977 = cast(meta[relay.Constant][50] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %978 = reshape(%977, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %979 = @func_830(%978) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %980 = %976.0;
  %981 = %979.2;
  (%980, %981, meta[relay.Constant][50] /* ty=Tensor[(624), float64] */)
}

def @func_6246() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %982 = @func_1497() /* ty=(Tensor[(182), int64],) */;
  %983 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %984 = %982.0;
  %985 = %983.0;
  (%984, %985)
}

def @func_9825(%var_9779: Tensor[(5, 10, 12), float32], %var_9789: Tensor[(336), int64], %var_9796: float32) -> (Tensor[(5, 10, 12), float32], Tensor[(4, 6, 14), bool], Tensor[(56), int64], Tensor[(336), int64], Tensor[(182), int64], float32) {
  %986 = cast(%var_9779, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
  %987 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(5, 10, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %988 = cast(meta[relay.Constant][51] /* ty=Tensor[(5, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
  %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %990 = cast(meta[relay.Constant][52] /* ty=Tensor[(56), int64] */, dtype="int64") /* ty=Tensor[(56), int64] */;
  %991 = cast(%var_9789, dtype="int64") /* ty=Tensor[(336), int64] */;
  %992 = reshape(%990, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), int64] */;
  %993 = reshape(%991, newshape=[4, 6, 14]) /* ty=Tensor[(4, 6, 14), int64] */;
  %994 = cast(%var_9796, dtype="float32") /* ty=float32 */;
  %995 = reshape(%994, newshape=[]) /* ty=float32 */;
  %996 = @func_8430(%995) /* ty=(Tensor[(182), int64], Tensor[(1080), float64], Tensor[(1080), float64], float32, Tensor[(182), int64]) */;
  %997 = power(%988, %989) /* ty=Tensor[(5, 10, 12), float32] */;
  %998 = @func_6180(%992, %993) /* ty=Tensor[(4, 6, 14), bool] */;
  %999 = %996.4;
  (%997, %998, meta[relay.Constant][52] /* ty=Tensor[(56), int64] */, %var_9789, %999, %var_9796)
}

def @func_9967() -> (Tensor[(182), int64],) {
  %1000 = @func_4410() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %1001 = %1000.1;
  (%1001,)
}

def @func_2895() -> (Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) {
  %1002 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
  %1003 = cast(%1002, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %1004 = @func_2185() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %1005 = %1004.0;
  %1006 = cast(%1005, dtype="int64") /* ty=Tensor[(182), int64] */;
  %1007 = reshape(%1006, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %1008 = @func_353(%1007) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %1009 = erf(%1003) /* ty=Tensor[(10, 14, 9), float32] */;
  %1010 = %1008.1;
  (%1009, %1005, %1010)
}

def @func_10062() -> (Tensor[(182), int64], Tensor[(15, 15, 5), float64], Tensor[(1125), float32], Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %1011 = cast(meta[relay.Constant][53] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %1012 = cast(meta[relay.Constant][53] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
  %1013 = reshape(%1011, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
  %1014 = reshape(%1012, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
  %1015 = @func_4283(%1013, %1014) /* ty=(Tensor[(15, 15, 5), float64],) */;
  %1016 = @func_2210() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %1017 = @func_6223() /* ty=Tensor[(182), int64] */;
  %1018 = %1015.0;
  %1019 = %1016.1;
  %1020 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
  (%1017, %1018, meta[relay.Constant][53] /* ty=Tensor[(1125), float32] */, %1019, %1020)
}

def @func_10751() -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64]) {
  %1021 = @func_3797() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %1022 = @func_2034() /* ty=(Tensor[(182), int64],) */;
  %1023 = %1021.0;
  %1024 = %1022.0;
  (%1023, %1024)
}

def @func_3797() -> (Tensor[(10, 14, 9), float64],) {
  %1025 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %1026 = %1025.0;
  (%1026,)
}

def @func_10446() -> (Tensor[(182), int64],) {
  %1027 = @func_8456() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %1028 = %1027.0;
  (%1028,)
}

def @func_1736() -> Tensor[(624), float64] {
  %1029 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %1029.2
}

def @func_4951() -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  %1030 = @func_2864() /* ty=Tensor[(10, 14, 9), float64] */;
  %1031 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
  (%1030, %1031)
}

def @func_8949() -> Tensor[(182), int64] {
  %1032 = @func_6214() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %1032.0
}

def @func_5609() -> (Tensor[(182), int64],) {
  %1033 = @func_4184() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %1034 = %1033.1;
  (%1034,)
}

def @func_6990() -> (Tensor[(182), int64],) {
  %1035 = @func_4410() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %1036 = %1035.0;
  (%1036,)
}

def @func_4014(%var_3957: bool, %var_3958: Tensor[(8, 5, 11), bool]) -> (Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 5, 11), float64]) {
  %1037 = @func_1283() /* ty=Tensor[(182), int64] */;
  %1038 = cast(%1037, dtype="int64") /* ty=Tensor[(182), int64] */;
  %1039 = reshape(%1038, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %1040 = @func_353(%1039) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %1041 = cast(%var_3957, dtype="bool") /* ty=bool */;
  %1042 = cast(%var_3958, dtype="bool") /* ty=Tensor[(8, 5, 11), bool] */;
  %1043 = logical_or(%1041, %1042) /* ty=Tensor[(8, 5, 11), bool] */;
  %1044 = cast(%1043, dtype="bool") /* ty=Tensor[(8, 5, 11), bool] */;
  %1045 = cast(%var_3957, dtype="bool") /* ty=bool */;
  %1046 = equal(%1044, %1045) /* ty=Tensor[(8, 5, 11), bool] */;
  %1047 = cast(%1046, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %1048 = @func_1736() /* ty=Tensor[(624), float64] */;
  %1049 = %1040.2;
  %1050 = atan(%1047) /* ty=Tensor[(8, 5, 11), float64] */;
  (%1048, %1037, %1049, %1050)
}

def @func_3145() -> Tensor[(182), int64] {
  @func_1851() /* ty=Tensor[(182), int64] */
}

def @func_11107() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %1051 = @func_2293() /* ty=(Tensor[(182), int64],) */;
  %1052 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %1053 = %1051.0;
  %1054 = %1052.0;
  (%1053, %1054)
}

def @main() -> (Tensor[(182), int64], Tensor[(960), float64], Tensor[(182), int64], Tensor[(15, 15, 5), float64], Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(10, 14, 9), bool]) {
  %1055 = @func_11107() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */;
  %1056 = @func_5117() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %1057 = @func_10062() /* ty=(Tensor[(182), int64], Tensor[(15, 15, 5), float64], Tensor[(1125), float32], Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */;
  %1058 = @func_11107() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */;
  %1059 = @func_7437() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */;
  %1060 = %1059.1;
  %1061 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 14, 9), float64] */, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %1062 = shape_of(%1060, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1063 = cast(%1060, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %1064 = dyn.reshape(%1061, %1062, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1065 = %1055.0;
  %1066 = %1056.3;
  %1067 = @func_10563() /* ty=Tensor[(182), int64] */;
  %1068 = %1057.1;
  %1069 = %1058.1;
  %1070 = @func_6713() /* ty=Tensor[(182), int64] */;
  %1071 = logical_or(%1063, %1064) /* ty=Tensor[(10, 14, 9), bool] */;
  (%1065, %1066, %1067, %1068, %1069, %1070, %1071)
}

def @func_7650() -> Tensor[(10, 14, 9), float64] {
  @func_2864() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_10706() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %1072 = @func_4572() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %1073 = @func_7139() /* ty=Tensor[(182), int64] */;
  %1074 = %1072.0;
  (%1073, %1074)
}

def @func_9329(%var_9300: bool) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(24, 26), float64], Tensor[(182), int64]) {
  %1075 = @func_6246() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %1076 = @func_9258() /* ty=(Tensor[(182), int64],) */;
  %1077 = cast(%var_9300, dtype="bool") /* ty=bool */;
  %1078 = cast(meta[relay.Constant][55] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %1079 = cast(meta[relay.Constant][56] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %1080 = reshape(%1077, newshape=[]) /* ty=bool */;
  %1081 = reshape(%1078, newshape=[440]) /* ty=Tensor[(440), bool] */;
  %1082 = reshape(%1079, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %1083 = @func_4867(%1080, %1081, %1082) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %1084 = @func_6990() /* ty=(Tensor[(182), int64],) */;
  %1085 = cast(meta[relay.Constant][57] /* ty=Tensor[(24, 26), float64] */, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %1086 = reshape(%1085, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %1087 = @func_830(%1086) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %1088 = @func_7878() /* ty=(Tensor[(182), int64],) */;
  %1089 = %1075.1;
  %1090 = %1076.0;
  %1091 = %1083.7;
  %1092 = %1084.0;
  %1093 = %1087.1;
  %1094 = %1088.0;
  (%1089, %1090, %1091, %var_9300, meta[relay.Constant][55] /* ty=Tensor[(440), bool] */, meta[relay.Constant][56] /* ty=Tensor[(540), float64] */, %1092, %1093, meta[relay.Constant][57] /* ty=Tensor[(24, 26), float64] */, %1094)
}

def @func_6958() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %1095 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %1096 = %1095.0;
  %1097 = @func_5000() /* ty=Tensor[(182), int64] */;
  (%1096, %1097)
}

def @func_9354() -> Tensor[(182), int64] {
  @func_1851() /* ty=Tensor[(182), int64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1471() -> Tensor[(10, 14, 9), bool] {
  %6 = fn () -> Tensor[(10, 14, 9), bool] {
    %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 14, 9), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
    %1 = atan(%0) /* ty=Tensor[(10, 14, 9), float32] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 14, 9), float32] */, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
    %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(%1, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%4, %5) /* ty=Tensor[(10, 14, 9), bool] */
  };
  %6() /* ty=Tensor[(10, 14, 9), bool] */
}

def @func_2508(%var_2506: Tensor[(1080), float64], %var_2507: float32) -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 12, 9), float64], Tensor[(1080), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) {
  %24 = fn (%var_2490: Tensor[(1080), float64], %var_2493: float32) -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 12, 9), float64], Tensor[(1080), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) {
    %7 = @func_1176() /* ty=(Tensor[(182), int64],) */;
    %8 = cast(%var_2490, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %9 = reshape(%8, newshape=[10, 12, 9]) /* ty=Tensor[(10, 12, 9), float64] */;
    %10 = @func_1325(%9) /* ty=(Tensor[(10, 12, 9), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(2160), float64]) */;
    %11 = cast(%var_2493, dtype="float32") /* ty=float32 */;
    %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
    %13 = %7.0;
    %14 = cast(%13, dtype="int64") /* ty=Tensor[(182), int64] */;
    %15 = reshape(%11, newshape=[]) /* ty=float32 */;
    %16 = reshape(%12, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
    %17 = reshape(%14, newshape=[182]) /* ty=Tensor[(182), int64] */;
    %18 = @func_684(%15, %16, %17) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) */;
    %19 = @func_2293() /* ty=(Tensor[(182), int64],) */;
    %20 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
    %21 = %10.0;
    %22 = %18.1;
    %23 = %19.0;
    (%13, %20, %21, %var_2490, %22, %var_2493, meta[relay.Constant][1] /* ty=Tensor[(648), float32] */, %23)
  };
  %24(%var_2506, %var_2507) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 12, 9), float64], Tensor[(1080), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */
}

def @main() -> (Tensor[(182), int64], Tensor[(960), float64], Tensor[(182), int64], Tensor[(15, 15, 5), float64], Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(10, 14, 9), bool]) {
  %25 = @func_11109() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */;
  %26 = @func_5118() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %27 = @func_10063() /* ty=(Tensor[(182), int64], Tensor[(15, 15, 5), float64], Tensor[(1125), float32], Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */;
  %28 = @func_11109() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */;
  %29 = @func_7438() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */;
  %30 = %29.1;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(10, 14, 9), float64] */, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = %25.0;
  %36 = %26.3;
  %37 = @func_10563() /* ty=Tensor[(182), int64] */;
  %38 = %27.1;
  %39 = %28.1;
  %40 = @func_6713() /* ty=Tensor[(182), int64] */;
  %41 = logical_or(%33, %34) /* ty=Tensor[(10, 14, 9), bool] */;
  (%35, %36, %37, %38, %39, %40, %41)
}

def @func_3274() -> Tensor[(182), int64] {
  @func_3272() /* ty=Tensor[(182), int64] */
}

def @func_5894() -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) {
  @func_5892() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) */
}

def @func_1325(%var_1287: Tensor[(10, 12, 9), float64]) -> (Tensor[(10, 12, 9), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(2160), float64]) {
  %42 = cast(%var_1287, dtype="float64") /* ty=Tensor[(10, 12, 9), float64] */;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %44 = cast(meta[relay.Constant][3] /* ty=Tensor[(2160), float32] */, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
  %45 = reshape(%43, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
  %46 = reshape(%44, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
  %47 = @func_604(%45, %46) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(2160), float32] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %49 = sqrt(%42) /* ty=Tensor[(10, 12, 9), float64] */;
  %50 = %47.4;
  %51 = @func_1283() /* ty=Tensor[(182), int64] */;
  %52 = atan(%48) /* ty=Tensor[(2160), float64] */;
  (%49, %50, %51, %52)
}

def @func_6443() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %53 = @func_4410() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %54 = @func_5590() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %55 = %53.1;
  %56 = %54.0;
  (%55, %56)
}

def @func_7710() -> (Tensor[(182), int64],) {
  %59 = fn () -> (Tensor[(182), int64],) {
    %57 = @func_2562() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %58 = %57.0;
    (%58,)
  };
  %59() /* ty=(Tensor[(182), int64],) */
}

def @func_830(%var_822: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) {
  %60 = cast(%var_822, dtype="float64") /* ty=Tensor[(12, 13, 4), float64] */;
  %61 = cast(meta[relay.Constant][4] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
  %62 = reshape(%61, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %63 = @func_353(%62) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %64 = cosh(%60) /* ty=Tensor[(12, 13, 4), float64] */;
  %65 = %63.2;
  (%64, %65, meta[relay.Constant][4] /* ty=Tensor[(182), int64] */)
}

def @func_2896() -> (Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) {
  %75 = fn () -> (Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) {
    %66 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
    %67 = cast(%66, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
    %68 = @func_2185() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
    %69 = %68.0;
    %70 = cast(%69, dtype="int64") /* ty=Tensor[(182), int64] */;
    %71 = reshape(%70, newshape=[182]) /* ty=Tensor[(182), int64] */;
    %72 = @func_353(%71) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
    %73 = erf(%67) /* ty=Tensor[(10, 14, 9), float32] */;
    %74 = %72.1;
    (%73, %69, %74)
  };
  %75() /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */
}

def @func_2331() -> Tensor[(182), int64] {
  @func_1851() /* ty=Tensor[(182), int64] */
}

def @func_2393(%var_2391: Tensor[(1, 624), float64], %var_2392: Tensor[(4, 624), float64]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(4, 624), int32]) {
  @func_2389(%var_2391, %var_2392) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(4, 624), int32]) */
}

def @func_9074() -> (Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(182), int64], float32) {
  %83 = fn () -> (Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(182), int64], float32) {
    %76 = @func_7324() /* ty=(Tensor[(10, 14, 9), float32],) */;
    %77 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
    %78 = @func_4383() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) */;
    %79 = %76.0;
    %80 = @func_3145() /* ty=Tensor[(182), int64] */;
    %81 = %77.1;
    %82 = %78.2;
    (%79, %80, %81, %82)
  };
  %83() /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(182), int64], float32) */
}

def @func_10651() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %86 = fn () -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
    %84 = @func_5000() /* ty=Tensor[(182), int64] */;
    %85 = @func_6414() /* ty=Tensor[(10, 14, 9), float64] */;
    (%84, %85)
  };
  %86() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */
}

def @func_7162() -> (Tensor[(182), int64],) {
  @func_7160() /* ty=(Tensor[(182), int64],) */
}

def @func_7325() -> (Tensor[(10, 14, 9), float32],) {
  %90 = fn () -> (Tensor[(10, 14, 9), float32],) {
    %87 = @func_6414() /* ty=Tensor[(10, 14, 9), float64] */;
    %88 = cast(%87, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
    %89 = rsqrt(%88) /* ty=Tensor[(10, 14, 9), float32] */;
    (%89,)
  };
  %90() /* ty=(Tensor[(10, 14, 9), float32],) */
}

def @func_4770() -> (Tensor[(182), int64],) {
  %91 = @func_2034() /* ty=(Tensor[(182), int64],) */;
  %92 = %91.0;
  (%92,)
}

def @func_1259(%var_1258: int64) -> (Tensor[(15, 11, 15), bool], Tensor[(1, 12, 4), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) {
  %109 = fn (%var_1230: int64) -> (Tensor[(15, 11, 15), bool], Tensor[(1, 12, 4), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) {
    %93 = cast(%var_1230, dtype="bool") /* ty=bool */;
    %94 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 11, 15), int64] */, dtype="bool") /* ty=Tensor[(15, 11, 15), bool] */;
    %95 = cast(%var_1230, dtype="float64") /* ty=float64 */;
    %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 12, 4), int64] */, dtype="float64") /* ty=Tensor[(1, 12, 4), float64] */;
    %97 = @func_1176() /* ty=(Tensor[(182), int64],) */;
    %98 = %97.0;
    %99 = cast(%98, dtype="int64") /* ty=Tensor[(182), int64] */;
    %100 = reshape(%99, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
    %101 = @func_135(%100) /* ty=(Tensor[(13, 2, 7), int64],) */;
    %102 = cast(%98, dtype="int64") /* ty=Tensor[(182), int64] */;
    %103 = reshape(%102, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
    %104 = @func_135(%103) /* ty=(Tensor[(13, 2, 7), int64],) */;
    %105 = less(%93, %94) /* ty=Tensor[(15, 11, 15), bool] */;
    %106 = power(%95, %96) /* ty=Tensor[(1, 12, 4), float64] */;
    %107 = %101.0;
    %108 = %104.0;
    (%105, %106, %98, %107, %108)
  };
  %109(%var_1258) /* ty=(Tensor[(15, 11, 15), bool], Tensor[(1, 12, 4), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */
}

def @func_8628(%var_8627: Tensor[(2160), float32]) -> (Tensor[(8, 13, 13), float64], Tensor[(90), uint32], Tensor[(2160), float32], Tensor[(90), uint32]) {
  %120 = fn (%var_8622: Tensor[(2160), float32]) -> (Tensor[(8, 13, 13), float64], Tensor[(90), uint32], Tensor[(2160), float32], Tensor[(90), uint32]) {
    %110 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %111 = cast(%var_8622, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %112 = cast(meta[relay.Constant][7] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(90), uint32] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %114 = reshape(%111, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %115 = reshape(%112, newshape=[90]) /* ty=Tensor[(90), uint32] */;
    %116 = reshape(%113, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), float64] */;
    %117 = @func_3403(%114, %115, %116) /* ty=(Tensor[(2160), float32], Tensor[(13, 2, 7), float32], Tensor[(90), uint32], Tensor[(9, 2, 5), bool]) */;
    %118 = %110.0;
    %119 = %117.2;
    (%118, %119, %var_8622, meta[relay.Constant][7] /* ty=Tensor[(90), uint32] */)
  };
  %120(%var_8627) /* ty=(Tensor[(8, 13, 13), float64], Tensor[(90), uint32], Tensor[(2160), float32], Tensor[(90), uint32]) */
}

def @func_7607(%var_7596: int32, %var_7597: Tensor[(3, 1, 1), int32]) -> (Tensor[(3, 1, 1), int32],) {
  %121 = cast(%var_7596, dtype="int32") /* ty=int32 */;
  %122 = cast(%var_7597, dtype="int32") /* ty=Tensor[(3, 1, 1), int32] */;
  %123 = right_shift(%121, %122) /* ty=Tensor[(3, 1, 1), int32] */;
  (%123,)
}

def @func_9978() -> Tensor[(182), int64] {
  %124 = fn () -> Tensor[(182), int64] {
    @func_5395() /* ty=Tensor[(182), int64] */
  };
  %124() /* ty=Tensor[(182), int64] */
}

def @func_2693(%var_2691: Tensor[(10, 16, 6), float64], %var_2692: Tensor[(10, 16, 6), float64]) -> (Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) {
  %131 = fn (%var_2679: Tensor[(10, 16, 6), float64], %var_2680: Tensor[(10, 16, 6), float64]) -> (Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) {
    %125 = cast(%var_2680, dtype="float64") /* ty=Tensor[(10, 16, 6), float64] */;
    %126 = shape_of(%var_2679, dtype="int32") /* ty=Tensor[(3), int32] */;
    %127 = cast(%var_2679, dtype="float64") /* ty=Tensor[(10, 16, 6), float64] */;
    %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %129 = power(%127, %128) /* ty=Tensor[(10, 16, 6), float64] */;
    %130 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
    (%129, %130)
  };
  %131(%var_2691, %var_2692) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */
}

def @func_7636() -> (Tensor[(182), int64],) {
  %134 = fn () -> (Tensor[(182), int64],) {
    %132 = @func_1497() /* ty=(Tensor[(182), int64],) */;
    %133 = %132.0;
    (%133,)
  };
  %134() /* ty=(Tensor[(182), int64],) */
}

def @func_6991() -> (Tensor[(182), int64],) {
  %137 = fn () -> (Tensor[(182), int64],) {
    %135 = @func_4410() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
    %136 = %135.0;
    (%136,)
  };
  %137() /* ty=(Tensor[(182), int64],) */
}

def @func_11012() -> (Tensor[(182), int64],) {
  %140 = fn () -> (Tensor[(182), int64],) {
    %138 = @func_7742() /* ty=(Tensor[(182), int64], Tensor[(648), float32], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) */;
    %139 = %138.0;
    (%139,)
  };
  %140() /* ty=(Tensor[(182), int64],) */
}

def @func_2988(%var_2958: Tensor[(10, 14, 9), float64]) -> (Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(10, 14, 9), uint16]) {
  %141 = @func_2864() /* ty=Tensor[(10, 14, 9), float64] */;
  %142 = cast(%var_2958, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="float32") /* ty=Tensor[(10, 14, 9), float32] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %146 = @func_2860() /* ty=(Tensor[(182), int64],) */;
  %147 = cast(%var_2958, dtype="uint16") /* ty=Tensor[(10, 14, 9), uint16] */;
  %148 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%141, dtype="uint16") /* ty=Tensor[(10, 14, 9), uint16] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %151 = power(%144, %145) /* ty=Tensor[(10, 14, 9), float32] */;
  %152 = %146.0;
  %153 = minimum(%149, %150) /* ty=Tensor[(10, 14, 9), uint16] */;
  (%151, %152, %153)
}

def @func_1284() -> Tensor[(182), int64] {
  %155 = fn () -> Tensor[(182), int64] {
    %154 = @func_1176() /* ty=(Tensor[(182), int64],) */;
    %154.0
  };
  %155() /* ty=Tensor[(182), int64] */
}

def @func_3913(%var_3909: Tensor[(1080), float64], %var_3910: float32, %var_3911: Tensor[(2160), float32], %var_3912: Tensor[(624, 1), float64]) -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(1080), uint16], Tensor[(90), uint32], Tensor[(2160), float32], Tensor[(90), uint32], Tensor[(182), int64], Tensor[(182), int64], Tensor[(624, 1), float64]) {
  @func_3907(%var_3909, %var_3910, %var_3911, %var_3912) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(1080), uint16], Tensor[(90), uint32], Tensor[(2160), float32], Tensor[(90), uint32], Tensor[(182), int64], Tensor[(182), int64], Tensor[(624, 1), float64]) */
}

def @func_10390(%var_10368: bool) -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64], Tensor[(440), bool], bool, Tensor[(960), float64], Tensor[(182), int64]) {
  %156 = @func_5261() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(2496), float64], Tensor[(26, 96), float64]) */;
  %157 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %158 = cast(%var_10368, dtype="bool") /* ty=bool */;
  %159 = reshape(%158, newshape=[]) /* ty=bool */;
  %160 = @func_5995(%159) /* ty=(Tensor[(624), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) */;
  %161 = @func_6048() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(182), int64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64]) */;
  %162 = %156.0;
  %163 = %157.0;
  %164 = %160.3;
  %165 = %161.3;
  %166 = @func_7139() /* ty=Tensor[(182), int64] */;
  (%162, %163, %164, %var_10368, %165, %166)
}

def @func_10838() -> (Tensor[(624), float64],) {
  %167 = @func_1736() /* ty=Tensor[(624), float64] */;
  (%167,)
}

def @func_2212() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) {
  @func_2210() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */
}

def @func_10752() -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64]) {
  %172 = fn () -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64]) {
    %168 = @func_3797() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %169 = @func_2034() /* ty=(Tensor[(182), int64],) */;
    %170 = %168.0;
    %171 = %169.0;
    (%170, %171)
  };
  %172() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64]) */
}

def @func_10592() -> Tensor[(11, 15, 14), float64] {
  %174 = fn () -> Tensor[(11, 15, 14), float64] {
    %173 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 14), float64] */;
    cos(%173) /* ty=Tensor[(11, 15, 14), float64] */
  };
  %174() /* ty=Tensor[(11, 15, 14), float64] */
}

def @func_7345() -> (Tensor[(624), float64],) {
  %176 = fn () -> (Tensor[(624), float64],) {
    %175 = @func_1736() /* ty=Tensor[(624), float64] */;
    (%175,)
  };
  %176() /* ty=(Tensor[(624), float64],) */
}

def @func_2471(%var_2469: Tensor[(2496), float64]) -> (Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(2496), float64]) {
  @func_2468(%var_2469) /* ty=(Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(2496), float64]) */
}

def @func_10393(%var_10391: bool) -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64], Tensor[(440), bool], bool, Tensor[(960), float64], Tensor[(182), int64]) {
  @func_10390(%var_10391) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64], Tensor[(440), bool], bool, Tensor[(960), float64], Tensor[(182), int64]) */
}

def @func_3146() -> Tensor[(182), int64] {
  %177 = fn () -> Tensor[(182), int64] {
    @func_1851() /* ty=Tensor[(182), int64] */
  };
  %177() /* ty=Tensor[(182), int64] */
}

def @func_3907(%var_3826: Tensor[(1080), float64], %var_3827: float32, %var_3871: Tensor[(2160), float32], %var_3894: Tensor[(624, 1), float64]) -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(1080), uint16], Tensor[(90), uint32], Tensor[(2160), float32], Tensor[(90), uint32], Tensor[(182), int64], Tensor[(182), int64], Tensor[(624, 1), float64]) {
  %178 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %179 = cast(%var_3826, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %180 = cast(%var_3827, dtype="float32") /* ty=float32 */;
  %181 = reshape(%179, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %182 = reshape(%180, newshape=[]) /* ty=float32 */;
  %183 = @func_2505(%181, %182) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 12, 9), float64], Tensor[(1080), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
  %184 = @func_2185() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %185 = cast(%var_3826, dtype="uint16") /* ty=Tensor[(1080), uint16] */;
  %186 = cast(%var_3827, dtype="uint16") /* ty=uint16 */;
  %187 = cast(%var_3871, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %188 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %189 = cast(meta[relay.Constant][9] /* ty=Tensor[(90), uint32] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %190 = reshape(%187, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %191 = reshape(%188, newshape=[90]) /* ty=Tensor[(90), uint32] */;
  %192 = reshape(%189, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), float64] */;
  %193 = @func_3403(%190, %191, %192) /* ty=(Tensor[(2160), float32], Tensor[(13, 2, 7), float32], Tensor[(90), uint32], Tensor[(9, 2, 5), bool]) */;
  %194 = cast(%var_3894, dtype="float64") /* ty=Tensor[(624, 1), float64] */;
  %195 = reshape(%194, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %196 = @func_830(%195) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %197 = %178.0;
  %198 = %183.7;
  %199 = %184.1;
  %200 = right_shift(%185, %186) /* ty=Tensor[(1080), uint16] */;
  %201 = %193.2;
  %202 = @func_2331() /* ty=Tensor[(182), int64] */;
  %203 = %196.1;
  (%197, %198, %199, %200, %201, %var_3871, meta[relay.Constant][9] /* ty=Tensor[(90), uint32] */, %202, %203, %var_3894)
}

def @func_3228() -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) {
  %208 = fn () -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) {
    %204 = @func_2895() /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
    %205 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
    %206 = @func_1851() /* ty=Tensor[(182), int64] */;
    %207 = %204.2;
    (%205, %206, %207)
  };
  %208() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */
}

def @func_3797() -> (Tensor[(10, 14, 9), float64],) {
  %209 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %210 = %209.0;
  (%210,)
}

def @func_3582(%var_3580: Tensor[(10, 14, 9), float64], %var_3581: Tensor[(10, 14, 9), int16]) -> (Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), float64], Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 13, 13), float64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  @func_3578(%var_3580, %var_3581) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), float64], Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 13, 13), float64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */
}

def @func_6216() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) {
  @func_6214() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_833(%var_831: Tensor[(12, 13, 4), float64]) -> (Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) {
  @func_830(%var_831) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_4267() -> (Tensor[(182), int64],) {
  %213 = fn () -> (Tensor[(182), int64],) {
    %211 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
    %212 = %211.1;
    (%212,)
  };
  %213() /* ty=(Tensor[(182), int64],) */
}

def @func_9356() -> Tensor[(182), int64] {
  @func_9354() /* ty=Tensor[(182), int64] */
}

def @func_5591() -> (Tensor[(10, 14, 9), float64],) {
  %216 = fn () -> (Tensor[(10, 14, 9), float64],) {
    %214 = @func_4479() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %215 = %214.0;
    (%215,)
  };
  %216() /* ty=(Tensor[(10, 14, 9), float64],) */
}

def @func_4951() -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  %217 = @func_2864() /* ty=Tensor[(10, 14, 9), float64] */;
  %218 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
  (%217, %218)
}

def @func_10333() -> Tensor[(10, 14, 9), float64] {
  @func_1751() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_9500(%var_9498: Tensor[(8, 4, 13), float32]) -> (Tensor[(8, 4, 13), float32],) {
  @func_9497(%var_9498) /* ty=(Tensor[(8, 4, 13), float32],) */
}

def @func_9240() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(240), float32]) {
  %219 = @func_8813() /* ty=(Tensor[(182), int64],) */;
  %220 = cast(meta[relay.Constant][10] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %221 = reshape(%220, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %222 = @func_5927(%221) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(240), float32]) */;
  %223 = %219.0;
  %224 = @func_3272() /* ty=Tensor[(182), int64] */;
  %225 = @func_1283() /* ty=Tensor[(182), int64] */;
  %226 = %222.0;
  (%223, %224, %225, %226, meta[relay.Constant][10] /* ty=Tensor[(240), float32] */)
}

def @func_2035() -> (Tensor[(182), int64],) {
  %229 = fn () -> (Tensor[(182), int64],) {
    %227 = @func_1176() /* ty=(Tensor[(182), int64],) */;
    %228 = %227.0;
    (%228,)
  };
  %229() /* ty=(Tensor[(182), int64],) */
}

def @func_9877(%var_9875: Tensor[(16, 4, 16), uint8], %var_9876: Tensor[(16, 4, 16), uint8]) -> (Tensor[(16, 4, 16), uint8], Tensor[(16, 4, 16), float32], Tensor[(16, 4, 16), float32]) {
  %239 = fn (%var_9855: Tensor[(16, 4, 16), uint8], %var_9856: Tensor[(16, 4, 16), uint8]) -> (Tensor[(16, 4, 16), uint8], Tensor[(16, 4, 16), float32], Tensor[(16, 4, 16), float32]) {
    %230 = cast(%var_9856, dtype="uint8") /* ty=Tensor[(16, 4, 16), uint8] */;
    %231 = shape_of(%var_9855, dtype="int32") /* ty=Tensor[(3), int32] */;
    %232 = cast(%var_9855, dtype="uint8") /* ty=Tensor[(16, 4, 16), uint8] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %234 = cast(%var_9856, dtype="float32") /* ty=Tensor[(16, 4, 16), float32] */;
    %235 = cast(%var_9856, dtype="float32") /* ty=Tensor[(16, 4, 16), float32] */;
    %236 = bitwise_xor(%232, %233) /* ty=Tensor[(16, 4, 16), uint8] */;
    %237 = acos(%234) /* ty=Tensor[(16, 4, 16), float32] */;
    %238 = sigmoid(%235) /* ty=Tensor[(16, 4, 16), float32] */;
    (%236, %237, %238)
  };
  %239(%var_9875, %var_9876) /* ty=(Tensor[(16, 4, 16), uint8], Tensor[(16, 4, 16), float32], Tensor[(16, 4, 16), float32]) */
}

def @func_1158() -> (Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) {
  %240 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 13, 13), float64] */, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
  %241 = erf(%240) /* ty=Tensor[(8, 13, 13), float64] */;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(8, 13, 13), float64] */;
  %243 = cast(meta[relay.Constant][12] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %244 = reshape(%243, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %245 = @func_830(%244) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %246 = acos(%242) /* ty=Tensor[(8, 13, 13), float64] */;
  %247 = %245.2;
  (%246, %247, meta[relay.Constant][12] /* ty=Tensor[(624), float64] */)
}

def @func_5397() -> Tensor[(182), int64] {
  @func_5395() /* ty=Tensor[(182), int64] */
}

def @func_137(%var_136: Tensor[(13, 2, 7), int64]) -> (Tensor[(13, 2, 7), int64],) {
  %253 = fn (%var_119: Tensor[(13, 2, 7), int64]) -> (Tensor[(13, 2, 7), int64],) {
    %248 = cast(%var_119, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
    %249 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(13, 2, 7), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %250 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 2, 7), int64] */, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
    %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %252 = maximum(%250, %251) /* ty=Tensor[(13, 2, 7), int64] */;
    (%252,)
  };
  %253(%var_136) /* ty=(Tensor[(13, 2, 7), int64],) */
}

def @func_4309() -> Tensor[(10, 14, 9), float64] {
  @func_4307() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_7895() -> (Tensor[(1, 2, 2), float64],) {
  %254 = @func_6347() /* ty=(Tensor[(1, 2, 2), float64],) */;
  %255 = %254.0;
  (%255,)
}

def @func_2210() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) {
  %256 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %257 = cast(meta[relay.Constant][14] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %258 = reshape(%257, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %259 = @func_830(%258) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %260 = %256.0;
  %261 = %259.2;
  (%260, %261, meta[relay.Constant][14] /* ty=Tensor[(624), float64] */)
}

def @func_6445() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  @func_6443() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */
}

def @func_2866() -> Tensor[(10, 14, 9), float64] {
  @func_2864() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_4412() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  @func_4410() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_7742() -> (Tensor[(182), int64], Tensor[(648), float32], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) {
  %262 = @func_6990() /* ty=(Tensor[(182), int64],) */;
  %263 = @func_4383() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) */;
  %264 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %265 = cast(meta[relay.Constant][15] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %266 = cast(meta[relay.Constant][16] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %267 = reshape(%264, newshape=[]) /* ty=bool */;
  %268 = reshape(%265, newshape=[440]) /* ty=Tensor[(440), bool] */;
  %269 = reshape(%266, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %270 = @func_4867(%267, %268, %269) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %271 = %262.0;
  %272 = %263.1;
  %273 = %270.6;
  (%271, %272, %273, False /* ty=bool */, meta[relay.Constant][15] /* ty=Tensor[(440), bool] */, meta[relay.Constant][16] /* ty=Tensor[(540), float64] */)
}

def @func_5525() -> (Tensor[(624), float64], Tensor[(182), int64]) {
  @func_5523() /* ty=(Tensor[(624), float64], Tensor[(182), int64]) */
}

def @func_9746() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %276 = fn () -> (Tensor[(182), int64], Tensor[(182), int64]) {
    %274 = @func_8048() /* ty=Tensor[(182), int64] */;
    %275 = @func_6713() /* ty=Tensor[(182), int64] */;
    (%274, %275)
  };
  %276() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_7141() -> Tensor[(182), int64] {
  @func_7139() /* ty=Tensor[(182), int64] */
}

def @func_2746(%var_2744: uint64, %var_2745: Tensor[(6, 15, 9), bool]) -> (Tensor[(6, 15, 9), float64],) {
  %283 = fn (%var_2705: uint64, %var_2722: Tensor[(6, 15, 9), bool]) -> (Tensor[(6, 15, 9), float64],) {
    %277 = cast(%var_2705, dtype="bool") /* ty=bool */;
    %278 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 15, 9), uint64] */, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
    %279 = less(%277, %278) /* ty=Tensor[(1, 15, 9), bool] */;
    %280 = cast(%279, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
    %281 = cast(%var_2722, dtype="float64") /* ty=Tensor[(6, 15, 9), float64] */;
    %282 = maximum(%280, %281) /* ty=Tensor[(6, 15, 9), float64] */;
    (%282,)
  };
  %283(%var_2744, %var_2745) /* ty=(Tensor[(6, 15, 9), float64],) */
}

def @func_10008(%var_10006: Tensor[(960), float64]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(960), float64]) {
  @func_10005(%var_10006) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(960), float64]) */
}

def @func_2672(%var_2615: Tensor[(9, 2, 5), uint32], %var_2637: Tensor[(9, 2, 5), uint32], %var_2643: Tensor[(9, 2, 5), uint32]) -> (Tensor[(9, 2, 5), int32], Tensor[(9, 2, 5), float64], Tensor[(9, 2, 5), float32], Tensor[(10, 14, 9), float64], Tensor[(9, 2, 5), float64]) {
  %284 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 2, 1), uint32] */, dtype="uint32") /* ty=Tensor[(9, 2, 1), uint32] */;
  %285 = cast(%var_2615, dtype="uint32") /* ty=Tensor[(9, 2, 5), uint32] */;
  %286 = maximum(%284, %285) /* ty=Tensor[(9, 2, 5), uint32] */;
  %287 = cast(%var_2637, dtype="int32") /* ty=Tensor[(9, 2, 5), int32] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="int32") /* ty=Tensor[(9, 2, 5), int32] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %291 = cast(%var_2643, dtype="float64") /* ty=Tensor[(9, 2, 5), float64] */;
  %292 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %293 = cast(%286, dtype="float64") /* ty=Tensor[(9, 2, 5), float64] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %295 = cast(%var_2615, dtype="float32") /* ty=Tensor[(9, 2, 5), float32] */;
  %296 = cast(%286, dtype="float64") /* ty=Tensor[(9, 2, 5), float64] */;
  %297 = logical_xor(%289, %290) /* ty=Tensor[(9, 2, 5), int32] */;
  %298 = floor_mod(%293, %294) /* ty=Tensor[(9, 2, 5), float64] */;
  %299 = tan(%295) /* ty=Tensor[(9, 2, 5), float32] */;
  %300 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
  %301 = asinh(%296) /* ty=Tensor[(9, 2, 5), float64] */;
  (%297, %298, %299, %300, %301)
}

def @func_9830(%var_9827: Tensor[(5, 10, 12), float32], %var_9828: Tensor[(336), int64], %var_9829: float32) -> (Tensor[(5, 10, 12), float32], Tensor[(4, 6, 14), bool], Tensor[(56), int64], Tensor[(336), int64], Tensor[(182), int64], float32) {
  @func_9825(%var_9827, %var_9828, %var_9829) /* ty=(Tensor[(5, 10, 12), float32], Tensor[(4, 6, 14), bool], Tensor[(56), int64], Tensor[(336), int64], Tensor[(182), int64], float32) */
}

def @func_7212() -> Tensor[(182), int64] {
  @func_7210() /* ty=Tensor[(182), int64] */
}

def @func_1160() -> (Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) {
  @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */
}

def @func_11060() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %302 = @func_1851() /* ty=Tensor[(182), int64] */;
  %303 = @func_7032() /* ty=Tensor[(182), int64] */;
  (%302, %303)
}

def @func_10564() -> Tensor[(182), int64] {
  %304 = fn () -> Tensor[(182), int64] {
    @func_6322() /* ty=Tensor[(182), int64] */
  };
  %304() /* ty=Tensor[(182), int64] */
}

def @func_7034() -> Tensor[(182), int64] {
  @func_7032() /* ty=Tensor[(182), int64] */
}

def @func_9480(%var_9478: int64) -> (Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], int64) {
  @func_9477(%var_9478) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], int64) */
}

def @func_10129() -> (Tensor[(1, 2, 2), float64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) {
  @func_10127() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */
}

def @func_10017() -> (Tensor[(10, 14, 9), float64],) {
  @func_10015() /* ty=(Tensor[(10, 14, 9), float64],) */
}

def @func_10501(%var_10500: Tensor[(240), float32]) -> (Tensor[(8, 3, 10), bool], Tensor[(240), float32], Tensor[(10, 2, 2), bool]) {
  %321 = fn (%var_10492: Tensor[(240), float32]) -> (Tensor[(8, 3, 10), bool], Tensor[(240), float32], Tensor[(10, 2, 2), bool]) {
    %305 = cast(%var_10492, dtype="float32") /* ty=Tensor[(240), float32] */;
    %306 = reshape(%305, newshape=[8, 3, 10]) /* ty=Tensor[(8, 3, 10), float32] */;
    %307 = @func_4895(%306) /* ty=(Tensor[(8, 3, 10), bool], Tensor[(10, 14, 9), float64]) */;
    %308 = @func_10127() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
    %309 = %308.0;
    %310 = cast(%309, dtype="int32") /* ty=Tensor[(1, 2, 2), int32] */;
    %311 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 2, 2), float64] */, dtype="int32") /* ty=Tensor[(10, 2, 2), int32] */;
    %312 = add(%310, %311) /* ty=Tensor[(10, 2, 2), int32] */;
    %313 = cast(%312, dtype="float64") /* ty=Tensor[(10, 2, 2), float64] */;
    %314 = sigmoid(%313) /* ty=Tensor[(10, 2, 2), float64] */;
    %315 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 2, 2), float64] */, dtype="bool") /* ty=Tensor[(10, 2, 2), bool] */;
    %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
    %317 = cast(%314, dtype="bool") /* ty=Tensor[(10, 2, 2), bool] */;
    %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %319 = %307.0;
    %320 = not_equal(%317, %318) /* ty=Tensor[(10, 2, 2), bool] */;
    (%319, %var_10492, %320)
  };
  %321(%var_10500) /* ty=(Tensor[(8, 3, 10), bool], Tensor[(240), float32], Tensor[(10, 2, 2), bool]) */
}

def @func_9825(%var_9779: Tensor[(5, 10, 12), float32], %var_9789: Tensor[(336), int64], %var_9796: float32) -> (Tensor[(5, 10, 12), float32], Tensor[(4, 6, 14), bool], Tensor[(56), int64], Tensor[(336), int64], Tensor[(182), int64], float32) {
  %322 = cast(%var_9779, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
  %323 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 10, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 10, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 10, 12), float32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %326 = cast(meta[relay.Constant][21] /* ty=Tensor[(56), int64] */, dtype="int64") /* ty=Tensor[(56), int64] */;
  %327 = cast(%var_9789, dtype="int64") /* ty=Tensor[(336), int64] */;
  %328 = reshape(%326, newshape=[4, 1, 14]) /* ty=Tensor[(4, 1, 14), int64] */;
  %329 = reshape(%327, newshape=[4, 6, 14]) /* ty=Tensor[(4, 6, 14), int64] */;
  %330 = cast(%var_9796, dtype="float32") /* ty=float32 */;
  %331 = reshape(%330, newshape=[]) /* ty=float32 */;
  %332 = @func_8430(%331) /* ty=(Tensor[(182), int64], Tensor[(1080), float64], Tensor[(1080), float64], float32, Tensor[(182), int64]) */;
  %333 = power(%324, %325) /* ty=Tensor[(5, 10, 12), float32] */;
  %334 = @func_6180(%328, %329) /* ty=Tensor[(4, 6, 14), bool] */;
  %335 = %332.4;
  (%333, %334, meta[relay.Constant][21] /* ty=Tensor[(56), int64] */, %var_9789, %335, %var_9796)
}

def @func_4897(%var_4896: Tensor[(8, 3, 10), float32]) -> (Tensor[(8, 3, 10), bool], Tensor[(10, 14, 9), float64]) {
  %344 = fn (%var_4877: Tensor[(8, 3, 10), float32]) -> (Tensor[(8, 3, 10), bool], Tensor[(10, 14, 9), float64]) {
    %336 = cast(%var_4877, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
    %337 = asin(%336) /* ty=Tensor[(8, 3, 10), float32] */;
    %338 = cast(%var_4877, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
    %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %340 = cast(%337, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
    %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %342 = logical_or(%340, %341) /* ty=Tensor[(8, 3, 10), bool] */;
    %343 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
    (%342, %343)
  };
  %344(%var_4896) /* ty=(Tensor[(8, 3, 10), bool], Tensor[(10, 14, 9), float64]) */
}

def @func_3774(%var_3772: float32) -> (Tensor[(624), float64], Tensor[(624), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) {
  @func_3771(%var_3772) /* ty=(Tensor[(624), float64], Tensor[(624), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) */
}

def @func_6324() -> Tensor[(182), int64] {
  @func_6322() /* ty=Tensor[(182), int64] */
}

def @func_8433(%var_8431: float32) -> (Tensor[(182), int64], Tensor[(1080), float64], Tensor[(1080), float64], float32, Tensor[(182), int64]) {
  @func_8430(%var_8431) /* ty=(Tensor[(182), int64], Tensor[(1080), float64], Tensor[(1080), float64], float32, Tensor[(182), int64]) */
}

def @func_1648(%var_1645: Tensor[(3, 360), float64], %var_1646: Tensor[(3, 360), float32], %var_1647: Tensor[(3, 360), float32]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(3, 360), float32], Tensor[(3, 360), float64], Tensor[(3, 360), float32]) {
  %377 = fn (%var_1605: Tensor[(3, 360), float64], %var_1622: Tensor[(3, 360), float32], %var_1640: Tensor[(3, 360), float32]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(3, 360), float32], Tensor[(3, 360), float64], Tensor[(3, 360), float32]) {
    %345 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %346 = cast(%var_1605, dtype="float64") /* ty=Tensor[(3, 360), float64] */;
    %347 = reshape(%346, newshape=[10, 12, 9]) /* ty=Tensor[(10, 12, 9), float64] */;
    %348 = @func_1325(%347) /* ty=(Tensor[(10, 12, 9), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(2160), float64]) */;
    %349 = cast(%var_1605, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
    %350 = rsqrt(%349) /* ty=Tensor[(3, 360), float32] */;
    %351 = cast(%350, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
    %352 = sin(%351) /* ty=Tensor[(3, 360), float32] */;
    %353 = cast(%var_1622, dtype="bool") /* ty=Tensor[(3, 360), bool] */;
    %354 = shape_of(%350, dtype="int32") /* ty=Tensor[(2), int32] */;
    %355 = cast(%350, dtype="bool") /* ty=Tensor[(3, 360), bool] */;
    %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %357 = not_equal(%355, %356) /* ty=Tensor[(3, 360), bool] */;
    %358 = cast(%357, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
    %359 = shape_of(%352, dtype="int32") /* ty=Tensor[(2), int32] */;
    %360 = cast(%352, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
    %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %362 = cast(%352, dtype="float64") /* ty=Tensor[(3, 360), float64] */;
    %363 = shape_of(%350, dtype="int32") /* ty=Tensor[(2), int32] */;
    %364 = cast(%350, dtype="float64") /* ty=Tensor[(3, 360), float64] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %366 = cast(%var_1640, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
    %367 = shape_of(%352, dtype="int32") /* ty=Tensor[(2), int32] */;
    %368 = cast(%352, dtype="float32") /* ty=Tensor[(3, 360), float32] */;
    %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %370 = @func_1204() /* ty=Tensor[(182), int64] */;
    %371 = %345.1;
    %372 = %348.1;
    %373 = @func_1283() /* ty=Tensor[(182), int64] */;
    %374 = power(%360, %361) /* ty=Tensor[(3, 360), float32] */;
    %375 = floor_mod(%364, %365) /* ty=Tensor[(3, 360), float64] */;
    %376 = mod(%368, %369) /* ty=Tensor[(3, 360), float32] */;
    (%370, %371, %372, %373, %374, %375, %376)
  };
  %377(%var_1645, %var_1646, %var_1647) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(3, 360), float32], Tensor[(3, 360), float64], Tensor[(3, 360), float32]) */
}

def @func_6224() -> Tensor[(182), int64] {
  %379 = fn () -> Tensor[(182), int64] {
    %378 = @func_5609() /* ty=(Tensor[(182), int64],) */;
    %378.0
  };
  %379() /* ty=Tensor[(182), int64] */
}

def @func_9907() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %380 = @func_7635() /* ty=(Tensor[(182), int64],) */;
  %381 = %380.0;
  %382 = @func_8048() /* ty=Tensor[(182), int64] */;
  (%381, %382)
}

def @func_1752() -> Tensor[(10, 14, 9), float64] {
  %384 = fn () -> Tensor[(10, 14, 9), float64] {
    %383 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %383.0
  };
  %384() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_4772() -> (Tensor[(182), int64],) {
  @func_4770() /* ty=(Tensor[(182), int64],) */
}

def @func_7139() -> Tensor[(182), int64] {
  @func_1204() /* ty=Tensor[(182), int64] */
}

def @func_7210() -> Tensor[(182), int64] {
  %385 = @func_5523() /* ty=(Tensor[(624), float64], Tensor[(182), int64]) */;
  %385.1
}

def @func_2293() -> (Tensor[(182), int64],) {
  %386 = @func_1204() /* ty=Tensor[(182), int64] */;
  (%386,)
}

def @func_6248() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  @func_6246() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_6715() -> Tensor[(182), int64] {
  @func_6713() /* ty=Tensor[(182), int64] */
}

def @func_11062() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  @func_11060() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_9567() -> Tensor[(182), int64] {
  %387 = fn () -> Tensor[(182), int64] {
    @func_1204() /* ty=Tensor[(182), int64] */
  };
  %387() /* ty=Tensor[(182), int64] */
}

def @func_5021() -> Tensor[(624), float64] {
  %389 = fn () -> Tensor[(624), float64] {
    %388 = @func_2562() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %388.2
  };
  %389() /* ty=Tensor[(624), float64] */
}

def @func_7880() -> (Tensor[(182), int64],) {
  @func_7878() /* ty=(Tensor[(182), int64],) */
}

def @func_9477(%var_9471: int64) -> (Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], int64) {
  %390 = @func_4479() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %391 = cast(%var_9471, dtype="int64") /* ty=int64 */;
  %392 = reshape(%391, newshape=[]) /* ty=int64 */;
  %393 = @func_1257(%392) /* ty=(Tensor[(15, 11, 15), bool], Tensor[(1, 12, 4), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
  %394 = %390.0;
  %395 = %393.4;
  (%394, %395, %var_9471)
}

def @func_10063() -> (Tensor[(182), int64], Tensor[(15, 15, 5), float64], Tensor[(1125), float32], Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %406 = fn () -> (Tensor[(182), int64], Tensor[(15, 15, 5), float64], Tensor[(1125), float32], Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
    %396 = cast(meta[relay.Constant][22] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
    %397 = cast(meta[relay.Constant][22] /* ty=Tensor[(1125), float32] */, dtype="float32") /* ty=Tensor[(1125), float32] */;
    %398 = reshape(%396, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
    %399 = reshape(%397, newshape=[15, 15, 5]) /* ty=Tensor[(15, 15, 5), float32] */;
    %400 = @func_4283(%398, %399) /* ty=(Tensor[(15, 15, 5), float64],) */;
    %401 = @func_2210() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %402 = @func_6223() /* ty=Tensor[(182), int64] */;
    %403 = %400.0;
    %404 = %401.1;
    %405 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
    (%402, %403, meta[relay.Constant][22] /* ty=Tensor[(1125), float32] */, %404, %405)
  };
  %406() /* ty=(Tensor[(182), int64], Tensor[(15, 15, 5), float64], Tensor[(1125), float32], Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */
}

def @func_9689() -> (Tensor[(15, 3, ?), bool],) {
  @func_9687() /* ty=(Tensor[(15, 3, ?), bool],) */
}

def @func_5318(%var_5315: Tensor[(8, 5, 1), float64], %var_5316: Tensor[(8, 5, 5), float64], %var_5317: Tensor[(9, 1), int32]) -> (Tensor[(8, 5, 5), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(1080), float64], int32, Tensor[(9, 1), int32], Tensor[(1080), float64], Tensor[(10, 14, 9), float64]) {
  @func_5313(%var_5315, %var_5316, %var_5317) /* ty=(Tensor[(8, 5, 5), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(1080), float64], int32, Tensor[(9, 1), int32], Tensor[(1080), float64], Tensor[(10, 14, 9), float64]) */
}

def @func_2861() -> (Tensor[(182), int64],) {
  %409 = fn () -> (Tensor[(182), int64],) {
    %407 = @func_2185() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
    %408 = %407.0;
    (%408,)
  };
  %409() /* ty=(Tensor[(182), int64],) */
}

def @func_1736() -> Tensor[(624), float64] {
  %410 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %410.2
}

def @func_1383(%var_1382: Tensor[(624), float64]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) {
  %416 = fn (%var_1377: Tensor[(624), float64]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) {
    %411 = cast(%var_1377, dtype="float64") /* ty=Tensor[(624), float64] */;
    %412 = reshape(%411, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
    %413 = @func_830(%412) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
    %414 = @func_1204() /* ty=Tensor[(182), int64] */;
    %415 = %413.1;
    (%414, %415, %var_1377)
  };
  %416(%var_1382) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */
}

def @func_1205() -> Tensor[(182), int64] {
  %418 = fn () -> Tensor[(182), int64] {
    %417 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %417.1
  };
  %418() /* ty=Tensor[(182), int64] */
}

def @func_1498() -> (Tensor[(182), int64],) {
  %421 = fn () -> (Tensor[(182), int64],) {
    %419 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %420 = %419.1;
    (%420,)
  };
  %421() /* ty=(Tensor[(182), int64],) */
}

def @func_8049() -> Tensor[(182), int64] {
  %422 = fn () -> Tensor[(182), int64] {
    @func_6223() /* ty=Tensor[(182), int64] */
  };
  %422() /* ty=Tensor[(182), int64] */
}

def @func_9968() -> (Tensor[(182), int64],) {
  %425 = fn () -> (Tensor[(182), int64],) {
    %423 = @func_4410() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
    %424 = %423.1;
    (%424,)
  };
  %425() /* ty=(Tensor[(182), int64],) */
}

def @func_5707() -> Tensor[(9, 8, 10), bool] {
  %426 = fn () -> Tensor[(9, 8, 10), bool] {
    @func_4719() /* ty=Tensor[(9, 8, 10), bool] */
  };
  %426() /* ty=Tensor[(9, 8, 10), bool] */
}

def @func_4307() -> Tensor[(10, 14, 9), float64] {
  %427 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %427.0
}

def @func_5610() -> (Tensor[(182), int64],) {
  %430 = fn () -> (Tensor[(182), int64],) {
    %428 = @func_4184() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
    %429 = %428.1;
    (%429,)
  };
  %430() /* ty=(Tensor[(182), int64],) */
}

def @func_1547() -> (Tensor[(10, 14, 9), float64],) {
  %431 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %433 = atanh(%432) /* ty=Tensor[(10, 14, 9), float64] */;
  (%433,)
}

def @func_8520(%var_8517: Tensor[(2, 8, 6), float32], %var_8518: Tensor[(2, 8, 6), float32], %var_8519: Tensor[(1080), float64]) -> (Tensor[(2, 8, 6), float32], Tensor[(960), float64], Tensor[(182), int64], Tensor[(1080), float64]) {
  %449 = fn (%var_8473: Tensor[(2, 8, 6), float32], %var_8474: Tensor[(2, 8, 6), float32], %var_8499: Tensor[(1080), float64]) -> (Tensor[(2, 8, 6), float32], Tensor[(960), float64], Tensor[(182), int64], Tensor[(1080), float64]) {
    %434 = cast(%var_8474, dtype="float32") /* ty=Tensor[(2, 8, 6), float32] */;
    %435 = shape_of(%var_8473, dtype="int32") /* ty=Tensor[(3), int32] */;
    %436 = cast(%var_8473, dtype="float32") /* ty=Tensor[(2, 8, 6), float32] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %438 = @func_5117() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
    %439 = cast(%var_8499, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %440 = cast(%var_8499, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %441 = cast(%var_8499, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %442 = reshape(%439, newshape=[3, 360]) /* ty=Tensor[(3, 360), float64] */;
    %443 = reshape(%440, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
    %444 = reshape(%441, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
    %445 = @func_1644(%442, %443, %444) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(3, 360), float32], Tensor[(3, 360), float64], Tensor[(3, 360), float32]) */;
    %446 = maximum(%436, %437) /* ty=Tensor[(2, 8, 6), float32] */;
    %447 = %438.3;
    %448 = %445.3;
    (%446, %447, %448, %var_8499)
  };
  %449(%var_8517, %var_8518, %var_8519) /* ty=(Tensor[(2, 8, 6), float32], Tensor[(960), float64], Tensor[(182), int64], Tensor[(1080), float64]) */
}

def @func_10005(%var_10003: Tensor[(960), float64]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(960), float64]) {
  %450 = cast(%var_10003, dtype="float64") /* ty=Tensor[(960), float64] */;
  %451 = reshape(%450, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %452 = @func_4515(%451) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %453 = @func_5395() /* ty=Tensor[(182), int64] */;
  %454 = %452.0;
  (%453, %454, %var_10003)
}

def @func_9329(%var_9300: bool) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(24, 26), float64], Tensor[(182), int64]) {
  %455 = @func_6246() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %456 = @func_9258() /* ty=(Tensor[(182), int64],) */;
  %457 = cast(%var_9300, dtype="bool") /* ty=bool */;
  %458 = cast(meta[relay.Constant][23] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %459 = cast(meta[relay.Constant][24] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %460 = reshape(%457, newshape=[]) /* ty=bool */;
  %461 = reshape(%458, newshape=[440]) /* ty=Tensor[(440), bool] */;
  %462 = reshape(%459, newshape=[540]) /* ty=Tensor[(540), float64] */;
  %463 = @func_4867(%460, %461, %462) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %464 = @func_6990() /* ty=(Tensor[(182), int64],) */;
  %465 = cast(meta[relay.Constant][25] /* ty=Tensor[(24, 26), float64] */, dtype="float64") /* ty=Tensor[(24, 26), float64] */;
  %466 = reshape(%465, newshape=[12, 13, 4]) /* ty=Tensor[(12, 13, 4), float64] */;
  %467 = @func_830(%466) /* ty=(Tensor[(12, 13, 4), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %468 = @func_7878() /* ty=(Tensor[(182), int64],) */;
  %469 = %455.1;
  %470 = %456.0;
  %471 = %463.7;
  %472 = %464.0;
  %473 = %467.1;
  %474 = %468.0;
  (%469, %470, %471, %var_9300, meta[relay.Constant][23] /* ty=Tensor[(440), bool] */, meta[relay.Constant][24] /* ty=Tensor[(540), float64] */, %472, %473, meta[relay.Constant][25] /* ty=Tensor[(24, 26), float64] */, %474)
}

def @func_9260() -> (Tensor[(182), int64],) {
  @func_9258() /* ty=(Tensor[(182), int64],) */
}

def @func_9414(%var_9412: Tensor[(630, 2), float64], %var_9413: bool) -> (Tensor[(182), int64], Tensor[(10, 14, 9), float32], Tensor[(630, 2), float64], Tensor[(624), float64], bool, Tensor[(26, 96), float64], Tensor[(440), float64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) {
  @func_9410(%var_9412, %var_9413) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float32], Tensor[(630, 2), float64], Tensor[(624), float64], bool, Tensor[(26, 96), float64], Tensor[(440), float64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_11107() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %475 = @func_2293() /* ty=(Tensor[(182), int64],) */;
  %476 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %477 = %475.0;
  %478 = %476.0;
  (%477, %478)
}

def @func_10223() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %482 = fn () -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
    %479 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %480 = @func_3272() /* ty=Tensor[(182), int64] */;
    %481 = %479.0;
    (%480, %481)
  };
  %482() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */
}

def @func_4637(%var_4635: Tensor[(11, 12, 3), uint32], %var_4636: Tensor[(624), float64]) -> (Tensor[(11, 12, 3), uint32], Tensor[(182), int64], Tensor[(624), float64], Tensor[(2496), float64], Tensor[(11, 12, 3), float32]) {
  @func_4633(%var_4635, %var_4636) /* ty=(Tensor[(11, 12, 3), uint32], Tensor[(182), int64], Tensor[(624), float64], Tensor[(2496), float64], Tensor[(11, 12, 3), float32]) */
}

def @func_5313(%var_5276: Tensor[(8, 5, 1), float64], %var_5277: Tensor[(8, 5, 5), float64], %var_5296: Tensor[(9, 1), int32]) -> (Tensor[(8, 5, 5), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(1080), float64], int32, Tensor[(9, 1), int32], Tensor[(1080), float64], Tensor[(10, 14, 9), float64]) {
  %483 = cast(%var_5276, dtype="float64") /* ty=Tensor[(8, 5, 1), float64] */;
  %484 = cast(%var_5277, dtype="float64") /* ty=Tensor[(8, 5, 5), float64] */;
  %485 = @func_2562() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %486 = @func_2860() /* ty=(Tensor[(182), int64],) */;
  %487 = cast(-6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %488 = cast(%var_5296, dtype="int32") /* ty=Tensor[(9, 1), int32] */;
  %489 = cast(meta[relay.Constant][26] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %490 = reshape(%487, newshape=[]) /* ty=int32 */;
  %491 = reshape(%488, newshape=[9, 1, 1]) /* ty=Tensor[(9, 1, 1), int32] */;
  %492 = reshape(%489, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %493 = @func_3487(%490, %491, %492) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(1080), float64], Tensor[(9, 1, 1), float32]) */;
  %494 = floor_divide(%483, %484) /* ty=Tensor[(8, 5, 5), float64] */;
  %495 = %485.0;
  %496 = %486.0;
  %497 = %493.1;
  %498 = @func_1820() /* ty=Tensor[(10, 14, 9), float64] */;
  (%494, %495, %496, %497, -6 /* ty=int32 */, %var_5296, meta[relay.Constant][26] /* ty=Tensor[(1080), float64] */, %498)
}

def @func_4573() -> (Tensor[(10, 14, 9), float64],) {
  %500 = fn () -> (Tensor[(10, 14, 9), float64],) {
    %499 = @func_4307() /* ty=Tensor[(10, 14, 9), float64] */;
    (%499,)
  };
  %500() /* ty=(Tensor[(10, 14, 9), float64],) */
}

def @func_4287(%var_4285: Tensor[(15, 15, 5), float32], %var_4286: Tensor[(15, 15, 5), float32]) -> (Tensor[(15, 15, 5), float64],) {
  @func_4283(%var_4285, %var_4286) /* ty=(Tensor[(15, 15, 5), float64],) */
}

def @func_4140() -> Tensor[(182), int64] {
  %502 = fn () -> Tensor[(182), int64] {
    %501 = @func_2034() /* ty=(Tensor[(182), int64],) */;
    %501.0
  };
  %502() /* ty=Tensor[(182), int64] */
}

def @func_6049() -> (Tensor[(1, 2, 2), float64], Tensor[(182), int64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64]) {
  %515 = fn () -> (Tensor[(1, 2, 2), float64], Tensor[(182), int64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64]) {
    %503 = @func_5688() /* ty=(Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(1, 2, 2), float64]) */;
    %504 = @func_4109() /* ty=(Tensor[(182), int64],) */;
    %505 = cast(meta[relay.Constant][27] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
    %506 = cast(meta[relay.Constant][27] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
    %507 = reshape(%505, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
    %508 = reshape(%506, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
    %509 = @func_2690(%507, %508) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
    %510 = @func_5892() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) */;
    %511 = %503.2;
    %512 = %504.0;
    %513 = %509.0;
    %514 = %510.1;
    (%511, %512, %513, meta[relay.Constant][27] /* ty=Tensor[(960), float64] */, %514)
  };
  %515() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(182), int64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64]) */
}

def @func_6183(%var_6181: Tensor[(4, 1, 14), int64], %var_6182: Tensor[(4, 6, 14), int64]) -> Tensor[(4, 6, 14), bool] {
  %518 = fn (%var_6175: Tensor[(4, 1, 14), int64], %var_6176: Tensor[(4, 6, 14), int64]) -> Tensor[(4, 6, 14), bool] {
    %516 = cast(%var_6175, dtype="bool") /* ty=Tensor[(4, 1, 14), bool] */;
    %517 = cast(%var_6176, dtype="bool") /* ty=Tensor[(4, 6, 14), bool] */;
    greater_equal(%516, %517) /* ty=Tensor[(4, 6, 14), bool] */
  };
  %518(%var_6181, %var_6182) /* ty=Tensor[(4, 6, 14), bool] */
}

def @func_3059(%var_3057: float32, %var_3058: Tensor[(182), int64]) -> (Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) {
  %530 = fn (%var_3051: float32, %var_3053: Tensor[(182), int64]) -> (Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) {
    %519 = @func_2864() /* ty=Tensor[(10, 14, 9), float64] */;
    %520 = cast(%519, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
    %521 = cast(%var_3051, dtype="float32") /* ty=float32 */;
    %522 = cast(meta[relay.Constant][28] /* ty=Tensor[(648), float32] */, dtype="float32") /* ty=Tensor[(648), float32] */;
    %523 = cast(%var_3053, dtype="int64") /* ty=Tensor[(182), int64] */;
    %524 = reshape(%521, newshape=[]) /* ty=float32 */;
    %525 = reshape(%522, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
    %526 = reshape(%523, newshape=[182]) /* ty=Tensor[(182), int64] */;
    %527 = @func_684(%524, %525, %526) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) */;
    %528 = tan(%520) /* ty=Tensor[(10, 14, 9), float64] */;
    %529 = %527.1;
    (%528, %529, %var_3051, meta[relay.Constant][28] /* ty=Tensor[(648), float32] */, %var_3053)
  };
  %530(%var_3057, %var_3058) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */
}

def @func_10840() -> (Tensor[(624), float64],) {
  @func_10838() /* ty=(Tensor[(624), float64],) */
}

def @func_10785() -> Tensor[(15, 3, ?), bool] {
  %531 = @func_9687() /* ty=(Tensor[(15, 3, ?), bool],) */;
  %531.0
}

def @func_3633() -> (Tensor[(182), int64],) {
  @func_3631() /* ty=(Tensor[(182), int64],) */
}

def @func_4110() -> (Tensor[(182), int64],) {
  %534 = fn () -> (Tensor[(182), int64],) {
    %532 = @func_1176() /* ty=(Tensor[(182), int64],) */;
    %533 = %532.0;
    (%533,)
  };
  %534() /* ty=(Tensor[(182), int64],) */
}

def @func_10708() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  @func_10706() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */
}

def @func_5262() -> (Tensor[(10, 14, 9), float64], Tensor[(2496), float64], Tensor[(26, 96), float64]) {
  %540 = fn () -> (Tensor[(10, 14, 9), float64], Tensor[(2496), float64], Tensor[(26, 96), float64]) {
    %535 = cast(meta[relay.Constant][29] /* ty=Tensor[(26, 96), float64] */, dtype="float64") /* ty=Tensor[(26, 96), float64] */;
    %536 = reshape(%535, newshape=[2496]) /* ty=Tensor[(2496), float64] */;
    %537 = @func_2468(%536) /* ty=(Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(2496), float64]) */;
    %538 = @func_1820() /* ty=Tensor[(10, 14, 9), float64] */;
    %539 = %537.3;
    (%538, %539, meta[relay.Constant][29] /* ty=Tensor[(26, 96), float64] */)
  };
  %540() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(2496), float64], Tensor[(26, 96), float64]) */
}

def @func_7744() -> (Tensor[(182), int64], Tensor[(648), float32], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) {
  @func_7742() /* ty=(Tensor[(182), int64], Tensor[(648), float32], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) */
}

def @func_10015() -> (Tensor[(10, 14, 9), float64],) {
  %541 = @func_7650() /* ty=Tensor[(10, 14, 9), float64] */;
  (%541,)
}

def @func_5002() -> Tensor[(182), int64] {
  @func_5000() /* ty=Tensor[(182), int64] */
}

def @func_6802(%var_6770: float32) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) {
  %542 = @func_5748() /* ty=(Tensor[(182), int64],) */;
  %543 = @func_4951() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */;
  %544 = cast(%var_6770, dtype="float32") /* ty=float32 */;
  %545 = %542.0;
  %546 = cast(%545, dtype="int64") /* ty=Tensor[(182), int64] */;
  %547 = reshape(%544, newshape=[]) /* ty=float32 */;
  %548 = reshape(%546, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %549 = @func_3056(%547, %548) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
  %550 = @func_6322() /* ty=Tensor[(182), int64] */;
  %551 = %543.0;
  %552 = %549.1;
  (%550, %545, %551, %552, %var_6770)
}

def @func_6960() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  @func_6958() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_7651() -> Tensor[(10, 14, 9), float64] {
  %553 = fn () -> Tensor[(10, 14, 9), float64] {
    @func_2864() /* ty=Tensor[(10, 14, 9), float64] */
  };
  %553() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_9410(%var_9361: Tensor[(630, 2), float64], %var_9364: bool) -> (Tensor[(182), int64], Tensor[(10, 14, 9), float32], Tensor[(630, 2), float64], Tensor[(624), float64], bool, Tensor[(26, 96), float64], Tensor[(440), float64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) {
  %554 = @func_7635() /* ty=(Tensor[(182), int64],) */;
  %555 = cast(%var_9361, dtype="float64") /* ty=Tensor[(630, 2), float64] */;
  %556 = reshape(%555, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
  %557 = @func_2988(%556) /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(10, 14, 9), uint16]) */;
  %558 = cast(%var_9364, dtype="bool") /* ty=bool */;
  %559 = cast(meta[relay.Constant][30] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %560 = reshape(%558, newshape=[]) /* ty=bool */;
  %561 = reshape(%559, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), bool] */;
  %562 = @func_4014(%560, %561) /* ty=(Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 5, 11), float64]) */;
  %563 = @func_5261() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(2496), float64], Tensor[(26, 96), float64]) */;
  %564 = cast(meta[relay.Constant][30] /* ty=Tensor[(440), bool] */, dtype="float64") /* ty=Tensor[(440), float64] */;
  %565 = cast(meta[relay.Constant][31] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %566 = cast(meta[relay.Constant][31] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %567 = reshape(%565, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %568 = reshape(%566, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %569 = @func_2690(%567, %568) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
  %570 = cast(meta[relay.Constant][31] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %571 = reshape(%570, newshape=[960]) /* ty=Tensor[(960), float64] */;
  %572 = @func_4515(%571) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %573 = @func_5444() /* ty=(Tensor[(182), int64],) */;
  %574 = @func_7709() /* ty=(Tensor[(182), int64],) */;
  %575 = %554.0;
  %576 = %557.0;
  %577 = %562.0;
  %578 = %563.2;
  %579 = exp(%564) /* ty=Tensor[(440), float64] */;
  %580 = %569.0;
  %581 = @func_7032() /* ty=Tensor[(182), int64] */;
  %582 = %572.0;
  %583 = %573.0;
  %584 = %574.0;
  (%575, %576, %var_9361, %577, %var_9364, %578, %579, %580, meta[relay.Constant][31] /* ty=Tensor[(960), float64] */, %581, %582, %583, %584)
}

def @func_10787() -> Tensor[(15, 3, ?), bool] {
  @func_10785() /* ty=Tensor[(15, 3, ?), bool] */
}

def @func_4067(%var_4065: Tensor[(6, 10, 9), float64]) -> Tensor[(6, 10, 9), float64] {
  @func_4064(%var_4065) /* ty=Tensor[(6, 10, 9), float64] */
}

def @func_8595() -> Tensor[(182), int64] {
  @func_8593() /* ty=Tensor[(182), int64] */
}

def @func_9332(%var_9330: bool) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(24, 26), float64], Tensor[(182), int64]) {
  @func_9329(%var_9330) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(24, 26), float64], Tensor[(182), int64]) */
}

def @func_1822() -> Tensor[(10, 14, 9), float64] {
  @func_1820() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_9449() -> (Tensor[(15, 3, ?), bool], Tensor[(1, 2, 2), float64]) {
  %594 = fn () -> (Tensor[(15, 3, ?), bool], Tensor[(1, 2, 2), float64]) {
    %585 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 3, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 1), float64] */;
    %586 = acosh(%585) /* ty=Tensor[(15, 3, 1), float64] */;
    %587 = cast(%586, dtype="bool") /* ty=Tensor[(15, 3, 1), bool] */;
    %588 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(15, 3, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %589 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 3, 1), float64] */, dtype="bool") /* ty=Tensor[(15, 3, 1), bool] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %591 = @func_6347() /* ty=(Tensor[(1, 2, 2), float64],) */;
    %592 = greater(%589, %590) /* ty=Tensor[(15, 3, ?), bool] */;
    %593 = %591.0;
    (%592, %593)
  };
  %594() /* ty=(Tensor[(15, 3, ?), bool], Tensor[(1, 2, 2), float64]) */
}

def @func_8312(%var_8288: Tensor[(6, 1, 12), float32], %var_8289: Tensor[(6, 14, 12), float32]) -> (Tensor[(6, 14, 12), float32], Tensor[(6, 14, 12), float32]) {
  %595 = cast(%var_8288, dtype="float32") /* ty=Tensor[(6, 1, 12), float32] */;
  %596 = cast(%var_8289, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  %597 = cast(%var_8289, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  %598 = divide(%595, %596) /* ty=Tensor[(6, 14, 12), float32] */;
  %599 = tan(%597) /* ty=Tensor[(6, 14, 12), float32] */;
  (%598, %599)
}

def @func_8033(%var_8031: Tensor[(9, 1, 9), float32], %var_8032: float32) -> (Tensor[(9, 1, 9), float32], float32, float32, Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float32]) {
  %609 = fn (%var_8013: Tensor[(9, 1, 9), float32], %var_8018: float32) -> (Tensor[(9, 1, 9), float32], float32, float32, Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float32]) {
    %600 = cast(%var_8013, dtype="float32") /* ty=Tensor[(9, 1, 9), float32] */;
    %601 = cast(%var_8018, dtype="float32") /* ty=float32 */;
    %602 = reshape(%601, newshape=[]) /* ty=float32 */;
    %603 = @func_6802(%602) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) */;
    %604 = @func_7324() /* ty=(Tensor[(10, 14, 9), float32],) */;
    %605 = cos(%600) /* ty=Tensor[(9, 1, 9), float32] */;
    %606 = %603.4;
    %607 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
    %608 = %604.0;
    (%605, %606, %var_8018, %607, %608)
  };
  %609(%var_8031, %var_8032) /* ty=(Tensor[(9, 1, 9), float32], float32, float32, Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float32]) */
}

def @func_7897() -> (Tensor[(1, 2, 2), float64],) {
  @func_7895() /* ty=(Tensor[(1, 2, 2), float64],) */
}

def @func_5000() -> Tensor[(182), int64] {
  @func_2331() /* ty=Tensor[(182), int64] */
}

def @func_2677(%var_2674: Tensor[(9, 2, 5), uint32], %var_2675: Tensor[(9, 2, 5), uint32], %var_2676: Tensor[(9, 2, 5), uint32]) -> (Tensor[(9, 2, 5), int32], Tensor[(9, 2, 5), float64], Tensor[(9, 2, 5), float32], Tensor[(10, 14, 9), float64], Tensor[(9, 2, 5), float64]) {
  @func_2672(%var_2674, %var_2675, %var_2676) /* ty=(Tensor[(9, 2, 5), int32], Tensor[(9, 2, 5), float64], Tensor[(9, 2, 5), float32], Tensor[(10, 14, 9), float64], Tensor[(9, 2, 5), float64]) */
}

def @func_4184() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) {
  %610 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %611 = @func_1851() /* ty=Tensor[(182), int64] */;
  %612 = @func_1283() /* ty=Tensor[(182), int64] */;
  %613 = %610.1;
  (%611, %612, %613)
}

def @func_8891(%var_8890: Tensor[(648), float32]) -> (Tensor[(182), int64], Tensor[(2160), float32], Tensor[(10, 14, 9), bool], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(648), int32]) {
  %643 = fn (%var_8831: Tensor[(648), float32]) -> (Tensor[(182), int64], Tensor[(2160), float32], Tensor[(10, 14, 9), bool], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(648), int32]) {
    %614 = cast(meta[relay.Constant][33] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %615 = reshape(%614, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %616 = @func_8139(%615) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(2160), float32]) */;
    %617 = cast(meta[relay.Constant][33] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %618 = cast(meta[relay.Constant][33] /* ty=Tensor[(2160), float32] */, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
    %619 = reshape(%617, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %620 = reshape(%618, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
    %621 = @func_604(%619, %620) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
    %622 = @func_2895() /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
    %623 = @func_4383() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) */;
    %624 = %623.1;
    %625 = cast(%var_8831, dtype="uint8") /* ty=Tensor[(648), uint8] */;
    %626 = shape_of(%624, dtype="int32") /* ty=Tensor[(1), int32] */;
    %627 = cast(%624, dtype="uint8") /* ty=Tensor[(648), uint8] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %629 = multiply(%627, %628) /* ty=Tensor[(648), uint8] */;
    %630 = cast(%629, dtype="float64") /* ty=Tensor[(648), float64] */;
    %631 = cosh(%630) /* ty=Tensor[(648), float64] */;
    %632 = cast(%631, dtype="float32") /* ty=Tensor[(648), float32] */;
    %633 = log2(%632) /* ty=Tensor[(648), float32] */;
    %634 = cast(%629, dtype="int32") /* ty=Tensor[(648), int32] */;
    %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(1), int32] */;
    %636 = cast(%633, dtype="int32") /* ty=Tensor[(648), int32] */;
    %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?), int32] */;
    %638 = %616.1;
    %639 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
    %640 = %621.3;
    %641 = %622.2;
    %642 = maximum(%636, %637) /* ty=Tensor[(648), int32] */;
    (%638, meta[relay.Constant][33] /* ty=Tensor[(2160), float32] */, %639, %640, %641, %642)
  };
  %643(%var_8890) /* ty=(Tensor[(182), int64], Tensor[(2160), float32], Tensor[(10, 14, 9), bool], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(648), int32]) */
}

def @func_6881(%var_6880: Tensor[(15, 7, 6), int8]) -> (Tensor[(15, 7, 6), bool], Tensor[(182), int64]) {
  %651 = fn (%var_6868: Tensor[(15, 7, 6), int8]) -> (Tensor[(15, 7, 6), bool], Tensor[(182), int64]) {
    %644 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 7, 6), int8] */, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
    %645 = shape_of(%var_6868, dtype="int32") /* ty=Tensor[(3), int32] */;
    %646 = cast(%var_6868, dtype="bool") /* ty=Tensor[(15, 7, 6), bool] */;
    %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %648 = @func_4184() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
    %649 = greater(%646, %647) /* ty=Tensor[(15, 7, 6), bool] */;
    %650 = %648.2;
    (%649, %650)
  };
  %651(%var_6880) /* ty=(Tensor[(15, 7, 6), bool], Tensor[(182), int64]) */
}

def @func_10950() -> (Tensor[(7, 7, 12), bool], Tensor[(182), int64], Tensor[(182), int64]) {
  %652 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 7, 12), float64] */, dtype="float64") /* ty=Tensor[(7, 7, 12), float64] */;
  %653 = atanh(%652) /* ty=Tensor[(7, 7, 12), float64] */;
  %654 = cast(%653, dtype="bool") /* ty=Tensor[(7, 7, 12), bool] */;
  %655 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(7, 7, 12), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 7, 12), float64] */, dtype="bool") /* ty=Tensor[(7, 7, 12), bool] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %658 = @func_10412() /* ty=(Tensor[(182), int64],) */;
  %659 = less(%656, %657) /* ty=Tensor[(7, 7, 12), bool] */;
  %660 = @func_6223() /* ty=Tensor[(182), int64] */;
  %661 = %658.0;
  (%659, %660, %661)
}

def @func_9258() -> (Tensor[(182), int64],) {
  %662 = @func_6246() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %663 = %662.0;
  (%663,)
}

def @func_7611(%var_7609: int32, %var_7610: Tensor[(3, 1, 1), int32]) -> (Tensor[(3, 1, 1), int32],) {
  @func_7607(%var_7609, %var_7610) /* ty=(Tensor[(3, 1, 1), int32],) */
}

def @func_4517(%var_4516: Tensor[(960), float64]) -> (Tensor[(182), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) {
  %672 = fn (%var_4500: Tensor[(960), float64]) -> (Tensor[(182), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) {
    %664 = @func_2034() /* ty=(Tensor[(182), int64],) */;
    %665 = cast(%var_4500, dtype="float64") /* ty=Tensor[(960), float64] */;
    %666 = cast(%var_4500, dtype="float64") /* ty=Tensor[(960), float64] */;
    %667 = reshape(%665, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
    %668 = reshape(%666, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
    %669 = @func_2690(%667, %668) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
    %670 = %664.0;
    %671 = %669.1;
    (%670, %671, %var_4500)
  };
  %672(%var_4516) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */
}

def @func_6805(%var_6803: float32) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) {
  @func_6802(%var_6803) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) */
}

def @func_8950() -> Tensor[(182), int64] {
  %674 = fn () -> Tensor[(182), int64] {
    %673 = @func_6214() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
    %673.0
  };
  %674() /* ty=Tensor[(182), int64] */
}

def @func_8747() -> Tensor[(13, 12, 1), float32] {
  %675 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(13, 12, 1), float32] */;
  acos(%675) /* ty=Tensor[(13, 12, 1), float32] */
}

def @func_6109(%var_6107: Tensor[(540), float64], %var_6108: int64) -> (Tensor[(182), int64], Tensor[(540), float64], Tensor[(13, 2, 7), int64], Tensor[(6, 10, 9), float64], Tensor[(6, 10, 9), float32]) {
  %690 = fn (%var_6065: Tensor[(540), float64], %var_6094: int64) -> (Tensor[(182), int64], Tensor[(540), float64], Tensor[(13, 2, 7), int64], Tensor[(6, 10, 9), float64], Tensor[(6, 10, 9), float32]) {
    %676 = cast(%var_6094, dtype="int64") /* ty=int64 */;
    %677 = reshape(%676, newshape=[]) /* ty=int64 */;
    %678 = @func_1257(%677) /* ty=(Tensor[(15, 11, 15), bool], Tensor[(1, 12, 4), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
    %679 = cast(%var_6065, dtype="float64") /* ty=Tensor[(540), float64] */;
    %680 = reshape(%679, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), float64] */;
    %681 = @func_4064(%680) /* ty=Tensor[(6, 10, 9), float64] */;
    %682 = cast(%681, dtype="float64") /* ty=Tensor[(6, 10, 9), float64] */;
    %683 = cast(%var_6094, dtype="float64") /* ty=float64 */;
    %684 = cast(%681, dtype="float32") /* ty=Tensor[(6, 10, 9), float32] */;
    %685 = cast(%var_6094, dtype="float32") /* ty=float32 */;
    %686 = @func_5000() /* ty=Tensor[(182), int64] */;
    %687 = %678.4;
    %688 = floor_divide(%682, %683) /* ty=Tensor[(6, 10, 9), float64] */;
    %689 = floor_mod(%684, %685) /* ty=Tensor[(6, 10, 9), float32] */;
    (%686, %var_6065, %687, %688, %689)
  };
  %690(%var_6107, %var_6108) /* ty=(Tensor[(182), int64], Tensor[(540), float64], Tensor[(13, 2, 7), int64], Tensor[(6, 10, 9), float64], Tensor[(6, 10, 9), float32]) */
}

def @func_5834() -> (Tensor[(10, 14, 9), float64],) {
  %692 = fn () -> (Tensor[(10, 14, 9), float64],) {
    %691 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
    (%691,)
  };
  %692() /* ty=(Tensor[(10, 14, 9), float64],) */
}

def @func_4014(%var_3957: bool, %var_3958: Tensor[(8, 5, 11), bool]) -> (Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 5, 11), float64]) {
  %693 = @func_1283() /* ty=Tensor[(182), int64] */;
  %694 = cast(%693, dtype="int64") /* ty=Tensor[(182), int64] */;
  %695 = reshape(%694, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %696 = @func_353(%695) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %697 = cast(%var_3957, dtype="bool") /* ty=bool */;
  %698 = cast(%var_3958, dtype="bool") /* ty=Tensor[(8, 5, 11), bool] */;
  %699 = logical_or(%697, %698) /* ty=Tensor[(8, 5, 11), bool] */;
  %700 = cast(%699, dtype="bool") /* ty=Tensor[(8, 5, 11), bool] */;
  %701 = cast(%var_3957, dtype="bool") /* ty=bool */;
  %702 = equal(%700, %701) /* ty=Tensor[(8, 5, 11), bool] */;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(8, 5, 11), float64] */;
  %704 = @func_1736() /* ty=Tensor[(624), float64] */;
  %705 = %696.2;
  %706 = atan(%703) /* ty=Tensor[(8, 5, 11), float64] */;
  (%704, %693, %705, %706)
}

def @func_6322() -> Tensor[(182), int64] {
  %707 = @func_6246() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %707.1
}

def @func_10706() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %708 = @func_4572() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %709 = @func_7139() /* ty=Tensor[(182), int64] */;
  %710 = %708.0;
  (%709, %710)
}

def @func_6348() -> (Tensor[(1, 2, 2), float64],) {
  %713 = fn () -> (Tensor[(1, 2, 2), float64],) {
    %711 = @func_6048() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(182), int64], Tensor[(10, 16, 6), float64], Tensor[(960), float64], Tensor[(182), int64]) */;
    %712 = %711.0;
    (%712,)
  };
  %713() /* ty=(Tensor[(1, 2, 2), float64],) */
}

def @func_10414() -> (Tensor[(182), int64],) {
  @func_10412() /* ty=(Tensor[(182), int64],) */
}

def @func_10271(%var_10270: Tensor[(12, 15, 1), float32]) -> (Tensor[(12, 15, 1), float32], Tensor[(12, 15, 1), float32], Tensor[(12, 15, ?), float32]) {
  %725 = fn (%var_10242: Tensor[(12, 15, 1), float32]) -> (Tensor[(12, 15, 1), float32], Tensor[(12, 15, 1), float32], Tensor[(12, 15, ?), float32]) {
    %714 = cast(%var_10242, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
    %715 = cast(%var_10242, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
    %716 = cast(%var_10242, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
    %717 = log10(%716) /* ty=Tensor[(12, 15, 1), float32] */;
    %718 = cast(%717, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
    %719 = shape_of(%var_10242, dtype="int32") /* ty=Tensor[(3), int32] */;
    %720 = cast(%var_10242, dtype="float32") /* ty=Tensor[(12, 15, 1), float32] */;
    %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %722 = sin(%714) /* ty=Tensor[(12, 15, 1), float32] */;
    %723 = asin(%715) /* ty=Tensor[(12, 15, 1), float32] */;
    %724 = power(%720, %721) /* ty=Tensor[(12, 15, ?), float32] */;
    (%722, %723, %724)
  };
  %725(%var_10270) /* ty=(Tensor[(12, 15, 1), float32], Tensor[(12, 15, 1), float32], Tensor[(12, 15, ?), float32]) */
}

def @func_1328(%var_1326: Tensor[(10, 12, 9), float64]) -> (Tensor[(10, 12, 9), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(2160), float64]) {
  @func_1325(%var_1326) /* ty=(Tensor[(10, 12, 9), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(2160), float64]) */
}

def @func_6649() -> (Tensor[(182), int64],) {
  @func_6647() /* ty=(Tensor[(182), int64],) */
}

def @func_1853() -> Tensor[(182), int64] {
  @func_1851() /* ty=Tensor[(182), int64] */
}

def @func_2389(%var_2350: Tensor[(1, 624), float64], %var_2364: Tensor[(4, 624), float64]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(4, 624), int32]) {
  %726 = cast(%var_2350, dtype="float64") /* ty=Tensor[(1, 624), float64] */;
  %727 = reshape(%726, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %728 = @func_1381(%727) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %729 = @func_2210() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %730 = cast(%var_2350, dtype="int32") /* ty=Tensor[(1, 624), int32] */;
  %731 = cast(%var_2364, dtype="int32") /* ty=Tensor[(4, 624), int32] */;
  %732 = @func_1204() /* ty=Tensor[(182), int64] */;
  %733 = %728.1;
  %734 = %729.0;
  %735 = bitwise_and(%730, %731) /* ty=Tensor[(4, 624), int32] */;
  (%732, %733, %734, %735)
}

def @func_5748() -> (Tensor[(182), int64],) {
  %736 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %737 = %736.0;
  (%737,)
}

def @func_5444() -> (Tensor[(182), int64],) {
  %738 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %739 = %738.0;
  (%739,)
}

def @func_1177() -> (Tensor[(182), int64],) {
  %742 = fn () -> (Tensor[(182), int64],) {
    %740 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %741 = %740.1;
    (%741,)
  };
  %742() /* ty=(Tensor[(182), int64],) */
}

def @func_4186() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) {
  @func_4184() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_4410() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %743 = @func_2034() /* ty=(Tensor[(182), int64],) */;
  %744 = %743.0;
  %745 = cast(%744, dtype="int64") /* ty=Tensor[(182), int64] */;
  %746 = reshape(%745, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %747 = @func_353(%746) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %748 = %747.2;
  (%744, %748)
}

def @func_3407(%var_3404: Tensor[(2160), float32], %var_3405: Tensor[(90), uint32], %var_3406: Tensor[(9, 2, 5), float64]) -> (Tensor[(2160), float32], Tensor[(13, 2, 7), float32], Tensor[(90), uint32], Tensor[(9, 2, 5), bool]) {
  %775 = fn (%var_3324: Tensor[(2160), float32], %var_3365: Tensor[(90), uint32], %var_3387: Tensor[(9, 2, 5), float64]) -> (Tensor[(2160), float32], Tensor[(13, 2, 7), float32], Tensor[(90), uint32], Tensor[(9, 2, 5), bool]) {
    %749 = cast(%var_3324, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %750 = cast(%var_3324, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
    %751 = reshape(%749, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %752 = reshape(%750, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
    %753 = @func_604(%751, %752) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
    %754 = %753.5;
    %755 = @func_2210() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %756 = %755.1;
    %757 = cast(%756, dtype="float32") /* ty=Tensor[(182), float32] */;
    %758 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
    %759 = cast(%754, dtype="float32") /* ty=Tensor[(13, 2, 7), float32] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %761 = cast(%var_3365, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %762 = cast(%var_3365, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %763 = cast(%var_3365, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %764 = reshape(%761, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), uint32] */;
    %765 = reshape(%762, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), uint32] */;
    %766 = reshape(%763, newshape=[9, 2, 5]) /* ty=Tensor[(9, 2, 5), uint32] */;
    %767 = @func_2672(%764, %765, %766) /* ty=(Tensor[(9, 2, 5), int32], Tensor[(9, 2, 5), float64], Tensor[(9, 2, 5), float32], Tensor[(10, 14, 9), float64], Tensor[(9, 2, 5), float64]) */;
    %768 = %767.4;
    %769 = cast(%var_3387, dtype="bool") /* ty=Tensor[(9, 2, 5), bool] */;
    %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
    %771 = cast(%768, dtype="bool") /* ty=Tensor[(9, 2, 5), bool] */;
    %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %773 = multiply(%759, %760) /* ty=Tensor[(13, 2, 7), float32] */;
    %774 = less_equal(%771, %772) /* ty=Tensor[(9, 2, 5), bool] */;
    (%var_3324, %773, %var_3365, %774)
  };
  %775(%var_3404, %var_3405, %var_3406) /* ty=(Tensor[(2160), float32], Tensor[(13, 2, 7), float32], Tensor[(90), uint32], Tensor[(9, 2, 5), bool]) */
}

def @func_2817() -> Tensor[(10, 14, 9), float64] {
  %776 = fn () -> Tensor[(10, 14, 9), float64] {
    @func_1820() /* ty=Tensor[(10, 14, 9), float64] */
  };
  %776() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_7032() -> Tensor[(182), int64] {
  @func_1204() /* ty=Tensor[(182), int64] */
}

def @func_2295() -> (Tensor[(182), int64],) {
  @func_2293() /* ty=(Tensor[(182), int64],) */
}

def @func_3799() -> (Tensor[(10, 14, 9), float64],) {
  @func_3797() /* ty=(Tensor[(10, 14, 9), float64],) */
}

def @func_6958() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %777 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %778 = %777.0;
  %779 = @func_5000() /* ty=Tensor[(182), int64] */;
  (%778, %779)
}

def @func_1965(%var_1964: Tensor[(1080), float64]) -> (Tensor[(182), int64], Tensor[(624), float64], Tensor[(10, 14, 9), bool], Tensor[(182), int64], Tensor[(1080), float64], Tensor[(182), int64]) {
  %797 = fn (%var_1946: Tensor[(1080), float64]) -> (Tensor[(182), int64], Tensor[(624), float64], Tensor[(10, 14, 9), bool], Tensor[(182), int64], Tensor[(1080), float64], Tensor[(182), int64]) {
    %780 = @func_1176() /* ty=(Tensor[(182), int64],) */;
    %781 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %782 = cast(%var_1946, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %783 = cast(%var_1946, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %784 = cast(%var_1946, dtype="float32") /* ty=Tensor[(1080), float32] */;
    %785 = reshape(%782, newshape=[3, 360]) /* ty=Tensor[(3, 360), float64] */;
    %786 = reshape(%783, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
    %787 = reshape(%784, newshape=[3, 360]) /* ty=Tensor[(3, 360), float32] */;
    %788 = @func_1644(%785, %786, %787) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(3, 360), float32], Tensor[(3, 360), float64], Tensor[(3, 360), float32]) */;
    %789 = %781.2;
    %790 = cast(%789, dtype="float64") /* ty=Tensor[(624), float64] */;
    %791 = reshape(%790, newshape=[624]) /* ty=Tensor[(624), float64] */;
    %792 = @func_1381(%791) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %793 = %780.0;
    %794 = @func_1470() /* ty=Tensor[(10, 14, 9), bool] */;
    %795 = %788.1;
    %796 = %792.0;
    (%793, %789, %794, %795, %var_1946, %796)
  };
  %797(%var_1964) /* ty=(Tensor[(182), int64], Tensor[(624), float64], Tensor[(10, 14, 9), bool], Tensor[(182), int64], Tensor[(1080), float64], Tensor[(182), int64]) */
}

def @func_8457() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %800 = fn () -> (Tensor[(182), int64], Tensor[(182), int64]) {
    %798 = @func_7210() /* ty=Tensor[(182), int64] */;
    %799 = @func_4139() /* ty=Tensor[(182), int64] */;
    (%798, %799)
  };
  %800() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_5446() -> (Tensor[(182), int64],) {
  @func_5444() /* ty=(Tensor[(182), int64],) */
}

def @func_6928(%var_6927: Tensor[(1, 8, 3), float32]) -> (Tensor[(?, 8, 3), float32],) {
  %808 = fn (%var_6914: Tensor[(1, 8, 3), float32]) -> (Tensor[(?, 8, 3), float32],) {
    %801 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 3), float32] */;
    %802 = acosh(%801) /* ty=Tensor[(1, 8, 3), float32] */;
    %803 = cast(%var_6914, dtype="float32") /* ty=Tensor[(1, 8, 3), float32] */;
    %804 = shape_of(%802, dtype="int32") /* ty=Tensor[(3), int32] */;
    %805 = cast(%802, dtype="float32") /* ty=Tensor[(1, 8, 3), float32] */;
    %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %807 = subtract(%805, %806) /* ty=Tensor[(?, 8, 3), float32] */;
    (%807,)
  };
  %808(%var_6927) /* ty=(Tensor[(?, 8, 3), float32],) */
}

def @func_9909() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  @func_9907() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_8813() -> (Tensor[(182), int64],) {
  %809 = @func_5444() /* ty=(Tensor[(182), int64],) */;
  %810 = %809.0;
  (%810,)
}

def @func_7438() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  %819 = fn () -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
    %811 = @func_6246() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
    %812 = @func_4479() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %813 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %814 = %813.0;
    %815 = cast(%814, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
    %816 = %811.0;
    %817 = %812.0;
    %818 = log(%815) /* ty=Tensor[(10, 14, 9), float64] */;
    (%816, %817, %818)
  };
  %819() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */
}

def @func_4953() -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  @func_4951() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */
}

def @func_3578(%var_3515: Tensor[(10, 14, 9), float64], %var_3573: Tensor[(10, 14, 9), int16]) -> (Tensor[(10, 14, 9), bool], Tensor[(10, 14, 9), float64], Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 13, 13), float64], Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  %820 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %821 = %820.0;
  %822 = cast(%var_3515, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="bool") /* ty=Tensor[(10, 14, 9), bool] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %826 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %827 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %828 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %829 = @func_3227() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %830 = %829.0;
  %831 = cast(%var_3515, dtype="int16") /* ty=Tensor[(10, 14, 9), int16] */;
  %832 = shape_of(%830, dtype="int32") /* ty=Tensor[(3), int32] */;
  %833 = cast(%830, dtype="int16") /* ty=Tensor[(10, 14, 9), int16] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %835 = left_shift(%833, %834) /* ty=Tensor[(10, 14, 9), int16] */;
  %836 = cast(%var_3573, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %840 = equal(%824, %825) /* ty=Tensor[(10, 14, 9), bool] */;
  %841 = %826.0;
  %842 = @func_1736() /* ty=Tensor[(624), float64] */;
  %843 = @func_3272() /* ty=Tensor[(182), int64] */;
  %844 = %827.0;
  %845 = %828.0;
  %846 = @func_2864() /* ty=Tensor[(10, 14, 9), float64] */;
  %847 = floor_divide(%838, %839) /* ty=Tensor[(10, 14, 9), float64] */;
  (%840, %841, %842, %843, %844, %845, %846, %847)
}

def @func_10952() -> (Tensor[(7, 7, 12), bool], Tensor[(182), int64], Tensor[(182), int64]) {
  @func_10950() /* ty=(Tensor[(7, 7, 12), bool], Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_10335() -> Tensor[(10, 14, 9), float64] {
  @func_10333() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_9687() -> (Tensor[(15, 3, ?), bool],) {
  %848 = @func_9448() /* ty=(Tensor[(15, 3, ?), bool], Tensor[(1, 2, 2), float64]) */;
  %849 = %848.0;
  (%849,)
}

def @func_10618() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  %854 = fn () -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
    %850 = @func_10412() /* ty=(Tensor[(182), int64],) */;
    %851 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %852 = %850.0;
    %853 = %851.0;
    (%852, %853)
  };
  %854() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */
}

def @func_1820() -> Tensor[(10, 14, 9), float64] {
  @func_1751() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_4633(%var_4600: Tensor[(11, 12, 3), uint32], %var_4608: Tensor[(624), float64]) -> (Tensor[(11, 12, 3), uint32], Tensor[(182), int64], Tensor[(624), float64], Tensor[(2496), float64], Tensor[(11, 12, 3), float32]) {
  %855 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 12, 3), uint32] */, dtype="uint32") /* ty=Tensor[(11, 12, 3), uint32] */;
  %856 = shape_of(%var_4600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(%var_4600, dtype="uint32") /* ty=Tensor[(11, 12, 3), uint32] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %859 = cast(%var_4608, dtype="float64") /* ty=Tensor[(624), float64] */;
  %860 = cast(meta[relay.Constant][39] /* ty=Tensor[(2496), float64] */, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %861 = reshape(%859, newshape=[1, 624]) /* ty=Tensor[(1, 624), float64] */;
  %862 = reshape(%860, newshape=[4, 624]) /* ty=Tensor[(4, 624), float64] */;
  %863 = @func_2389(%861, %862) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(4, 624), int32]) */;
  %864 = cast(%var_4600, dtype="float32") /* ty=Tensor[(11, 12, 3), float32] */;
  %865 = bitwise_xor(%857, %858) /* ty=Tensor[(11, 12, 3), uint32] */;
  %866 = %863.1;
  %867 = exp(%864) /* ty=Tensor[(11, 12, 3), float32] */;
  (%865, %866, %var_4608, meta[relay.Constant][39] /* ty=Tensor[(2496), float64] */, %867)
}

def @func_11109() -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64]) {
  @func_11107() /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64]) */
}

def @func_2106(%var_2105: Tensor[(6, 16, 14), int32]) -> (Tensor[(6, 16, 14), int32], Tensor[(10, 14, 9), float64]) {
  %875 = fn (%var_2088: Tensor[(6, 16, 14), int32]) -> (Tensor[(6, 16, 14), int32], Tensor[(10, 14, 9), float64]) {
    %868 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 16, 14), int32] */, dtype="int32") /* ty=Tensor[(6, 16, 14), int32] */;
    %869 = shape_of(%var_2088, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(%var_2088, dtype="int32") /* ty=Tensor[(6, 16, 14), int32] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %872 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %873 = multiply(%870, %871) /* ty=Tensor[(6, 16, 14), int32] */;
    %874 = %872.0;
    (%873, %874)
  };
  %875(%var_2105) /* ty=(Tensor[(6, 16, 14), int32], Tensor[(10, 14, 9), float64]) */
}

def @func_6647() -> (Tensor[(182), int64],) {
  %876 = @func_1851() /* ty=Tensor[(182), int64] */;
  (%876,)
}

def @func_6713() -> Tensor[(182), int64] {
  %877 = @func_5523() /* ty=(Tensor[(624), float64], Tensor[(182), int64]) */;
  %877.1
}

def @func_5690() -> (Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(1, 2, 2), float64]) {
  @func_5688() /* ty=(Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(1, 2, 2), float64]) */
}

def @func_10127() -> (Tensor[(1, 2, 2), float64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) {
  %878 = @func_7895() /* ty=(Tensor[(1, 2, 2), float64],) */;
  %879 = cast(meta[relay.Constant][41] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %880 = cast(meta[relay.Constant][41] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
  %881 = reshape(%879, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %882 = reshape(%880, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
  %883 = @func_2690(%881, %882) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
  %884 = %878.0;
  %885 = %883.1;
  (%884, %885, meta[relay.Constant][41] /* ty=Tensor[(960), float64] */)
}

def @func_3272() -> Tensor[(182), int64] {
  @func_1851() /* ty=Tensor[(182), int64] */
}

def @func_5750() -> (Tensor[(182), int64],) {
  @func_5748() /* ty=(Tensor[(182), int64],) */
}

def @func_4479() -> (Tensor[(10, 14, 9), float64],) {
  %886 = @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %887 = %886.0;
  (%887,)
}

def @func_2562() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) {
  %888 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %889 = cast(meta[relay.Constant][42] /* ty=Tensor[(624), float64] */, dtype="float64") /* ty=Tensor[(624), float64] */;
  %890 = reshape(%889, newshape=[624]) /* ty=Tensor[(624), float64] */;
  %891 = @func_1381(%890) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %892 = %888.0;
  %893 = %891.1;
  (%892, %893, meta[relay.Constant][42] /* ty=Tensor[(624), float64] */)
}

def @func_355(%var_354: Tensor[(182), int64]) -> (Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) {
  %909 = fn (%var_329: Tensor[(182), int64]) -> (Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) {
    %894 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 5), float64] */;
    %895 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(5, 3, 5), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %896 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(5, 3, 5), float64] */;
    %897 = dyn.reshape(%894, %895, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %898 = maximum(%896, %897) /* ty=Tensor[(5, 3, 5), float64] */;
    %899 = cast(%898, dtype="float64") /* ty=Tensor[(5, 3, 5), float64] */;
    %900 = cast(%var_329, dtype="int64") /* ty=Tensor[(182), int64] */;
    %901 = reshape(%900, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
    %902 = @func_135(%901) /* ty=(Tensor[(13, 2, 7), int64],) */;
    %903 = %902.0;
    %904 = cast(%903, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
    %905 = reshape(%904, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
    %906 = @func_135(%905) /* ty=(Tensor[(13, 2, 7), int64],) */;
    %907 = log2(%899) /* ty=Tensor[(5, 3, 5), float64] */;
    %908 = %906.0;
    (%907, %903, %var_329, %908)
  };
  %909(%var_354) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */
}

def @func_2429() -> Tensor[(10, 14, 9), float64] {
  @func_2427() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_3491(%var_3488: int32, %var_3489: Tensor[(9, 1, 1), int32], %var_3490: Tensor[(1080), float64]) -> (Tensor[(10, 14, 9), bool], Tensor[(1080), float64], Tensor[(9, 1, 1), float32]) {
  %920 = fn (%var_3465: int32, %var_3466: Tensor[(9, 1, 1), int32], %var_3479: Tensor[(1080), float64]) -> (Tensor[(10, 14, 9), bool], Tensor[(1080), float64], Tensor[(9, 1, 1), float32]) {
    %910 = cast(%var_3479, dtype="float64") /* ty=Tensor[(1080), float64] */;
    %911 = reshape(%910, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
    %912 = @func_1963(%911) /* ty=(Tensor[(182), int64], Tensor[(624), float64], Tensor[(10, 14, 9), bool], Tensor[(182), int64], Tensor[(1080), float64], Tensor[(182), int64]) */;
    %913 = cast(%var_3465, dtype="bool") /* ty=bool */;
    %914 = cast(%var_3466, dtype="bool") /* ty=Tensor[(9, 1, 1), bool] */;
    %915 = equal(%913, %914) /* ty=Tensor[(9, 1, 1), bool] */;
    %916 = cast(%915, dtype="float32") /* ty=Tensor[(9, 1, 1), float32] */;
    %917 = cast(%var_3465, dtype="float32") /* ty=float32 */;
    %918 = %912.2;
    %919 = maximum(%916, %917) /* ty=Tensor[(9, 1, 1), float32] */;
    (%918, %var_3479, %919)
  };
  %920(%var_3488, %var_3489, %var_3490) /* ty=(Tensor[(10, 14, 9), bool], Tensor[(1080), float64], Tensor[(9, 1, 1), float32]) */
}

def @func_5930(%var_5928: Tensor[(240), float32]) -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(240), float32]) {
  @func_5927(%var_5928) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(240), float32]) */
}

def @func_3771(%var_3732: float32) -> (Tensor[(624), float64], Tensor[(624), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) {
  %921 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %922 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %923 = cast(%var_3732, dtype="float32") /* ty=float32 */;
  %924 = cast(meta[relay.Constant][45] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
  %925 = reshape(%923, newshape=[]) /* ty=float32 */;
  %926 = reshape(%924, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %927 = @func_3056(%925, %926) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
  %928 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %929 = %921.2;
  %930 = %922.2;
  %931 = %927.1;
  %932 = @func_2816() /* ty=Tensor[(10, 14, 9), float64] */;
  %933 = %928.0;
  (%929, %930, %931, %var_3732, meta[relay.Constant][45] /* ty=Tensor[(182), int64] */, %932, %933)
}

def @func_10446() -> (Tensor[(182), int64],) {
  %934 = @func_8456() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %935 = %934.0;
  (%935,)
}

def @func_2333() -> Tensor[(182), int64] {
  @func_2331() /* ty=Tensor[(182), int64] */
}

def @func_4872(%var_4869: bool, %var_4870: Tensor[(440), bool], %var_4871: Tensor[(540), float64]) -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) {
  @func_4867(%var_4869, %var_4870, %var_4871) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_2864() -> Tensor[(10, 14, 9), float64] {
  @func_2816() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_9497(%var_9494: Tensor[(8, 4, 13), float32]) -> (Tensor[(8, 4, 13), float32],) {
  %936 = cast(%var_9494, dtype="float32") /* ty=Tensor[(8, 4, 13), float32] */;
  %937 = asin(%936) /* ty=Tensor[(8, 4, 13), float32] */;
  (%937,)
}

def @func_9242() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(240), float32]) {
  @func_9240() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(240), float32]) */
}

def @func_9354() -> Tensor[(182), int64] {
  @func_1851() /* ty=Tensor[(182), int64] */
}

def @func_5997(%var_5996: bool) -> (Tensor[(624), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) {
  %947 = fn (%var_5975: bool) -> (Tensor[(624), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) {
    %938 = cast(%var_5975, dtype="bool") /* ty=bool */;
    %939 = cast(meta[relay.Constant][46] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
    %940 = cast(meta[relay.Constant][47] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %941 = reshape(%938, newshape=[]) /* ty=bool */;
    %942 = reshape(%939, newshape=[440]) /* ty=Tensor[(440), bool] */;
    %943 = reshape(%940, newshape=[540]) /* ty=Tensor[(540), float64] */;
    %944 = @func_4867(%941, %942, %943) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) */;
    %945 = @func_1736() /* ty=Tensor[(624), float64] */;
    %946 = %944.7;
    (%945, %946, %var_5975, meta[relay.Constant][46] /* ty=Tensor[(440), bool] */, meta[relay.Constant][47] /* ty=Tensor[(540), float64] */)
  };
  %947(%var_5996) /* ty=(Tensor[(624), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(540), float64]) */
}

def @func_1851() -> Tensor[(182), int64] {
  %948 = @func_1176() /* ty=(Tensor[(182), int64],) */;
  %948.0
}

def @func_1549() -> (Tensor[(10, 14, 9), float64],) {
  @func_1547() /* ty=(Tensor[(10, 14, 9), float64],) */
}

def @func_2186() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %953 = fn () -> (Tensor[(182), int64], Tensor[(182), int64]) {
    %949 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %950 = @func_1497() /* ty=(Tensor[(182), int64],) */;
    %951 = %949.1;
    %952 = %950.0;
    (%951, %952)
  };
  %953() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */
}

def @func_7160() -> (Tensor[(182), int64],) {
  %954 = @func_5609() /* ty=(Tensor[(182), int64],) */;
  %955 = %954.0;
  (%955,)
}

def @func_5767() -> Tensor[(182), int64] {
  %957 = fn () -> Tensor[(182), int64] {
    %956 = @func_4383() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) */;
    %956.3
  };
  %957() /* ty=Tensor[(182), int64] */
}

def @func_8088() -> (Tensor[(182), int64],) {
  %960 = fn () -> (Tensor[(182), int64],) {
    %958 = @func_7635() /* ty=(Tensor[(182), int64],) */;
    %959 = %958.0;
    (%959,)
  };
  %960() /* ty=(Tensor[(182), int64],) */
}

def @func_2908() -> (Tensor[(10, 14, 9), float64],) {
  %962 = fn () -> (Tensor[(10, 14, 9), float64],) {
    %961 = @func_1751() /* ty=Tensor[(10, 14, 9), float64] */;
    (%961,)
  };
  %962() /* ty=(Tensor[(10, 14, 9), float64],) */
}

def @func_8749() -> Tensor[(13, 12, 1), float32] {
  @func_8747() /* ty=Tensor[(13, 12, 1), float32] */
}

def @func_8593() -> Tensor[(182), int64] {
  %963 = @func_6214() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %963.0
}

def @func_4018(%var_4016: bool, %var_4017: Tensor[(8, 5, 11), bool]) -> (Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 5, 11), float64]) {
  @func_4014(%var_4016, %var_4017) /* ty=(Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 5, 11), float64]) */
}

def @func_4664() -> (Tensor[(10, 14, 9), float64],) {
  %966 = fn () -> (Tensor[(10, 14, 9), float64],) {
    %964 = @func_4572() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %965 = %964.0;
    (%965,)
  };
  %966() /* ty=(Tensor[(10, 14, 9), float64],) */
}

def @func_5118() -> (Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) {
  %977 = fn () -> (Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) {
    %967 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 2, 2), float64] */, dtype="float64") /* ty=Tensor[(1, 2, 2), float64] */;
    %968 = @func_2895() /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
    %969 = cast(meta[relay.Constant][49] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
    %970 = cast(meta[relay.Constant][49] /* ty=Tensor[(960), float64] */, dtype="float64") /* ty=Tensor[(960), float64] */;
    %971 = reshape(%969, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
    %972 = reshape(%970, newshape=[10, 16, 6]) /* ty=Tensor[(10, 16, 6), float64] */;
    %973 = @func_2690(%971, %972) /* ty=(Tensor[(10, 16, 6), float64], Tensor[(10, 14, 9), bool]) */;
    %974 = log2(%967) /* ty=Tensor[(1, 2, 2), float64] */;
    %975 = %968.2;
    %976 = %973.1;
    (%974, %975, %976, meta[relay.Constant][49] /* ty=Tensor[(960), float64] */)
  };
  %977() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */
}

def @func_10139() -> (Tensor[(182), int64],) {
  %980 = fn () -> (Tensor[(182), int64],) {
    %978 = @func_6958() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
    %979 = %978.1;
    (%979,)
  };
  %980() /* ty=(Tensor[(182), int64],) */
}

def @func_4720() -> Tensor[(9, 8, 10), bool] {
  %985 = fn () -> Tensor[(9, 8, 10), bool] {
    %981 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 8, 10), int16] */, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
    %982 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(9, 8, 10), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %983 = cast(meta[relay.Constant][50] /* ty=Tensor[(9, 8, 10), int16] */, dtype="bool") /* ty=Tensor[(9, 8, 10), bool] */;
    %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%983, %984) /* ty=Tensor[(9, 8, 10), bool] */
  };
  %985() /* ty=Tensor[(9, 8, 10), bool] */
}

def @func_2991(%var_2989: Tensor[(10, 14, 9), float64]) -> (Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(10, 14, 9), uint16]) {
  @func_2988(%var_2989) /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(10, 14, 9), uint16]) */
}

def @func_4384() -> (Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) {
  %994 = fn () -> (Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) {
    %986 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %987 = cast(1.58534f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %988 = cast(meta[relay.Constant][52] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
    %989 = reshape(%987, newshape=[]) /* ty=float32 */;
    %990 = reshape(%988, newshape=[182]) /* ty=Tensor[(182), int64] */;
    %991 = @func_3056(%989, %990) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
    %992 = %986.0;
    %993 = %991.3;
    (%992, %993, 1.58534f /* ty=float32 */, meta[relay.Constant][52] /* ty=Tensor[(182), int64] */)
  };
  %994() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(648), float32], float32, Tensor[(182), int64]) */
}

def @func_3631() -> (Tensor[(182), int64],) {
  %995 = @func_3272() /* ty=Tensor[(182), int64] */;
  (%995,)
}

def @func_10412() -> (Tensor[(182), int64],) {
  %996 = @func_6322() /* ty=Tensor[(182), int64] */;
  (%996,)
}

def @func_2564() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) {
  @func_2562() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */
}

def @func_7878() -> (Tensor[(182), int64],) {
  %997 = @func_1497() /* ty=(Tensor[(182), int64],) */;
  %998 = %997.0;
  (%998,)
}

def @func_3211(%var_3209: Tensor[(2160), float32], %var_3210: Tensor[(1344), int32]) -> (Tensor[(624), float64], Tensor[(182), int64], Tensor[(2160), float32], Tensor[(6, 16, 14), int32], Tensor[(1344), int32]) {
  %1011 = fn (%var_3195: Tensor[(2160), float32], %var_3200: Tensor[(1344), int32]) -> (Tensor[(624), float64], Tensor[(182), int64], Tensor[(2160), float32], Tensor[(6, 16, 14), int32], Tensor[(1344), int32]) {
    %999 = @func_1158() /* ty=(Tensor[(8, 13, 13), float64], Tensor[(182), int64], Tensor[(624), float64]) */;
    %1000 = cast(%var_3195, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %1001 = cast(%var_3195, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
    %1002 = reshape(%1000, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %1003 = reshape(%1001, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
    %1004 = @func_604(%1002, %1003) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
    %1005 = cast(%var_3200, dtype="int32") /* ty=Tensor[(1344), int32] */;
    %1006 = reshape(%1005, newshape=[6, 16, 14]) /* ty=Tensor[(6, 16, 14), int32] */;
    %1007 = @func_2104(%1006) /* ty=(Tensor[(6, 16, 14), int32], Tensor[(10, 14, 9), float64]) */;
    %1008 = %999.2;
    %1009 = %1004.1;
    %1010 = %1007.0;
    (%1008, %1009, %var_3195, %1010, %var_3200)
  };
  %1011(%var_3209, %var_3210) /* ty=(Tensor[(624), float64], Tensor[(182), int64], Tensor[(2160), float32], Tensor[(6, 16, 14), int32], Tensor[(1344), int32]) */
}

def @func_4907() -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
  %1015 = fn () -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) {
    %1012 = @func_3797() /* ty=(Tensor[(10, 14, 9), float64],) */;
    %1013 = %1012.0;
    %1014 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
    (%1013, %1014)
  };
  %1015() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */
}

def @func_4283(%var_4272: Tensor[(15, 15, 5), float32], %var_4273: Tensor[(15, 15, 5), float32]) -> (Tensor[(15, 15, 5), float64],) {
  %1016 = cast(%var_4273, dtype="float32") /* ty=Tensor[(15, 15, 5), float32] */;
  %1017 = shape_of(%var_4272, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1018 = cast(%var_4272, dtype="float32") /* ty=Tensor[(15, 15, 5), float32] */;
  %1019 = dyn.reshape(%1016, %1017, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1020 = mod(%1018, %1019) /* ty=Tensor[(15, 15, 5), float32] */;
  %1021 = cast(%1020, dtype="float64") /* ty=Tensor[(15, 15, 5), float64] */;
  %1022 = cosh(%1021) /* ty=Tensor[(15, 15, 5), float64] */;
  (%1022,)
}

def @func_5395() -> Tensor[(182), int64] {
  @func_1204() /* ty=Tensor[(182), int64] */
}

def @func_8815() -> (Tensor[(182), int64],) {
  @func_8813() /* ty=(Tensor[(182), int64],) */
}

def @func_6415() -> Tensor[(10, 14, 9), float64] {
  %1023 = fn () -> Tensor[(10, 14, 9), float64] {
    @func_4307() /* ty=Tensor[(10, 14, 9), float64] */
  };
  %1023() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_2427() -> Tensor[(10, 14, 9), float64] {
  @func_1751() /* ty=Tensor[(10, 14, 9), float64] */
}

def @func_9607(%var_9604: Tensor[(72), float32], %var_9605: Tensor[(1008), float32], %var_9606: Tensor[(6, 108), float32]) -> (Tensor[(10, 14, 9), float64], Tensor[(6, 14, 12), float32], Tensor[(72), float32], Tensor[(1008), float32], Tensor[(9, 9, 8), float32], float32, Tensor[(6, 108), float32], Tensor[(1, 182), int64]) {
  @func_9602(%var_9604, %var_9605, %var_9606) /* ty=(Tensor[(10, 14, 9), float64], Tensor[(6, 14, 12), float32], Tensor[(72), float32], Tensor[(1008), float32], Tensor[(9, 9, 8), float32], float32, Tensor[(6, 108), float32], Tensor[(1, 182), int64]) */
}

def @func_6599(%var_6597: uint8, %var_6598: Tensor[(7, 13, 5), uint8]) -> (Tensor[(7, 13, 5), uint8], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(1344), int32], Tensor[(7, 13, 5), uint64], Tensor[(7, 13, 5), uint16], Tensor[(10, 14, 9), uint16]) {
  %1050 = fn (%var_6511: uint8, %var_6512: Tensor[(7, 13, 5), uint8]) -> (Tensor[(7, 13, 5), uint8], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(1344), int32], Tensor[(7, 13, 5), uint64], Tensor[(7, 13, 5), uint16], Tensor[(10, 14, 9), uint16]) {
    %1024 = cast(%var_6511, dtype="uint8") /* ty=uint8 */;
    %1025 = cast(%var_6512, dtype="uint8") /* ty=Tensor[(7, 13, 5), uint8] */;
    %1026 = @func_2034() /* ty=(Tensor[(182), int64],) */;
    %1027 = cast(meta[relay.Constant][53] /* ty=Tensor[(1344), int32] */, dtype="int32") /* ty=Tensor[(1344), int32] */;
    %1028 = reshape(%1027, newshape=[6, 16, 14]) /* ty=Tensor[(6, 16, 14), int32] */;
    %1029 = @func_2104(%1028) /* ty=(Tensor[(6, 16, 14), int32], Tensor[(10, 14, 9), float64]) */;
    %1030 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 13, 5), uint8] */, dtype="uint64") /* ty=Tensor[(7, 13, 5), uint64] */;
    %1031 = shape_of(%var_6512, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1032 = cast(%var_6512, dtype="uint64") /* ty=Tensor[(7, 13, 5), uint64] */;
    %1033 = dyn.reshape(%1030, %1031, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1034 = cast(%var_6512, dtype="bool") /* ty=Tensor[(7, 13, 5), bool] */;
    %1035 = cast(%var_6511, dtype="bool") /* ty=bool */;
    %1036 = greater(%1034, %1035) /* ty=Tensor[(7, 13, 5), bool] */;
    %1037 = cast(%1036, dtype="uint16") /* ty=Tensor[(7, 13, 5), uint16] */;
    %1038 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(7, 13, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1039 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 13, 5), uint8] */, dtype="uint16") /* ty=Tensor[(7, 13, 5), uint16] */;
    %1040 = dyn.reshape(%1037, %1038, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %1041 = %1029.1;
    %1042 = cast(%1041, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
    %1043 = reshape(%1042, newshape=[10, 14, 9]) /* ty=Tensor[(10, 14, 9), float64] */;
    %1044 = @func_2988(%1043) /* ty=(Tensor[(10, 14, 9), float32], Tensor[(182), int64], Tensor[(10, 14, 9), uint16]) */;
    %1045 = add(%1024, %1025) /* ty=Tensor[(7, 13, 5), uint8] */;
    %1046 = %1026.0;
    %1047 = bitwise_xor(%1032, %1033) /* ty=Tensor[(7, 13, 5), uint64] */;
    %1048 = bitwise_or(%1039, %1040) /* ty=Tensor[(7, 13, 5), uint16] */;
    %1049 = %1044.2;
    (%1045, %1046, %1041, meta[relay.Constant][53] /* ty=Tensor[(1344), int32] */, %1047, %1048, %1049)
  };
  %1050(%var_6597, %var_6598) /* ty=(Tensor[(7, 13, 5), uint8], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(1344), int32], Tensor[(7, 13, 5), uint64], Tensor[(7, 13, 5), uint16], Tensor[(10, 14, 9), uint16]) */
}

def @func_1738() -> Tensor[(624), float64] {
  @func_1736() /* ty=Tensor[(624), float64] */
}

def @func_684(%var_664: float32, %var_665: Tensor[(9, 9, 8), float32], %var_682: Tensor[(182), int64]) -> (Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) {
  %1051 = cast(%var_664, dtype="float32") /* ty=float32 */;
  %1052 = cast(%var_665, dtype="float32") /* ty=Tensor[(9, 9, 8), float32] */;
  %1053 = cast(%var_682, dtype="int64") /* ty=Tensor[(182), int64] */;
  %1054 = reshape(%1053, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
  %1055 = @func_135(%1054) /* ty=(Tensor[(13, 2, 7), int64],) */;
  %1056 = divide(%1051, %1052) /* ty=Tensor[(9, 9, 8), float32] */;
  %1057 = %1055.0;
  (%1056, %1057, %var_682)
}

def @func_8279() -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) {
  %1061 = fn () -> (Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) {
    %1058 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
    %1059 = @func_2427() /* ty=Tensor[(10, 14, 9), float64] */;
    %1060 = @func_5766() /* ty=Tensor[(182), int64] */;
    (%1058, %1059, %1060)
  };
  %1061() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) */
}

def @func_8141(%var_8140: Tensor[(2160), float32]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(2160), float32]) {
  %1070 = fn (%var_8130: Tensor[(2160), float32]) -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(2160), float32]) {
    %1062 = @func_5609() /* ty=(Tensor[(182), int64],) */;
    %1063 = cast(%var_8130, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %1064 = cast(%var_8130, dtype="uint64") /* ty=Tensor[(2160), uint64] */;
    %1065 = reshape(%1063, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), float32] */;
    %1066 = reshape(%1064, newshape=[15, 12, 12]) /* ty=Tensor[(15, 12, 12), uint64] */;
    %1067 = @func_604(%1065, %1066) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */;
    %1068 = %1062.0;
    %1069 = %1067.1;
    (%1068, %1069, %var_8130)
  };
  %1070(%var_8140) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(2160), float32]) */
}

def @func_4064(%var_4059: Tensor[(6, 10, 9), float64]) -> Tensor[(6, 10, 9), float64] {
  %1071 = cast(-4.87528f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %1072 = cast(%var_4059, dtype="float64") /* ty=Tensor[(6, 10, 9), float64] */;
  mod(%1071, %1072) /* ty=Tensor[(6, 10, 9), float64] */
}

def @func_6214() -> (Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) {
  %1073 = @func_2562() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(624), float64]) */;
  %1074 = @func_2293() /* ty=(Tensor[(182), int64],) */;
  %1075 = %1073.1;
  %1076 = %1074.0;
  %1077 = @func_1283() /* ty=Tensor[(182), int64] */;
  (%1075, %1076, %1077)
}

def @func_689(%var_686: float32, %var_687: Tensor[(9, 9, 8), float32], %var_688: Tensor[(182), int64]) -> (Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) {
  @func_684(%var_686, %var_687, %var_688) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) */
}

def @func_9602(%var_9589: Tensor[(72), float32], %var_9590: Tensor[(1008), float32], %var_9597: Tensor[(6, 108), float32]) -> (Tensor[(10, 14, 9), float64], Tensor[(6, 14, 12), float32], Tensor[(72), float32], Tensor[(1008), float32], Tensor[(9, 9, 8), float32], float32, Tensor[(6, 108), float32], Tensor[(1, 182), int64]) {
  %1078 = @func_4906() /* ty=(Tensor[(10, 14, 9), float64], Tensor[(10, 14, 9), float64]) */;
  %1079 = cast(%var_9589, dtype="float32") /* ty=Tensor[(72), float32] */;
  %1080 = cast(%var_9590, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %1081 = reshape(%1079, newshape=[6, 1, 12]) /* ty=Tensor[(6, 1, 12), float32] */;
  %1082 = reshape(%1080, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float32] */;
  %1083 = @func_8312(%1081, %1082) /* ty=(Tensor[(6, 14, 12), float32], Tensor[(6, 14, 12), float32]) */;
  %1084 = cast(-9.07677f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1085 = cast(%var_9597, dtype="float32") /* ty=Tensor[(6, 108), float32] */;
  %1086 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 182), int64] */, dtype="int64") /* ty=Tensor[(1, 182), int64] */;
  %1087 = reshape(%1084, newshape=[]) /* ty=float32 */;
  %1088 = reshape(%1085, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float32] */;
  %1089 = reshape(%1086, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %1090 = @func_684(%1087, %1088, %1089) /* ty=(Tensor[(9, 9, 8), float32], Tensor[(13, 2, 7), int64], Tensor[(182), int64]) */;
  %1091 = %1078.0;
  %1092 = %1083.1;
  %1093 = %1090.0;
  (%1091, %1092, %var_9589, %var_9590, %1093, -9.07677f /* ty=float32 */, %var_9597, meta[relay.Constant][55] /* ty=Tensor[(1, 182), int64] */)
}

def @func_4481() -> (Tensor[(10, 14, 9), float64],) {
  @func_4479() /* ty=(Tensor[(10, 14, 9), float64],) */
}

def @func_5523() -> (Tensor[(624), float64], Tensor[(182), int64]) {
  %1094 = @func_4184() /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64]) */;
  %1095 = @func_5020() /* ty=Tensor[(624), float64] */;
  %1096 = %1094.2;
  (%1095, %1096)
}

def @func_5927(%var_5918: Tensor[(240), float32]) -> (Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(240), float32]) {
  %1097 = @func_2185() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %1098 = cast(%var_5918, dtype="float32") /* ty=Tensor[(240), float32] */;
  %1099 = reshape(%1098, newshape=[8, 3, 10]) /* ty=Tensor[(8, 3, 10), float32] */;
  %1100 = @func_4895(%1099) /* ty=(Tensor[(8, 3, 10), bool], Tensor[(10, 14, 9), float64]) */;
  %1101 = %1097.0;
  %1102 = %1100.1;
  (%1101, %1102, %var_5918)
}

def @func_2468(%var_2454: Tensor[(2496), float64]) -> (Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(2496), float64]) {
  %1103 = @func_1736() /* ty=Tensor[(624), float64] */;
  %1104 = cast(%1103, dtype="float64") /* ty=Tensor[(624), float64] */;
  %1105 = cast(%var_2454, dtype="float64") /* ty=Tensor[(2496), float64] */;
  %1106 = reshape(%1104, newshape=[1, 624]) /* ty=Tensor[(1, 624), float64] */;
  %1107 = reshape(%1105, newshape=[4, 624]) /* ty=Tensor[(4, 624), float64] */;
  %1108 = @func_2389(%1106, %1107) /* ty=(Tensor[(182), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(4, 624), int32]) */;
  %1109 = @func_1851() /* ty=Tensor[(182), int64] */;
  %1110 = %1108.2;
  (%1103, %1109, %1110, %var_2454)
}

def @func_5892() -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(13, 2, 7), int64], float32) {
  %1111 = @func_5117() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %1112 = %1111.2;
  %1113 = cast(%1112, dtype="float64") /* ty=Tensor[(10, 14, 9), float64] */;
  %1114 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %1115 = @func_4410() /* ty=(Tensor[(182), int64], Tensor[(182), int64]) */;
  %1116 = @func_5590() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %1117 = cast(0.870233f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1118 = reshape(%1117, newshape=[]) /* ty=float32 */;
  %1119 = @func_3771(%1118) /* ty=(Tensor[(624), float64], Tensor[(624), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(182), int64]) */;
  %1120 = asinh(%1113) /* ty=Tensor[(10, 14, 9), float64] */;
  %1121 = %1114.0;
  %1122 = %1115.1;
  %1123 = %1116.0;
  %1124 = %1119.2;
  (%1120, %1121, %1122, %1123, %1124, 0.870233f /* ty=float32 */)
}

def @func_10448() -> (Tensor[(182), int64],) {
  @func_10446() /* ty=(Tensor[(182), int64],) */
}

def @func_6246() -> (Tensor[(182), int64], Tensor[(182), int64]) {
  %1125 = @func_1497() /* ty=(Tensor[(182), int64],) */;
  %1126 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %1127 = %1125.0;
  %1128 = %1126.0;
  (%1127, %1128)
}

def @func_4867(%var_4812: bool, %var_4813: Tensor[(440), bool], %var_4837: Tensor[(540), float64]) -> (Tensor[(10, 14, 9), float64], Tensor[(182), int64], bool, Tensor[(440), bool], Tensor[(6, 10, 9), float64], Tensor[(540), float64], Tensor[(182), int64], Tensor[(182), int64]) {
  %1129 = @func_2907() /* ty=(Tensor[(10, 14, 9), float64],) */;
  %1130 = cast(%var_4812, dtype="bool") /* ty=bool */;
  %1131 = cast(%var_4813, dtype="bool") /* ty=Tensor[(440), bool] */;
  %1132 = reshape(%1130, newshape=[]) /* ty=bool */;
  %1133 = reshape(%1131, newshape=[8, 5, 11]) /* ty=Tensor[(8, 5, 11), bool] */;
  %1134 = @func_4014(%1132, %1133) /* ty=(Tensor[(624), float64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(8, 5, 11), float64]) */;
  %1135 = cast(%var_4837, dtype="float64") /* ty=Tensor[(540), float64] */;
  %1136 = reshape(%1135, newshape=[6, 10, 9]) /* ty=Tensor[(6, 10, 9), float64] */;
  %1137 = @func_2293() /* ty=(Tensor[(182), int64],) */;
  %1138 = %1129.0;
  %1139 = %1134.2;
  %1140 = @func_4064(%1136) /* ty=Tensor[(6, 10, 9), float64] */;
  %1141 = @func_4139() /* ty=Tensor[(182), int64] */;
  %1142 = %1137.0;
  (%1138, %1139, %var_4812, %var_4813, %1140, %var_4837, %1141, %1142)
}

def @func_8316(%var_8314: Tensor[(6, 1, 12), float32], %var_8315: Tensor[(6, 14, 12), float32]) -> (Tensor[(6, 14, 12), float32], Tensor[(6, 14, 12), float32]) {
  @func_8312(%var_8314, %var_8315) /* ty=(Tensor[(6, 14, 12), float32], Tensor[(6, 14, 12), float32]) */
}

def @func_607(%var_605: Tensor[(15, 12, 12), float32], %var_606: Tensor[(15, 12, 12), uint64]) -> (Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) {
  %1171 = fn (%var_542: Tensor[(15, 12, 12), float32], %var_579: Tensor[(15, 12, 12), uint64]) -> (Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) {
    %1143 = cast(meta[relay.Constant][56] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
    %1144 = reshape(%1143, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
    %1145 = @func_135(%1144) /* ty=(Tensor[(13, 2, 7), int64],) */;
    %1146 = cast(meta[relay.Constant][56] /* ty=Tensor[(182), int64] */, dtype="int64") /* ty=Tensor[(182), int64] */;
    %1147 = reshape(%1146, newshape=[182]) /* ty=Tensor[(182), int64] */;
    %1148 = @func_353(%1147) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
    %1149 = cast(%var_542, dtype="float32") /* ty=Tensor[(15, 12, 12), float32] */;
    %1150 = asinh(%1149) /* ty=Tensor[(15, 12, 12), float32] */;
    %1151 = cast(%var_542, dtype="uint64") /* ty=Tensor[(15, 12, 12), uint64] */;
    %1152 = shape_of(%1150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1153 = cast(%1150, dtype="uint64") /* ty=Tensor[(15, 12, 12), uint64] */;
    %1154 = dyn.reshape(%1151, %1152, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1155 = multiply(%1153, %1154) /* ty=Tensor[(15, 12, 12), uint64] */;
    %1156 = cast(%var_579, dtype="uint32") /* ty=Tensor[(15, 12, 12), uint32] */;
    %1157 = shape_of(%1155, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1158 = cast(%1155, dtype="uint32") /* ty=Tensor[(15, 12, 12), uint32] */;
    %1159 = dyn.reshape(%1156, %1157, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %1160 = %1145.0;
    %1161 = cast(%1160, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
    %1162 = reshape(%1161, newshape=[182]) /* ty=Tensor[(182), int64] */;
    %1163 = @func_353(%1162) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
    %1164 = %1163.3;
    %1165 = cast(%1164, dtype="int64") /* ty=Tensor[(13, 2, 7), int64] */;
    %1166 = reshape(%1165, newshape=[13, 2, 7]) /* ty=Tensor[(13, 2, 7), int64] */;
    %1167 = @func_135(%1166) /* ty=(Tensor[(13, 2, 7), int64],) */;
    %1168 = %1148.2;
    %1169 = logical_xor(%1158, %1159) /* ty=Tensor[(15, 12, 12), uint32] */;
    %1170 = %1167.0;
    (%1160, meta[relay.Constant][56] /* ty=Tensor[(182), int64] */, %1168, %1169, %1164, %1170)
  };
  %1171(%var_605, %var_606) /* ty=(Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(182), int64], Tensor[(15, 12, 12), uint32], Tensor[(13, 2, 7), int64], Tensor[(13, 2, 7), int64]) */
}

def @func_8430(%var_8394: float32) -> (Tensor[(182), int64], Tensor[(1080), float64], Tensor[(1080), float64], float32, Tensor[(182), int64]) {
  %1172 = @func_4109() /* ty=(Tensor[(182), int64],) */;
  %1173 = cast(meta[relay.Constant][57] /* ty=Tensor[(1080), float64] */, dtype="float64") /* ty=Tensor[(1080), float64] */;
  %1174 = cast(%var_8394, dtype="float32") /* ty=float32 */;
  %1175 = reshape(%1173, newshape=[1080]) /* ty=Tensor[(1080), float64] */;
  %1176 = reshape(%1174, newshape=[]) /* ty=float32 */;
  %1177 = @func_2505(%1175, %1176) /* ty=(Tensor[(182), int64], Tensor[(10, 14, 9), float64], Tensor[(10, 12, 9), float64], Tensor[(1080), float64], Tensor[(13, 2, 7), int64], float32, Tensor[(648), float32], Tensor[(182), int64]) */;
  %1178 = @func_7635() /* ty=(Tensor[(182), int64],) */;
  %1179 = %1172.0;
  %1180 = %1177.3;
  %1181 = %1178.0;
  (%1179, %1180, meta[relay.Constant][57] /* ty=Tensor[(1080), float64] */, %var_8394, %1181)
}

def @func_5688() -> (Tensor[(182), int64], Tensor[(13, 2, 7), int64], Tensor[(1, 2, 2), float64]) {
  %1182 = @func_5523() /* ty=(Tensor[(624), float64], Tensor[(182), int64]) */;
  %1183 = %1182.1;
  %1184 = cast(%1183, dtype="int64") /* ty=Tensor[(182), int64] */;
  %1185 = reshape(%1184, newshape=[182]) /* ty=Tensor[(182), int64] */;
  %1186 = @func_353(%1185) /* ty=(Tensor[(5, 3, 5), float64], Tensor[(13, 2, 7), int64], Tensor[(182), int64], Tensor[(13, 2, 7), int64]) */;
  %1187 = @func_5117() /* ty=(Tensor[(1, 2, 2), float64], Tensor[(13, 2, 7), int64], Tensor[(10, 14, 9), bool], Tensor[(960), float64]) */;
  %1188 = %1186.1;
  %1189 = %1187.0;
  (%1183, %1188, %1189)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen477/build/output.py", line 3710, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:21:55] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

