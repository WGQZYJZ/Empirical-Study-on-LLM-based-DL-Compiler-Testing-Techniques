==========mod==========
#[version = "0.0.5"]
def @func_3068() -> (Tensor[(6, 9, 3), float64],) {
  %0 = @func_2281() /* ty=Tensor[(6, 9, 3), float64] */;
  (%0,)
}

def @func_5369(%var_5353: Tensor[(8, 16, 11), bool], %var_5354: Tensor[(8, 16, 11), bool], %var_5361: Tensor[(392), bool], %var_5362: Tensor[(8, 100), float32], %var_5363: Tensor[(162), bool]) -> (Tensor[(8, 16, 11), bool], Tensor[(6, 9, 3), float64], Tensor[(392), bool], Tensor[(8, 100), float32], Tensor[(162), bool], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) {
  %1 = cast(%var_5354, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %2 = shape_of(%var_5353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%var_5353, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %5 = cast(%var_5361, dtype="bool") /* ty=Tensor[(392), bool] */;
  %6 = cast(%var_5362, dtype="float32") /* ty=Tensor[(8, 100), float32] */;
  %7 = cast(%var_5363, dtype="bool") /* ty=Tensor[(162), bool] */;
  %8 = reshape(%5, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), bool] */;
  %9 = reshape(%6, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %10 = reshape(%7, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), bool] */;
  %11 = @func_3576(%8, %9, %10) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(800), float32], Tensor[(21), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 270), uint8], Tensor[(6, 9, 3), float32]) */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %14 = reshape(%12, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), bool] */;
  %15 = reshape(%13, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), bool] */;
  %16 = logical_and(%3, %4) /* ty=Tensor[(8, 16, 11), bool] */;
  %17 = %11.5;
  %18 = @func_3426(%14, %15) /* ty=Tensor[(13, 10, 6), bool] */;
  (%16, %17, %var_5361, %var_5362, %var_5363, %18, meta[relay.Constant][0] /* ty=Tensor[(780), bool] */)
}

def @func_4554() -> Tensor[(6, 9, 3), float32] {
  @func_3210() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_7485(%var_7386: Tensor[(288), float32], %var_7432: Tensor[(2, 120), int64], %var_7433: Tensor[(400, 2), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(144), float32], Tensor[(288), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(130), float64], Tensor[(2, 120), int64], Tensor[(400, 2), float32], Tensor[(8, 36), float32], Tensor[(8, 36), float64], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %19 = @func_4485() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %21 = reshape(%20, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
  %22 = @func_3139(%21) /* ty=(Tensor[(3, 14, 11), bool],) */;
  %23 = cast(%var_7432, dtype="int64") /* ty=Tensor[(2, 120), int64] */;
  %24 = cast(%var_7433, dtype="float32") /* ty=Tensor[(400, 2), float32] */;
  %25 = reshape(%23, newshape=[240]) /* ty=Tensor[(240), int64] */;
  %26 = reshape(%24, newshape=[8, 100]) /* ty=Tensor[(8, 100), float32] */;
  %27 = @func_2426(%25, %26) /* ty=(Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %29 = cast(%var_7386, dtype="float32") /* ty=Tensor[(288), float32] */;
  %30 = reshape(%28, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %31 = reshape(%29, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
  %32 = @func_2526(%30, %31) /* ty=(Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(1920, 1), bool], Tensor[(?, 3, 7), uint64], Tensor[(8, 36), int32], Tensor[(4, 6, 6), bool], Tensor[(6, 9, 3), float64]) */;
  %33 = %32.8;
  %34 = cast(%33, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
  %35 = sigmoid(%34) /* ty=Tensor[(8, 36), float64] */;
  %36 = cast(%35, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
  %37 = cos(%36) /* ty=Tensor[(8, 36), float64] */;
  %38 = cast(%35, dtype="uint32") /* ty=Tensor[(8, 36), uint32] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(2), int32] */;
  %40 = cast(%37, dtype="uint32") /* ty=Tensor[(8, 36), uint32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %42 = multiply(%40, %41) /* ty=Tensor[(8, 36), uint32] */;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 36), float64] */, dtype="bool") /* ty=Tensor[(8, 36), bool] */;
  %44 = shape_of(%35, dtype="int32") /* ty=Tensor[(2), int32] */;
  %45 = cast(%35, dtype="bool") /* ty=Tensor[(8, 36), bool] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %47 = logical_and(%45, %46) /* ty=Tensor[(8, 36), bool] */;
  %48 = cast(%47, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
  %49 = shape_of(%42, dtype="int32") /* ty=Tensor[(2), int32] */;
  %50 = cast(%42, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %52 = cast(%42, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
  %53 = log(%52) /* ty=Tensor[(8, 36), float64] */;
  %54 = cast(%53, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
  %55 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %56 = %19.0;
  %57 = %22.0;
  %58 = %27.5;
  %59 = floor_divide(%50, %51) /* ty=Tensor[(8, 36), float32] */;
  %60 = sqrt(%54) /* ty=Tensor[(8, 36), float64] */;
  %61 = %55.0;
  %62 = @func_2281() /* ty=Tensor[(6, 9, 3), float64] */;
  (%56, meta[relay.Constant][1] /* ty=Tensor[(144), float32] */, %var_7386, %57, meta[relay.Constant][2] /* ty=Tensor[(462), float32] */, %58, %var_7432, %var_7433, %59, %60, %61, %62)
}

def @func_4447(%var_4442: Tensor[(26, 5), float64], %var_4443: Tensor[(800), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(13, ?, 10), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32]) {
  %63 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %64 = cast(%var_4442, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %65 = cast(%var_4442, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %66 = cast(%var_4443, dtype="float32") /* ty=Tensor[(800), float32] */;
  %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %68 = reshape(%64, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %69 = reshape(%65, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %70 = reshape(%66, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
  %71 = reshape(%67, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %72 = @func_1641(%68, %69, %70, %71) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
  %73 = %63.0;
  %74 = %72.0;
  (%73, %74, %var_4442, %var_4443, meta[relay.Constant][4] /* ty=Tensor[(21), float32] */)
}

def @func_4982(%var_4972: Tensor[(945, 2), float64], %var_4973: Tensor[(288), float32], %var_4978: Tensor[(288), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(144, 1), float32], Tensor[(945, 2), float64], Tensor[(288), int8]) {
  %75 = cast(%var_4972, dtype="float64") /* ty=Tensor[(945, 2), float64] */;
  %76 = cast(%var_4973, dtype="float32") /* ty=Tensor[(288), float32] */;
  %77 = @func_4861() /* ty=Tensor[(6, 9, 3), bool] */;
  %78 = cast(%77, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %79 = reshape(%75, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %80 = reshape(%76, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %81 = reshape(%78, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %82 = @func_4429(%79, %80, %81) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(144, 1), float32], Tensor[(288), float32], Tensor[(6, 9, 3), bool]) */;
  %83 = cast(%var_4978, dtype="int8") /* ty=Tensor[(288), int8] */;
  %84 = shape_of(%var_4973, dtype="int32") /* ty=Tensor[(1), int32] */;
  %85 = cast(%var_4973, dtype="int8") /* ty=Tensor[(288), int8] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?), int8] */;
  %87 = %82.3;
  %88 = maximum(%85, %86) /* ty=Tensor[(288), int8] */;
  (%77, %87, %var_4972, %88)
}

def @func_6371() -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(9, 11, 8), bool], Tensor[(792), bool]) {
  %89 = cast(meta[relay.Constant][5] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %90 = @func_5733() /* ty=Tensor[(6, 9, 3), float32] */;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %92 = reshape(%89, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %93 = reshape(%91, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %94 = @func_2242(%92, %93) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(1890), float32], Tensor[(6, 9, 3), float64]) */;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(792), bool] */, dtype="bool") /* ty=Tensor[(792), bool] */;
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(792), bool] */, dtype="bool") /* ty=Tensor[(792), bool] */;
  %97 = reshape(%95, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %98 = reshape(%96, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %99 = @func_6118(%97, %98) /* ty=(Tensor[(9, 11, 8), bool],) */;
  %100 = %94.0;
  %101 = %99.0;
  (%90, %100, meta[relay.Constant][5] /* ty=Tensor[(1890), float64] */, %101, meta[relay.Constant][6] /* ty=Tensor[(792), bool] */)
}

def @func_7743() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64]) {
  %102 = @func_4151() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %103 = @func_2564() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %104 = %102.0;
  %105 = %103.0;
  (%104, %105)
}

def @func_2655(%var_2650: Tensor[(9, 14, 14), float32]) -> (Tensor[(9, 14, 14), float32],) {
  %106 = cast(%var_2650, dtype="float32") /* ty=Tensor[(9, 14, 14), float32] */;
  %107 = erf(%106) /* ty=Tensor[(9, 14, 14), float32] */;
  (%107,)
}

def @func_2627(%var_2573: Tensor[(12, 15, 9), uint8]) -> (Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) {
  %108 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 9), uint8] */, dtype="uint8") /* ty=Tensor[(12, 15, 9), uint8] */;
  %109 = shape_of(%var_2573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%var_2573, dtype="uint8") /* ty=Tensor[(12, 15, 9), uint8] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %112 = logical_xor(%110, %111) /* ty=Tensor[(12, 15, 9), uint8] */;
  %113 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 15, 9), uint8] */, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %117 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %120 = multiply(%115, %116) /* ty=Tensor[(12, 15, 9), float32] */;
  %121 = log10(%119) /* ty=Tensor[(6, 9, 3), float64] */;
  (%120, %121)
}

def @func_3210() -> Tensor[(6, 9, 3), float32] {
  @func_2645() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_6118(%var_6113: Tensor[(9, 11, 8), bool], %var_6114: Tensor[(9, 11, 8), bool]) -> (Tensor[(9, 11, 8), bool],) {
  %122 = cast(%var_6114, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %123 = shape_of(%var_6113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_6113, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = logical_or(%124, %125) /* ty=Tensor[(9, 11, 8), bool] */;
  (%126,)
}

def @func_4464() -> Tensor[(6, 9, 3), bool] {
  @func_3004() /* ty=Tensor[(6, 9, 3), bool] */
}

def @func_4766(%var_4730: Tensor[(21, 1), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(21, 800), int32], Tensor[(21, 1), float64], Tensor[(6, 9, 3), bool]) {
  %127 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %129 = cast(%var_4730, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
  %130 = reshape(%128, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), float32] */;
  %131 = reshape(%129, newshape=[21, 1]) /* ty=Tensor[(21, 1), float32] */;
  %132 = @func_1326(%130, %131) /* ty=(Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) */;
  %133 = cast(%var_4730, dtype="int32") /* ty=Tensor[(21, 1), int32] */;
  %134 = cast(meta[relay.Constant][9] /* ty=Tensor[(800), float32] */, dtype="int32") /* ty=Tensor[(800), int32] */;
  %135 = cast(%var_4730, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
  %136 = cos(%135) /* ty=Tensor[(21, 1), float32] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(21, 1), float64] */;
  %138 = @func_4151() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %139 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
  %140 = %127.1;
  %141 = %132.0;
  %142 = add(%133, %134) /* ty=Tensor[(21, 800), int32] */;
  %143 = sqrt(%137) /* ty=Tensor[(21, 1), float64] */;
  %144 = %138.0;
  (%139, %140, %141, %142, %143, %144)
}

def @func_6450() -> Tensor[(6, 9, 3), float64] {
  %145 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %145.0
}

def @func_7523() -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64]) {
  %146 = @func_6919() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %147 = @func_5182() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %148 = %146.0;
  %149 = %147.0;
  (%148, %149)
}

def @func_7765() -> (Tensor[(6, 9, 3), float64],) {
  %150 = @func_6594() /* ty=Tensor[(6, 9, 3), float64] */;
  (%150,)
}

def @func_8285() -> (Tensor[(6, 9, 3), float32],) {
  %151 = @func_5733() /* ty=Tensor[(6, 9, 3), float32] */;
  (%151,)
}

def @func_1213(%var_1120: Tensor[(1, 3, 7), float32], %var_1132: Tensor[(8, 36), float32]) -> (Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) {
  %152 = cast(%var_1132, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
  %153 = reshape(%152, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %154 = @func_870(%153) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
  %155 = cast(%var_1132, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
  %156 = reshape(%155, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %157 = @func_870(%156) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
  %158 = cast(-0.702007f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %159 = cast(%var_1120, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
  %160 = divide(%158, %159) /* ty=Tensor[(1, 3, 7), float32] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
  %162 = exp(%161) /* ty=Tensor[(1, 3, 7), float32] */;
  %163 = cast(%var_1120, dtype="int8") /* ty=Tensor[(1, 3, 7), int8] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="int8") /* ty=Tensor[(1, 3, 7), int8] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %167 = cast(%162, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
  %168 = cast(%var_1132, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
  %169 = reshape(%168, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %170 = @func_870(%169) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
  %171 = cast(meta[relay.Constant][10] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %172 = reshape(%171, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), float32] */;
  %173 = %154.1;
  %174 = %157.1;
  %175 = maximum(%165, %166) /* ty=Tensor[(?, 3, 7), int8] */;
  %176 = log(%167) /* ty=Tensor[(1, 3, 7), float32] */;
  %177 = %170.1;
  %178 = @func_122(%172) /* ty=Tensor[(4, 6, 6), bool] */;
  (%173, %var_1132, %174, %175, %176, %177, %178, meta[relay.Constant][10] /* ty=Tensor[(144), float32] */)
}

def @func_560(%var_556: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32],) {
  %179 = cast(%var_556, dtype="float32") /* ty=Tensor[(15, 3, 3), float32] */;
  %180 = sqrt(%179) /* ty=Tensor[(15, 3, 3), float32] */;
  (%180,)
}

def @func_1931(%var_1927: Tensor[(6, 8, 5), int64]) -> (Tensor[(6, 8, 5), int64],) {
  %181 = cast(%var_1927, dtype="int64") /* ty=Tensor[(6, 8, 5), int64] */;
  %182 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(6, 8, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 8, 5), int64] */, dtype="int64") /* ty=Tensor[(6, 8, 5), int64] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %185 = left_shift(%183, %184) /* ty=Tensor[(6, 8, 5), int64] */;
  (%185,)
}

def @func_5263(%var_5236: Tensor[(6, 9, 3), bool], %var_5261: Tensor[(462), float32]) -> (Tensor[(6, 9, 3), uint8], Tensor[(462), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(462), float32]) {
  %186 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
  %187 = cast(%var_5236, dtype="uint8") /* ty=Tensor[(6, 9, 3), uint8] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="uint8") /* ty=Tensor[(6, 9, 3), uint8] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %191 = cast(meta[relay.Constant][12] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %193 = cast(%var_5261, dtype="float32") /* ty=Tensor[(462), float32] */;
  %194 = reshape(%191, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
  %195 = reshape(%192, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %196 = reshape(%193, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %197 = @func_3801(%194, %195, %196) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32]) */;
  %198 = bitwise_or(%189, %190) /* ty=Tensor[(6, 9, 3), uint8] */;
  %199 = %197.6;
  (%198, %199, meta[relay.Constant][12] /* ty=Tensor[(130), float64] */, meta[relay.Constant][13] /* ty=Tensor[(21), float32] */, %var_5261)
}

def @func_8326() -> (Tensor[(6, 9, 3), float64],) {
  %200 = @func_7765() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %201 = %200.0;
  (%201,)
}

def @func_1326(%var_1276: Tensor[(5, 10, 16), float32], %var_1316: Tensor[(21, 1), float32]) -> (Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) {
  %202 = cast(%var_1276, dtype="float32") /* ty=Tensor[(5, 10, 16), float32] */;
  %203 = cast(meta[relay.Constant][14] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %204 = reshape(%203, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %205 = @func_870(%204) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
  %206 = cast(%var_1316, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
  %207 = cast(meta[relay.Constant][14] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %208 = reshape(%206, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
  %209 = reshape(%207, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
  %210 = @func_1213(%208, %209) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) */;
  %211 = atan(%202) /* ty=Tensor[(5, 10, 16), float32] */;
  %212 = %205.2;
  %213 = %210.1;
  (%211, %212, meta[relay.Constant][14] /* ty=Tensor[(288), float32] */, %213, %var_1316)
}

def @func_4139() -> Tensor[(6, 9, 3), float32] {
  %214 = @func_3287() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) */;
  %214.1
}

def @func_5801() -> (Tensor[(6, 9, 3), bool],) {
  %215 = @func_4464() /* ty=Tensor[(6, 9, 3), bool] */;
  (%215,)
}

def @func_122(%var_97: Tensor[(4, 6, 6), float32]) -> Tensor[(4, 6, 6), bool] {
  %216 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 6), float32] */;
  %217 = shape_of(%var_97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%var_97, dtype="float32") /* ty=Tensor[(4, 6, 6), float32] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %220 = floor_mod(%218, %219) /* ty=Tensor[(4, 6, 6), float32] */;
  %221 = cast(%220, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
  %222 = shape_of(%var_97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%var_97, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%223, %224) /* ty=Tensor[(4, 6, 6), bool] */
}

def @func_870(%var_864: Tensor[(12, 12, 2), float32]) -> (Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) {
  %225 = cast(%var_864, dtype="float32") /* ty=Tensor[(12, 12, 2), float32] */;
  %226 = cast(meta[relay.Constant][16] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %227 = reshape(%226, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %228 = @func_560(%227) /* ty=(Tensor[(15, 3, 3), float32],) */;
  %229 = cosh(%225) /* ty=Tensor[(12, 12, 2), float32] */;
  %230 = %228.0;
  (%229, %230, meta[relay.Constant][16] /* ty=Tensor[(135), float32] */)
}

def @func_5182() -> (Tensor[(6, 9, 3), float64],) {
  %231 = @func_2171() /* ty=Tensor[(6, 9, 3), float64] */;
  (%231,)
}

def @func_3192() -> (Tensor[(6, 9, 3), float64],) {
  %232 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %233 = %232.0;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %235 = exp(%234) /* ty=Tensor[(6, 9, 3), float64] */;
  (%235,)
}

def @func_2526(%var_2461: Tensor[(144), float32], %var_2509: Tensor[(8, 36), float32]) -> (Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(1920, 1), bool], Tensor[(?, 3, 7), uint64], Tensor[(8, 36), int32], Tensor[(4, 6, 6), bool], Tensor[(6, 9, 3), float64]) {
  %236 = cast(%var_2461, dtype="float32") /* ty=Tensor[(144), float32] */;
  %237 = reshape(%236, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), float32] */;
  %238 = cast(meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %239 = reshape(%238, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %240 = @func_2075(%239) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) */;
  %241 = cast(meta[relay.Constant][18] /* ty=Tensor[(1920, 1), bool] */, dtype="bool") /* ty=Tensor[(1920, 1), bool] */;
  %242 = cast(meta[relay.Constant][18] /* ty=Tensor[(1920, 1), bool] */, dtype="bool") /* ty=Tensor[(1920, 1), bool] */;
  %243 = reshape(%241, newshape=[8, 16, 15]) /* ty=Tensor[(8, 16, 15), bool] */;
  %244 = reshape(%242, newshape=[8, 16, 15]) /* ty=Tensor[(8, 16, 15), bool] */;
  %245 = @func_1770(%243, %244) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8]) */;
  %246 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 21), float32] */, dtype="float32") /* ty=Tensor[(1, 21), float32] */;
  %247 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 36), float32] */, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
  %248 = reshape(%246, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
  %249 = reshape(%247, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
  %250 = @func_1213(%248, %249) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) */;
  %251 = %250.3;
  %252 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 21), float32] */, dtype="uint64") /* ty=Tensor[(1, 21), uint64] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="uint64") /* ty=Tensor[(?, 3, 7), uint64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %256 = cast(%var_2509, dtype="int32") /* ty=Tensor[(8, 36), int32] */;
  %257 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(8, 36), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %258 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 36), float32] */, dtype="int32") /* ty=Tensor[(8, 36), int32] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %260 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 21), float32] */, dtype="float32") /* ty=Tensor[(1, 21), float32] */;
  %261 = left_shift(%258, %259) /* ty=Tensor[(8, 36), int32] */;
  %262 = cast(%261, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
  %263 = reshape(%260, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
  %264 = reshape(%262, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
  %265 = @func_1213(%263, %264) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) */;
  %266 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %267 = %266.0;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %269 = @func_122(%237) /* ty=Tensor[(4, 6, 6), bool] */;
  %270 = @func_2281() /* ty=Tensor[(6, 9, 3), float64] */;
  %271 = %240.0;
  %272 = %245.2;
  %273 = logical_xor(%254, %255) /* ty=Tensor[(?, 3, 7), uint64] */;
  %274 = %265.6;
  %275 = sigmoid(%268) /* ty=Tensor[(6, 9, 3), float64] */;
  (%269, %var_2461, %270, %271, meta[relay.Constant][17] /* ty=Tensor[(1890), float64] */, %272, meta[relay.Constant][18] /* ty=Tensor[(1920, 1), bool] */, %273, %261, %274, %275)
}

def @func_4668(%var_4652: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), float64],) {
  %276 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %277 = %276.0;
  %278 = cast(%var_4652, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%277, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %282 = divide(%280, %281) /* ty=Tensor[(6, 9, 3), float64] */;
  (%282,)
}

def @func_6594() -> Tensor[(6, 9, 3), float64] {
  @func_4907() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_5700() -> Tensor[(6, 9, 3), float64] {
  @func_4907() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_3648(%var_3639: Tensor[(13, 10), float64], %var_3641: Tensor[(21), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(800), float32], Tensor[(21), float32]) {
  %283 = cast(meta[relay.Constant][21] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %284 = reshape(%283, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
  %285 = @func_3139(%284) /* ty=(Tensor[(3, 14, 11), bool],) */;
  %286 = cast(%var_3639, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %287 = cast(%var_3639, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %288 = cast(meta[relay.Constant][22] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %289 = cast(%var_3641, dtype="float32") /* ty=Tensor[(21), float32] */;
  %290 = reshape(%286, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %291 = reshape(%287, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %292 = reshape(%288, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
  %293 = reshape(%289, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %294 = @func_1641(%290, %291, %292, %293) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
  %295 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
  %296 = %285.0;
  %297 = %294.2;
  (%295, %296, meta[relay.Constant][21] /* ty=Tensor[(462), float32] */, %297, %var_3639, meta[relay.Constant][22] /* ty=Tensor[(800), float32] */, %var_3641)
}

def @func_3139(%var_3121: Tensor[(3, 14, 11), float32]) -> (Tensor[(3, 14, 11), bool],) {
  %298 = cast(%var_3121, dtype="float32") /* ty=Tensor[(3, 14, 11), float32] */;
  %299 = asinh(%298) /* ty=Tensor[(3, 14, 11), float32] */;
  %300 = cast(%var_3121, dtype="bool") /* ty=Tensor[(3, 14, 11), bool] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="bool") /* ty=Tensor[(3, 14, 11), bool] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %304 = less(%302, %303) /* ty=Tensor[(3, 14, 11), bool] */;
  (%304,)
}

def @func_6808(%var_6806: Tensor[(135), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) {
  %305 = @func_4933() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %306 = @func_3068() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %307 = cast(%var_6806, dtype="float32") /* ty=Tensor[(135), float32] */;
  %308 = reshape(%307, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %309 = @func_560(%308) /* ty=(Tensor[(15, 3, 3), float32],) */;
  %310 = %305.0;
  %311 = %306.0;
  %312 = %309.0;
  (%310, %311, %312, %var_6806)
}

def @func_8145() -> (Tensor[(6, 9, 3), float32],) {
  %313 = @func_7732() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %314 = %313.0;
  (%314,)
}

def @func_3576(%var_3508: Tensor[(7, 14, 4), bool], %var_3533: Tensor[(800), float32], %var_3570: Tensor[(6, 9, 3), bool]) -> (Tensor[(7, 14, 4), bool], Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(800), float32], Tensor[(21), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 270), uint8], Tensor[(6, 9, 3), float32]) {
  %315 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 14, 4), bool] */, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %316 = shape_of(%var_3508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%var_3508, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %319 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %320 = cast(%var_3533, dtype="float32") /* ty=Tensor[(800), float32] */;
  %321 = cast(meta[relay.Constant][24] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %322 = reshape(%320, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), float32] */;
  %323 = reshape(%321, newshape=[21, 1]) /* ty=Tensor[(21, 1), float32] */;
  %324 = @func_1326(%322, %323) /* ty=(Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) */;
  %325 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 270), uint8] */, dtype="uint8") /* ty=Tensor[(6, 270), uint8] */;
  %326 = reshape(%325, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %327 = @func_2627(%326) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) */;
  %328 = %319.0;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %330 = reshape(%329, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %331 = @func_2883(%330) /* ty=(Tensor[(6, 9, 3), bool],) */;
  %332 = %331.0;
  %333 = cast(%var_3570, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %337 = logical_or(%317, %318) /* ty=Tensor[(7, 14, 4), bool] */;
  %338 = %324.1;
  %339 = %327.1;
  %340 = power(%335, %336) /* ty=Tensor[(6, 9, 3), float32] */;
  (%337, %328, %338, %var_3533, meta[relay.Constant][24] /* ty=Tensor[(21), float32] */, %339, meta[relay.Constant][25] /* ty=Tensor[(6, 270), uint8] */, %340)
}

def @func_3801(%var_3793: Tensor[(1, 130), float64], %var_3795: Tensor[(21), float32], %var_3799: Tensor[(462), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32]) {
  %341 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %342 = cast(%var_3793, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %343 = cast(%var_3793, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %344 = cast(meta[relay.Constant][26] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %345 = cast(%var_3795, dtype="float32") /* ty=Tensor[(21), float32] */;
  %346 = reshape(%342, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %347 = reshape(%343, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %348 = reshape(%344, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
  %349 = reshape(%345, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %350 = @func_1641(%346, %347, %348, %349) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
  %351 = cast(%var_3799, dtype="float32") /* ty=Tensor[(462), float32] */;
  %352 = reshape(%351, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
  %353 = @func_3139(%352) /* ty=(Tensor[(3, 14, 11), bool],) */;
  %354 = %341.0;
  %355 = %350.1;
  %356 = %353.0;
  (%354, %355, %var_3793, meta[relay.Constant][26] /* ty=Tensor[(800), float32] */, %var_3795, %356, %var_3799)
}

def @func_1529(%var_1510: Tensor[(6, 13, 4), int64], %var_1511: Tensor[(6, 13, 4), int64]) -> (Tensor[(6, 13, 4), int64],) {
  %357 = cast(%var_1511, dtype="int64") /* ty=Tensor[(6, 13, 4), int64] */;
  %358 = shape_of(%var_1510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%var_1510, dtype="int64") /* ty=Tensor[(6, 13, 4), int64] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %361 = multiply(%359, %360) /* ty=Tensor[(6, 13, 4), int64] */;
  (%361,)
}

def @func_7101() -> Tensor[(6, 9, 3), float64] {
  @func_6594() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_3752() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), bool]) {
  %362 = @func_2171() /* ty=Tensor[(6, 9, 3), float64] */;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %364 = reshape(%363, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %365 = @func_2883(%364) /* ty=(Tensor[(6, 9, 3), bool],) */;
  %366 = %365.0;
  (%362, %366)
}

def @func_4429(%var_4398: Tensor[(1890), float64], %var_4406: Tensor[(288), float32], %var_4417: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(144, 1), float32], Tensor[(288), float32], Tensor[(6, 9, 3), bool]) {
  %367 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %368 = cast(meta[relay.Constant][27] /* ty=Tensor[(144, 1), float32] */, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %369 = cast(%var_4406, dtype="float32") /* ty=Tensor[(288), float32] */;
  %370 = reshape(%368, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %371 = reshape(%369, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
  %372 = @func_2526(%370, %371) /* ty=(Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(1920, 1), bool], Tensor[(?, 3, 7), uint64], Tensor[(8, 36), int32], Tensor[(4, 6, 6), bool], Tensor[(6, 9, 3), float64]) */;
  %373 = cast(%var_4398, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %374 = %367.0;
  %375 = cast(%374, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %376 = reshape(%373, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %377 = reshape(%375, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %378 = @func_2242(%376, %377) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(1890), float32], Tensor[(6, 9, 3), float64]) */;
  %379 = %378.2;
  %380 = cast(%var_4417, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%379, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %384 = %372.5;
  %385 = less(%382, %383) /* ty=Tensor[(6, 9, 3), bool] */;
  (%374, %var_4398, %384, meta[relay.Constant][27] /* ty=Tensor[(144, 1), float32] */, %var_4406, %385)
}

def @func_5973(%var_5881: Tensor[(144), float32], %var_5907: Tensor[(77, 6), float32], %var_5919: Tensor[(98, 4), float32], %var_5967: Tensor[(98, 4), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(112), float32], Tensor[(130), float64], Tensor[(144), float32], Tensor[(135), float32], Tensor[(3, 14, 11), bool], Tensor[(77, 6), float32], Tensor[(98, 4), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(6, 9, 3), float64], Tensor[(98, 4), float32], Tensor[(98, 4), bool]) {
  %386 = @func_4933() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %387 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
  %388 = cast(%var_5907, dtype="float32") /* ty=Tensor[(77, 6), float32] */;
  %389 = reshape(%388, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
  %390 = @func_3139(%389) /* ty=(Tensor[(3, 14, 11), bool],) */;
  %391 = cast(meta[relay.Constant][28] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %392 = cast(meta[relay.Constant][29] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %393 = cast(%var_5881, dtype="float32") /* ty=Tensor[(144), float32] */;
  %394 = reshape(%391, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %395 = reshape(%392, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
  %396 = reshape(%393, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %397 = @func_5121(%394, %395, %396) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(8, 14, ?), int64], Tensor[(112), float32], Tensor[(800), float32], Tensor[(1, 130), float32], Tensor[(6, 9, 3), float64], Tensor[(98, 4), bool], Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), bool]) */;
  %398 = %397.6;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(98, 4), float32] */;
  %400 = rsqrt(%399) /* ty=Tensor[(98, 4), float32] */;
  %401 = cast(%var_5919, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(2), int32] */;
  %403 = cast(%400, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %405 = cast(meta[relay.Constant][30] /* ty=Tensor[(240), int64] */, dtype="int64") /* ty=Tensor[(240), int64] */;
  %406 = reshape(%405, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
  %407 = @func_1931(%406) /* ty=(Tensor[(6, 8, 5), int64],) */;
  %408 = cast(meta[relay.Constant][28] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %409 = cast(meta[relay.Constant][29] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %410 = cast(%var_5881, dtype="float32") /* ty=Tensor[(144), float32] */;
  %411 = reshape(%408, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %412 = reshape(%409, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
  %413 = reshape(%410, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %414 = @func_5121(%411, %412, %413) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(8, 14, ?), int64], Tensor[(112), float32], Tensor[(800), float32], Tensor[(1, 130), float32], Tensor[(6, 9, 3), float64], Tensor[(98, 4), bool], Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), bool]) */;
  %415 = cast(%400, dtype="float32") /* ty=Tensor[(98, 4), float32] */;
  %416 = cast(%var_5967, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
  %417 = shape_of(%400, dtype="int32") /* ty=Tensor[(2), int32] */;
  %418 = cast(%400, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %420 = %386.0;
  %421 = %387.1;
  %422 = %390.0;
  %423 = floor_mod(%403, %404) /* ty=Tensor[(98, 4), float64] */;
  %424 = %407.0;
  %425 = %414.5;
  %426 = sqrt(%415) /* ty=Tensor[(98, 4), float32] */;
  %427 = equal(%418, %419) /* ty=Tensor[(98, 4), bool] */;
  (%420, meta[relay.Constant][28] /* ty=Tensor[(112), float32] */, meta[relay.Constant][29] /* ty=Tensor[(130), float64] */, %var_5881, %421, %422, %var_5907, %423, %424, meta[relay.Constant][30] /* ty=Tensor[(240), int64] */, %425, %426, %427)
}

def @func_6521() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %428 = @func_5587() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %429 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %430 = %428.0;
  %431 = @func_5553() /* ty=Tensor[(6, 9, 3), float64] */;
  %432 = %429.0;
  (%430, %431, %432)
}

def @func_8010(%var_7969: Tensor[(392), int16], %var_7990: Tensor[(240), int64]) -> (Tensor[(6, 9, 3), float64], Tensor[(800), float32], Tensor[(392), int16], Tensor[(135), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float32], Tensor[(6, 8, 5), int64], Tensor[(240), int64]) {
  %433 = @func_5055() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %434 = cast(%var_7969, dtype="int16") /* ty=Tensor[(392), int16] */;
  %435 = reshape(%434, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), int16] */;
  %436 = @func_3709(%435) /* ty=(Tensor[(14, 2, 14), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), uint16], Tensor[(8, 30), int64], Tensor[(800), float32]) */;
  %437 = cast(meta[relay.Constant][31] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %438 = reshape(%437, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %439 = @func_870(%438) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
  %440 = cast(meta[relay.Constant][31] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %441 = reshape(%440, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %442 = @func_4297(%441) /* ty=(Tensor[(6, 9, 3), bool], Tensor[(15, 3, 3), float32], Tensor[(21), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) */;
  %443 = cast(%var_7990, dtype="int64") /* ty=Tensor[(240), int64] */;
  %444 = reshape(%443, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
  %445 = @func_1931(%444) /* ty=(Tensor[(6, 8, 5), int64],) */;
  %446 = %433.0;
  %447 = %436.5;
  %448 = %439.2;
  %449 = %442.5;
  %450 = %445.0;
  (%446, %447, %var_7969, %448, meta[relay.Constant][31] /* ty=Tensor[(288), float32] */, %449, %450, %var_7990)
}

def @func_2017() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %451 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
  %452 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %455 = %451.0;
  %456 = sinh(%454) /* ty=Tensor[(6, 9, 3), float64] */;
  (%455, %456)
}

def @func_5553() -> Tensor[(6, 9, 3), float64] {
  @func_4907() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_8060() -> Tensor[(6, 9, 3), float32] {
  %457 = @func_7280() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) */;
  %457.1
}

def @func_1770(%var_1738: Tensor[(8, 16, 15), bool], %var_1739: Tensor[(8, 16, 15), bool]) -> (Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8]) {
  %458 = cast(meta[relay.Constant][32] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %459 = reshape(%458, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %460 = @func_560(%459) /* ty=(Tensor[(15, 3, 3), float32],) */;
  %461 = cast(%var_1739, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %462 = shape_of(%var_1738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_1738, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %465 = logical_or(%463, %464) /* ty=Tensor[(8, 16, 15), bool] */;
  %466 = cast(%var_1739, dtype="int8") /* ty=Tensor[(8, 16, 15), int8] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%465, dtype="int8") /* ty=Tensor[(8, 16, 15), int8] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %470 = %460.0;
  %471 = bitwise_and(%468, %469) /* ty=Tensor[(8, 16, 15), int8] */;
  (%470, meta[relay.Constant][32] /* ty=Tensor[(135), float32] */, %471)
}

def @func_3501() -> (Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(1890), int8]) {
  %472 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %473 = cast(meta[relay.Constant][33] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
  %474 = reshape(%473, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
  %475 = @func_3139(%474) /* ty=(Tensor[(3, 14, 11), bool],) */;
  %476 = cast(meta[relay.Constant][34] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %477 = reshape(%476, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %478 = @func_2075(%477) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) */;
  %479 = %478.3;
  %480 = cast(%479, dtype="int8") /* ty=Tensor[(15, 14, 9), int8] */;
  %481 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(1890), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %482 = cast(meta[relay.Constant][34] /* ty=Tensor[(1890), float64] */, dtype="int8") /* ty=Tensor[(1890), int8] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?), int8] */;
  %484 = %472.0;
  %485 = %475.0;
  %486 = maximum(%482, %483) /* ty=Tensor[(1890), int8] */;
  (%484, %485, meta[relay.Constant][33] /* ty=Tensor[(462), float32] */, %486)
}

def @main(%var_8486: Tensor[(6, 6, 12), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(6, 6, 12), float64]) {
  %487 = @func_3501() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(1890), int8]) */;
  %488 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
  %489 = shape_of(%var_8486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%var_8486, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %492 = divide(%490, %491) /* ty=Tensor[(6, 6, 12), float32] */;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
  %494 = @func_5136() /* ty=Tensor[(6, 9, 3), float64] */;
  %495 = %487.1;
  %496 = sinh(%493) /* ty=Tensor[(6, 6, 12), float64] */;
  (%494, %495, %496)
}

def @func_4039(%var_4016: Tensor[(6, 10, 10), float64], %var_4025: Tensor[(6, 10, 10), float64]) -> (Tensor[(6, 10, 10), int32], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) {
  %497 = cast(%var_4016, dtype="float64") /* ty=Tensor[(6, 10, 10), float64] */;
  %498 = log10(%497) /* ty=Tensor[(6, 10, 10), float64] */;
  %499 = cast(%var_4025, dtype="int32") /* ty=Tensor[(6, 10, 10), int32] */;
  %500 = shape_of(%498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%498, dtype="int32") /* ty=Tensor[(6, 10, 10), int32] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %503 = cast(meta[relay.Constant][36] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %504 = cast(meta[relay.Constant][36] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
  %505 = reshape(%503, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), bool] */;
  %506 = reshape(%504, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), bool] */;
  %507 = bitwise_xor(%501, %502) /* ty=Tensor[(6, 10, 10), int32] */;
  %508 = @func_3426(%505, %506) /* ty=Tensor[(13, 10, 6), bool] */;
  (%507, %508, meta[relay.Constant][36] /* ty=Tensor[(780), bool] */)
}

def @func_2148(%var_2109: Tensor[(2, 11, 6), float64], %var_2132: Tensor[(135), float32]) -> (Tensor[(2, 11, 6), float64], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(2, 11, 6), float64]) {
  %509 = cast(%var_2109, dtype="float64") /* ty=Tensor[(2, 11, 6), float64] */;
  %510 = cast(%var_2132, dtype="float32") /* ty=Tensor[(135), float32] */;
  %511 = reshape(%510, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %512 = @func_560(%511) /* ty=(Tensor[(15, 3, 3), float32],) */;
  %513 = cast(%var_2109, dtype="float64") /* ty=Tensor[(2, 11, 6), float64] */;
  %514 = asin(%509) /* ty=Tensor[(2, 11, 6), float64] */;
  %515 = %512.0;
  %516 = cos(%513) /* ty=Tensor[(2, 11, 6), float64] */;
  (%514, %515, %var_2132, %516)
}

def @func_4861() -> Tensor[(6, 9, 3), bool] {
  %517 = @func_3752() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), bool]) */;
  %517.1
}

def @func_7874() -> (Tensor[(6, 9, 3), bool],) {
  %518 = @func_4485() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %519 = %518.0;
  (%519,)
}

def @func_4151() -> (Tensor[(6, 9, 3), bool],) {
  %520 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
  (%520,)
}

def @func_3709(%var_3688: Tensor[(14, 2, 14), int16]) -> (Tensor[(14, 2, 14), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), uint16], Tensor[(8, 30), int64], Tensor[(800), float32]) {
  %521 = cast(%var_3688, dtype="bool") /* ty=Tensor[(14, 2, 14), bool] */;
  %522 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(14, 2, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 2, 14), int16] */, dtype="bool") /* ty=Tensor[(14, 2, 14), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %526 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 30), int64] */, dtype="int64") /* ty=Tensor[(8, 30), int64] */;
  %527 = cast(meta[relay.Constant][39] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %528 = reshape(%526, newshape=[240]) /* ty=Tensor[(240), int64] */;
  %529 = reshape(%527, newshape=[8, 100]) /* ty=Tensor[(8, 100), float32] */;
  %530 = @func_2426(%528, %529) /* ty=(Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) */;
  %531 = equal(%523, %524) /* ty=Tensor[(14, 2, 14), bool] */;
  %532 = %525.0;
  %533 = @func_3210() /* ty=Tensor[(6, 9, 3), float32] */;
  %534 = %530.1;
  (%531, %532, %533, %534, meta[relay.Constant][38] /* ty=Tensor[(8, 30), int64] */, meta[relay.Constant][39] /* ty=Tensor[(800), float32] */)
}

def @func_1641(%var_1591: Tensor[(13, 1, 10), float64], %var_1592: Tensor[(13, 1, 10), float64], %var_1634: Tensor[(800, 1), float32], %var_1635: Tensor[(21), float32]) -> (Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) {
  %535 = cast(%var_1592, dtype="float64") /* ty=Tensor[(13, 1, 10), float64] */;
  %536 = shape_of(%var_1591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%var_1591, dtype="float64") /* ty=Tensor[(13, 1, 10), float64] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %539 = cast(%var_1634, dtype="float32") /* ty=Tensor[(800, 1), float32] */;
  %540 = cast(%var_1635, dtype="float32") /* ty=Tensor[(21), float32] */;
  %541 = reshape(%539, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), float32] */;
  %542 = reshape(%540, newshape=[21, 1]) /* ty=Tensor[(21, 1), float32] */;
  %543 = @func_1326(%541, %542) /* ty=(Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) */;
  %544 = divide(%537, %538) /* ty=Tensor[(13, ?, 10), float64] */;
  %545 = %543.0;
  (%544, %545, %var_1634, %var_1635)
}

def @func_3671(%var_3656: Tensor[(15, 9), float32], %var_3666: Tensor[(6, 9, 3), float64]) -> (Tensor[(15, 9), float32], Tensor[(15, 3, 3), bool], Tensor[(6, 9, 3), float32]) {
  %546 = cast(%var_3656, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %547 = reshape(%546, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %548 = @func_560(%547) /* ty=(Tensor[(15, 3, 3), float32],) */;
  %549 = %548.0;
  %550 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 3, 3), float32] */, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%549, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %554 = @func_2814() /* ty=Tensor[(6, 9, 3), float64] */;
  %555 = cast(%var_3666, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %559 = less(%552, %553) /* ty=Tensor[(15, 3, 3), bool] */;
  %560 = floor_mod(%557, %558) /* ty=Tensor[(6, 9, 3), float32] */;
  (%var_3656, %559, %560)
}

def @func_6099() -> (Tensor[(6, 9, 3), float32],) {
  %561 = @func_4554() /* ty=Tensor[(6, 9, 3), float32] */;
  (%561,)
}

def @func_6424(%var_6407: Tensor[(21), float32], %var_6408: Tensor[(77, 6), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(1, 130), float64], Tensor[(13, 10), float64], Tensor[(21), float32], Tensor[(77, 6), float32]) {
  %562 = @func_6099() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %563 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 10), float64] */, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %564 = cast(%var_6407, dtype="float32") /* ty=Tensor[(21), float32] */;
  %565 = cast(%var_6408, dtype="float32") /* ty=Tensor[(77, 6), float32] */;
  %566 = reshape(%563, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
  %567 = reshape(%564, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %568 = reshape(%565, newshape=[462]) /* ty=Tensor[(462), float32] */;
  %569 = @func_3801(%566, %567, %568) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32]) */;
  %570 = %562.0;
  %571 = %569.2;
  (%570, %571, meta[relay.Constant][41] /* ty=Tensor[(13, 10), float64] */, %var_6407, %var_6408)
}

def @func_2814() -> Tensor[(6, 9, 3), float64] {
  @func_2171() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_3244() -> (Tensor[(6, 9, 3), float64],) {
  %572 = @func_2171() /* ty=Tensor[(6, 9, 3), float64] */;
  (%572,)
}

def @func_7821() -> Tensor[(6, 9, 3), float32] {
  %573 = @func_6919() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %573.0
}

def @func_4331() -> Tensor[(6, 9, 3), float64] {
  %574 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
  %574.0
}

def @func_6071() -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %575 = @func_5841() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %576 = @func_5182() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %577 = %575.0;
  %578 = @func_4331() /* ty=Tensor[(6, 9, 3), float64] */;
  %579 = %576.0;
  (%577, %578, %579)
}

def @func_8116() -> (Tensor[(6, 9, 3), bool],) {
  %580 = @func_7280() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) */;
  %581 = %580.0;
  (%581,)
}

def @func_2322(%var_2307: Tensor[(13, 10), float64], %var_2308: Tensor[(200, 4), float32], %var_2309: Tensor[(1, 21), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(200, 4), float32], Tensor[(1, 21), float32]) {
  %582 = cast(%var_2307, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %583 = cast(%var_2307, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %584 = cast(%var_2308, dtype="float32") /* ty=Tensor[(200, 4), float32] */;
  %585 = cast(%var_2309, dtype="float32") /* ty=Tensor[(1, 21), float32] */;
  %586 = reshape(%582, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %587 = reshape(%583, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %588 = reshape(%584, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
  %589 = reshape(%585, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %590 = @func_1641(%586, %587, %588, %589) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
  %591 = @func_2171() /* ty=Tensor[(6, 9, 3), float64] */;
  %592 = %590.2;
  (%591, %592, %var_2307, %var_2308, %var_2309)
}

def @func_2426(%var_2379: Tensor[(240), int64], %var_2384: Tensor[(8, 100), float32]) -> (Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) {
  %593 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %594 = %593.0;
  %595 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 9, 3), float64] */, dtype="int32") /* ty=Tensor[(6, 9, 3), int32] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="int32") /* ty=Tensor[(6, 9, 3), int32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %599 = cast(%594, dtype="uint16") /* ty=Tensor[(6, 9, 3), uint16] */;
  %600 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(6, 9, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 9, 3), float64] */, dtype="uint16") /* ty=Tensor[(6, 9, 3), uint16] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %603 = cast(%var_2379, dtype="int64") /* ty=Tensor[(240), int64] */;
  %604 = reshape(%603, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
  %605 = @func_1931(%604) /* ty=(Tensor[(6, 8, 5), int64],) */;
  %606 = cast(meta[relay.Constant][43] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %607 = cast(meta[relay.Constant][43] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %608 = cast(%var_2384, dtype="float32") /* ty=Tensor[(8, 100), float32] */;
  %609 = cast(meta[relay.Constant][44] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %610 = reshape(%606, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %611 = reshape(%607, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %612 = reshape(%608, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
  %613 = reshape(%609, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %614 = @func_1641(%610, %611, %612, %613) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
  %615 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 100), float32] */, dtype="bool") /* ty=Tensor[(8, 100), bool] */;
  %616 = shape_of(%var_2384, dtype="int32") /* ty=Tensor[(2), int32] */;
  %617 = cast(%var_2384, dtype="bool") /* ty=Tensor[(8, 100), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %619 = minimum(%597, %598) /* ty=Tensor[(6, 9, 3), int32] */;
  %620 = bitwise_and(%601, %602) /* ty=Tensor[(6, 9, 3), uint16] */;
  %621 = %605.0;
  %622 = %614.3;
  %623 = less(%617, %618) /* ty=Tensor[(8, 100), bool] */;
  (%619, %620, %621, %var_2379, %622, meta[relay.Constant][43] /* ty=Tensor[(130), float64] */, meta[relay.Constant][44] /* ty=Tensor[(21), float32] */, %623)
}

def @func_2564() -> (Tensor[(6, 9, 3), float64],) {
  %624 = @func_2281() /* ty=Tensor[(6, 9, 3), float64] */;
  (%624,)
}

def @func_2720(%var_2692: Tensor[(13, 14, 7), float64], %var_2717: Tensor[(24, 10), int64]) -> (Tensor[(13, 14, 7), bool], Tensor[(6, 8, 5), int64], Tensor[(24, 10), int64]) {
  %625 = cast(%var_2692, dtype="float64") /* ty=Tensor[(13, 14, 7), float64] */;
  %626 = cosh(%625) /* ty=Tensor[(13, 14, 7), float64] */;
  %627 = cast(%626, dtype="bool") /* ty=Tensor[(13, 14, 7), bool] */;
  %628 = shape_of(%var_2692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_2692, dtype="bool") /* ty=Tensor[(13, 14, 7), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = cast(%var_2717, dtype="int64") /* ty=Tensor[(24, 10), int64] */;
  %632 = reshape(%631, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
  %633 = @func_1931(%632) /* ty=(Tensor[(6, 8, 5), int64],) */;
  %634 = logical_and(%629, %630) /* ty=Tensor[(13, 14, 7), bool] */;
  %635 = %633.0;
  (%634, %635, %var_2717)
}

def @func_3406(%var_3371: Tensor[(8, 14, 1), float32], %var_3383: Tensor[(26, 5), float64], %var_3384: Tensor[(800), float32]) -> (Tensor[(8, 14, ?), int64], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(8, 14, ?), float64]) {
  %636 = cast(%var_3371, dtype="float32") /* ty=Tensor[(8, 14, 1), float32] */;
  %637 = sqrt(%636) /* ty=Tensor[(8, 14, 1), float32] */;
  %638 = cast(%var_3371, dtype="int64") /* ty=Tensor[(8, 14, 1), int64] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="int64") /* ty=Tensor[(8, 14, 1), int64] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %642 = cast(%var_3383, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %643 = cast(%var_3384, dtype="float32") /* ty=Tensor[(800), float32] */;
  %644 = cast(meta[relay.Constant][46] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %645 = reshape(%642, newshape=[13, 10]) /* ty=Tensor[(13, 10), float64] */;
  %646 = reshape(%643, newshape=[200, 4]) /* ty=Tensor[(200, 4), float32] */;
  %647 = reshape(%644, newshape=[1, 21]) /* ty=Tensor[(1, 21), float32] */;
  %648 = @func_2322(%645, %646, %647) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(200, 4), float32], Tensor[(1, 21), float32]) */;
  %649 = cast(%var_3371, dtype="float64") /* ty=Tensor[(8, 14, 1), float64] */;
  %650 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%637, dtype="float64") /* ty=Tensor[(8, 14, 1), float64] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %653 = mod(%651, %652) /* ty=Tensor[(8, 14, ?), float64] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(8, 14, ?), float64] */;
  %655 = multiply(%640, %641) /* ty=Tensor[(8, 14, ?), int64] */;
  %656 = %648.0;
  %657 = atanh(%654) /* ty=Tensor[(8, 14, ?), float64] */;
  (%655, %656, %var_3383, %var_3384, meta[relay.Constant][46] /* ty=Tensor[(21), float32] */, %657)
}

def @func_6896() -> Tensor[(6, 9, 3), float32] {
  %658 = @func_6099() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %658.0
}

def @func_7280() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) {
  %659 = @func_4861() /* ty=Tensor[(6, 9, 3), bool] */;
  %660 = @func_6896() /* ty=Tensor[(6, 9, 3), float32] */;
  (%659, %660)
}

def @func_4846() -> Tensor[(6, 9, 3), float64] {
  %661 = @func_3244() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %661.0
}

def @func_7896() -> (Tensor[(6, 9, 3), bool],) {
  %662 = @func_5219() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %663 = %662.0;
  (%663,)
}

def @func_6868(%var_6822: Tensor[(9, 2, 7), float64]) -> (Tensor[(6, 9, 3), float32], Tensor[(135), float32], Tensor[(9, 2, 7), bool]) {
  %664 = cast(meta[relay.Constant][47] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %665 = reshape(%664, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %666 = @func_5298(%665) /* ty=(Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
  %667 = cast(%var_6822, dtype="float64") /* ty=Tensor[(9, 2, 7), float64] */;
  %668 = acos(%667) /* ty=Tensor[(9, 2, 7), float64] */;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(9, 2, 7), float32] */;
  %670 = rsqrt(%669) /* ty=Tensor[(9, 2, 7), float32] */;
  %671 = cast(meta[relay.Constant][48] /* ty=Tensor[(9, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 7), bool] */;
  %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%670, dtype="bool") /* ty=Tensor[(9, 2, 7), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %675 = %666.0;
  %676 = equal(%673, %674) /* ty=Tensor[(9, 2, 7), bool] */;
  (%675, meta[relay.Constant][47] /* ty=Tensor[(135), float32] */, %676)
}

def @func_2171() -> Tensor[(6, 9, 3), float64] {
  %677 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %678 = %677.0;
  %679 = cast(%678, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  acosh(%679) /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_5055() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %680 = @func_4907() /* ty=Tensor[(6, 9, 3), float64] */;
  %681 = cast(%680, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %682 = @func_3287() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) */;
  %683 = erf(%681) /* ty=Tensor[(6, 9, 3), float64] */;
  %684 = %682.0;
  (%683, %684)
}

def @func_3314(%var_3308: Tensor[(240), int64], %var_3311: Tensor[(1620), uint8]) -> (Tensor[(6, 9, 3), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(12, 15, 9), float32], Tensor[(1620), uint8]) {
  %685 = @func_3210() /* ty=Tensor[(6, 9, 3), float32] */;
  %686 = cast(%685, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %687 = cast(%var_3308, dtype="int64") /* ty=Tensor[(240), int64] */;
  %688 = reshape(%687, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
  %689 = @func_1931(%688) /* ty=(Tensor[(6, 8, 5), int64],) */;
  %690 = cast(%var_3311, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
  %691 = reshape(%690, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %692 = @func_2627(%691) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) */;
  %693 = atan(%686) /* ty=Tensor[(6, 9, 3), float64] */;
  %694 = %689.0;
  %695 = %692.0;
  (%693, %694, %var_3308, %695, %var_3311)
}

def @func_7194() -> (Tensor[(6, 9, 3), bool], Tensor[(9, 11, 8), bool], Tensor[(792, 11), uint16]) {
  %696 = @func_5801() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %697 = cast(meta[relay.Constant][49] /* ty=Tensor[(792, 1), bool] */, dtype="bool") /* ty=Tensor[(792, 1), bool] */;
  %698 = cast(meta[relay.Constant][49] /* ty=Tensor[(792, 1), bool] */, dtype="bool") /* ty=Tensor[(792, 1), bool] */;
  %699 = reshape(%697, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %700 = reshape(%698, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %701 = @func_6118(%699, %700) /* ty=(Tensor[(9, 11, 8), bool],) */;
  %702 = cast(meta[relay.Constant][49] /* ty=Tensor[(792, 1), bool] */, dtype="uint16") /* ty=Tensor[(792, 1), uint16] */;
  %703 = cast(meta[relay.Constant][50] /* ty=Tensor[(792, 11), bool] */, dtype="uint16") /* ty=Tensor[(792, 11), uint16] */;
  %704 = %696.0;
  %705 = %701.0;
  %706 = bitwise_xor(%702, %703) /* ty=Tensor[(792, 11), uint16] */;
  (%704, %705, %706)
}

def @func_3255() -> (Tensor[(6, 9, 3), float32],) {
  %707 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %708 = %707.0;
  %709 = cast(%708, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %710 = tan(%709) /* ty=Tensor[(6, 9, 3), float32] */;
  (%710,)
}

def @func_2242(%var_2206: Tensor[(1890), float64], %var_2235: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), float64], Tensor[(1890), float32], Tensor[(6, 9, 3), float64]) {
  %711 = cast(%var_2206, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %712 = reshape(%711, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %713 = @func_2075(%712) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) */;
  %714 = cast(%var_2206, dtype="float32") /* ty=Tensor[(1890), float32] */;
  %715 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
  %716 = %715.0;
  %717 = cast(%var_2235, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %721 = %713.0;
  %722 = atan(%714) /* ty=Tensor[(1890), float32] */;
  %723 = maximum(%719, %720) /* ty=Tensor[(6, 9, 3), float64] */;
  (%721, %722, %723)
}

def @func_5785() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %724 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %725 = @func_4846() /* ty=Tensor[(6, 9, 3), float64] */;
  %726 = %724.0;
  (%725, %726)
}

def @func_4485() -> (Tensor[(6, 9, 3), bool],) {
  %727 = @func_3752() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), bool]) */;
  %728 = %727.1;
  (%728,)
}

def @func_6755() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), bool]) {
  %729 = @func_2564() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %730 = %729.0;
  %731 = @func_3255() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %734 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%730, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %737 = @func_4464() /* ty=Tensor[(6, 9, 3), bool] */;
  %738 = greater(%735, %736) /* ty=Tensor[(6, 9, 3), bool] */;
  (%737, %738)
}

def @func_7837() -> (Tensor[(6, 9, 3), float32],) {
  %739 = @func_7523() /* ty=(Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64]) */;
  %740 = %739.0;
  (%740,)
}

def @func_7865() -> (Tensor[(6, 9, 3), bool],) {
  %741 = @func_4485() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %742 = %741.0;
  (%742,)
}

def @func_5587() -> (Tensor[(6, 9, 3), bool],) {
  %743 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
  (%743,)
}

def @func_8422(%var_8411: Tensor[(1008), int64]) -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), bool], Tensor[(9, 16, 7), bool], Tensor[(112), int64], Tensor[(1008), int64]) {
  %744 = @func_7865() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %745 = @func_4151() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %746 = cast(meta[relay.Constant][51] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
  %747 = cast(%var_8411, dtype="int64") /* ty=Tensor[(1008), int64] */;
  %748 = reshape(%746, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), int64] */;
  %749 = reshape(%747, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), int64] */;
  %750 = %744.0;
  %751 = %745.0;
  %752 = @func_4952(%748, %749) /* ty=Tensor[(9, 16, 7), bool] */;
  (%750, %751, %752, meta[relay.Constant][51] /* ty=Tensor[(112), int64] */, %var_8411)
}

def @func_2089() -> (Tensor[(6, 9, 3), float64],) {
  %753 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %754 = %753.0;
  (%754,)
}

def @func_8453(%var_8437: Tensor[(11, 13, 15), float64], %var_8438: Tensor[(11, 13, 15), float64]) -> (Tensor[(11, 13, 15), float64], Tensor[(1890), int8]) {
  %755 = cast(%var_8438, dtype="float64") /* ty=Tensor[(11, 13, 15), float64] */;
  %756 = shape_of(%var_8437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%var_8437, dtype="float64") /* ty=Tensor[(11, 13, 15), float64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %759 = @func_3501() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(1890), int8]) */;
  %760 = divide(%757, %758) /* ty=Tensor[(11, 13, 15), float64] */;
  %761 = %759.3;
  (%760, %761)
}

def @func_7732() -> (Tensor[(6, 9, 3), float32],) {
  %762 = @func_7280() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) */;
  %763 = %762.1;
  (%763,)
}

def @func_3997(%var_3913: Tensor[(6, 9, 3), float32], %var_3934: Tensor[(24, 80), bool]) -> (Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8], Tensor[(24, 80), bool], Tensor[(6, 9, 3), float32], Tensor[(15, 9), float32], Tensor[(6, 8, 5), int64], Tensor[(24, 10), int64], Tensor[(1620), uint8], Tensor[(9, 14, 14), float32], Tensor[(1764), float32], Tensor[(6, 9, 3), bool]) {
  %764 = @func_3255() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %765 = %764.0;
  %766 = cast(%var_3913, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %770 = cast(meta[relay.Constant][52] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %771 = reshape(%770, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %772 = @func_560(%771) /* ty=(Tensor[(15, 3, 3), float32],) */;
  %773 = cast(%var_3934, dtype="bool") /* ty=Tensor[(24, 80), bool] */;
  %774 = cast(%var_3934, dtype="bool") /* ty=Tensor[(24, 80), bool] */;
  %775 = reshape(%773, newshape=[8, 16, 15]) /* ty=Tensor[(8, 16, 15), bool] */;
  %776 = reshape(%774, newshape=[8, 16, 15]) /* ty=Tensor[(8, 16, 15), bool] */;
  %777 = @func_1770(%775, %776) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8]) */;
  %778 = cast(meta[relay.Constant][52] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %779 = mod(%768, %769) /* ty=Tensor[(6, 9, 3), float32] */;
  %780 = cast(%779, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %781 = reshape(%778, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
  %782 = reshape(%780, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %783 = @func_3671(%781, %782) /* ty=(Tensor[(15, 9), float32], Tensor[(15, 3, 3), bool], Tensor[(6, 9, 3), float32]) */;
  %784 = cast(meta[relay.Constant][53] /* ty=Tensor[(24, 10), int64] */, dtype="int64") /* ty=Tensor[(24, 10), int64] */;
  %785 = cast(meta[relay.Constant][54] /* ty=Tensor[(1620), uint8] */, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
  %786 = reshape(%784, newshape=[240]) /* ty=Tensor[(240), int64] */;
  %787 = reshape(%785, newshape=[1620]) /* ty=Tensor[(1620), uint8] */;
  %788 = @func_3314(%786, %787) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(12, 15, 9), float32], Tensor[(1620), uint8]) */;
  %789 = cast(meta[relay.Constant][55] /* ty=Tensor[(1764), float32] */, dtype="float32") /* ty=Tensor[(1764), float32] */;
  %790 = reshape(%789, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), float32] */;
  %791 = @func_2655(%790) /* ty=(Tensor[(9, 14, 14), float32],) */;
  %792 = cast(%var_3913, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %793 = reshape(%792, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %794 = @func_2883(%793) /* ty=(Tensor[(6, 9, 3), bool],) */;
  %795 = %772.0;
  %796 = %777.2;
  %797 = @func_2645() /* ty=Tensor[(6, 9, 3), float32] */;
  %798 = %783.0;
  %799 = %788.1;
  %800 = %791.0;
  %801 = %794.0;
  (%779, %795, meta[relay.Constant][52] /* ty=Tensor[(135), float32] */, %796, %var_3934, %797, %798, %799, meta[relay.Constant][53] /* ty=Tensor[(24, 10), int64] */, meta[relay.Constant][54] /* ty=Tensor[(1620), uint8] */, %800, meta[relay.Constant][55] /* ty=Tensor[(1764), float32] */, %801)
}

def @func_5121(%var_5094: Tensor[(112), float32], %var_5095: Tensor[(1, 130), float64], %var_5110: Tensor[(144), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(8, 14, ?), int64], Tensor[(112), float32], Tensor[(800), float32], Tensor[(1, 130), float32], Tensor[(6, 9, 3), float64], Tensor[(98, 4), bool], Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), bool]) {
  %802 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %803 = cast(%var_5094, dtype="float32") /* ty=Tensor[(112), float32] */;
  %804 = cast(%var_5095, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %805 = cast(meta[relay.Constant][56] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %806 = reshape(%803, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), float32] */;
  %807 = reshape(%804, newshape=[26, 5]) /* ty=Tensor[(26, 5), float64] */;
  %808 = reshape(%805, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %809 = @func_3406(%806, %807, %808) /* ty=(Tensor[(8, 14, ?), int64], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(8, 14, ?), float64]) */;
  %810 = cast(%var_5095, dtype="float32") /* ty=Tensor[(1, 130), float32] */;
  %811 = cast(meta[relay.Constant][57] /* ty=Tensor[(98, 4), bool] */, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
  %812 = cast(meta[relay.Constant][56] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %813 = %802.0;
  %814 = cast(%813, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %815 = reshape(%811, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), bool] */;
  %816 = reshape(%812, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %817 = reshape(%814, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), bool] */;
  %818 = @func_3576(%815, %816, %817) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(800), float32], Tensor[(21), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 270), uint8], Tensor[(6, 9, 3), float32]) */;
  %819 = cast(%var_5110, dtype="float32") /* ty=Tensor[(144), float32] */;
  %820 = reshape(%819, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), float32] */;
  %821 = %809.0;
  %822 = atanh(%810) /* ty=Tensor[(1, 130), float32] */;
  %823 = %818.5;
  %824 = @func_122(%820) /* ty=Tensor[(4, 6, 6), bool] */;
  %825 = @func_4464() /* ty=Tensor[(6, 9, 3), bool] */;
  (%813, %821, %var_5094, meta[relay.Constant][56] /* ty=Tensor[(800), float32] */, %822, %823, meta[relay.Constant][57] /* ty=Tensor[(98, 4), bool] */, %824, %var_5110, %825)
}

def @func_2281() -> Tensor[(6, 9, 3), float64] {
  @func_2171() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_4933() -> (Tensor[(6, 9, 3), float32],) {
  %826 = @func_4331() /* ty=Tensor[(6, 9, 3), float64] */;
  %827 = cast(%826, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %828 = rsqrt(%827) /* ty=Tensor[(6, 9, 3), float32] */;
  (%828,)
}

def @func_2075(%var_2054: Tensor[(1890), float64]) -> (Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) {
  %829 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %830 = cast(%var_2054, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %831 = reshape(%830, newshape=[15, 14, 9]) /* ty=Tensor[(15, 14, 9), float64] */;
  %832 = @func_1904(%831) /* ty=(Tensor[(15, 14, 9), float64],) */;
  %833 = %832.0;
  %834 = cast(%833, dtype="float64") /* ty=Tensor[(15, 14, 9), float64] */;
  %835 = reshape(%834, newshape=[15, 14, 9]) /* ty=Tensor[(15, 14, 9), float64] */;
  %836 = @func_1904(%835) /* ty=(Tensor[(15, 14, 9), float64],) */;
  %837 = %829.0;
  %838 = %836.0;
  (%837, %833, %var_2054, %838)
}

def @func_4707() -> Tensor[(6, 9, 3), float64] {
  %839 = @func_2564() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %839.0
}

def @func_5298(%var_5289: Tensor[(135), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) {
  %840 = cast(%var_5289, dtype="float32") /* ty=Tensor[(135), float32] */;
  %841 = reshape(%840, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %842 = @func_560(%841) /* ty=(Tensor[(15, 3, 3), float32],) */;
  %843 = @func_3210() /* ty=Tensor[(6, 9, 3), float32] */;
  %844 = %842.0;
  (%843, %844, %var_5289)
}

def @func_5733() -> Tensor[(6, 9, 3), float32] {
  @func_3210() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_2792(%var_2774: Tensor[(16, 14, 13), int32]) -> Tensor[(16, 14, 13), float32] {
  %845 = cast(meta[relay.Constant][58] /* ty=Tensor[(16, 1, 13), int32] */, dtype="int32") /* ty=Tensor[(16, 1, 13), int32] */;
  %846 = cast(%var_2774, dtype="int32") /* ty=Tensor[(16, 14, 13), int32] */;
  %847 = multiply(%845, %846) /* ty=Tensor[(16, 14, 13), int32] */;
  %848 = cast(%847, dtype="float32") /* ty=Tensor[(16, 14, 13), float32] */;
  erf(%848) /* ty=Tensor[(16, 14, 13), float32] */
}

def @func_5219() -> (Tensor[(6, 9, 3), bool],) {
  %849 = @func_4861() /* ty=Tensor[(6, 9, 3), bool] */;
  (%849,)
}

def @func_1986() -> (Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) {
  %850 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 3), float64] */;
  %851 = cast(meta[relay.Constant][60] /* ty=Tensor[(6, 9, 3), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %852 = cast(meta[relay.Constant][61] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %853 = reshape(%852, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %854 = @func_870(%853) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
  %855 = floor_divide(%850, %851) /* ty=Tensor[(6, 9, 3), float64] */;
  %856 = %854.2;
  (%855, %856, meta[relay.Constant][61] /* ty=Tensor[(288), float32] */)
}

def @func_7327(%var_7312: Tensor[(24, 2), float32], %var_7313: Tensor[(312), int64]) -> (Tensor[(6, 9, 3), float64], Tensor[(4, 6, 2), uint16], Tensor[(24, 2), float32], Tensor[(312), int64], Tensor[(21, 1), float32]) {
  %857 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %858 = cast(%var_7312, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %859 = %857.0;
  %860 = cast(%859, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %861 = cast(%var_7313, dtype="int64") /* ty=Tensor[(312), int64] */;
  %862 = cast(meta[relay.Constant][62] /* ty=Tensor[(21, 1), float32] */, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
  %863 = reshape(%858, newshape=[4, 6, 2]) /* ty=Tensor[(4, 6, 2), float32] */;
  %864 = reshape(%860, newshape=[162]) /* ty=Tensor[(162), bool] */;
  %865 = reshape(%861, newshape=[78, 4]) /* ty=Tensor[(78, 4), int64] */;
  %866 = reshape(%862, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %867 = @func_5491(%863, %864, %865, %866) /* ty=(Tensor[(4, 6, 2), uint16], Tensor[(780), bool], Tensor[(1408), bool], Tensor[(392), bool], Tensor[(800), float32], Tensor[(162), bool], Tensor[(6, 13, 4), int64], Tensor[(78, 4), int64], Tensor[(135), float32], Tensor[(21), float32]) */;
  %868 = %867.0;
  (%859, %868, %var_7312, %var_7313, meta[relay.Constant][62] /* ty=Tensor[(21, 1), float32] */)
}

def @func_4952(%var_4942: Tensor[(1, 16, 7), int64], %var_4943: Tensor[(9, 16, 7), int64]) -> Tensor[(9, 16, 7), bool] {
  %869 = cast(%var_4942, dtype="bool") /* ty=Tensor[(1, 16, 7), bool] */;
  %870 = cast(%var_4943, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
  greater_equal(%869, %870) /* ty=Tensor[(9, 16, 7), bool] */
}

def @func_5491(%var_5408: Tensor[(4, 6, 2), float32], %var_5437: Tensor[(162), bool], %var_5453: Tensor[(78, 4), int64], %var_5476: Tensor[(21), float32]) -> (Tensor[(4, 6, 2), uint16], Tensor[(780), bool], Tensor[(1408), bool], Tensor[(392), bool], Tensor[(800), float32], Tensor[(162), bool], Tensor[(6, 13, 4), int64], Tensor[(78, 4), int64], Tensor[(135), float32], Tensor[(21), float32]) {
  %871 = cast(%var_5408, dtype="float32") /* ty=Tensor[(4, 6, 2), float32] */;
  %872 = log10(%871) /* ty=Tensor[(4, 6, 2), float32] */;
  %873 = cast(%var_5408, dtype="uint16") /* ty=Tensor[(4, 6, 2), uint16] */;
  %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%872, dtype="uint16") /* ty=Tensor[(4, 6, 2), uint16] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %877 = cast(meta[relay.Constant][63] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %878 = cast(meta[relay.Constant][63] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %879 = cast(meta[relay.Constant][64] /* ty=Tensor[(392), bool] */, dtype="bool") /* ty=Tensor[(392), bool] */;
  %880 = cast(meta[relay.Constant][65] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %881 = cast(%var_5437, dtype="bool") /* ty=Tensor[(162), bool] */;
  %882 = reshape(%877, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), bool] */;
  %883 = reshape(%878, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), bool] */;
  %884 = reshape(%879, newshape=[392]) /* ty=Tensor[(392), bool] */;
  %885 = reshape(%880, newshape=[8, 100]) /* ty=Tensor[(8, 100), float32] */;
  %886 = reshape(%881, newshape=[162]) /* ty=Tensor[(162), bool] */;
  %887 = @func_5369(%882, %883, %884, %885, %886) /* ty=(Tensor[(8, 16, 11), bool], Tensor[(6, 9, 3), float64], Tensor[(392), bool], Tensor[(8, 100), float32], Tensor[(162), bool], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) */;
  %888 = cast(%var_5453, dtype="int64") /* ty=Tensor[(78, 4), int64] */;
  %889 = cast(%var_5453, dtype="int64") /* ty=Tensor[(78, 4), int64] */;
  %890 = reshape(%888, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), int64] */;
  %891 = reshape(%889, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), int64] */;
  %892 = @func_1529(%890, %891) /* ty=(Tensor[(6, 13, 4), int64],) */;
  %893 = cast(meta[relay.Constant][65] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %894 = cast(%var_5476, dtype="float32") /* ty=Tensor[(21), float32] */;
  %895 = reshape(%893, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), float32] */;
  %896 = reshape(%894, newshape=[21, 1]) /* ty=Tensor[(21, 1), float32] */;
  %897 = @func_1326(%895, %896) /* ty=(Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) */;
  %898 = bitwise_or(%875, %876) /* ty=Tensor[(4, 6, 2), uint16] */;
  %899 = %887.6;
  %900 = %892.0;
  %901 = %897.1;
  (%898, %899, meta[relay.Constant][63] /* ty=Tensor[(1408), bool] */, meta[relay.Constant][64] /* ty=Tensor[(392), bool] */, meta[relay.Constant][65] /* ty=Tensor[(800), float32] */, %var_5437, %900, %var_5453, %901, %var_5476)
}

def @func_3004() -> Tensor[(6, 9, 3), bool] {
  %902 = @func_2645() /* ty=Tensor[(6, 9, 3), float32] */;
  %903 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %904 = %903.1;
  %905 = cast(%904, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %906 = shape_of(%902, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%902, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%907, %908) /* ty=Tensor[(6, 9, 3), bool] */
}

def @func_1904(%var_1901: Tensor[(15, 14, 9), float64]) -> (Tensor[(15, 14, 9), float64],) {
  %909 = cast(%var_1901, dtype="float64") /* ty=Tensor[(15, 14, 9), float64] */;
  %910 = atanh(%909) /* ty=Tensor[(15, 14, 9), float64] */;
  (%910,)
}

def @func_7347() -> Tensor[(6, 9, 3), float32] {
  %911 = @func_6099() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %911.0
}

def @func_3287() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) {
  %912 = @func_3244() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %913 = @func_3255() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %914 = %912.0;
  %915 = %913.0;
  (%914, %915)
}

def @func_2883(%var_2855: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), bool],) {
  %916 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %917 = %916.0;
  %918 = cast(%var_2855, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %919 = shape_of(%917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %920 = cast(%917, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %922 = equal(%920, %921) /* ty=Tensor[(6, 9, 3), bool] */;
  (%922,)
}

def @func_3426(%var_3413: Tensor[(13, 10, 6), bool], %var_3414: Tensor[(13, 10, 6), bool]) -> Tensor[(13, 10, 6), bool] {
  %923 = cast(%var_3414, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
  %924 = shape_of(%var_3413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %925 = cast(%var_3413, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
  %926 = dyn.reshape(%923, %924, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%925, %926) /* ty=Tensor[(13, 10, 6), bool] */
}

def @func_6711(%var_6684: Tensor[(2912), int32], %var_6709: Tensor[(792), bool]) -> (Tensor[(6, 9, 3), bool], Tensor[(16, 14, 13), float64], Tensor[(9, 11, 8), bool], Tensor[(792), bool]) {
  %927 = @func_6521() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %928 = cast(%var_6684, dtype="int32") /* ty=Tensor[(2912), int32] */;
  %929 = reshape(%928, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), int32] */;
  %930 = @func_2792(%929) /* ty=Tensor[(16, 14, 13), float32] */;
  %931 = cast(%var_6684, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%930, dtype="float64") /* ty=Tensor[(16, 14, 13), float64] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %935 = cast(%var_6709, dtype="bool") /* ty=Tensor[(792), bool] */;
  %936 = cast(%var_6709, dtype="bool") /* ty=Tensor[(792), bool] */;
  %937 = reshape(%935, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %938 = reshape(%936, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %939 = @func_6118(%937, %938) /* ty=(Tensor[(9, 11, 8), bool],) */;
  %940 = %927.0;
  %941 = floor_mod(%933, %934) /* ty=Tensor[(16, 14, 13), float64] */;
  %942 = %939.0;
  (%940, %941, %942, %var_6709)
}

def @func_4099(%var_4088: Tensor[(240), int64], %var_4089: Tensor[(800), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(21), float32], Tensor[(240), int64], Tensor[(800), float32]) {
  %943 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
  %944 = %943.0;
  %945 = cast(%944, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %946 = cast(%var_4088, dtype="int64") /* ty=Tensor[(240), int64] */;
  %947 = cast(%var_4089, dtype="float32") /* ty=Tensor[(800), float32] */;
  %948 = reshape(%946, newshape=[240]) /* ty=Tensor[(240), int64] */;
  %949 = reshape(%947, newshape=[8, 100]) /* ty=Tensor[(8, 100), float32] */;
  %950 = @func_2426(%948, %949) /* ty=(Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) */;
  %951 = cos(%945) /* ty=Tensor[(6, 9, 3), float32] */;
  %952 = %950.4;
  (%951, %952, %var_4088, %var_4089)
}

def @func_5841() -> (Tensor[(6, 9, 3), float32],) {
  %953 = @func_3255() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %954 = %953.0;
  (%954,)
}

def @func_4297(%var_4259: Tensor[(288), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(15, 3, 3), float32], Tensor[(21), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) {
  %955 = cast(meta[relay.Constant][66] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %956 = cast(%var_4259, dtype="float32") /* ty=Tensor[(288), float32] */;
  %957 = reshape(%955, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
  %958 = reshape(%956, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
  %959 = @func_1213(%957, %958) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) */;
  %960 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %961 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %962 = %961.0;
  %963 = cast(%962, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  %964 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
  %965 = %959.2;
  %966 = %960.0;
  %967 = atanh(%963) /* ty=Tensor[(6, 9, 3), float32] */;
  (%964, %965, meta[relay.Constant][66] /* ty=Tensor[(21), float32] */, %var_4259, %966, %967)
}

def @func_4907() -> Tensor[(6, 9, 3), float64] {
  %968 = @func_2564() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %968.0
}

def @func_2645() -> Tensor[(6, 9, 3), float32] {
  %969 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %970 = %969.0;
  %971 = cast(%970, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  sin(%971) /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_7003(%var_6949: bool, %var_6950: Tensor[(2, 14, 8), bool], %var_6981: Tensor[(1, 130), float64]) -> (Tensor[(2, 14, 8), float32], Tensor[(12, 15, 9), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(270, 6), float32], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float32]) {
  %972 = cast(%var_6949, dtype="bool") /* ty=bool */;
  %973 = cast(%var_6950, dtype="bool") /* ty=Tensor[(2, 14, 8), bool] */;
  %974 = logical_and(%972, %973) /* ty=Tensor[(2, 14, 8), bool] */;
  %975 = cast(%974, dtype="float32") /* ty=Tensor[(2, 14, 8), float32] */;
  %976 = cast(meta[relay.Constant][67] /* ty=Tensor[(270, 6), uint8] */, dtype="uint8") /* ty=Tensor[(270, 6), uint8] */;
  %977 = reshape(%976, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %978 = @func_2627(%977) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) */;
  %979 = cast(meta[relay.Constant][67] /* ty=Tensor[(270, 6), uint8] */, dtype="float32") /* ty=Tensor[(270, 6), float32] */;
  %980 = cast(meta[relay.Constant][67] /* ty=Tensor[(270, 6), uint8] */, dtype="uint8") /* ty=Tensor[(270, 6), uint8] */;
  %981 = reshape(%980, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %982 = @func_2627(%981) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) */;
  %983 = cast(%var_6981, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %984 = cast(meta[relay.Constant][68] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %985 = reshape(%983, newshape=[26, 5]) /* ty=Tensor[(26, 5), float64] */;
  %986 = reshape(%984, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %987 = @func_4447(%985, %986) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(13, ?, 10), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32]) */;
  %988 = %987.2;
  %989 = cast(%988, dtype="float32") /* ty=Tensor[(26, 5), float32] */;
  %990 = acosh(%975) /* ty=Tensor[(2, 14, 8), float32] */;
  %991 = %978.0;
  %992 = erf(%979) /* ty=Tensor[(270, 6), float32] */;
  %993 = %982.1;
  %994 = asinh(%989) /* ty=Tensor[(26, 5), float32] */;
  (%990, %991, %var_6981, meta[relay.Constant][68] /* ty=Tensor[(800), float32] */, %992, %993, %994)
}

def @func_3681(%var_3676: Tensor[(8, 1, 13), float32]) -> (Tensor[(8, 1, 13), float32],) {
  %995 = cast(%var_3676, dtype="float32") /* ty=Tensor[(8, 1, 13), float32] */;
  %996 = exp(%995) /* ty=Tensor[(8, 1, 13), float32] */;
  (%996,)
}

def @func_5136() -> Tensor[(6, 9, 3), float64] {
  %997 = @func_3244() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %997.0
}

def @func_6919() -> (Tensor[(6, 9, 3), float32],) {
  %998 = @func_6099() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %999 = %998.0;
  (%999,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3288() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) {
  %4 = fn () -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) {
    %0 = @func_3244() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %1 = @func_3255() /* ty=(Tensor[(6, 9, 3), float32],) */;
    %2 = %0.0;
    %3 = %1.0;
    (%2, %3)
  };
  %4() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) */
}

def @func_2426(%var_2379: Tensor[(240), int64], %var_2384: Tensor[(8, 100), float32]) -> (Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) {
  %5 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %6 = %5.0;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 9, 3), float64] */, dtype="int32") /* ty=Tensor[(6, 9, 3), int32] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="int32") /* ty=Tensor[(6, 9, 3), int32] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %11 = cast(%6, dtype="uint16") /* ty=Tensor[(6, 9, 3), uint16] */;
  %12 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(6, 9, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 9, 3), float64] */, dtype="uint16") /* ty=Tensor[(6, 9, 3), uint16] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %15 = cast(%var_2379, dtype="int64") /* ty=Tensor[(240), int64] */;
  %16 = reshape(%15, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
  %17 = @func_1931(%16) /* ty=(Tensor[(6, 8, 5), int64],) */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
  %20 = cast(%var_2384, dtype="float32") /* ty=Tensor[(8, 100), float32] */;
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %22 = reshape(%18, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %23 = reshape(%19, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %24 = reshape(%20, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
  %25 = reshape(%21, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %26 = @func_1641(%22, %23, %24, %25) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 100), float32] */, dtype="bool") /* ty=Tensor[(8, 100), bool] */;
  %28 = shape_of(%var_2384, dtype="int32") /* ty=Tensor[(2), int32] */;
  %29 = cast(%var_2384, dtype="bool") /* ty=Tensor[(8, 100), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %31 = minimum(%9, %10) /* ty=Tensor[(6, 9, 3), int32] */;
  %32 = bitwise_and(%13, %14) /* ty=Tensor[(6, 9, 3), uint16] */;
  %33 = %17.0;
  %34 = %26.3;
  %35 = less(%29, %30) /* ty=Tensor[(8, 100), bool] */;
  (%31, %32, %33, %var_2379, %34, meta[relay.Constant][1] /* ty=Tensor[(130), float64] */, meta[relay.Constant][2] /* ty=Tensor[(21), float32] */, %35)
}

def @func_5266(%var_5264: Tensor[(6, 9, 3), bool], %var_5265: Tensor[(462), float32]) -> (Tensor[(6, 9, 3), uint8], Tensor[(462), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(462), float32]) {
  %50 = fn (%var_5236: Tensor[(6, 9, 3), bool], %var_5261: Tensor[(462), float32]) -> (Tensor[(6, 9, 3), uint8], Tensor[(462), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(462), float32]) {
    %36 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
    %37 = cast(%var_5236, dtype="uint8") /* ty=Tensor[(6, 9, 3), uint8] */;
    %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
    %39 = cast(%36, dtype="uint8") /* ty=Tensor[(6, 9, 3), uint8] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
    %42 = cast(meta[relay.Constant][5] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
    %43 = cast(%var_5261, dtype="float32") /* ty=Tensor[(462), float32] */;
    %44 = reshape(%41, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
    %45 = reshape(%42, newshape=[21]) /* ty=Tensor[(21), float32] */;
    %46 = reshape(%43, newshape=[462]) /* ty=Tensor[(462), float32] */;
    %47 = @func_3801(%44, %45, %46) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32]) */;
    %48 = bitwise_or(%39, %40) /* ty=Tensor[(6, 9, 3), uint8] */;
    %49 = %47.6;
    (%48, %49, meta[relay.Constant][4] /* ty=Tensor[(130), float64] */, meta[relay.Constant][5] /* ty=Tensor[(21), float32] */, %var_5261)
  };
  %50(%var_5264, %var_5265) /* ty=(Tensor[(6, 9, 3), uint8], Tensor[(462), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(462), float32]) */
}

def @func_4139() -> Tensor[(6, 9, 3), float32] {
  %51 = @func_3287() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) */;
  %51.1
}

def @func_5126(%var_5123: Tensor[(112), float32], %var_5124: Tensor[(1, 130), float64], %var_5125: Tensor[(144), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(8, 14, ?), int64], Tensor[(112), float32], Tensor[(800), float32], Tensor[(1, 130), float32], Tensor[(6, 9, 3), float64], Tensor[(98, 4), bool], Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), bool]) {
  @func_5121(%var_5123, %var_5124, %var_5125) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(8, 14, ?), int64], Tensor[(112), float32], Tensor[(800), float32], Tensor[(1, 130), float32], Tensor[(6, 9, 3), float64], Tensor[(98, 4), bool], Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), bool]) */
}

def @func_1329(%var_1327: Tensor[(5, 10, 16), float32], %var_1328: Tensor[(21, 1), float32]) -> (Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) {
  %64 = fn (%var_1276: Tensor[(5, 10, 16), float32], %var_1316: Tensor[(21, 1), float32]) -> (Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) {
    %52 = cast(%var_1276, dtype="float32") /* ty=Tensor[(5, 10, 16), float32] */;
    %53 = cast(meta[relay.Constant][6] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %54 = reshape(%53, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
    %55 = @func_870(%54) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
    %56 = cast(%var_1316, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
    %57 = cast(meta[relay.Constant][6] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %58 = reshape(%56, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
    %59 = reshape(%57, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
    %60 = @func_1213(%58, %59) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) */;
    %61 = atan(%52) /* ty=Tensor[(5, 10, 16), float32] */;
    %62 = %55.2;
    %63 = %60.1;
    (%61, %62, meta[relay.Constant][6] /* ty=Tensor[(288), float32] */, %63, %var_1316)
  };
  %64(%var_1327, %var_1328) /* ty=(Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) */
}

def @func_2089() -> (Tensor[(6, 9, 3), float64],) {
  %65 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %66 = %65.0;
  (%66,)
}

def @func_5843() -> (Tensor[(6, 9, 3), float32],) {
  @func_5841() /* ty=(Tensor[(6, 9, 3), float32],) */
}

def @func_3752() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), bool]) {
  %67 = @func_2171() /* ty=Tensor[(6, 9, 3), float64] */;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %69 = reshape(%68, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %70 = @func_2883(%69) /* ty=(Tensor[(6, 9, 3), bool],) */;
  %71 = %70.0;
  (%67, %71)
}

def @func_6451() -> Tensor[(6, 9, 3), float64] {
  %73 = fn () -> Tensor[(6, 9, 3), float64] {
    %72 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %72.0
  };
  %73() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_4434(%var_4431: Tensor[(1890), float64], %var_4432: Tensor[(288), float32], %var_4433: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(144, 1), float32], Tensor[(288), float32], Tensor[(6, 9, 3), bool]) {
  @func_4429(%var_4431, %var_4432, %var_4433) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(144, 1), float32], Tensor[(288), float32], Tensor[(6, 9, 3), bool]) */
}

def @func_4102(%var_4100: Tensor[(240), int64], %var_4101: Tensor[(800), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(21), float32], Tensor[(240), int64], Tensor[(800), float32]) {
  %84 = fn (%var_4088: Tensor[(240), int64], %var_4089: Tensor[(800), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(21), float32], Tensor[(240), int64], Tensor[(800), float32]) {
    %74 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
    %75 = %74.0;
    %76 = cast(%75, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %77 = cast(%var_4088, dtype="int64") /* ty=Tensor[(240), int64] */;
    %78 = cast(%var_4089, dtype="float32") /* ty=Tensor[(800), float32] */;
    %79 = reshape(%77, newshape=[240]) /* ty=Tensor[(240), int64] */;
    %80 = reshape(%78, newshape=[8, 100]) /* ty=Tensor[(8, 100), float32] */;
    %81 = @func_2426(%79, %80) /* ty=(Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) */;
    %82 = cos(%76) /* ty=Tensor[(6, 9, 3), float32] */;
    %83 = %81.4;
    (%82, %83, %var_4088, %var_4089)
  };
  %84(%var_4100, %var_4101) /* ty=(Tensor[(6, 9, 3), float32], Tensor[(21), float32], Tensor[(240), int64], Tensor[(800), float32]) */
}

def @func_3211() -> Tensor[(6, 9, 3), float32] {
  %85 = fn () -> Tensor[(6, 9, 3), float32] {
    @func_2645() /* ty=Tensor[(6, 9, 3), float32] */
  };
  %85() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_1646(%var_1642: Tensor[(13, 1, 10), float64], %var_1643: Tensor[(13, 1, 10), float64], %var_1644: Tensor[(800, 1), float32], %var_1645: Tensor[(21), float32]) -> (Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) {
  %97 = fn (%var_1591: Tensor[(13, 1, 10), float64], %var_1592: Tensor[(13, 1, 10), float64], %var_1634: Tensor[(800, 1), float32], %var_1635: Tensor[(21), float32]) -> (Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) {
    %86 = cast(%var_1592, dtype="float64") /* ty=Tensor[(13, 1, 10), float64] */;
    %87 = shape_of(%var_1591, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(%var_1591, dtype="float64") /* ty=Tensor[(13, 1, 10), float64] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %90 = cast(%var_1634, dtype="float32") /* ty=Tensor[(800, 1), float32] */;
    %91 = cast(%var_1635, dtype="float32") /* ty=Tensor[(21), float32] */;
    %92 = reshape(%90, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), float32] */;
    %93 = reshape(%91, newshape=[21, 1]) /* ty=Tensor[(21, 1), float32] */;
    %94 = @func_1326(%92, %93) /* ty=(Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) */;
    %95 = divide(%88, %89) /* ty=Tensor[(13, ?, 10), float64] */;
    %96 = %94.0;
    (%95, %96, %var_1634, %var_1635)
  };
  %97(%var_1642, %var_1643, %var_1644, %var_1645) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */
}

def @func_2629(%var_2628: Tensor[(12, 15, 9), uint8]) -> (Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) {
  %112 = fn (%var_2573: Tensor[(12, 15, 9), uint8]) -> (Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) {
    %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 15, 9), uint8] */, dtype="uint8") /* ty=Tensor[(12, 15, 9), uint8] */;
    %99 = shape_of(%var_2573, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(%var_2573, dtype="uint8") /* ty=Tensor[(12, 15, 9), uint8] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %102 = logical_xor(%100, %101) /* ty=Tensor[(12, 15, 9), uint8] */;
    %103 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 15, 9), uint8] */, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
    %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
    %105 = cast(%102, dtype="float32") /* ty=Tensor[(12, 15, 9), float32] */;
    %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %107 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
    %108 = %107.0;
    %109 = cast(%108, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %110 = multiply(%105, %106) /* ty=Tensor[(12, 15, 9), float32] */;
    %111 = log10(%109) /* ty=Tensor[(6, 9, 3), float64] */;
    (%110, %111)
  };
  %112(%var_2628) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) */
}

def @func_1770(%var_1738: Tensor[(8, 16, 15), bool], %var_1739: Tensor[(8, 16, 15), bool]) -> (Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8]) {
  %113 = cast(meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %114 = reshape(%113, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %115 = @func_560(%114) /* ty=(Tensor[(15, 3, 3), float32],) */;
  %116 = cast(%var_1739, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %117 = shape_of(%var_1738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%var_1738, dtype="bool") /* ty=Tensor[(8, 16, 15), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %120 = logical_or(%118, %119) /* ty=Tensor[(8, 16, 15), bool] */;
  %121 = cast(%var_1739, dtype="int8") /* ty=Tensor[(8, 16, 15), int8] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="int8") /* ty=Tensor[(8, 16, 15), int8] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %125 = %115.0;
  %126 = bitwise_and(%123, %124) /* ty=Tensor[(8, 16, 15), int8] */;
  (%125, meta[relay.Constant][9] /* ty=Tensor[(135), float32] */, %126)
}

def @func_563(%var_561: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32],) {
  @func_560(%var_561) /* ty=(Tensor[(15, 3, 3), float32],) */
}

def @func_4934() -> (Tensor[(6, 9, 3), float32],) {
  %130 = fn () -> (Tensor[(6, 9, 3), float32],) {
    %127 = @func_4331() /* ty=Tensor[(6, 9, 3), float64] */;
    %128 = cast(%127, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %129 = rsqrt(%128) /* ty=Tensor[(6, 9, 3), float32] */;
    (%129,)
  };
  %130() /* ty=(Tensor[(6, 9, 3), float32],) */
}

def @func_2017() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %131 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
  %132 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
  %133 = %132.0;
  %134 = cast(%133, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %135 = %131.0;
  %136 = sinh(%134) /* ty=Tensor[(6, 9, 3), float64] */;
  (%135, %136)
}

def @func_2283() -> Tensor[(6, 9, 3), float64] {
  @func_2281() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_5137() -> Tensor[(6, 9, 3), float64] {
  %138 = fn () -> Tensor[(6, 9, 3), float64] {
    %137 = @func_3244() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %137.0
  };
  %138() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_7743() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64]) {
  %139 = @func_4151() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %140 = @func_2564() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %141 = %139.0;
  %142 = %140.0;
  (%141, %142)
}

def @func_8328() -> (Tensor[(6, 9, 3), float64],) {
  @func_8326() /* ty=(Tensor[(6, 9, 3), float64],) */
}

def @func_3406(%var_3371: Tensor[(8, 14, 1), float32], %var_3383: Tensor[(26, 5), float64], %var_3384: Tensor[(800), float32]) -> (Tensor[(8, 14, ?), int64], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(8, 14, ?), float64]) {
  %143 = cast(%var_3371, dtype="float32") /* ty=Tensor[(8, 14, 1), float32] */;
  %144 = sqrt(%143) /* ty=Tensor[(8, 14, 1), float32] */;
  %145 = cast(%var_3371, dtype="int64") /* ty=Tensor[(8, 14, 1), int64] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="int64") /* ty=Tensor[(8, 14, 1), int64] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %149 = cast(%var_3383, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %150 = cast(%var_3384, dtype="float32") /* ty=Tensor[(800), float32] */;
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %152 = reshape(%149, newshape=[13, 10]) /* ty=Tensor[(13, 10), float64] */;
  %153 = reshape(%150, newshape=[200, 4]) /* ty=Tensor[(200, 4), float32] */;
  %154 = reshape(%151, newshape=[1, 21]) /* ty=Tensor[(1, 21), float32] */;
  %155 = @func_2322(%152, %153, %154) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(200, 4), float32], Tensor[(1, 21), float32]) */;
  %156 = cast(%var_3371, dtype="float64") /* ty=Tensor[(8, 14, 1), float64] */;
  %157 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%144, dtype="float64") /* ty=Tensor[(8, 14, 1), float64] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %160 = mod(%158, %159) /* ty=Tensor[(8, 14, ?), float64] */;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(8, 14, ?), float64] */;
  %162 = multiply(%147, %148) /* ty=Tensor[(8, 14, ?), int64] */;
  %163 = %155.0;
  %164 = atanh(%161) /* ty=Tensor[(8, 14, ?), float64] */;
  (%162, %163, %var_3383, %var_3384, meta[relay.Constant][10] /* ty=Tensor[(21), float32] */, %164)
}

def @func_2091() -> (Tensor[(6, 9, 3), float64],) {
  @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */
}

def @func_3317(%var_3315: Tensor[(240), int64], %var_3316: Tensor[(1620), uint8]) -> (Tensor[(6, 9, 3), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(12, 15, 9), float32], Tensor[(1620), uint8]) {
  %176 = fn (%var_3308: Tensor[(240), int64], %var_3311: Tensor[(1620), uint8]) -> (Tensor[(6, 9, 3), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(12, 15, 9), float32], Tensor[(1620), uint8]) {
    %165 = @func_3210() /* ty=Tensor[(6, 9, 3), float32] */;
    %166 = cast(%165, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %167 = cast(%var_3308, dtype="int64") /* ty=Tensor[(240), int64] */;
    %168 = reshape(%167, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
    %169 = @func_1931(%168) /* ty=(Tensor[(6, 8, 5), int64],) */;
    %170 = cast(%var_3311, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
    %171 = reshape(%170, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
    %172 = @func_2627(%171) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) */;
    %173 = atan(%166) /* ty=Tensor[(6, 9, 3), float64] */;
    %174 = %169.0;
    %175 = %172.0;
    (%173, %174, %var_3308, %175, %var_3311)
  };
  %176(%var_3315, %var_3316) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(12, 15, 9), float32], Tensor[(1620), uint8]) */
}

def @func_8456(%var_8454: Tensor[(11, 13, 15), float64], %var_8455: Tensor[(11, 13, 15), float64]) -> (Tensor[(11, 13, 15), float64], Tensor[(1890), int8]) {
  %184 = fn (%var_8437: Tensor[(11, 13, 15), float64], %var_8438: Tensor[(11, 13, 15), float64]) -> (Tensor[(11, 13, 15), float64], Tensor[(1890), int8]) {
    %177 = cast(%var_8438, dtype="float64") /* ty=Tensor[(11, 13, 15), float64] */;
    %178 = shape_of(%var_8437, dtype="int32") /* ty=Tensor[(3), int32] */;
    %179 = cast(%var_8437, dtype="float64") /* ty=Tensor[(11, 13, 15), float64] */;
    %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %181 = @func_3501() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(1890), int8]) */;
    %182 = divide(%179, %180) /* ty=Tensor[(11, 13, 15), float64] */;
    %183 = %181.3;
    (%182, %183)
  };
  %184(%var_8454, %var_8455) /* ty=(Tensor[(11, 13, 15), float64], Tensor[(1890), int8]) */
}

def @func_3805(%var_3802: Tensor[(1, 130), float64], %var_3803: Tensor[(21), float32], %var_3804: Tensor[(462), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32]) {
  %201 = fn (%var_3793: Tensor[(1, 130), float64], %var_3795: Tensor[(21), float32], %var_3799: Tensor[(462), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32]) {
    %185 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %186 = cast(%var_3793, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
    %187 = cast(%var_3793, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
    %188 = cast(meta[relay.Constant][11] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
    %189 = cast(%var_3795, dtype="float32") /* ty=Tensor[(21), float32] */;
    %190 = reshape(%186, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
    %191 = reshape(%187, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
    %192 = reshape(%188, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
    %193 = reshape(%189, newshape=[21]) /* ty=Tensor[(21), float32] */;
    %194 = @func_1641(%190, %191, %192, %193) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
    %195 = cast(%var_3799, dtype="float32") /* ty=Tensor[(462), float32] */;
    %196 = reshape(%195, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
    %197 = @func_3139(%196) /* ty=(Tensor[(3, 14, 11), bool],) */;
    %198 = %185.0;
    %199 = %194.1;
    %200 = %197.0;
    (%198, %199, %var_3793, meta[relay.Constant][11] /* ty=Tensor[(800), float32] */, %var_3795, %200, %var_3799)
  };
  %201(%var_3802, %var_3803, %var_3804) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32]) */
}

def @func_4152() -> (Tensor[(6, 9, 3), bool],) {
  %203 = fn () -> (Tensor[(6, 9, 3), bool],) {
    %202 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
    (%202,)
  };
  %203() /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_4042(%var_4040: Tensor[(6, 10, 10), float64], %var_4041: Tensor[(6, 10, 10), float64]) -> (Tensor[(6, 10, 10), int32], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) {
  %216 = fn (%var_4016: Tensor[(6, 10, 10), float64], %var_4025: Tensor[(6, 10, 10), float64]) -> (Tensor[(6, 10, 10), int32], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) {
    %204 = cast(%var_4016, dtype="float64") /* ty=Tensor[(6, 10, 10), float64] */;
    %205 = log10(%204) /* ty=Tensor[(6, 10, 10), float64] */;
    %206 = cast(%var_4025, dtype="int32") /* ty=Tensor[(6, 10, 10), int32] */;
    %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
    %208 = cast(%205, dtype="int32") /* ty=Tensor[(6, 10, 10), int32] */;
    %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %210 = cast(meta[relay.Constant][12] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
    %211 = cast(meta[relay.Constant][12] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
    %212 = reshape(%210, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), bool] */;
    %213 = reshape(%211, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), bool] */;
    %214 = bitwise_xor(%208, %209) /* ty=Tensor[(6, 10, 10), int32] */;
    %215 = @func_3426(%212, %213) /* ty=Tensor[(13, 10, 6), bool] */;
    (%214, %215, meta[relay.Constant][12] /* ty=Tensor[(780), bool] */)
  };
  %216(%var_4040, %var_4041) /* ty=(Tensor[(6, 10, 10), int32], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) */
}

def @func_2645() -> Tensor[(6, 9, 3), float32] {
  %217 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %218 = %217.0;
  %219 = cast(%218, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
  sin(%219) /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_7896() -> (Tensor[(6, 9, 3), bool],) {
  %220 = @func_5219() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %221 = %220.0;
  (%221,)
}

def @func_6073() -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  @func_6071() /* ty=(Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */
}

def @func_2647() -> Tensor[(6, 9, 3), float32] {
  @func_2645() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_7196() -> (Tensor[(6, 9, 3), bool], Tensor[(9, 11, 8), bool], Tensor[(792, 11), uint16]) {
  @func_7194() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(9, 11, 8), bool], Tensor[(792, 11), uint16]) */
}

def @func_4555() -> Tensor[(6, 9, 3), float32] {
  %222 = fn () -> Tensor[(6, 9, 3), float32] {
    @func_3210() /* ty=Tensor[(6, 9, 3), float32] */
  };
  %222() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_8116() -> (Tensor[(6, 9, 3), bool],) {
  %223 = @func_7280() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) */;
  %224 = %223.0;
  (%224,)
}

def @func_6122(%var_6120: Tensor[(9, 11, 8), bool], %var_6121: Tensor[(9, 11, 8), bool]) -> (Tensor[(9, 11, 8), bool],) {
  @func_6118(%var_6120, %var_6121) /* ty=(Tensor[(9, 11, 8), bool],) */
}

def @func_8147() -> (Tensor[(6, 9, 3), float32],) {
  @func_8145() /* ty=(Tensor[(6, 9, 3), float32],) */
}

def @func_3193() -> (Tensor[(6, 9, 3), float64],) {
  %229 = fn () -> (Tensor[(6, 9, 3), float64],) {
    %225 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %226 = %225.0;
    %227 = cast(%226, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %228 = exp(%227) /* ty=Tensor[(6, 9, 3), float64] */;
    (%228,)
  };
  %229() /* ty=(Tensor[(6, 9, 3), float64],) */
}

def @func_3502() -> (Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(1890), int8]) {
  %245 = fn () -> (Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(1890), int8]) {
    %230 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
    %231 = cast(meta[relay.Constant][13] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %232 = reshape(%231, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
    %233 = @func_3139(%232) /* ty=(Tensor[(3, 14, 11), bool],) */;
    %234 = cast(meta[relay.Constant][14] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %235 = reshape(%234, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
    %236 = @func_2075(%235) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) */;
    %237 = %236.3;
    %238 = cast(%237, dtype="int8") /* ty=Tensor[(15, 14, 9), int8] */;
    %239 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(1890), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %240 = cast(meta[relay.Constant][14] /* ty=Tensor[(1890), float64] */, dtype="int8") /* ty=Tensor[(1890), int8] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?), int8] */;
    %242 = %230.0;
    %243 = %233.0;
    %244 = maximum(%240, %241) /* ty=Tensor[(1890), int8] */;
    (%242, %243, meta[relay.Constant][13] /* ty=Tensor[(462), float32] */, %244)
  };
  %245() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(1890), int8]) */
}

def @func_7348() -> Tensor[(6, 9, 3), float32] {
  %247 = fn () -> Tensor[(6, 9, 3), float32] {
    %246 = @func_6099() /* ty=(Tensor[(6, 9, 3), float32],) */;
    %246.0
  };
  %247() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_8010(%var_7969: Tensor[(392), int16], %var_7990: Tensor[(240), int64]) -> (Tensor[(6, 9, 3), float64], Tensor[(800), float32], Tensor[(392), int16], Tensor[(135), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float32], Tensor[(6, 8, 5), int64], Tensor[(240), int64]) {
  %248 = @func_5055() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %249 = cast(%var_7969, dtype="int16") /* ty=Tensor[(392), int16] */;
  %250 = reshape(%249, newshape=[14, 2, 14]) /* ty=Tensor[(14, 2, 14), int16] */;
  %251 = @func_3709(%250) /* ty=(Tensor[(14, 2, 14), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), uint16], Tensor[(8, 30), int64], Tensor[(800), float32]) */;
  %252 = cast(meta[relay.Constant][15] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %253 = reshape(%252, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %254 = @func_870(%253) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
  %255 = cast(meta[relay.Constant][15] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %256 = reshape(%255, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %257 = @func_4297(%256) /* ty=(Tensor[(6, 9, 3), bool], Tensor[(15, 3, 3), float32], Tensor[(21), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) */;
  %258 = cast(%var_7990, dtype="int64") /* ty=Tensor[(240), int64] */;
  %259 = reshape(%258, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
  %260 = @func_1931(%259) /* ty=(Tensor[(6, 8, 5), int64],) */;
  %261 = %248.0;
  %262 = %251.5;
  %263 = %254.2;
  %264 = %257.5;
  %265 = %260.0;
  (%261, %262, %var_7969, %263, meta[relay.Constant][15] /* ty=Tensor[(288), float32] */, %264, %265, %var_7990)
}

def @func_2019() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */
}

def @func_3006() -> Tensor[(6, 9, 3), bool] {
  @func_3004() /* ty=Tensor[(6, 9, 3), bool] */
}

def @func_8326() -> (Tensor[(6, 9, 3), float64],) {
  %266 = @func_7765() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %267 = %266.0;
  (%267,)
}

def @func_7766() -> (Tensor[(6, 9, 3), float64],) {
  %269 = fn () -> (Tensor[(6, 9, 3), float64],) {
    %268 = @func_6594() /* ty=Tensor[(6, 9, 3), float64] */;
    (%268,)
  };
  %269() /* ty=(Tensor[(6, 9, 3), float64],) */
}

def @func_6715(%var_6713: Tensor[(2912), int32], %var_6714: Tensor[(792), bool]) -> (Tensor[(6, 9, 3), bool], Tensor[(16, 14, 13), float64], Tensor[(9, 11, 8), bool], Tensor[(792), bool]) {
  @func_6711(%var_6713, %var_6714) /* ty=(Tensor[(6, 9, 3), bool], Tensor[(16, 14, 13), float64], Tensor[(9, 11, 8), bool], Tensor[(792), bool]) */
}

def @func_3070() -> (Tensor[(6, 9, 3), float64],) {
  @func_3068() /* ty=(Tensor[(6, 9, 3), float64],) */
}

def @func_1988() -> (Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) {
  @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */
}

def @func_5802() -> (Tensor[(6, 9, 3), bool],) {
  %271 = fn () -> (Tensor[(6, 9, 3), bool],) {
    %270 = @func_4464() /* ty=Tensor[(6, 9, 3), bool] */;
    (%270,)
  };
  %271() /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_2816() -> Tensor[(6, 9, 3), float64] {
  @func_2814() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_5978(%var_5974: Tensor[(144), float32], %var_5975: Tensor[(77, 6), float32], %var_5976: Tensor[(98, 4), float32], %var_5977: Tensor[(98, 4), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(112), float32], Tensor[(130), float64], Tensor[(144), float32], Tensor[(135), float32], Tensor[(3, 14, 11), bool], Tensor[(77, 6), float32], Tensor[(98, 4), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(6, 9, 3), float64], Tensor[(98, 4), float32], Tensor[(98, 4), bool]) {
  %314 = fn (%var_5881: Tensor[(144), float32], %var_5907: Tensor[(77, 6), float32], %var_5919: Tensor[(98, 4), float32], %var_5967: Tensor[(98, 4), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(112), float32], Tensor[(130), float64], Tensor[(144), float32], Tensor[(135), float32], Tensor[(3, 14, 11), bool], Tensor[(77, 6), float32], Tensor[(98, 4), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(6, 9, 3), float64], Tensor[(98, 4), float32], Tensor[(98, 4), bool]) {
    %272 = @func_4933() /* ty=(Tensor[(6, 9, 3), float32],) */;
    %273 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
    %274 = cast(%var_5907, dtype="float32") /* ty=Tensor[(77, 6), float32] */;
    %275 = reshape(%274, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
    %276 = @func_3139(%275) /* ty=(Tensor[(3, 14, 11), bool],) */;
    %277 = cast(meta[relay.Constant][16] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %278 = cast(meta[relay.Constant][17] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
    %279 = cast(%var_5881, dtype="float32") /* ty=Tensor[(144), float32] */;
    %280 = reshape(%277, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %281 = reshape(%278, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
    %282 = reshape(%279, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %283 = @func_5121(%280, %281, %282) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(8, 14, ?), int64], Tensor[(112), float32], Tensor[(800), float32], Tensor[(1, 130), float32], Tensor[(6, 9, 3), float64], Tensor[(98, 4), bool], Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), bool]) */;
    %284 = %283.6;
    %285 = cast(%284, dtype="float32") /* ty=Tensor[(98, 4), float32] */;
    %286 = rsqrt(%285) /* ty=Tensor[(98, 4), float32] */;
    %287 = cast(%var_5919, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
    %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(2), int32] */;
    %289 = cast(%286, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %291 = cast(meta[relay.Constant][18] /* ty=Tensor[(240), int64] */, dtype="int64") /* ty=Tensor[(240), int64] */;
    %292 = reshape(%291, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
    %293 = @func_1931(%292) /* ty=(Tensor[(6, 8, 5), int64],) */;
    %294 = cast(meta[relay.Constant][16] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
    %295 = cast(meta[relay.Constant][17] /* ty=Tensor[(130), float64] */, dtype="float64") /* ty=Tensor[(130), float64] */;
    %296 = cast(%var_5881, dtype="float32") /* ty=Tensor[(144), float32] */;
    %297 = reshape(%294, newshape=[112]) /* ty=Tensor[(112), float32] */;
    %298 = reshape(%295, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
    %299 = reshape(%296, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %300 = @func_5121(%297, %298, %299) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(8, 14, ?), int64], Tensor[(112), float32], Tensor[(800), float32], Tensor[(1, 130), float32], Tensor[(6, 9, 3), float64], Tensor[(98, 4), bool], Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), bool]) */;
    %301 = cast(%286, dtype="float32") /* ty=Tensor[(98, 4), float32] */;
    %302 = cast(%var_5967, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
    %303 = shape_of(%286, dtype="int32") /* ty=Tensor[(2), int32] */;
    %304 = cast(%286, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %306 = %272.0;
    %307 = %273.1;
    %308 = %276.0;
    %309 = floor_mod(%289, %290) /* ty=Tensor[(98, 4), float64] */;
    %310 = %293.0;
    %311 = %300.5;
    %312 = sqrt(%301) /* ty=Tensor[(98, 4), float32] */;
    %313 = equal(%304, %305) /* ty=Tensor[(98, 4), bool] */;
    (%306, meta[relay.Constant][16] /* ty=Tensor[(112), float32] */, meta[relay.Constant][17] /* ty=Tensor[(130), float64] */, %var_5881, %307, %308, %var_5907, %309, %310, meta[relay.Constant][18] /* ty=Tensor[(240), int64] */, %311, %312, %313)
  };
  %314(%var_5974, %var_5975, %var_5976, %var_5977) /* ty=(Tensor[(6, 9, 3), float32], Tensor[(112), float32], Tensor[(130), float64], Tensor[(144), float32], Tensor[(135), float32], Tensor[(3, 14, 11), bool], Tensor[(77, 6), float32], Tensor[(98, 4), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(6, 9, 3), float64], Tensor[(98, 4), float32], Tensor[(98, 4), bool]) */
}

def @func_4466() -> Tensor[(6, 9, 3), bool] {
  @func_4464() /* ty=Tensor[(6, 9, 3), bool] */
}

def @func_6372() -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(9, 11, 8), bool], Tensor[(792), bool]) {
  %328 = fn () -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(9, 11, 8), bool], Tensor[(792), bool]) {
    %315 = cast(meta[relay.Constant][19] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %316 = @func_5733() /* ty=Tensor[(6, 9, 3), float32] */;
    %317 = cast(%316, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %318 = reshape(%315, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
    %319 = reshape(%317, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
    %320 = @func_2242(%318, %319) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(1890), float32], Tensor[(6, 9, 3), float64]) */;
    %321 = cast(meta[relay.Constant][20] /* ty=Tensor[(792), bool] */, dtype="bool") /* ty=Tensor[(792), bool] */;
    %322 = cast(meta[relay.Constant][20] /* ty=Tensor[(792), bool] */, dtype="bool") /* ty=Tensor[(792), bool] */;
    %323 = reshape(%321, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
    %324 = reshape(%322, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
    %325 = @func_6118(%323, %324) /* ty=(Tensor[(9, 11, 8), bool],) */;
    %326 = %320.0;
    %327 = %325.0;
    (%316, %326, meta[relay.Constant][19] /* ty=Tensor[(1890), float64] */, %327, meta[relay.Constant][20] /* ty=Tensor[(792), bool] */)
  };
  %328() /* ty=(Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(9, 11, 8), bool], Tensor[(792), bool]) */
}

def @func_8118() -> (Tensor[(6, 9, 3), bool],) {
  @func_8116() /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_1216(%var_1214: Tensor[(1, 3, 7), float32], %var_1215: Tensor[(8, 36), float32]) -> (Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) {
  %356 = fn (%var_1120: Tensor[(1, 3, 7), float32], %var_1132: Tensor[(8, 36), float32]) -> (Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) {
    %329 = cast(%var_1132, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
    %330 = reshape(%329, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
    %331 = @func_870(%330) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
    %332 = cast(%var_1132, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
    %333 = reshape(%332, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
    %334 = @func_870(%333) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
    %335 = cast(-0.702007f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %336 = cast(%var_1120, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
    %337 = divide(%335, %336) /* ty=Tensor[(1, 3, 7), float32] */;
    %338 = cast(%337, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
    %339 = exp(%338) /* ty=Tensor[(1, 3, 7), float32] */;
    %340 = cast(%var_1120, dtype="int8") /* ty=Tensor[(1, 3, 7), int8] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%339, dtype="int8") /* ty=Tensor[(1, 3, 7), int8] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %344 = cast(%339, dtype="float32") /* ty=Tensor[(1, 3, 7), float32] */;
    %345 = cast(%var_1132, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
    %346 = reshape(%345, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
    %347 = @func_870(%346) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
    %348 = cast(meta[relay.Constant][21] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %349 = reshape(%348, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), float32] */;
    %350 = %331.1;
    %351 = %334.1;
    %352 = maximum(%342, %343) /* ty=Tensor[(?, 3, 7), int8] */;
    %353 = log(%344) /* ty=Tensor[(1, 3, 7), float32] */;
    %354 = %347.1;
    %355 = @func_122(%349) /* ty=Tensor[(4, 6, 6), bool] */;
    (%350, %var_1132, %351, %352, %353, %354, %355, meta[relay.Constant][21] /* ty=Tensor[(144), float32] */)
  };
  %356(%var_1214, %var_1215) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) */
}

def @func_5300(%var_5299: Tensor[(135), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) {
  %362 = fn (%var_5289: Tensor[(135), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) {
    %357 = cast(%var_5289, dtype="float32") /* ty=Tensor[(135), float32] */;
    %358 = reshape(%357, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
    %359 = @func_560(%358) /* ty=(Tensor[(15, 3, 3), float32],) */;
    %360 = @func_3210() /* ty=Tensor[(6, 9, 3), float32] */;
    %361 = %359.0;
    (%360, %361, %var_5289)
  };
  %362(%var_5299) /* ty=(Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */
}

def @func_1931(%var_1927: Tensor[(6, 8, 5), int64]) -> (Tensor[(6, 8, 5), int64],) {
  %363 = cast(%var_1927, dtype="int64") /* ty=Tensor[(6, 8, 5), int64] */;
  %364 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(6, 8, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 8, 5), int64] */, dtype="int64") /* ty=Tensor[(6, 8, 5), int64] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %367 = left_shift(%365, %366) /* ty=Tensor[(6, 8, 5), int64] */;
  (%367,)
}

def @func_5702() -> Tensor[(6, 9, 3), float64] {
  @func_5700() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_6595() -> Tensor[(6, 9, 3), float64] {
  %368 = fn () -> Tensor[(6, 9, 3), float64] {
    @func_4907() /* ty=Tensor[(6, 9, 3), float64] */
  };
  %368() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_1774(%var_1772: Tensor[(8, 16, 15), bool], %var_1773: Tensor[(8, 16, 15), bool]) -> (Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8]) {
  @func_1770(%var_1772, %var_1773) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8]) */
}

def @func_1533(%var_1531: Tensor[(6, 13, 4), int64], %var_1532: Tensor[(6, 13, 4), int64]) -> (Tensor[(6, 13, 4), int64],) {
  @func_1529(%var_1531, %var_1532) /* ty=(Tensor[(6, 13, 4), int64],) */
}

def @func_4299(%var_4298: Tensor[(288), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(15, 3, 3), float32], Tensor[(21), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) {
  %382 = fn (%var_4259: Tensor[(288), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(15, 3, 3), float32], Tensor[(21), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) {
    %369 = cast(meta[relay.Constant][23] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
    %370 = cast(%var_4259, dtype="float32") /* ty=Tensor[(288), float32] */;
    %371 = reshape(%369, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
    %372 = reshape(%370, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
    %373 = @func_1213(%371, %372) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) */;
    %374 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
    %375 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %376 = %375.0;
    %377 = cast(%376, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %378 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
    %379 = %373.2;
    %380 = %374.0;
    %381 = atanh(%377) /* ty=Tensor[(6, 9, 3), float32] */;
    (%378, %379, meta[relay.Constant][23] /* ty=Tensor[(21), float32] */, %var_4259, %380, %381)
  };
  %382(%var_4298) /* ty=(Tensor[(6, 9, 3), bool], Tensor[(15, 3, 3), float32], Tensor[(21), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) */
}

def @func_1986() -> (Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) {
  %383 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 1, 3), float64] */, dtype="float64") /* ty=Tensor[(6, 1, 3), float64] */;
  %384 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 9, 3), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %385 = cast(meta[relay.Constant][26] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %386 = reshape(%385, newshape=[12, 12, 2]) /* ty=Tensor[(12, 12, 2), float32] */;
  %387 = @func_870(%386) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
  %388 = floor_divide(%383, %384) /* ty=Tensor[(6, 9, 3), float64] */;
  %389 = %387.2;
  (%388, %389, meta[relay.Constant][26] /* ty=Tensor[(288), float32] */)
}

def @func_2151(%var_2149: Tensor[(2, 11, 6), float64], %var_2150: Tensor[(135), float32]) -> (Tensor[(2, 11, 6), float64], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(2, 11, 6), float64]) {
  %398 = fn (%var_2109: Tensor[(2, 11, 6), float64], %var_2132: Tensor[(135), float32]) -> (Tensor[(2, 11, 6), float64], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(2, 11, 6), float64]) {
    %390 = cast(%var_2109, dtype="float64") /* ty=Tensor[(2, 11, 6), float64] */;
    %391 = cast(%var_2132, dtype="float32") /* ty=Tensor[(135), float32] */;
    %392 = reshape(%391, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
    %393 = @func_560(%392) /* ty=(Tensor[(15, 3, 3), float32],) */;
    %394 = cast(%var_2109, dtype="float64") /* ty=Tensor[(2, 11, 6), float64] */;
    %395 = asin(%390) /* ty=Tensor[(2, 11, 6), float64] */;
    %396 = %393.0;
    %397 = cos(%394) /* ty=Tensor[(2, 11, 6), float64] */;
    (%395, %396, %var_2132, %397)
  };
  %398(%var_2149, %var_2150) /* ty=(Tensor[(2, 11, 6), float64], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(2, 11, 6), float64]) */
}

def @func_4768(%var_4767: Tensor[(21, 1), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(21, 800), int32], Tensor[(21, 1), float64], Tensor[(6, 9, 3), bool]) {
  %417 = fn (%var_4730: Tensor[(21, 1), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(21, 800), int32], Tensor[(21, 1), float64], Tensor[(6, 9, 3), bool]) {
    %399 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
    %400 = cast(meta[relay.Constant][27] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
    %401 = cast(%var_4730, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
    %402 = reshape(%400, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), float32] */;
    %403 = reshape(%401, newshape=[21, 1]) /* ty=Tensor[(21, 1), float32] */;
    %404 = @func_1326(%402, %403) /* ty=(Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) */;
    %405 = cast(%var_4730, dtype="int32") /* ty=Tensor[(21, 1), int32] */;
    %406 = cast(meta[relay.Constant][27] /* ty=Tensor[(800), float32] */, dtype="int32") /* ty=Tensor[(800), int32] */;
    %407 = cast(%var_4730, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
    %408 = cos(%407) /* ty=Tensor[(21, 1), float32] */;
    %409 = cast(%408, dtype="float64") /* ty=Tensor[(21, 1), float64] */;
    %410 = @func_4151() /* ty=(Tensor[(6, 9, 3), bool],) */;
    %411 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
    %412 = %399.1;
    %413 = %404.0;
    %414 = add(%405, %406) /* ty=Tensor[(21, 800), int32] */;
    %415 = sqrt(%409) /* ty=Tensor[(21, 1), float64] */;
    %416 = %410.0;
    (%411, %412, %413, %414, %415, %416)
  };
  %417(%var_4767) /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(21, 800), int32], Tensor[(21, 1), float64], Tensor[(6, 9, 3), bool]) */
}

def @func_6099() -> (Tensor[(6, 9, 3), float32],) {
  %418 = @func_4554() /* ty=Tensor[(6, 9, 3), float32] */;
  (%418,)
}

def @func_6919() -> (Tensor[(6, 9, 3), float32],) {
  %419 = @func_6099() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %420 = %419.0;
  (%420,)
}

def @func_7866() -> (Tensor[(6, 9, 3), bool],) {
  %423 = fn () -> (Tensor[(6, 9, 3), bool],) {
    %421 = @func_4485() /* ty=(Tensor[(6, 9, 3), bool],) */;
    %422 = %421.0;
    (%422,)
  };
  %423() /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_2564() -> (Tensor[(6, 9, 3), float64],) {
  %424 = @func_2281() /* ty=Tensor[(6, 9, 3), float64] */;
  (%424,)
}

def @func_3683(%var_3682: Tensor[(8, 1, 13), float32]) -> (Tensor[(8, 1, 13), float32],) {
  %427 = fn (%var_3676: Tensor[(8, 1, 13), float32]) -> (Tensor[(8, 1, 13), float32],) {
    %425 = cast(%var_3676, dtype="float32") /* ty=Tensor[(8, 1, 13), float32] */;
    %426 = exp(%425) /* ty=Tensor[(8, 1, 13), float32] */;
    (%426,)
  };
  %427(%var_3682) /* ty=(Tensor[(8, 1, 13), float32],) */
}

def @func_3712(%var_3710: Tensor[(14, 2, 14), int16]) -> (Tensor[(14, 2, 14), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), uint16], Tensor[(8, 30), int64], Tensor[(800), float32]) {
  @func_3709(%var_3710) /* ty=(Tensor[(14, 2, 14), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), uint16], Tensor[(8, 30), int64], Tensor[(800), float32]) */
}

def @func_2657(%var_2656: Tensor[(9, 14, 14), float32]) -> (Tensor[(9, 14, 14), float32],) {
  %430 = fn (%var_2650: Tensor[(9, 14, 14), float32]) -> (Tensor[(9, 14, 14), float32],) {
    %428 = cast(%var_2650, dtype="float32") /* ty=Tensor[(9, 14, 14), float32] */;
    %429 = erf(%428) /* ty=Tensor[(9, 14, 14), float32] */;
    (%429,)
  };
  %430(%var_2656) /* ty=(Tensor[(9, 14, 14), float32],) */
}

def @func_7282() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) {
  @func_7280() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) */
}

def @func_3004() -> Tensor[(6, 9, 3), bool] {
  %431 = @func_2645() /* ty=Tensor[(6, 9, 3), float32] */;
  %432 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %433 = %432.1;
  %434 = cast(%433, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %435 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%431, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%436, %437) /* ty=Tensor[(6, 9, 3), bool] */
}

def @func_4982(%var_4972: Tensor[(945, 2), float64], %var_4973: Tensor[(288), float32], %var_4978: Tensor[(288), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(144, 1), float32], Tensor[(945, 2), float64], Tensor[(288), int8]) {
  %438 = cast(%var_4972, dtype="float64") /* ty=Tensor[(945, 2), float64] */;
  %439 = cast(%var_4973, dtype="float32") /* ty=Tensor[(288), float32] */;
  %440 = @func_4861() /* ty=Tensor[(6, 9, 3), bool] */;
  %441 = cast(%440, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %442 = reshape(%438, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %443 = reshape(%439, newshape=[288]) /* ty=Tensor[(288), float32] */;
  %444 = reshape(%441, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %445 = @func_4429(%442, %443, %444) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(144, 1), float32], Tensor[(288), float32], Tensor[(6, 9, 3), bool]) */;
  %446 = cast(%var_4978, dtype="int8") /* ty=Tensor[(288), int8] */;
  %447 = shape_of(%var_4973, dtype="int32") /* ty=Tensor[(1), int32] */;
  %448 = cast(%var_4973, dtype="int8") /* ty=Tensor[(288), int8] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?), int8] */;
  %450 = %445.3;
  %451 = maximum(%448, %449) /* ty=Tensor[(288), int8] */;
  (%440, %450, %var_4972, %451)
}

def @func_6118(%var_6113: Tensor[(9, 11, 8), bool], %var_6114: Tensor[(9, 11, 8), bool]) -> (Tensor[(9, 11, 8), bool],) {
  %452 = cast(%var_6114, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %453 = shape_of(%var_6113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_6113, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %456 = logical_or(%454, %455) /* ty=Tensor[(9, 11, 8), bool] */;
  (%456,)
}

def @func_7523() -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64]) {
  %457 = @func_6919() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %458 = @func_5182() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %459 = %457.0;
  %460 = %458.0;
  (%459, %460)
}

def @func_8061() -> Tensor[(6, 9, 3), float32] {
  %462 = fn () -> Tensor[(6, 9, 3), float32] {
    %461 = @func_7280() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) */;
    %461.1
  };
  %462() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_4429(%var_4398: Tensor[(1890), float64], %var_4406: Tensor[(288), float32], %var_4417: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(144, 1), float32], Tensor[(288), float32], Tensor[(6, 9, 3), bool]) {
  %463 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %464 = cast(meta[relay.Constant][28] /* ty=Tensor[(144, 1), float32] */, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %465 = cast(%var_4406, dtype="float32") /* ty=Tensor[(288), float32] */;
  %466 = reshape(%464, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %467 = reshape(%465, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
  %468 = @func_2526(%466, %467) /* ty=(Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(1920, 1), bool], Tensor[(?, 3, 7), uint64], Tensor[(8, 36), int32], Tensor[(4, 6, 6), bool], Tensor[(6, 9, 3), float64]) */;
  %469 = cast(%var_4398, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %470 = %463.0;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
  %472 = reshape(%469, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
  %473 = reshape(%471, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
  %474 = @func_2242(%472, %473) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(1890), float32], Tensor[(6, 9, 3), float64]) */;
  %475 = %474.2;
  %476 = cast(%var_4417, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %480 = %468.5;
  %481 = less(%478, %479) /* ty=Tensor[(6, 9, 3), bool] */;
  (%470, %var_4398, %480, meta[relay.Constant][28] /* ty=Tensor[(144, 1), float32] */, %var_4406, %481)
}

def @func_5554() -> Tensor[(6, 9, 3), float64] {
  %482 = fn () -> Tensor[(6, 9, 3), float64] {
    @func_4907() /* ty=Tensor[(6, 9, 3), float64] */
  };
  %482() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_6071() -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %483 = @func_5841() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %484 = @func_5182() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %485 = %483.0;
  %486 = @func_4331() /* ty=Tensor[(6, 9, 3), float64] */;
  %487 = %484.0;
  (%485, %486, %487)
}

def @func_6522() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %493 = fn () -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
    %488 = @func_5587() /* ty=(Tensor[(6, 9, 3), bool],) */;
    %489 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %490 = %488.0;
    %491 = @func_5553() /* ty=Tensor[(6, 9, 3), float64] */;
    %492 = %489.0;
    (%490, %491, %492)
  };
  %493() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */
}

def @func_2327(%var_2324: Tensor[(13, 10), float64], %var_2325: Tensor[(200, 4), float32], %var_2326: Tensor[(1, 21), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(200, 4), float32], Tensor[(1, 21), float32]) {
  @func_2322(%var_2324, %var_2325, %var_2326) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(200, 4), float32], Tensor[(1, 21), float32]) */
}

def @func_3580(%var_3577: Tensor[(7, 14, 4), bool], %var_3578: Tensor[(800), float32], %var_3579: Tensor[(6, 9, 3), bool]) -> (Tensor[(7, 14, 4), bool], Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(800), float32], Tensor[(21), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 270), uint8], Tensor[(6, 9, 3), float32]) {
  %520 = fn (%var_3508: Tensor[(7, 14, 4), bool], %var_3533: Tensor[(800), float32], %var_3570: Tensor[(6, 9, 3), bool]) -> (Tensor[(7, 14, 4), bool], Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(800), float32], Tensor[(21), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 270), uint8], Tensor[(6, 9, 3), float32]) {
    %494 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 14, 4), bool] */, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
    %495 = shape_of(%var_3508, dtype="int32") /* ty=Tensor[(3), int32] */;
    %496 = cast(%var_3508, dtype="bool") /* ty=Tensor[(7, 14, 4), bool] */;
    %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %498 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %499 = cast(%var_3533, dtype="float32") /* ty=Tensor[(800), float32] */;
    %500 = cast(meta[relay.Constant][30] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
    %501 = reshape(%499, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), float32] */;
    %502 = reshape(%500, newshape=[21, 1]) /* ty=Tensor[(21, 1), float32] */;
    %503 = @func_1326(%501, %502) /* ty=(Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) */;
    %504 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 270), uint8] */, dtype="uint8") /* ty=Tensor[(6, 270), uint8] */;
    %505 = reshape(%504, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
    %506 = @func_2627(%505) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) */;
    %507 = %498.0;
    %508 = cast(%507, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %509 = reshape(%508, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
    %510 = @func_2883(%509) /* ty=(Tensor[(6, 9, 3), bool],) */;
    %511 = %510.0;
    %512 = cast(%var_3570, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
    %514 = cast(%511, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %516 = logical_or(%496, %497) /* ty=Tensor[(7, 14, 4), bool] */;
    %517 = %503.1;
    %518 = %506.1;
    %519 = power(%514, %515) /* ty=Tensor[(6, 9, 3), float32] */;
    (%516, %507, %517, %var_3533, meta[relay.Constant][30] /* ty=Tensor[(21), float32] */, %518, meta[relay.Constant][31] /* ty=Tensor[(6, 270), uint8] */, %519)
  };
  %520(%var_3577, %var_3578, %var_3579) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(800), float32], Tensor[(21), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 270), uint8], Tensor[(6, 9, 3), float32]) */
}

def @func_6756() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), bool]) {
  %531 = fn () -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), bool]) {
    %521 = @func_2564() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %522 = %521.0;
    %523 = @func_3255() /* ty=(Tensor[(6, 9, 3), float32],) */;
    %524 = %523.0;
    %525 = cast(%524, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
    %526 = shape_of(%522, dtype="int32") /* ty=Tensor[(3), int32] */;
    %527 = cast(%522, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
    %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %529 = @func_4464() /* ty=Tensor[(6, 9, 3), bool] */;
    %530 = greater(%527, %528) /* ty=Tensor[(6, 9, 3), bool] */;
    (%529, %530)
  };
  %531() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), bool]) */
}

def @func_7330(%var_7328: Tensor[(24, 2), float32], %var_7329: Tensor[(312), int64]) -> (Tensor[(6, 9, 3), float64], Tensor[(4, 6, 2), uint16], Tensor[(24, 2), float32], Tensor[(312), int64], Tensor[(21, 1), float32]) {
  %544 = fn (%var_7312: Tensor[(24, 2), float32], %var_7313: Tensor[(312), int64]) -> (Tensor[(6, 9, 3), float64], Tensor[(4, 6, 2), uint16], Tensor[(24, 2), float32], Tensor[(312), int64], Tensor[(21, 1), float32]) {
    %532 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
    %533 = cast(%var_7312, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
    %534 = %532.0;
    %535 = cast(%534, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
    %536 = cast(%var_7313, dtype="int64") /* ty=Tensor[(312), int64] */;
    %537 = cast(meta[relay.Constant][32] /* ty=Tensor[(21, 1), float32] */, dtype="float32") /* ty=Tensor[(21, 1), float32] */;
    %538 = reshape(%533, newshape=[4, 6, 2]) /* ty=Tensor[(4, 6, 2), float32] */;
    %539 = reshape(%535, newshape=[162]) /* ty=Tensor[(162), bool] */;
    %540 = reshape(%536, newshape=[78, 4]) /* ty=Tensor[(78, 4), int64] */;
    %541 = reshape(%537, newshape=[21]) /* ty=Tensor[(21), float32] */;
    %542 = @func_5491(%538, %539, %540, %541) /* ty=(Tensor[(4, 6, 2), uint16], Tensor[(780), bool], Tensor[(1408), bool], Tensor[(392), bool], Tensor[(800), float32], Tensor[(162), bool], Tensor[(6, 13, 4), int64], Tensor[(78, 4), int64], Tensor[(135), float32], Tensor[(21), float32]) */;
    %543 = %542.0;
    (%534, %543, %var_7312, %var_7313, meta[relay.Constant][32] /* ty=Tensor[(21, 1), float32] */)
  };
  %544(%var_7328, %var_7329) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(4, 6, 2), uint16], Tensor[(24, 2), float32], Tensor[(312), int64], Tensor[(21, 1), float32]) */
}

def @func_2075(%var_2054: Tensor[(1890), float64]) -> (Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) {
  %545 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %546 = cast(%var_2054, dtype="float64") /* ty=Tensor[(1890), float64] */;
  %547 = reshape(%546, newshape=[15, 14, 9]) /* ty=Tensor[(15, 14, 9), float64] */;
  %548 = @func_1904(%547) /* ty=(Tensor[(15, 14, 9), float64],) */;
  %549 = %548.0;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(15, 14, 9), float64] */;
  %551 = reshape(%550, newshape=[15, 14, 9]) /* ty=Tensor[(15, 14, 9), float64] */;
  %552 = @func_1904(%551) /* ty=(Tensor[(15, 14, 9), float64],) */;
  %553 = %545.0;
  %554 = %552.0;
  (%553, %549, %var_2054, %554)
}

def @func_7489(%var_7486: Tensor[(288), float32], %var_7487: Tensor[(2, 120), int64], %var_7488: Tensor[(400, 2), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(144), float32], Tensor[(288), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(130), float64], Tensor[(2, 120), int64], Tensor[(400, 2), float32], Tensor[(8, 36), float32], Tensor[(8, 36), float64], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %599 = fn (%var_7386: Tensor[(288), float32], %var_7432: Tensor[(2, 120), int64], %var_7433: Tensor[(400, 2), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(144), float32], Tensor[(288), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(130), float64], Tensor[(2, 120), int64], Tensor[(400, 2), float32], Tensor[(8, 36), float32], Tensor[(8, 36), float64], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
    %555 = @func_4485() /* ty=(Tensor[(6, 9, 3), bool],) */;
    %556 = cast(meta[relay.Constant][34] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %557 = reshape(%556, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
    %558 = @func_3139(%557) /* ty=(Tensor[(3, 14, 11), bool],) */;
    %559 = cast(%var_7432, dtype="int64") /* ty=Tensor[(2, 120), int64] */;
    %560 = cast(%var_7433, dtype="float32") /* ty=Tensor[(400, 2), float32] */;
    %561 = reshape(%559, newshape=[240]) /* ty=Tensor[(240), int64] */;
    %562 = reshape(%560, newshape=[8, 100]) /* ty=Tensor[(8, 100), float32] */;
    %563 = @func_2426(%561, %562) /* ty=(Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) */;
    %564 = cast(meta[relay.Constant][33] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %565 = cast(%var_7386, dtype="float32") /* ty=Tensor[(288), float32] */;
    %566 = reshape(%564, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %567 = reshape(%565, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
    %568 = @func_2526(%566, %567) /* ty=(Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(1920, 1), bool], Tensor[(?, 3, 7), uint64], Tensor[(8, 36), int32], Tensor[(4, 6, 6), bool], Tensor[(6, 9, 3), float64]) */;
    %569 = %568.8;
    %570 = cast(%569, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
    %571 = sigmoid(%570) /* ty=Tensor[(8, 36), float64] */;
    %572 = cast(%571, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
    %573 = cos(%572) /* ty=Tensor[(8, 36), float64] */;
    %574 = cast(%571, dtype="uint32") /* ty=Tensor[(8, 36), uint32] */;
    %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(2), int32] */;
    %576 = cast(%573, dtype="uint32") /* ty=Tensor[(8, 36), uint32] */;
    %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %578 = multiply(%576, %577) /* ty=Tensor[(8, 36), uint32] */;
    %579 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 36), float64] */, dtype="bool") /* ty=Tensor[(8, 36), bool] */;
    %580 = shape_of(%571, dtype="int32") /* ty=Tensor[(2), int32] */;
    %581 = cast(%571, dtype="bool") /* ty=Tensor[(8, 36), bool] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %583 = logical_and(%581, %582) /* ty=Tensor[(8, 36), bool] */;
    %584 = cast(%583, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
    %585 = shape_of(%578, dtype="int32") /* ty=Tensor[(2), int32] */;
    %586 = cast(%578, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %588 = cast(%578, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
    %589 = log(%588) /* ty=Tensor[(8, 36), float64] */;
    %590 = cast(%589, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
    %591 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %592 = %555.0;
    %593 = %558.0;
    %594 = %563.5;
    %595 = floor_divide(%586, %587) /* ty=Tensor[(8, 36), float32] */;
    %596 = sqrt(%590) /* ty=Tensor[(8, 36), float64] */;
    %597 = %591.0;
    %598 = @func_2281() /* ty=Tensor[(6, 9, 3), float64] */;
    (%592, meta[relay.Constant][33] /* ty=Tensor[(144), float32] */, %var_7386, %593, meta[relay.Constant][34] /* ty=Tensor[(462), float32] */, %594, %var_7432, %var_7433, %595, %596, %597, %598)
  };
  %599(%var_7486, %var_7487, %var_7488) /* ty=(Tensor[(6, 9, 3), bool], Tensor[(144), float32], Tensor[(288), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(130), float64], Tensor[(2, 120), int64], Tensor[(400, 2), float32], Tensor[(8, 36), float32], Tensor[(8, 36), float64], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */
}

def @func_124(%var_123: Tensor[(4, 6, 6), float32]) -> Tensor[(4, 6, 6), bool] {
  %609 = fn (%var_97: Tensor[(4, 6, 6), float32]) -> Tensor[(4, 6, 6), bool] {
    %600 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 6), float32] */;
    %601 = shape_of(%var_97, dtype="int32") /* ty=Tensor[(3), int32] */;
    %602 = cast(%var_97, dtype="float32") /* ty=Tensor[(4, 6, 6), float32] */;
    %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %604 = floor_mod(%602, %603) /* ty=Tensor[(4, 6, 6), float32] */;
    %605 = cast(%604, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
    %606 = shape_of(%var_97, dtype="int32") /* ty=Tensor[(3), int32] */;
    %607 = cast(%var_97, dtype="bool") /* ty=Tensor[(4, 6, 6), bool] */;
    %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%607, %608) /* ty=Tensor[(4, 6, 6), bool] */
  };
  %609(%var_123) /* ty=Tensor[(4, 6, 6), bool] */
}

def @func_3754() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), bool]) {
  @func_3752() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), bool]) */
}

def @func_7876() -> (Tensor[(6, 9, 3), bool],) {
  @func_7874() /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_7898() -> (Tensor[(6, 9, 3), bool],) {
  @func_7896() /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_2430(%var_2428: Tensor[(240), int64], %var_2429: Tensor[(8, 100), float32]) -> (Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) {
  @func_2426(%var_2428, %var_2429) /* ty=(Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) */
}

def @func_3142(%var_3140: Tensor[(3, 14, 11), float32]) -> (Tensor[(3, 14, 11), bool],) {
  @func_3139(%var_3140) /* ty=(Tensor[(3, 14, 11), bool],) */
}

def @func_3674(%var_3672: Tensor[(15, 9), float32], %var_3673: Tensor[(6, 9, 3), float64]) -> (Tensor[(15, 9), float32], Tensor[(15, 3, 3), bool], Tensor[(6, 9, 3), float32]) {
  %625 = fn (%var_3656: Tensor[(15, 9), float32], %var_3666: Tensor[(6, 9, 3), float64]) -> (Tensor[(15, 9), float32], Tensor[(15, 3, 3), bool], Tensor[(6, 9, 3), float32]) {
    %610 = cast(%var_3656, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
    %611 = reshape(%610, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
    %612 = @func_560(%611) /* ty=(Tensor[(15, 3, 3), float32],) */;
    %613 = %612.0;
    %614 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 3, 3), float32] */, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
    %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
    %616 = cast(%613, dtype="bool") /* ty=Tensor[(15, 3, 3), bool] */;
    %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %618 = @func_2814() /* ty=Tensor[(6, 9, 3), float64] */;
    %619 = cast(%var_3666, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%618, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %623 = less(%616, %617) /* ty=Tensor[(15, 3, 3), bool] */;
    %624 = floor_mod(%621, %622) /* ty=Tensor[(6, 9, 3), float32] */;
    (%var_3656, %623, %624)
  };
  %625(%var_3672, %var_3673) /* ty=(Tensor[(15, 9), float32], Tensor[(15, 3, 3), bool], Tensor[(6, 9, 3), float32]) */
}

def @func_2322(%var_2307: Tensor[(13, 10), float64], %var_2308: Tensor[(200, 4), float32], %var_2309: Tensor[(1, 21), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(200, 4), float32], Tensor[(1, 21), float32]) {
  %626 = cast(%var_2307, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %627 = cast(%var_2307, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
  %628 = cast(%var_2308, dtype="float32") /* ty=Tensor[(200, 4), float32] */;
  %629 = cast(%var_2309, dtype="float32") /* ty=Tensor[(1, 21), float32] */;
  %630 = reshape(%626, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %631 = reshape(%627, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %632 = reshape(%628, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
  %633 = reshape(%629, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %634 = @func_1641(%630, %631, %632, %633) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
  %635 = @func_2171() /* ty=Tensor[(6, 9, 3), float64] */;
  %636 = %634.2;
  (%635, %636, %var_2307, %var_2308, %var_2309)
}

def @func_2245(%var_2243: Tensor[(1890), float64], %var_2244: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), float64], Tensor[(1890), float32], Tensor[(6, 9, 3), float64]) {
  %650 = fn (%var_2206: Tensor[(1890), float64], %var_2235: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), float64], Tensor[(1890), float32], Tensor[(6, 9, 3), float64]) {
    %637 = cast(%var_2206, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %638 = reshape(%637, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
    %639 = @func_2075(%638) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) */;
    %640 = cast(%var_2206, dtype="float32") /* ty=Tensor[(1890), float32] */;
    %641 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
    %642 = %641.0;
    %643 = cast(%var_2235, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%642, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %647 = %639.0;
    %648 = atan(%640) /* ty=Tensor[(1890), float32] */;
    %649 = maximum(%645, %646) /* ty=Tensor[(6, 9, 3), float64] */;
    (%647, %648, %649)
  };
  %650(%var_2243, %var_2244) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(1890), float32], Tensor[(6, 9, 3), float64]) */
}

def @func_4955(%var_4953: Tensor[(1, 16, 7), int64], %var_4954: Tensor[(9, 16, 7), int64]) -> Tensor[(9, 16, 7), bool] {
  %653 = fn (%var_4942: Tensor[(1, 16, 7), int64], %var_4943: Tensor[(9, 16, 7), int64]) -> Tensor[(9, 16, 7), bool] {
    %651 = cast(%var_4942, dtype="bool") /* ty=Tensor[(1, 16, 7), bool] */;
    %652 = cast(%var_4943, dtype="bool") /* ty=Tensor[(9, 16, 7), bool] */;
    greater_equal(%651, %652) /* ty=Tensor[(9, 16, 7), bool] */
  };
  %653(%var_4953, %var_4954) /* ty=Tensor[(9, 16, 7), bool] */
}

def @func_6808(%var_6806: Tensor[(135), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) {
  %654 = @func_4933() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %655 = @func_3068() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %656 = cast(%var_6806, dtype="float32") /* ty=Tensor[(135), float32] */;
  %657 = reshape(%656, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
  %658 = @func_560(%657) /* ty=(Tensor[(15, 3, 3), float32],) */;
  %659 = %654.0;
  %660 = %655.0;
  %661 = %658.0;
  (%659, %660, %661, %var_6806)
}

def @func_7008(%var_7005: bool, %var_7006: Tensor[(2, 14, 8), bool], %var_7007: Tensor[(1, 130), float64]) -> (Tensor[(2, 14, 8), float32], Tensor[(12, 15, 9), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(270, 6), float32], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float32]) {
  @func_7003(%var_7005, %var_7006, %var_7007) /* ty=(Tensor[(2, 14, 8), float32], Tensor[(12, 15, 9), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(270, 6), float32], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float32]) */
}

def @func_6811(%var_6809: Tensor[(135), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) {
  @func_6808(%var_6809) /* ty=(Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */
}

def @func_7525() -> (Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64]) {
  @func_7523() /* ty=(Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64]) */
}

def @func_4847() -> Tensor[(6, 9, 3), float64] {
  %663 = fn () -> Tensor[(6, 9, 3), float64] {
    %662 = @func_3244() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %662.0
  };
  %663() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_7102() -> Tensor[(6, 9, 3), float64] {
  %664 = fn () -> Tensor[(6, 9, 3), float64] {
    @func_6594() /* ty=Tensor[(6, 9, 3), float64] */
  };
  %664() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_5375(%var_5370: Tensor[(8, 16, 11), bool], %var_5371: Tensor[(8, 16, 11), bool], %var_5372: Tensor[(392), bool], %var_5373: Tensor[(8, 100), float32], %var_5374: Tensor[(162), bool]) -> (Tensor[(8, 16, 11), bool], Tensor[(6, 9, 3), float64], Tensor[(392), bool], Tensor[(8, 100), float32], Tensor[(162), bool], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) {
  %683 = fn (%var_5353: Tensor[(8, 16, 11), bool], %var_5354: Tensor[(8, 16, 11), bool], %var_5361: Tensor[(392), bool], %var_5362: Tensor[(8, 100), float32], %var_5363: Tensor[(162), bool]) -> (Tensor[(8, 16, 11), bool], Tensor[(6, 9, 3), float64], Tensor[(392), bool], Tensor[(8, 100), float32], Tensor[(162), bool], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) {
    %665 = cast(%var_5354, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
    %666 = shape_of(%var_5353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %667 = cast(%var_5353, dtype="bool") /* ty=Tensor[(8, 16, 11), bool] */;
    %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %669 = cast(%var_5361, dtype="bool") /* ty=Tensor[(392), bool] */;
    %670 = cast(%var_5362, dtype="float32") /* ty=Tensor[(8, 100), float32] */;
    %671 = cast(%var_5363, dtype="bool") /* ty=Tensor[(162), bool] */;
    %672 = reshape(%669, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), bool] */;
    %673 = reshape(%670, newshape=[800]) /* ty=Tensor[(800), float32] */;
    %674 = reshape(%671, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), bool] */;
    %675 = @func_3576(%672, %673, %674) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(800), float32], Tensor[(21), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 270), uint8], Tensor[(6, 9, 3), float32]) */;
    %676 = cast(meta[relay.Constant][38] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
    %677 = cast(meta[relay.Constant][38] /* ty=Tensor[(780), bool] */, dtype="bool") /* ty=Tensor[(780), bool] */;
    %678 = reshape(%676, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), bool] */;
    %679 = reshape(%677, newshape=[13, 10, 6]) /* ty=Tensor[(13, 10, 6), bool] */;
    %680 = logical_and(%667, %668) /* ty=Tensor[(8, 16, 11), bool] */;
    %681 = %675.5;
    %682 = @func_3426(%678, %679) /* ty=Tensor[(13, 10, 6), bool] */;
    (%680, %681, %var_5361, %var_5362, %var_5363, %682, meta[relay.Constant][38] /* ty=Tensor[(780), bool] */)
  };
  %683(%var_5370, %var_5371, %var_5372, %var_5373, %var_5374) /* ty=(Tensor[(8, 16, 11), bool], Tensor[(6, 9, 3), float64], Tensor[(392), bool], Tensor[(8, 100), float32], Tensor[(162), bool], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) */
}

def @func_5700() -> Tensor[(6, 9, 3), float64] {
  @func_4907() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_7194() -> (Tensor[(6, 9, 3), bool], Tensor[(9, 11, 8), bool], Tensor[(792, 11), uint16]) {
  %684 = @func_5801() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %685 = cast(meta[relay.Constant][39] /* ty=Tensor[(792, 1), bool] */, dtype="bool") /* ty=Tensor[(792, 1), bool] */;
  %686 = cast(meta[relay.Constant][39] /* ty=Tensor[(792, 1), bool] */, dtype="bool") /* ty=Tensor[(792, 1), bool] */;
  %687 = reshape(%685, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %688 = reshape(%686, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %689 = @func_6118(%687, %688) /* ty=(Tensor[(9, 11, 8), bool],) */;
  %690 = cast(meta[relay.Constant][39] /* ty=Tensor[(792, 1), bool] */, dtype="uint16") /* ty=Tensor[(792, 1), uint16] */;
  %691 = cast(meta[relay.Constant][40] /* ty=Tensor[(792, 11), bool] */, dtype="uint16") /* ty=Tensor[(792, 11), uint16] */;
  %692 = %684.0;
  %693 = %689.0;
  %694 = bitwise_xor(%690, %691) /* ty=Tensor[(792, 11), uint16] */;
  (%692, %693, %694)
}

def @func_6711(%var_6684: Tensor[(2912), int32], %var_6709: Tensor[(792), bool]) -> (Tensor[(6, 9, 3), bool], Tensor[(16, 14, 13), float64], Tensor[(9, 11, 8), bool], Tensor[(792), bool]) {
  %695 = @func_6521() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
  %696 = cast(%var_6684, dtype="int32") /* ty=Tensor[(2912), int32] */;
  %697 = reshape(%696, newshape=[16, 14, 13]) /* ty=Tensor[(16, 14, 13), int32] */;
  %698 = @func_2792(%697) /* ty=Tensor[(16, 14, 13), float32] */;
  %699 = cast(%var_6684, dtype="float64") /* ty=Tensor[(2912), float64] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%698, dtype="float64") /* ty=Tensor[(16, 14, 13), float64] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %703 = cast(%var_6709, dtype="bool") /* ty=Tensor[(792), bool] */;
  %704 = cast(%var_6709, dtype="bool") /* ty=Tensor[(792), bool] */;
  %705 = reshape(%703, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %706 = reshape(%704, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), bool] */;
  %707 = @func_6118(%705, %706) /* ty=(Tensor[(9, 11, 8), bool],) */;
  %708 = %695.0;
  %709 = floor_mod(%701, %702) /* ty=Tensor[(16, 14, 13), float64] */;
  %710 = %707.0;
  (%708, %709, %710, %var_6709)
}

def @func_4451(%var_4449: Tensor[(26, 5), float64], %var_4450: Tensor[(800), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(13, ?, 10), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32]) {
  @func_4447(%var_4449, %var_4450) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(13, ?, 10), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32]) */
}

def @func_872(%var_871: Tensor[(12, 12, 2), float32]) -> (Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) {
  %717 = fn (%var_864: Tensor[(12, 12, 2), float32]) -> (Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) {
    %711 = cast(%var_864, dtype="float32") /* ty=Tensor[(12, 12, 2), float32] */;
    %712 = cast(meta[relay.Constant][41] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %713 = reshape(%712, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
    %714 = @func_560(%713) /* ty=(Tensor[(15, 3, 3), float32],) */;
    %715 = cosh(%711) /* ty=Tensor[(12, 12, 2), float32] */;
    %716 = %714.0;
    (%715, %716, meta[relay.Constant][41] /* ty=Tensor[(135), float32] */)
  };
  %717(%var_871) /* ty=(Tensor[(12, 12, 2), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */
}

def @func_5182() -> (Tensor[(6, 9, 3), float64],) {
  %718 = @func_2171() /* ty=Tensor[(6, 9, 3), float64] */;
  (%718,)
}

def @func_5841() -> (Tensor[(6, 9, 3), float32],) {
  %719 = @func_3255() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %720 = %719.0;
  (%720,)
}

def @func_1934(%var_1932: Tensor[(6, 8, 5), int64]) -> (Tensor[(6, 8, 5), int64],) {
  @func_1931(%var_1932) /* ty=(Tensor[(6, 8, 5), int64],) */
}

def @func_4708() -> Tensor[(6, 9, 3), float64] {
  %722 = fn () -> Tensor[(6, 9, 3), float64] {
    %721 = @func_2564() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %721.0
  };
  %722() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_6101() -> (Tensor[(6, 9, 3), float32],) {
  @func_6099() /* ty=(Tensor[(6, 9, 3), float32],) */
}

def @main(%var_8486: Tensor[(6, 6, 12), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(6, 6, 12), float64]) {
  %723 = @func_3502() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(1890), int8]) */;
  %724 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 6, 12), float32] */, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
  %725 = shape_of(%var_8486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%var_8486, dtype="float32") /* ty=Tensor[(6, 6, 12), float32] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %728 = divide(%726, %727) /* ty=Tensor[(6, 6, 12), float32] */;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(6, 6, 12), float64] */;
  %730 = @func_5136() /* ty=Tensor[(6, 9, 3), float64] */;
  %731 = %723.1;
  %732 = sinh(%729) /* ty=Tensor[(6, 6, 12), float64] */;
  (%730, %731, %732)
}

def @func_5121(%var_5094: Tensor[(112), float32], %var_5095: Tensor[(1, 130), float64], %var_5110: Tensor[(144), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(8, 14, ?), int64], Tensor[(112), float32], Tensor[(800), float32], Tensor[(1, 130), float32], Tensor[(6, 9, 3), float64], Tensor[(98, 4), bool], Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), bool]) {
  %733 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %734 = cast(%var_5094, dtype="float32") /* ty=Tensor[(112), float32] */;
  %735 = cast(%var_5095, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %736 = cast(meta[relay.Constant][43] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %737 = reshape(%734, newshape=[8, 14, 1]) /* ty=Tensor[(8, 14, 1), float32] */;
  %738 = reshape(%735, newshape=[26, 5]) /* ty=Tensor[(26, 5), float64] */;
  %739 = reshape(%736, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %740 = @func_3406(%737, %738, %739) /* ty=(Tensor[(8, 14, ?), int64], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(8, 14, ?), float64]) */;
  %741 = cast(%var_5095, dtype="float32") /* ty=Tensor[(1, 130), float32] */;
  %742 = cast(meta[relay.Constant][44] /* ty=Tensor[(98, 4), bool] */, dtype="bool") /* ty=Tensor[(98, 4), bool] */;
  %743 = cast(meta[relay.Constant][43] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %744 = %733.0;
  %745 = cast(%744, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
  %746 = reshape(%742, newshape=[7, 14, 4]) /* ty=Tensor[(7, 14, 4), bool] */;
  %747 = reshape(%743, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %748 = reshape(%745, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), bool] */;
  %749 = @func_3576(%746, %747, %748) /* ty=(Tensor[(7, 14, 4), bool], Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(800), float32], Tensor[(21), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 270), uint8], Tensor[(6, 9, 3), float32]) */;
  %750 = cast(%var_5110, dtype="float32") /* ty=Tensor[(144), float32] */;
  %751 = reshape(%750, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), float32] */;
  %752 = %740.0;
  %753 = atanh(%741) /* ty=Tensor[(1, 130), float32] */;
  %754 = %749.5;
  %755 = @func_122(%751) /* ty=Tensor[(4, 6, 6), bool] */;
  %756 = @func_4464() /* ty=Tensor[(6, 9, 3), bool] */;
  (%744, %752, %var_5094, meta[relay.Constant][43] /* ty=Tensor[(800), float32] */, %753, %754, meta[relay.Constant][44] /* ty=Tensor[(98, 4), bool] */, %755, %var_5110, %756)
}

def @func_7733() -> (Tensor[(6, 9, 3), float32],) {
  %759 = fn () -> (Tensor[(6, 9, 3), float32],) {
    %757 = @func_7280() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) */;
    %758 = %757.1;
    (%758,)
  };
  %759() /* ty=(Tensor[(6, 9, 3), float32],) */
}

def @func_5786() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %763 = fn () -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
    %760 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %761 = @func_4846() /* ty=Tensor[(6, 9, 3), float64] */;
    %762 = %760.0;
    (%761, %762)
  };
  %763() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */
}

def @func_3246() -> (Tensor[(6, 9, 3), float64],) {
  @func_3244() /* ty=(Tensor[(6, 9, 3), float64],) */
}

def @func_3709(%var_3688: Tensor[(14, 2, 14), int16]) -> (Tensor[(14, 2, 14), bool], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), uint16], Tensor[(8, 30), int64], Tensor[(800), float32]) {
  %764 = cast(%var_3688, dtype="bool") /* ty=Tensor[(14, 2, 14), bool] */;
  %765 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(14, 2, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(meta[relay.Constant][45] /* ty=Tensor[(14, 2, 14), int16] */, dtype="bool") /* ty=Tensor[(14, 2, 14), bool] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %768 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %769 = cast(meta[relay.Constant][46] /* ty=Tensor[(8, 30), int64] */, dtype="int64") /* ty=Tensor[(8, 30), int64] */;
  %770 = cast(meta[relay.Constant][47] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %771 = reshape(%769, newshape=[240]) /* ty=Tensor[(240), int64] */;
  %772 = reshape(%770, newshape=[8, 100]) /* ty=Tensor[(8, 100), float32] */;
  %773 = @func_2426(%771, %772) /* ty=(Tensor[(6, 9, 3), int32], Tensor[(6, 9, 3), uint16], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(21), float32], Tensor[(130), float64], Tensor[(21), float32], Tensor[(8, 100), bool]) */;
  %774 = equal(%766, %767) /* ty=Tensor[(14, 2, 14), bool] */;
  %775 = %768.0;
  %776 = @func_3210() /* ty=Tensor[(6, 9, 3), float32] */;
  %777 = %773.1;
  (%774, %775, %776, %777, meta[relay.Constant][46] /* ty=Tensor[(8, 30), int64] */, meta[relay.Constant][47] /* ty=Tensor[(800), float32] */)
}

def @func_4464() -> Tensor[(6, 9, 3), bool] {
  @func_3004() /* ty=Tensor[(6, 9, 3), bool] */
}

def @func_3068() -> (Tensor[(6, 9, 3), float64],) {
  %778 = @func_2281() /* ty=Tensor[(6, 9, 3), float64] */;
  (%778,)
}

def @func_5184() -> (Tensor[(6, 9, 3), float64],) {
  @func_5182() /* ty=(Tensor[(6, 9, 3), float64],) */
}

def @func_5588() -> (Tensor[(6, 9, 3), bool],) {
  %780 = fn () -> (Tensor[(6, 9, 3), bool],) {
    %779 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
    (%779,)
  };
  %780() /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_3430(%var_3428: Tensor[(13, 10, 6), bool], %var_3429: Tensor[(13, 10, 6), bool]) -> Tensor[(13, 10, 6), bool] {
  @func_3426(%var_3428, %var_3429) /* ty=Tensor[(13, 10, 6), bool] */
}

def @func_8285() -> (Tensor[(6, 9, 3), float32],) {
  %781 = @func_5733() /* ty=Tensor[(6, 9, 3), float32] */;
  (%781,)
}

def @func_6427(%var_6425: Tensor[(21), float32], %var_6426: Tensor[(77, 6), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(1, 130), float64], Tensor[(13, 10), float64], Tensor[(21), float32], Tensor[(77, 6), float32]) {
  %792 = fn (%var_6407: Tensor[(21), float32], %var_6408: Tensor[(77, 6), float32]) -> (Tensor[(6, 9, 3), float32], Tensor[(1, 130), float64], Tensor[(13, 10), float64], Tensor[(21), float32], Tensor[(77, 6), float32]) {
    %782 = @func_6099() /* ty=(Tensor[(6, 9, 3), float32],) */;
    %783 = cast(meta[relay.Constant][48] /* ty=Tensor[(13, 10), float64] */, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
    %784 = cast(%var_6407, dtype="float32") /* ty=Tensor[(21), float32] */;
    %785 = cast(%var_6408, dtype="float32") /* ty=Tensor[(77, 6), float32] */;
    %786 = reshape(%783, newshape=[1, 130]) /* ty=Tensor[(1, 130), float64] */;
    %787 = reshape(%784, newshape=[21]) /* ty=Tensor[(21), float32] */;
    %788 = reshape(%785, newshape=[462]) /* ty=Tensor[(462), float32] */;
    %789 = @func_3801(%786, %787, %788) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(5, 10, 16), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(3, 14, 11), bool], Tensor[(462), float32]) */;
    %790 = %782.0;
    %791 = %789.2;
    (%790, %791, meta[relay.Constant][48] /* ty=Tensor[(13, 10), float64] */, %var_6407, %var_6408)
  };
  %792(%var_6425, %var_6426) /* ty=(Tensor[(6, 9, 3), float32], Tensor[(1, 130), float64], Tensor[(13, 10), float64], Tensor[(21), float32], Tensor[(77, 6), float32]) */
}

def @func_7745() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64]) {
  @func_7743() /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float64]) */
}

def @func_4670(%var_4669: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), float64],) {
  %800 = fn (%var_4652: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), float64],) {
    %793 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %794 = %793.0;
    %795 = cast(%var_4652, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%794, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %799 = divide(%797, %798) /* ty=Tensor[(6, 9, 3), float64] */;
    (%799,)
  };
  %800(%var_4669) /* ty=(Tensor[(6, 9, 3), float64],) */
}

def @func_8145() -> (Tensor[(6, 9, 3), float32],) {
  %801 = @func_7732() /* ty=(Tensor[(6, 9, 3), float32],) */;
  %802 = %801.0;
  (%802,)
}

def @func_2723(%var_2721: Tensor[(13, 14, 7), float64], %var_2722: Tensor[(24, 10), int64]) -> (Tensor[(13, 14, 7), bool], Tensor[(6, 8, 5), int64], Tensor[(24, 10), int64]) {
  %814 = fn (%var_2692: Tensor[(13, 14, 7), float64], %var_2717: Tensor[(24, 10), int64]) -> (Tensor[(13, 14, 7), bool], Tensor[(6, 8, 5), int64], Tensor[(24, 10), int64]) {
    %803 = cast(%var_2692, dtype="float64") /* ty=Tensor[(13, 14, 7), float64] */;
    %804 = cosh(%803) /* ty=Tensor[(13, 14, 7), float64] */;
    %805 = cast(%804, dtype="bool") /* ty=Tensor[(13, 14, 7), bool] */;
    %806 = shape_of(%var_2692, dtype="int32") /* ty=Tensor[(3), int32] */;
    %807 = cast(%var_2692, dtype="bool") /* ty=Tensor[(13, 14, 7), bool] */;
    %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %809 = cast(%var_2717, dtype="int64") /* ty=Tensor[(24, 10), int64] */;
    %810 = reshape(%809, newshape=[6, 8, 5]) /* ty=Tensor[(6, 8, 5), int64] */;
    %811 = @func_1931(%810) /* ty=(Tensor[(6, 8, 5), int64],) */;
    %812 = logical_and(%807, %808) /* ty=Tensor[(13, 14, 7), bool] */;
    %813 = %811.0;
    (%812, %813, %var_2717)
  };
  %814(%var_2721, %var_2722) /* ty=(Tensor[(13, 14, 7), bool], Tensor[(6, 8, 5), int64], Tensor[(24, 10), int64]) */
}

def @func_7280() -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), float32]) {
  %815 = @func_4861() /* ty=Tensor[(6, 9, 3), bool] */;
  %816 = @func_6896() /* ty=Tensor[(6, 9, 3), float32] */;
  (%815, %816)
}

def @func_4141() -> Tensor[(6, 9, 3), float32] {
  @func_4139() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_4332() -> Tensor[(6, 9, 3), float64] {
  %818 = fn () -> Tensor[(6, 9, 3), float64] {
    %817 = @func_1986() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(135), float32], Tensor[(288), float32]) */;
    %817.0
  };
  %818() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_4987(%var_4984: Tensor[(945, 2), float64], %var_4985: Tensor[(288), float32], %var_4986: Tensor[(288), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(144, 1), float32], Tensor[(945, 2), float64], Tensor[(288), int8]) {
  @func_4982(%var_4984, %var_4985, %var_4986) /* ty=(Tensor[(6, 9, 3), bool], Tensor[(144, 1), float32], Tensor[(945, 2), float64], Tensor[(288), int8]) */
}

def @func_5733() -> Tensor[(6, 9, 3), float32] {
  @func_3210() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_2885(%var_2884: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), bool],) {
  %826 = fn (%var_2855: Tensor[(6, 9, 3), float64]) -> (Tensor[(6, 9, 3), bool],) {
    %819 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %820 = %819.0;
    %821 = cast(%var_2855, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
    %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
    %823 = cast(%820, dtype="bool") /* ty=Tensor[(6, 9, 3), bool] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %825 = equal(%823, %824) /* ty=Tensor[(6, 9, 3), bool] */;
    (%825,)
  };
  %826(%var_2884) /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_8014(%var_8012: Tensor[(392), int16], %var_8013: Tensor[(240), int64]) -> (Tensor[(6, 9, 3), float64], Tensor[(800), float32], Tensor[(392), int16], Tensor[(135), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float32], Tensor[(6, 8, 5), int64], Tensor[(240), int64]) {
  @func_8010(%var_8012, %var_8013) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(800), float32], Tensor[(392), int16], Tensor[(135), float32], Tensor[(288), float32], Tensor[(6, 9, 3), float32], Tensor[(6, 8, 5), int64], Tensor[(240), int64]) */
}

def @func_2281() -> Tensor[(6, 9, 3), float64] {
  @func_2171() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_1906(%var_1905: Tensor[(15, 14, 9), float64]) -> (Tensor[(15, 14, 9), float64],) {
  %829 = fn (%var_1901: Tensor[(15, 14, 9), float64]) -> (Tensor[(15, 14, 9), float64],) {
    %827 = cast(%var_1901, dtype="float64") /* ty=Tensor[(15, 14, 9), float64] */;
    %828 = atanh(%827) /* ty=Tensor[(15, 14, 9), float64] */;
    (%828,)
  };
  %829(%var_1905) /* ty=(Tensor[(15, 14, 9), float64],) */
}

def @func_3244() -> (Tensor[(6, 9, 3), float64],) {
  %830 = @func_2171() /* ty=Tensor[(6, 9, 3), float64] */;
  (%830,)
}

def @func_3411(%var_3408: Tensor[(8, 14, 1), float32], %var_3409: Tensor[(26, 5), float64], %var_3410: Tensor[(800), float32]) -> (Tensor[(8, 14, ?), int64], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(8, 14, ?), float64]) {
  @func_3406(%var_3408, %var_3409, %var_3410) /* ty=(Tensor[(8, 14, ?), int64], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32], Tensor[(8, 14, ?), float64]) */
}

def @func_2814() -> Tensor[(6, 9, 3), float64] {
  @func_2171() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_2566() -> (Tensor[(6, 9, 3), float64],) {
  @func_2564() /* ty=(Tensor[(6, 9, 3), float64],) */
}

def @func_4000(%var_3998: Tensor[(6, 9, 3), float32], %var_3999: Tensor[(24, 80), bool]) -> (Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8], Tensor[(24, 80), bool], Tensor[(6, 9, 3), float32], Tensor[(15, 9), float32], Tensor[(6, 8, 5), int64], Tensor[(24, 10), int64], Tensor[(1620), uint8], Tensor[(9, 14, 14), float32], Tensor[(1764), float32], Tensor[(6, 9, 3), bool]) {
  %869 = fn (%var_3913: Tensor[(6, 9, 3), float32], %var_3934: Tensor[(24, 80), bool]) -> (Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8], Tensor[(24, 80), bool], Tensor[(6, 9, 3), float32], Tensor[(15, 9), float32], Tensor[(6, 8, 5), int64], Tensor[(24, 10), int64], Tensor[(1620), uint8], Tensor[(9, 14, 14), float32], Tensor[(1764), float32], Tensor[(6, 9, 3), bool]) {
    %831 = @func_3255() /* ty=(Tensor[(6, 9, 3), float32],) */;
    %832 = %831.0;
    %833 = cast(%var_3913, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
    %835 = cast(%832, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %837 = cast(meta[relay.Constant][49] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %838 = reshape(%837, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float32] */;
    %839 = @func_560(%838) /* ty=(Tensor[(15, 3, 3), float32],) */;
    %840 = cast(%var_3934, dtype="bool") /* ty=Tensor[(24, 80), bool] */;
    %841 = cast(%var_3934, dtype="bool") /* ty=Tensor[(24, 80), bool] */;
    %842 = reshape(%840, newshape=[8, 16, 15]) /* ty=Tensor[(8, 16, 15), bool] */;
    %843 = reshape(%841, newshape=[8, 16, 15]) /* ty=Tensor[(8, 16, 15), bool] */;
    %844 = @func_1770(%842, %843) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8]) */;
    %845 = cast(meta[relay.Constant][49] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %846 = mod(%835, %836) /* ty=Tensor[(6, 9, 3), float32] */;
    %847 = cast(%846, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %848 = reshape(%845, newshape=[15, 9]) /* ty=Tensor[(15, 9), float32] */;
    %849 = reshape(%847, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
    %850 = @func_3671(%848, %849) /* ty=(Tensor[(15, 9), float32], Tensor[(15, 3, 3), bool], Tensor[(6, 9, 3), float32]) */;
    %851 = cast(meta[relay.Constant][50] /* ty=Tensor[(24, 10), int64] */, dtype="int64") /* ty=Tensor[(24, 10), int64] */;
    %852 = cast(meta[relay.Constant][51] /* ty=Tensor[(1620), uint8] */, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
    %853 = reshape(%851, newshape=[240]) /* ty=Tensor[(240), int64] */;
    %854 = reshape(%852, newshape=[1620]) /* ty=Tensor[(1620), uint8] */;
    %855 = @func_3314(%853, %854) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 8, 5), int64], Tensor[(240), int64], Tensor[(12, 15, 9), float32], Tensor[(1620), uint8]) */;
    %856 = cast(meta[relay.Constant][52] /* ty=Tensor[(1764), float32] */, dtype="float32") /* ty=Tensor[(1764), float32] */;
    %857 = reshape(%856, newshape=[9, 14, 14]) /* ty=Tensor[(9, 14, 14), float32] */;
    %858 = @func_2655(%857) /* ty=(Tensor[(9, 14, 14), float32],) */;
    %859 = cast(%var_3913, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %860 = reshape(%859, newshape=[6, 9, 3]) /* ty=Tensor[(6, 9, 3), float64] */;
    %861 = @func_2883(%860) /* ty=(Tensor[(6, 9, 3), bool],) */;
    %862 = %839.0;
    %863 = %844.2;
    %864 = @func_2645() /* ty=Tensor[(6, 9, 3), float32] */;
    %865 = %850.0;
    %866 = %855.1;
    %867 = %858.0;
    %868 = %861.0;
    (%846, %862, meta[relay.Constant][49] /* ty=Tensor[(135), float32] */, %863, %var_3934, %864, %865, %866, meta[relay.Constant][50] /* ty=Tensor[(24, 10), int64] */, meta[relay.Constant][51] /* ty=Tensor[(1620), uint8] */, %867, meta[relay.Constant][52] /* ty=Tensor[(1764), float32] */, %868)
  };
  %869(%var_3998, %var_3999) /* ty=(Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8], Tensor[(24, 80), bool], Tensor[(6, 9, 3), float32], Tensor[(15, 9), float32], Tensor[(6, 8, 5), int64], Tensor[(24, 10), int64], Tensor[(1620), uint8], Tensor[(9, 14, 14), float32], Tensor[(1764), float32], Tensor[(6, 9, 3), bool]) */
}

def @func_2078(%var_2076: Tensor[(1890), float64]) -> (Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) {
  @func_2075(%var_2076) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) */
}

def @func_4486() -> (Tensor[(6, 9, 3), bool],) {
  %872 = fn () -> (Tensor[(6, 9, 3), bool],) {
    %870 = @func_3752() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), bool]) */;
    %871 = %870.1;
    (%871,)
  };
  %872() /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_3426(%var_3413: Tensor[(13, 10, 6), bool], %var_3414: Tensor[(13, 10, 6), bool]) -> Tensor[(13, 10, 6), bool] {
  %873 = cast(%var_3414, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
  %874 = shape_of(%var_3413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %875 = cast(%var_3413, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%875, %876) /* ty=Tensor[(13, 10, 6), bool] */
}

def @func_2529(%var_2527: Tensor[(144), float32], %var_2528: Tensor[(8, 36), float32]) -> (Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(1920, 1), bool], Tensor[(?, 3, 7), uint64], Tensor[(8, 36), int32], Tensor[(4, 6, 6), bool], Tensor[(6, 9, 3), float64]) {
  %917 = fn (%var_2461: Tensor[(144), float32], %var_2509: Tensor[(8, 36), float32]) -> (Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(1920, 1), bool], Tensor[(?, 3, 7), uint64], Tensor[(8, 36), int32], Tensor[(4, 6, 6), bool], Tensor[(6, 9, 3), float64]) {
    %877 = cast(%var_2461, dtype="float32") /* ty=Tensor[(144), float32] */;
    %878 = reshape(%877, newshape=[4, 6, 6]) /* ty=Tensor[(4, 6, 6), float32] */;
    %879 = cast(meta[relay.Constant][53] /* ty=Tensor[(1890), float64] */, dtype="float64") /* ty=Tensor[(1890), float64] */;
    %880 = reshape(%879, newshape=[1890]) /* ty=Tensor[(1890), float64] */;
    %881 = @func_2075(%880) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(15, 14, 9), float64], Tensor[(1890), float64], Tensor[(15, 14, 9), float64]) */;
    %882 = cast(meta[relay.Constant][54] /* ty=Tensor[(1920, 1), bool] */, dtype="bool") /* ty=Tensor[(1920, 1), bool] */;
    %883 = cast(meta[relay.Constant][54] /* ty=Tensor[(1920, 1), bool] */, dtype="bool") /* ty=Tensor[(1920, 1), bool] */;
    %884 = reshape(%882, newshape=[8, 16, 15]) /* ty=Tensor[(8, 16, 15), bool] */;
    %885 = reshape(%883, newshape=[8, 16, 15]) /* ty=Tensor[(8, 16, 15), bool] */;
    %886 = @func_1770(%884, %885) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(135), float32], Tensor[(8, 16, 15), int8]) */;
    %887 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 21), float32] */, dtype="float32") /* ty=Tensor[(1, 21), float32] */;
    %888 = cast(meta[relay.Constant][56] /* ty=Tensor[(8, 36), float32] */, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
    %889 = reshape(%887, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
    %890 = reshape(%888, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
    %891 = @func_1213(%889, %890) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) */;
    %892 = %891.3;
    %893 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 21), float32] */, dtype="uint64") /* ty=Tensor[(1, 21), uint64] */;
    %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(3), int32] */;
    %895 = cast(%892, dtype="uint64") /* ty=Tensor[(?, 3, 7), uint64] */;
    %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %897 = cast(%var_2509, dtype="int32") /* ty=Tensor[(8, 36), int32] */;
    %898 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(8, 36), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %899 = cast(meta[relay.Constant][56] /* ty=Tensor[(8, 36), float32] */, dtype="int32") /* ty=Tensor[(8, 36), int32] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %901 = cast(meta[relay.Constant][55] /* ty=Tensor[(1, 21), float32] */, dtype="float32") /* ty=Tensor[(1, 21), float32] */;
    %902 = left_shift(%899, %900) /* ty=Tensor[(8, 36), int32] */;
    %903 = cast(%902, dtype="float32") /* ty=Tensor[(8, 36), float32] */;
    %904 = reshape(%901, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), float32] */;
    %905 = reshape(%903, newshape=[8, 36]) /* ty=Tensor[(8, 36), float32] */;
    %906 = @func_1213(%904, %905) /* ty=(Tensor[(15, 3, 3), float32], Tensor[(8, 36), float32], Tensor[(15, 3, 3), float32], Tensor[(?, 3, 7), int8], Tensor[(1, 3, 7), float32], Tensor[(15, 3, 3), float32], Tensor[(4, 6, 6), bool], Tensor[(144), float32]) */;
    %907 = @func_2017() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */;
    %908 = %907.0;
    %909 = cast(%908, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %910 = @func_122(%878) /* ty=Tensor[(4, 6, 6), bool] */;
    %911 = @func_2281() /* ty=Tensor[(6, 9, 3), float64] */;
    %912 = %881.0;
    %913 = %886.2;
    %914 = logical_xor(%895, %896) /* ty=Tensor[(?, 3, 7), uint64] */;
    %915 = %906.6;
    %916 = sigmoid(%909) /* ty=Tensor[(6, 9, 3), float64] */;
    (%910, %var_2461, %911, %912, meta[relay.Constant][53] /* ty=Tensor[(1890), float64] */, %913, meta[relay.Constant][54] /* ty=Tensor[(1920, 1), bool] */, %914, %902, %915, %916)
  };
  %917(%var_2527, %var_2528) /* ty=(Tensor[(4, 6, 6), bool], Tensor[(144), float32], Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64], Tensor[(1890), float64], Tensor[(8, 16, 15), int8], Tensor[(1920, 1), bool], Tensor[(?, 3, 7), uint64], Tensor[(8, 36), int32], Tensor[(4, 6, 6), bool], Tensor[(6, 9, 3), float64]) */
}

def @func_3651(%var_3649: Tensor[(13, 10), float64], %var_3650: Tensor[(21), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(800), float32], Tensor[(21), float32]) {
  %933 = fn (%var_3639: Tensor[(13, 10), float64], %var_3641: Tensor[(21), float32]) -> (Tensor[(6, 9, 3), bool], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(800), float32], Tensor[(21), float32]) {
    %918 = cast(meta[relay.Constant][57] /* ty=Tensor[(462), float32] */, dtype="float32") /* ty=Tensor[(462), float32] */;
    %919 = reshape(%918, newshape=[3, 14, 11]) /* ty=Tensor[(3, 14, 11), float32] */;
    %920 = @func_3139(%919) /* ty=(Tensor[(3, 14, 11), bool],) */;
    %921 = cast(%var_3639, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
    %922 = cast(%var_3639, dtype="float64") /* ty=Tensor[(13, 10), float64] */;
    %923 = cast(meta[relay.Constant][58] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
    %924 = cast(%var_3641, dtype="float32") /* ty=Tensor[(21), float32] */;
    %925 = reshape(%921, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
    %926 = reshape(%922, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
    %927 = reshape(%923, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
    %928 = reshape(%924, newshape=[21]) /* ty=Tensor[(21), float32] */;
    %929 = @func_1641(%925, %926, %927, %928) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
    %930 = @func_3004() /* ty=Tensor[(6, 9, 3), bool] */;
    %931 = %920.0;
    %932 = %929.2;
    (%930, %931, meta[relay.Constant][57] /* ty=Tensor[(462), float32] */, %932, %var_3639, meta[relay.Constant][58] /* ty=Tensor[(800), float32] */, %var_3641)
  };
  %933(%var_3649, %var_3650) /* ty=(Tensor[(6, 9, 3), bool], Tensor[(3, 14, 11), bool], Tensor[(462), float32], Tensor[(800, 1), float32], Tensor[(13, 10), float64], Tensor[(800), float32], Tensor[(21), float32]) */
}

def @func_5220() -> (Tensor[(6, 9, 3), bool],) {
  %935 = fn () -> (Tensor[(6, 9, 3), bool],) {
    %934 = @func_4861() /* ty=Tensor[(6, 9, 3), bool] */;
    (%934,)
  };
  %935() /* ty=(Tensor[(6, 9, 3), bool],) */
}

def @func_6897() -> Tensor[(6, 9, 3), float32] {
  %937 = fn () -> Tensor[(6, 9, 3), float32] {
    %936 = @func_6099() /* ty=(Tensor[(6, 9, 3), float32],) */;
    %936.0
  };
  %937() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_4447(%var_4442: Tensor[(26, 5), float64], %var_4443: Tensor[(800), float32]) -> (Tensor[(6, 9, 3), float64], Tensor[(13, ?, 10), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32]) {
  %938 = @func_3192() /* ty=(Tensor[(6, 9, 3), float64],) */;
  %939 = cast(%var_4442, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %940 = cast(%var_4442, dtype="float64") /* ty=Tensor[(26, 5), float64] */;
  %941 = cast(%var_4443, dtype="float32") /* ty=Tensor[(800), float32] */;
  %942 = cast(meta[relay.Constant][59] /* ty=Tensor[(21), float32] */, dtype="float32") /* ty=Tensor[(21), float32] */;
  %943 = reshape(%939, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %944 = reshape(%940, newshape=[13, 1, 10]) /* ty=Tensor[(13, 1, 10), float64] */;
  %945 = reshape(%941, newshape=[800, 1]) /* ty=Tensor[(800, 1), float32] */;
  %946 = reshape(%942, newshape=[21]) /* ty=Tensor[(21), float32] */;
  %947 = @func_1641(%943, %944, %945, %946) /* ty=(Tensor[(13, ?, 10), float64], Tensor[(5, 10, 16), float32], Tensor[(800, 1), float32], Tensor[(21), float32]) */;
  %948 = %938.0;
  %949 = %947.0;
  (%948, %949, %var_4442, %var_4443, meta[relay.Constant][59] /* ty=Tensor[(21), float32] */)
}

def @func_5735() -> Tensor[(6, 9, 3), float32] {
  @func_5733() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_6921() -> (Tensor[(6, 9, 3), float32],) {
  @func_6919() /* ty=(Tensor[(6, 9, 3), float32],) */
}

def @func_3256() -> (Tensor[(6, 9, 3), float32],) {
  %954 = fn () -> (Tensor[(6, 9, 3), float32],) {
    %950 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %951 = %950.0;
    %952 = cast(%951, dtype="float32") /* ty=Tensor[(6, 9, 3), float32] */;
    %953 = tan(%952) /* ty=Tensor[(6, 9, 3), float32] */;
    (%953,)
  };
  %954() /* ty=(Tensor[(6, 9, 3), float32],) */
}

def @func_7822() -> Tensor[(6, 9, 3), float32] {
  %956 = fn () -> Tensor[(6, 9, 3), float32] {
    %955 = @func_6919() /* ty=(Tensor[(6, 9, 3), float32],) */;
    %955.0
  };
  %956() /* ty=Tensor[(6, 9, 3), float32] */
}

def @func_3139(%var_3121: Tensor[(3, 14, 11), float32]) -> (Tensor[(3, 14, 11), bool],) {
  %957 = cast(%var_3121, dtype="float32") /* ty=Tensor[(3, 14, 11), float32] */;
  %958 = asinh(%957) /* ty=Tensor[(3, 14, 11), float32] */;
  %959 = cast(%var_3121, dtype="bool") /* ty=Tensor[(3, 14, 11), bool] */;
  %960 = shape_of(%958, dtype="int32") /* ty=Tensor[(3), int32] */;
  %961 = cast(%958, dtype="bool") /* ty=Tensor[(3, 14, 11), bool] */;
  %962 = dyn.reshape(%959, %960, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %963 = less(%961, %962) /* ty=Tensor[(3, 14, 11), bool] */;
  (%963,)
}

def @func_5056() -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
  %969 = fn () -> (Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) {
    %964 = @func_4907() /* ty=Tensor[(6, 9, 3), float64] */;
    %965 = cast(%964, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    %966 = @func_3287() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float32]) */;
    %967 = erf(%965) /* ty=Tensor[(6, 9, 3), float64] */;
    %968 = %966.0;
    (%967, %968)
  };
  %969() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), float64]) */
}

def @func_2794(%var_2793: Tensor[(16, 14, 13), int32]) -> Tensor[(16, 14, 13), float32] {
  %974 = fn (%var_2774: Tensor[(16, 14, 13), int32]) -> Tensor[(16, 14, 13), float32] {
    %970 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 1, 13), int32] */, dtype="int32") /* ty=Tensor[(16, 1, 13), int32] */;
    %971 = cast(%var_2774, dtype="int32") /* ty=Tensor[(16, 14, 13), int32] */;
    %972 = multiply(%970, %971) /* ty=Tensor[(16, 14, 13), int32] */;
    %973 = cast(%972, dtype="float32") /* ty=Tensor[(16, 14, 13), float32] */;
    erf(%973) /* ty=Tensor[(16, 14, 13), float32] */
  };
  %974(%var_2793) /* ty=Tensor[(16, 14, 13), float32] */
}

def @func_4862() -> Tensor[(6, 9, 3), bool] {
  %976 = fn () -> Tensor[(6, 9, 3), bool] {
    %975 = @func_3752() /* ty=(Tensor[(6, 9, 3), float64], Tensor[(6, 9, 3), bool]) */;
    %975.1
  };
  %976() /* ty=Tensor[(6, 9, 3), bool] */
}

def @func_7838() -> (Tensor[(6, 9, 3), float32],) {
  %979 = fn () -> (Tensor[(6, 9, 3), float32],) {
    %977 = @func_7523() /* ty=(Tensor[(6, 9, 3), float32], Tensor[(6, 9, 3), float64]) */;
    %978 = %977.0;
    (%978,)
  };
  %979() /* ty=(Tensor[(6, 9, 3), float32],) */
}

def @func_6870(%var_6869: Tensor[(9, 2, 7), float64]) -> (Tensor[(6, 9, 3), float32], Tensor[(135), float32], Tensor[(9, 2, 7), bool]) {
  %993 = fn (%var_6822: Tensor[(9, 2, 7), float64]) -> (Tensor[(6, 9, 3), float32], Tensor[(135), float32], Tensor[(9, 2, 7), bool]) {
    %980 = cast(meta[relay.Constant][61] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %981 = reshape(%980, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %982 = @func_5298(%981) /* ty=(Tensor[(6, 9, 3), float32], Tensor[(15, 3, 3), float32], Tensor[(135), float32]) */;
    %983 = cast(%var_6822, dtype="float64") /* ty=Tensor[(9, 2, 7), float64] */;
    %984 = acos(%983) /* ty=Tensor[(9, 2, 7), float64] */;
    %985 = cast(%984, dtype="float32") /* ty=Tensor[(9, 2, 7), float32] */;
    %986 = rsqrt(%985) /* ty=Tensor[(9, 2, 7), float32] */;
    %987 = cast(meta[relay.Constant][62] /* ty=Tensor[(9, 2, 7), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 7), bool] */;
    %988 = shape_of(%986, dtype="int32") /* ty=Tensor[(3), int32] */;
    %989 = cast(%986, dtype="bool") /* ty=Tensor[(9, 2, 7), bool] */;
    %990 = dyn.reshape(%987, %988, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %991 = %982.0;
    %992 = equal(%989, %990) /* ty=Tensor[(9, 2, 7), bool] */;
    (%991, meta[relay.Constant][61] /* ty=Tensor[(135), float32] */, %992)
  };
  %993(%var_6869) /* ty=(Tensor[(6, 9, 3), float32], Tensor[(135), float32], Tensor[(9, 2, 7), bool]) */
}

def @func_8287() -> (Tensor[(6, 9, 3), float32],) {
  @func_8285() /* ty=(Tensor[(6, 9, 3), float32],) */
}

def @func_1529(%var_1510: Tensor[(6, 13, 4), int64], %var_1511: Tensor[(6, 13, 4), int64]) -> (Tensor[(6, 13, 4), int64],) {
  %994 = cast(%var_1511, dtype="int64") /* ty=Tensor[(6, 13, 4), int64] */;
  %995 = shape_of(%var_1510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %996 = cast(%var_1510, dtype="int64") /* ty=Tensor[(6, 13, 4), int64] */;
  %997 = dyn.reshape(%994, %995, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %998 = multiply(%996, %997) /* ty=Tensor[(6, 13, 4), int64] */;
  (%998,)
}

def @func_4908() -> Tensor[(6, 9, 3), float64] {
  %1000 = fn () -> Tensor[(6, 9, 3), float64] {
    %999 = @func_2564() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %999.0
  };
  %1000() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_560(%var_556: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32],) {
  %1001 = cast(%var_556, dtype="float32") /* ty=Tensor[(15, 3, 3), float32] */;
  %1002 = sqrt(%1001) /* ty=Tensor[(15, 3, 3), float32] */;
  (%1002,)
}

def @func_5497(%var_5493: Tensor[(4, 6, 2), float32], %var_5494: Tensor[(162), bool], %var_5495: Tensor[(78, 4), int64], %var_5496: Tensor[(21), float32]) -> (Tensor[(4, 6, 2), uint16], Tensor[(780), bool], Tensor[(1408), bool], Tensor[(392), bool], Tensor[(800), float32], Tensor[(162), bool], Tensor[(6, 13, 4), int64], Tensor[(78, 4), int64], Tensor[(135), float32], Tensor[(21), float32]) {
  @func_5491(%var_5493, %var_5494, %var_5495, %var_5496) /* ty=(Tensor[(4, 6, 2), uint16], Tensor[(780), bool], Tensor[(1408), bool], Tensor[(392), bool], Tensor[(800), float32], Tensor[(162), bool], Tensor[(6, 13, 4), int64], Tensor[(78, 4), int64], Tensor[(135), float32], Tensor[(21), float32]) */
}

def @func_5491(%var_5408: Tensor[(4, 6, 2), float32], %var_5437: Tensor[(162), bool], %var_5453: Tensor[(78, 4), int64], %var_5476: Tensor[(21), float32]) -> (Tensor[(4, 6, 2), uint16], Tensor[(780), bool], Tensor[(1408), bool], Tensor[(392), bool], Tensor[(800), float32], Tensor[(162), bool], Tensor[(6, 13, 4), int64], Tensor[(78, 4), int64], Tensor[(135), float32], Tensor[(21), float32]) {
  %1003 = cast(%var_5408, dtype="float32") /* ty=Tensor[(4, 6, 2), float32] */;
  %1004 = log10(%1003) /* ty=Tensor[(4, 6, 2), float32] */;
  %1005 = cast(%var_5408, dtype="uint16") /* ty=Tensor[(4, 6, 2), uint16] */;
  %1006 = shape_of(%1004, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1007 = cast(%1004, dtype="uint16") /* ty=Tensor[(4, 6, 2), uint16] */;
  %1008 = dyn.reshape(%1005, %1006, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1009 = cast(meta[relay.Constant][63] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %1010 = cast(meta[relay.Constant][63] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %1011 = cast(meta[relay.Constant][64] /* ty=Tensor[(392), bool] */, dtype="bool") /* ty=Tensor[(392), bool] */;
  %1012 = cast(meta[relay.Constant][65] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %1013 = cast(%var_5437, dtype="bool") /* ty=Tensor[(162), bool] */;
  %1014 = reshape(%1009, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), bool] */;
  %1015 = reshape(%1010, newshape=[8, 16, 11]) /* ty=Tensor[(8, 16, 11), bool] */;
  %1016 = reshape(%1011, newshape=[392]) /* ty=Tensor[(392), bool] */;
  %1017 = reshape(%1012, newshape=[8, 100]) /* ty=Tensor[(8, 100), float32] */;
  %1018 = reshape(%1013, newshape=[162]) /* ty=Tensor[(162), bool] */;
  %1019 = @func_5369(%1014, %1015, %1016, %1017, %1018) /* ty=(Tensor[(8, 16, 11), bool], Tensor[(6, 9, 3), float64], Tensor[(392), bool], Tensor[(8, 100), float32], Tensor[(162), bool], Tensor[(13, 10, 6), bool], Tensor[(780), bool]) */;
  %1020 = cast(%var_5453, dtype="int64") /* ty=Tensor[(78, 4), int64] */;
  %1021 = cast(%var_5453, dtype="int64") /* ty=Tensor[(78, 4), int64] */;
  %1022 = reshape(%1020, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), int64] */;
  %1023 = reshape(%1021, newshape=[6, 13, 4]) /* ty=Tensor[(6, 13, 4), int64] */;
  %1024 = @func_1529(%1022, %1023) /* ty=(Tensor[(6, 13, 4), int64],) */;
  %1025 = cast(meta[relay.Constant][65] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %1026 = cast(%var_5476, dtype="float32") /* ty=Tensor[(21), float32] */;
  %1027 = reshape(%1025, newshape=[5, 10, 16]) /* ty=Tensor[(5, 10, 16), float32] */;
  %1028 = reshape(%1026, newshape=[21, 1]) /* ty=Tensor[(21, 1), float32] */;
  %1029 = @func_1326(%1027, %1028) /* ty=(Tensor[(5, 10, 16), float32], Tensor[(135), float32], Tensor[(288), float32], Tensor[(8, 36), float32], Tensor[(21, 1), float32]) */;
  %1030 = bitwise_or(%1007, %1008) /* ty=Tensor[(4, 6, 2), uint16] */;
  %1031 = %1019.6;
  %1032 = %1024.0;
  %1033 = %1029.1;
  (%1030, %1031, meta[relay.Constant][63] /* ty=Tensor[(1408), bool] */, meta[relay.Constant][64] /* ty=Tensor[(392), bool] */, meta[relay.Constant][65] /* ty=Tensor[(800), float32] */, %var_5437, %1032, %var_5453, %1033, %var_5476)
}

def @func_8424(%var_8423: Tensor[(1008), int64]) -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), bool], Tensor[(9, 16, 7), bool], Tensor[(112), int64], Tensor[(1008), int64]) {
  %1043 = fn (%var_8411: Tensor[(1008), int64]) -> (Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), bool], Tensor[(9, 16, 7), bool], Tensor[(112), int64], Tensor[(1008), int64]) {
    %1034 = @func_7865() /* ty=(Tensor[(6, 9, 3), bool],) */;
    %1035 = @func_4151() /* ty=(Tensor[(6, 9, 3), bool],) */;
    %1036 = cast(meta[relay.Constant][66] /* ty=Tensor[(112), int64] */, dtype="int64") /* ty=Tensor[(112), int64] */;
    %1037 = cast(%var_8411, dtype="int64") /* ty=Tensor[(1008), int64] */;
    %1038 = reshape(%1036, newshape=[1, 16, 7]) /* ty=Tensor[(1, 16, 7), int64] */;
    %1039 = reshape(%1037, newshape=[9, 16, 7]) /* ty=Tensor[(9, 16, 7), int64] */;
    %1040 = %1034.0;
    %1041 = %1035.0;
    %1042 = @func_4952(%1038, %1039) /* ty=Tensor[(9, 16, 7), bool] */;
    (%1040, %1041, %1042, meta[relay.Constant][66] /* ty=Tensor[(112), int64] */, %var_8411)
  };
  %1043(%var_8423) /* ty=(Tensor[(6, 9, 3), bool], Tensor[(6, 9, 3), bool], Tensor[(9, 16, 7), bool], Tensor[(112), int64], Tensor[(1008), int64]) */
}

def @func_7003(%var_6949: bool, %var_6950: Tensor[(2, 14, 8), bool], %var_6981: Tensor[(1, 130), float64]) -> (Tensor[(2, 14, 8), float32], Tensor[(12, 15, 9), float32], Tensor[(1, 130), float64], Tensor[(800), float32], Tensor[(270, 6), float32], Tensor[(6, 9, 3), float64], Tensor[(26, 5), float32]) {
  %1044 = cast(%var_6949, dtype="bool") /* ty=bool */;
  %1045 = cast(%var_6950, dtype="bool") /* ty=Tensor[(2, 14, 8), bool] */;
  %1046 = logical_and(%1044, %1045) /* ty=Tensor[(2, 14, 8), bool] */;
  %1047 = cast(%1046, dtype="float32") /* ty=Tensor[(2, 14, 8), float32] */;
  %1048 = cast(meta[relay.Constant][67] /* ty=Tensor[(270, 6), uint8] */, dtype="uint8") /* ty=Tensor[(270, 6), uint8] */;
  %1049 = reshape(%1048, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %1050 = @func_2627(%1049) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) */;
  %1051 = cast(meta[relay.Constant][67] /* ty=Tensor[(270, 6), uint8] */, dtype="float32") /* ty=Tensor[(270, 6), float32] */;
  %1052 = cast(meta[relay.Constant][67] /* ty=Tensor[(270, 6), uint8] */, dtype="uint8") /* ty=Tensor[(270, 6), uint8] */;
  %1053 = reshape(%1052, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), uint8] */;
  %1054 = @func_2627(%1053) /* ty=(Tensor[(12, 15, 9), float32], Tensor[(6, 9, 3), float64]) */;
  %1055 = cast(%var_6981, dtype="float64") /* ty=Tensor[(1, 130), float64] */;
  %1056 = cast(meta[relay.Constant][68] /* ty=Tensor[(800), float32] */, dtype="float32") /* ty=Tensor[(800), float32] */;
  %1057 = reshape(%1055, newshape=[26, 5]) /* ty=Tensor[(26, 5), float64] */;
  %1058 = reshape(%1056, newshape=[800]) /* ty=Tensor[(800), float32] */;
  %1059 = @func_4447(%1057, %1058) /* ty=(Tensor[(6, 9, 3), float64], Tensor[(13, ?, 10), float64], Tensor[(26, 5), float64], Tensor[(800), float32], Tensor[(21), float32]) */;
  %1060 = %1059.2;
  %1061 = cast(%1060, dtype="float32") /* ty=Tensor[(26, 5), float32] */;
  %1062 = acosh(%1047) /* ty=Tensor[(2, 14, 8), float32] */;
  %1063 = %1050.0;
  %1064 = erf(%1051) /* ty=Tensor[(270, 6), float32] */;
  %1065 = %1054.1;
  %1066 = asinh(%1061) /* ty=Tensor[(26, 5), float32] */;
  (%1062, %1063, %var_6981, meta[relay.Constant][68] /* ty=Tensor[(800), float32] */, %1064, %1065, %1066)
}

def @func_2172() -> Tensor[(6, 9, 3), float64] {
  %1070 = fn () -> Tensor[(6, 9, 3), float64] {
    %1067 = @func_2089() /* ty=(Tensor[(6, 9, 3), float64],) */;
    %1068 = %1067.0;
    %1069 = cast(%1068, dtype="float64") /* ty=Tensor[(6, 9, 3), float64] */;
    acosh(%1069) /* ty=Tensor[(6, 9, 3), float64] */
  };
  %1070() /* ty=Tensor[(6, 9, 3), float64] */
}

def @func_7874() -> (Tensor[(6, 9, 3), bool],) {
  %1071 = @func_4485() /* ty=(Tensor[(6, 9, 3), bool],) */;
  %1072 = %1071.0;
  (%1072,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen377/build/output.py", line 2633, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:11:47] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

