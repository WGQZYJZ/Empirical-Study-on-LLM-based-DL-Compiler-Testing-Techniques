==========mod==========
#[version = "0.0.5"]
def @func_1468(%var_1439: Tensor[(7, 14, 10), int8], %var_1440: Tensor[(7, 14, 10), int8]) -> (Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) {
  %0 = cast(%var_1440, dtype="int8") /* ty=Tensor[(7, 14, 10), int8] */;
  %1 = shape_of(%var_1439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_1439, dtype="int8") /* ty=Tensor[(7, 14, 10), int8] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %4 = cast(%var_1439, dtype="bool") /* ty=Tensor[(7, 14, 10), bool] */;
  %5 = shape_of(%var_1440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%var_1440, dtype="bool") /* ty=Tensor[(7, 14, 10), bool] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %8 = subtract(%2, %3) /* ty=Tensor[(7, 14, 10), int8] */;
  %9 = less_equal(%6, %7) /* ty=Tensor[(7, 14, 10), bool] */;
  (%8, %9)
}

def @func_133(%var_92: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) {
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 14, 7), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 7), bool] */;
  %11 = shape_of(%var_92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%var_92, dtype="bool") /* ty=Tensor[(12, 14, 7), bool] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %14 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %15 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %16 = cast(%var_92, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %17 = acos(%16) /* ty=Tensor[(12, 14, 7), float32] */;
  %18 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 14, 7), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 7), bool] */;
  %19 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%17, dtype="bool") /* ty=Tensor[(12, 14, 7), bool] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %22 = not_equal(%12, %13) /* ty=Tensor[(12, 14, 7), bool] */;
  %23 = %14.0;
  %24 = %15.0;
  %25 = logical_and(%20, %21) /* ty=Tensor[(12, 14, 7), bool] */;
  (%22, %23, %24, %25)
}

def @func_2547() -> (Tensor[(8, 6, 3), bool],) {
  %26 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %27 = %26.0;
  (%27,)
}

def @func_7506() -> (Tensor[(8, 6, 3), float64],) {
  %28 = @func_5162() /* ty=(Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(8, 6, 3), float64]) */;
  %29 = %28.2;
  (%29,)
}

def @func_6622(%var_6568: Tensor[(10, 10, 13), float32], %var_6590: Tensor[(10, 10, 13), float32]) -> (Tensor[(10, 10, 13), float32], Tensor[(10, 10, 13), bool], Tensor[(10, 10, 13), uint64], Tensor[(8, 6, 13), bool], Tensor[(624, 1), uint16], Tensor[(8, 6, 3), bool]) {
  %30 = cast(%var_6568, dtype="float32") /* ty=Tensor[(10, 10, 13), float32] */;
  %31 = cast(%var_6568, dtype="float32") /* ty=Tensor[(10, 10, 13), float32] */;
  %32 = asinh(%31) /* ty=Tensor[(10, 10, 13), float32] */;
  %33 = cast(%32, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
  %34 = shape_of(%var_6568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%var_6568, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %37 = cast(%var_6590, dtype="uint64") /* ty=Tensor[(10, 10, 13), uint64] */;
  %38 = shape_of(%var_6568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%var_6568, dtype="uint64") /* ty=Tensor[(10, 10, 13), uint64] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(624, 1), uint16] */, dtype="uint16") /* ty=Tensor[(624, 1), uint16] */;
  %42 = reshape(%41, newshape=[624]) /* ty=Tensor[(624), uint16] */;
  %43 = @func_4998(%42) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) */;
  %44 = @func_4204() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %45 = rsqrt(%30) /* ty=Tensor[(10, 10, 13), float32] */;
  %46 = logical_and(%35, %36) /* ty=Tensor[(10, 10, 13), bool] */;
  %47 = multiply(%39, %40) /* ty=Tensor[(10, 10, 13), uint64] */;
  %48 = %43.1;
  %49 = %44.1;
  (%45, %46, %47, %48, meta[relay.Constant][2] /* ty=Tensor[(624, 1), uint16] */, %49)
}

def @func_7376(%var_7370: Tensor[(1092), int8]) -> (Tensor[(8, 6, 3), float64], Tensor[(12, 7, 13), int8], Tensor[(1092), int8]) {
  %50 = cast(%var_7370, dtype="int8") /* ty=Tensor[(1092), int8] */;
  %51 = reshape(%50, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), int8] */;
  %52 = @func_3865() /* ty=Tensor[(8, 6, 3), float64] */;
  %53 = @func_6791(%51) /* ty=Tensor[(12, 7, 13), int8] */;
  (%52, %53, %var_7370)
}

def @func_4292() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %54 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %55 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %56 = %54.0;
  %57 = %55.0;
  (%56, %57)
}

def @func_1420() -> (Tensor[(1176), float32], Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), bool], Tensor[(315), float64]) {
  %58 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %59 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %61 = reshape(%60, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
  %62 = @func_601(%61) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) */;
  %63 = %58.2;
  %64 = %59.0;
  %65 = %62.0;
  (%63, %64, %65, meta[relay.Constant][3] /* ty=Tensor[(315), float64] */)
}

def @func_665() -> Tensor[(8, 6, 3), float64] {
  %66 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %66.2
}

def @func_3788() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) {
  %67 = @func_1595() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %68 = @func_3257() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %69 = @func_2712() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) */;
  %70 = %69.3;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(6, 9, 6), int32] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%70, dtype="int32") /* ty=Tensor[(6, 9, 6), int32] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %75 = %67.0;
  %76 = %68.0;
  %77 = add(%73, %74) /* ty=Tensor[(6, 9, 6), int32] */;
  (%75, %76, %77)
}

def @func_4998(%var_4976: Tensor[(624), uint16]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) {
  %78 = @func_1066() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %79 = cast(%var_4976, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %80 = cast(%var_4976, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %81 = cast(%var_4976, dtype="float32") /* ty=Tensor[(624), float32] */;
  %82 = reshape(%79, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), uint16] */;
  %83 = reshape(%80, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), uint16] */;
  %84 = reshape(%81, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
  %85 = @func_2325(%82, %83, %84) /* ty=(Tensor[(8, 6, 13), bool], Tensor[(8, 6, 13), float32]) */;
  %86 = %78.2;
  %87 = %85.0;
  (%86, %87, %var_4976)
}

def @func_1836() -> (Tensor[(8, 6, 3), bool],) {
  %88 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %89 = %88.0;
  (%89,)
}

def @func_6097() -> (Tensor[(8, 6, 3), float64],) {
  %90 = @func_1539() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */;
  %91 = %90.1;
  (%91,)
}

def @func_5821(%var_5805: Tensor[(3, 700), float64]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(3, 700), float64]) {
  %92 = cast(%var_5805, dtype="float64") /* ty=Tensor[(3, 700), float64] */;
  %93 = reshape(%92, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float64] */;
  %94 = @func_3152(%93) /* ty=(Tensor[(15, 10, 14), float64], Tensor[(8, 6, 3), bool]) */;
  %95 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %96 = %94.1;
  (%95, %96, %var_5805)
}

def @func_7654() -> Tensor[(8, 6, 3), float64] {
  %97 = @func_7506() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %97.0
}

def @func_8016() -> (Tensor[(8, 6, 3), bool],) {
  %98 = @func_4796() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %99 = %98.0;
  (%99,)
}

def @func_495() -> (Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) {
  %100 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %101 = %100.0;
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 6, 3), bool] */, dtype="int32") /* ty=Tensor[(8, 6, 3), int32] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="int32") /* ty=Tensor[(8, 6, 3), int32] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %106 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %107 = right_shift(%104, %105) /* ty=Tensor[(8, 6, 3), int32] */;
  %108 = %106.0;
  (%107, %108)
}

def @func_3909() -> (Tensor[(8, 6, 3), bool],) {
  %109 = @func_842() /* ty=Tensor[(8, 6, 3), bool] */;
  (%109,)
}

def @func_842() -> Tensor[(8, 6, 3), bool] {
  %110 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %110.1
}

def @func_6264() -> (Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), int8], Tensor[(24, 6), float64]) {
  %111 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
  %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(24, 6), float64] */, dtype="float64") /* ty=Tensor[(24, 6), float64] */;
  %113 = reshape(%112, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), float64] */;
  %114 = @func_5085(%113) /* ty=(Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), bool]) */;
  %115 = %111.0;
  %116 = %114.0;
  (%115, %116, meta[relay.Constant][6] /* ty=Tensor[(24, 6), float64] */)
}

def @func_2623() -> (Tensor[(8, 6, 3), bool],) {
  %117 = @func_2027() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %118 = %117.0;
  (%118,)
}

def @func_1989() -> (Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) {
  %119 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
  %120 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 70), int8] */, dtype="int8") /* ty=Tensor[(14, 70), int8] */;
  %121 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 70), int8] */, dtype="int8") /* ty=Tensor[(14, 70), int8] */;
  %122 = reshape(%120, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
  %123 = reshape(%121, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
  %124 = @func_1468(%122, %123) /* ty=(Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) */;
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 70), int8] */, dtype="float64") /* ty=Tensor[(14, 70), float64] */;
  %126 = exp(%125) /* ty=Tensor[(14, 70), float64] */;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(14, 70), float64] */;
  %128 = @func_1066() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %129 = cast(%126, dtype="float32") /* ty=Tensor[(14, 70), float32] */;
  %130 = sigmoid(%129) /* ty=Tensor[(14, 70), float32] */;
  %131 = cast(%130, dtype="float32") /* ty=Tensor[(14, 70), float32] */;
  %132 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %133 = cast(%132, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %134 = reshape(%133, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %135 = @func_1326(%134) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %136 = @func_1903() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(980), int8]) */;
  %137 = @func_1420() /* ty=(Tensor[(1176), float32], Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), bool], Tensor[(315), float64]) */;
  %138 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %139 = %119.0;
  %140 = %124.0;
  %141 = atanh(%127) /* ty=Tensor[(14, 70), float64] */;
  %142 = %128.2;
  %143 = sin(%131) /* ty=Tensor[(14, 70), float32] */;
  %144 = %135.1;
  %145 = %136.1;
  %146 = %137.0;
  %147 = %138.2;
  (%139, %140, %141, %142, %143, %132, %144, %145, %146, %147)
}

def @func_6333() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %148 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %149 = @func_2712() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) */;
  %150 = %148.0;
  %151 = %149.0;
  (%150, %151)
}

def @func_1384() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) {
  %152 = cast(meta[relay.Constant][8] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %153 = reshape(%152, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %154 = @func_826(%153) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
  %155 = @func_842() /* ty=Tensor[(8, 6, 3), bool] */;
  %156 = %154.3;
  (%155, %156, meta[relay.Constant][8] /* ty=Tensor[(1176), float32] */)
}

def @func_3320() -> (Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) {
  %157 = @func_1989() /* ty=(Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
  %158 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %159 = %157.8;
  %160 = %158.0;
  (%159, %160)
}

def @func_7863(%var_7843: Tensor[(1, 324), float64], %var_7860: Tensor[(1, 750), uint64]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(12, 3, 9), float64], Tensor[(1, 324), float64], Tensor[(8, 6, 3), float64], Tensor[(315), float64], Tensor[(980), int8], Tensor[(6, 9, 6), float64], Tensor[(10, 15, 5), uint64], Tensor[(1, 750), uint64]) {
  %161 = @func_7716() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %162 = cast(%var_7843, dtype="float64") /* ty=Tensor[(1, 324), float64] */;
  %163 = reshape(%162, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float64] */;
  %164 = @func_3547(%163) /* ty=(Tensor[(12, 3, 9), float64], Tensor[(12, 3, 9), float32]) */;
  %165 = cast(meta[relay.Constant][9] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %166 = reshape(%165, newshape=[35, 9]) /* ty=Tensor[(35, 9), float64] */;
  %167 = @func_752(%166) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(7, 5, 9), float64], Tensor[(35, 9), float64], Tensor[(8, 6, 3), bool]) */;
  %168 = @func_1903() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(980), int8]) */;
  %169 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
  %170 = cast(%var_7860, dtype="uint64") /* ty=Tensor[(1, 750), uint64] */;
  %171 = reshape(%170, newshape=[10, 15, 5]) /* ty=Tensor[(10, 15, 5), uint64] */;
  %172 = @func_5401(%171) /* ty=(Tensor[(10, 15, 5), uint64],) */;
  %173 = @func_1872() /* ty=Tensor[(8, 6, 3), float64] */;
  %174 = %161.0;
  %175 = %164.0;
  %176 = %167.1;
  %177 = %168.2;
  %178 = %169.0;
  %179 = %172.0;
  (%173, %174, %175, %var_7843, %176, meta[relay.Constant][9] /* ty=Tensor[(315), float64] */, %177, %178, %179, %var_7860)
}

def @func_5401(%var_5397: Tensor[(10, 15, 5), uint64]) -> (Tensor[(10, 15, 5), uint64],) {
  %180 = cast(meta[relay.Constant][10] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %181 = cast(%var_5397, dtype="uint64") /* ty=Tensor[(10, 15, 5), uint64] */;
  %182 = right_shift(%180, %181) /* ty=Tensor[(10, 15, 5), uint64] */;
  (%182,)
}

def @func_7278() -> (Tensor[(8, 6, 3), float64],) {
  %183 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %184 = %183.2;
  (%184,)
}

def @func_3164() -> (Tensor[(8, 6, 3), float64],) {
  %185 = @func_1143() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %188 = rsqrt(%187) /* ty=Tensor[(8, 6, 3), float64] */;
  (%188,)
}

def @func_8069() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %189 = @func_3909() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %190 = @func_6724() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */;
  %191 = %189.0;
  %192 = %190.2;
  (%191, %192)
}

def @func_3685() -> Tensor[(8, 6, 3), float64] {
  %193 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %194 = %193.0;
  %195 = cast(%194, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  sin(%195) /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_1242() -> (Tensor[(7, 10, 5), int32],) {
  %196 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 10, 5), int32] */;
  %197 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(7, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 10, 5), int32] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %200 = bitwise_xor(%198, %199) /* ty=Tensor[(7, 10, 5), int32] */;
  (%200,)
}

def @func_3586() -> (Tensor[(8, 6, 3), float64],) {
  %201 = @func_3164() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %202 = %201.0;
  (%202,)
}

def @func_4593(%var_4570: int32) -> (Tensor[(5, 16, 5), bool],) {
  %203 = cast(%var_4570, dtype="bool") /* ty=bool */;
  %204 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 16, 5), int32] */, dtype="bool") /* ty=Tensor[(5, 16, 5), bool] */;
  %205 = greater_equal(%203, %204) /* ty=Tensor[(5, 16, 5), bool] */;
  (%205,)
}

def @func_6511(%var_6501: Tensor[(1024), float64], %var_6507: Tensor[(1872), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 16, 8), float64], Tensor[(1024), float64], Tensor[(8, 6, 3), bool], Tensor[(1872), float32]) {
  %206 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %207 = cast(%var_6501, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %208 = reshape(%207, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), float64] */;
  %209 = @func_2820(%208) /* ty=(Tensor[(8, 16, 8), float64],) */;
  %210 = cast(%var_6507, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %211 = reshape(%210, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), float32] */;
  %212 = @func_4468(%211) /* ty=(Tensor[(16, 9, 13), float32], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) */;
  %213 = %206.0;
  %214 = %209.0;
  %215 = %212.1;
  (%213, %214, %var_6501, %215, %var_6507)
}

def @func_7554() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %216 = @func_6471() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), bool], Tensor[(14, 70), int8], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %217 = @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %218 = %216.1;
  %219 = %217.0;
  (%218, %219)
}

def @func_8023() -> (Tensor[(8, 6, 3), bool],) {
  %220 = @func_1989() /* ty=(Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
  %221 = %220.3;
  (%221,)
}

def @func_1539() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) {
  %222 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %223 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %224 = %222.0;
  (%223, %224)
}

def @func_5162() -> (Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(8, 6, 3), float64]) {
  %225 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %226 = %225.2;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %228 = reshape(%227, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %229 = @func_133(%228) /* ty=(Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) */;
  %230 = %229.0;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %232 = cast(%230, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %233 = reshape(%232, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %234 = @func_826(%233) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
  %235 = log10(%231) /* ty=Tensor[(12, 14, 7), float32] */;
  %236 = %234.1;
  (%226, %235, %236)
}

def @func_7061() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %237 = @func_6762() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1872), float32], Tensor[(16, 64), float64], Tensor[(1872), float32]) */;
  %238 = @func_2792() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %239 = %237.0;
  %240 = %238.0;
  (%239, %240)
}

def @func_4094(%var_4084: Tensor[(14, 3, 8), float64]) -> (Tensor[(14, 3, 8), float64], Tensor[(8, 6, 3), bool], Tensor[(1, 144), bool]) {
  %241 = cast(%var_4084, dtype="float64") /* ty=Tensor[(14, 3, 8), float64] */;
  %242 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 144), bool] */, dtype="bool") /* ty=Tensor[(1, 144), bool] */;
  %243 = reshape(%242, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %244 = @func_2996(%243) /* ty=(Tensor[(8, 6, 3), bool],) */;
  %245 = acosh(%241) /* ty=Tensor[(14, 3, 8), float64] */;
  %246 = %244.0;
  (%245, %246, meta[relay.Constant][14] /* ty=Tensor[(1, 144), bool] */)
}

def @func_752(%var_730: Tensor[(35, 9), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(7, 5, 9), float64], Tensor[(35, 9), float64], Tensor[(8, 6, 3), bool]) {
  %247 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %248 = cast(%var_730, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
  %249 = reshape(%248, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
  %250 = @func_601(%249) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) */;
  %251 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %252 = %251.0;
  %253 = cast(%var_730, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
  %254 = reshape(%253, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
  %255 = @func_601(%254) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) */;
  %256 = %255.1;
  %257 = cast(%256, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %258 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%252, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %261 = %247.1;
  %262 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %263 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %264 = %250.2;
  %265 = logical_and(%259, %260) /* ty=Tensor[(8, 6, 3), bool] */;
  (%261, %262, %263, %264, %var_730, %265)
}

def @func_7204(%var_7187: Tensor[(1176), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(12, 14, 7), bool], Tensor[(1176), float32], Tensor[(1176), float32]) {
  %266 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %267 = @func_5042() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %268 = cast(%var_7187, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %269 = reshape(%268, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %270 = @func_133(%269) /* ty=(Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) */;
  %271 = @func_7135() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */;
  %272 = %266.0;
  %273 = %267.0;
  %274 = %270.0;
  %275 = %271.0;
  (%272, %273, %274, %var_7187, %275)
}

def @func_1326(%var_1313: Tensor[(8, 6, 3), bool]) -> (Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %276 = @func_1112() /* ty=Tensor[(8, 6, 3), bool] */;
  %277 = cast(%var_1313, dtype="int64") /* ty=Tensor[(8, 6, 3), int64] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="int64") /* ty=Tensor[(8, 6, 3), int64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %281 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %282 = cast(%var_1313, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %283 = bitwise_or(%279, %280) /* ty=Tensor[(8, 6, 3), int64] */;
  %284 = %281.1;
  %285 = sigmoid(%282) /* ty=Tensor[(8, 6, 3), float64] */;
  (%283, %284, %285)
}

def @func_6831() -> Tensor[(8, 6, 3), float64] {
  %286 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %286.0
}

def @func_5042() -> (Tensor[(8, 6, 3), float64],) {
  %287 = @func_1143() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %288 = %287.1;
  (%288,)
}

def @func_5746(%var_5721: Tensor[(14, 9, 14), float64], %var_5722: Tensor[(14, 9, 14), float64]) -> (Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), float32], Tensor[(8, 6, 3), float64]) {
  %289 = cast(%var_5722, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %290 = shape_of(%var_5721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_5721, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %293 = cast(%var_5721, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
  %294 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %295 = less_equal(%291, %292) /* ty=Tensor[(14, 9, 14), bool] */;
  %296 = sinh(%293) /* ty=Tensor[(14, 9, 14), float32] */;
  %297 = %294.0;
  (%295, %296, %297)
}

def @func_5516() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %298 = @func_4315() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %299 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %300 = %298.0;
  %301 = %299.0;
  (%300, %301)
}

def @func_7433() -> (Tensor[(8, 6, 3), bool], Tensor[(7, 10, 5), int32]) {
  %302 = @func_3257() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %303 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
  %304 = %302.0;
  %305 = %303.0;
  (%304, %305)
}

def @func_4706() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %306 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %307 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %308 = @func_1539() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */;
  %309 = %306.0;
  %310 = %307.0;
  %311 = %308.1;
  (%309, %310, %311)
}

def @func_6689() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %312 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %313 = @func_4292() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %314 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %315 = %312.0;
  %316 = %313.0;
  %317 = %314.0;
  (%315, %316, %317)
}

def @func_6634() -> Tensor[(8, 6, 3), float64] {
  %318 = @func_3164() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %318.0
}

def @func_5966(%var_5912: Tensor[(1, 9), float32]) -> (Tensor[(1, 9), float32], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %319 = cast(%var_5912, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
  %320 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %321 = @func_3719() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %322 = log2(%319) /* ty=Tensor[(1, 9), float32] */;
  %323 = %320.0;
  %324 = %321.1;
  (%322, %323, %324)
}

def @func_3359() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %325 = @func_1143() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %326 = @func_1486() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %327 = %325.0;
  %328 = %326.0;
  (%327, %328)
}

def @func_7339() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %329 = @func_1539() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */;
  %330 = @func_6333() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %331 = @func_4727() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %332 = @func_6333() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %333 = %329.1;
  %334 = %330.1;
  %335 = %331.0;
  %336 = %332.1;
  (%333, %334, %335, %336)
}

def @func_8361() -> (Tensor[(6, 7, 16), int64], Tensor[(14, 9, 14), bool]) {
  %337 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 7, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 16), float32] */;
  %338 = sinh(%337) /* ty=Tensor[(6, 7, 16), float32] */;
  %339 = cast(%338, dtype="int64") /* ty=Tensor[(6, 7, 16), int64] */;
  %340 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(6, 7, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 7, 16), float32] */, dtype="int64") /* ty=Tensor[(6, 7, 16), int64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %343 = @func_7576() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) */;
  %344 = bitwise_and(%341, %342) /* ty=Tensor[(6, 7, 16), int64] */;
  %345 = %343.1;
  (%344, %345)
}

def @func_3495() -> (Tensor[(8, 6, 3), bool], Tensor[(7, 10, 5), int32], Tensor[(8, 6, 3), float32]) {
  %346 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
  %347 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %348 = %347.0;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %350 = @func_842() /* ty=Tensor[(8, 6, 3), bool] */;
  %351 = %346.0;
  %352 = cosh(%349) /* ty=Tensor[(8, 6, 3), float32] */;
  (%350, %351, %352)
}

def @func_2934() -> (Tensor[(8, 6, 3), float64],) {
  %353 = @func_1112() /* ty=Tensor[(8, 6, 3), bool] */;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %355 = acosh(%354) /* ty=Tensor[(8, 6, 3), float64] */;
  (%355,)
}

def @func_3719() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %356 = @func_3257() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %357 = @func_1066() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %358 = @func_3320() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */;
  %359 = %357.2;
  %360 = cast(%359, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %361 = reshape(%360, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %362 = @func_1326(%361) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %363 = %356.0;
  %364 = %358.1;
  %365 = %362.1;
  (%363, %359, %364, %365)
}

def @func_4796() -> (Tensor[(8, 6, 3), bool],) {
  %366 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %367 = %366.0;
  (%367,)
}

def @func_7899() -> (Tensor[(15, 12, 13), float64],) {
  %368 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 13), float64] */;
  %369 = tan(%368) /* ty=Tensor[(15, 12, 13), float64] */;
  (%369,)
}

def @func_6979() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(624), uint16], Tensor[(312, 2), uint16], Tensor[(8, 6, 3), float64]) {
  %370 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %371 = @func_2547() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %372 = cast(meta[relay.Constant][17] /* ty=Tensor[(312, 2), uint16] */, dtype="uint16") /* ty=Tensor[(312, 2), uint16] */;
  %373 = reshape(%372, newshape=[624]) /* ty=Tensor[(624), uint16] */;
  %374 = @func_4998(%373) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) */;
  %375 = @func_4706() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %376 = %370.0;
  %377 = %371.0;
  %378 = %374.2;
  %379 = %375.2;
  (%376, %377, %378, meta[relay.Constant][17] /* ty=Tensor[(312, 2), uint16] */, %379)
}

def @func_2128(%var_2034: Tensor[(8, 6, 3), bool], %var_2058: Tensor[(8, 6, 3), bool]) -> (Tensor[(8, 6, 3), int16], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) {
  %380 = @func_416() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %381 = %380.0;
  %382 = cast(%var_2034, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
  %383 = shape_of(%381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%381, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %386 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %387 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %388 = cast(%var_2058, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %389 = shape_of(%var_2034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%var_2034, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %392 = power(%390, %391) /* ty=Tensor[(8, 6, 3), float32] */;
  %393 = cast(%var_2034, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%392, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %397 = floor_divide(%395, %396) /* ty=Tensor[(8, 6, 3), float32] */;
  %398 = cast(%397, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %399 = reshape(%398, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %400 = @func_1326(%399) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %401 = @func_1989() /* ty=(Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
  %402 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %403 = subtract(%384, %385) /* ty=Tensor[(8, 6, 3), int16] */;
  %404 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %405 = %386.1;
  %406 = %387.0;
  %407 = %400.2;
  %408 = %401.9;
  %409 = %402.0;
  (%403, %404, %405, %406, %397, %407, %408, %409)
}

def @func_5680() -> (Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), int32]) {
  %410 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
  %411 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %412 = %410.0;
  (%411, %412)
}

def @func_7135() -> (Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) {
  %413 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %414 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %415 = %413.2;
  %416 = %414.0;
  (%415, %416)
}

def @func_5457(%var_5414: float64) -> (Tensor[(11, 1, 1), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %417 = cast(%var_5414, dtype="bool") /* ty=bool */;
  %418 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 1, 1), float64] */, dtype="bool") /* ty=Tensor[(11, 1, 1), bool] */;
  %419 = @func_3235() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %420 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %421 = @func_4796() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %422 = equal(%417, %418) /* ty=Tensor[(11, 1, 1), bool] */;
  %423 = %419.1;
  %424 = %420.0;
  %425 = %421.0;
  (%422, %423, %424, %425)
}

def @func_8589(%var_8564: Tensor[(9, 4, 9), float32]) -> (Tensor[(9, 4, 9), int8], Tensor[(8, 6, 3), float64]) {
  %426 = cast(%var_8564, dtype="float32") /* ty=Tensor[(9, 4, 9), float32] */;
  %427 = asinh(%426) /* ty=Tensor[(9, 4, 9), float32] */;
  %428 = cast(%var_8564, dtype="int8") /* ty=Tensor[(9, 4, 9), int8] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(%427, dtype="int8") /* ty=Tensor[(9, 4, 9), int8] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %432 = @func_7278() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %433 = logical_xor(%430, %431) /* ty=Tensor[(9, 4, 9), int8] */;
  %434 = %432.0;
  (%433, %434)
}

def @func_3994(%var_3968: Tensor[(16, 12, 10), bool]) -> Tensor[(16, 12, 10), float64] {
  %435 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 12, 10), bool] */, dtype="bool") /* ty=Tensor[(16, 12, 10), bool] */;
  %436 = shape_of(%var_3968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_3968, dtype="bool") /* ty=Tensor[(16, 12, 10), bool] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %439 = logical_or(%437, %438) /* ty=Tensor[(16, 12, 10), bool] */;
  %440 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 12, 10), bool] */, dtype="float64") /* ty=Tensor[(16, 12, 10), float64] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="float64") /* ty=Tensor[(16, 12, 10), float64] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%442, %443) /* ty=Tensor[(16, 12, 10), float64] */
}

def @func_3152(%var_3137: Tensor[(15, 10, 14), float64]) -> (Tensor[(15, 10, 14), float64], Tensor[(8, 6, 3), bool]) {
  %444 = cast(%var_3137, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
  %445 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %446 = tan(%444) /* ty=Tensor[(15, 10, 14), float64] */;
  %447 = %445.0;
  (%446, %447)
}

def @func_8261() -> Tensor[(8, 6, 3), float64] {
  %448 = @func_6097() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %448.0
}

def @func_8155() -> (Tensor[(8, 6, 3), bool],) {
  %449 = @func_7339() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %450 = %449.1;
  (%450,)
}

def @main(%var_8693: Tensor[(5, 3, 1), int16], %var_8694: Tensor[(5, 3, 1), int16]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(5, 3, ?), float32], Tensor[(8, 6, 3), bool], Tensor[(5, 3, ?), int16]) {
  %451 = @func_3586() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %452 = @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %453 = cast(%var_8694, dtype="bool") /* ty=Tensor[(5, 3, 1), bool] */;
  %454 = shape_of(%var_8693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_8693, dtype="bool") /* ty=Tensor[(5, 3, 1), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %457 = equal(%455, %456) /* ty=Tensor[(5, 3, ?), bool] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(5, 3, ?), float32] */;
  %459 = shape_of(%var_8693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%var_8693, dtype="float32") /* ty=Tensor[(5, 3, 1), float32] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %462 = @func_8023() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %463 = cast(%var_8694, dtype="int16") /* ty=Tensor[(5, 3, 1), int16] */;
  %464 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%457, dtype="int16") /* ty=Tensor[(5, 3, ?), int16] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %467 = %451.0;
  %468 = @func_8313() /* ty=Tensor[(8, 6, 3), bool] */;
  %469 = %452.0;
  %470 = mod(%460, %461) /* ty=Tensor[(5, 3, ?), float32] */;
  %471 = %462.0;
  %472 = bitwise_xor(%465, %466) /* ty=Tensor[(5, 3, ?), int16] */;
  (%467, %468, %469, %470, %471, %472)
}

def @func_1066() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %473 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %474 = %473.0;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %476 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %477 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %478 = atan(%475) /* ty=Tensor[(8, 6, 3), float64] */;
  %479 = %476.2;
  %480 = %477.1;
  (%478, %479, %480)
}

def @func_8129() -> (Tensor[(1872), float32],) {
  %481 = @func_6762() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1872), float32], Tensor[(16, 64), float64], Tensor[(1872), float32]) */;
  %482 = %481.3;
  (%482,)
}

def @func_1486() -> (Tensor[(8, 6, 3), bool],) {
  %483 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %484 = %483.0;
  (%484,)
}

def @func_5470(%var_5461: Tensor[(11, 8, 1), float64], %var_5462: Tensor[(11, 8, 6), float64]) -> (Tensor[(11, 8, 6), float64], Tensor[(8, 6, 3), float64]) {
  %485 = cast(%var_5461, dtype="float64") /* ty=Tensor[(11, 8, 1), float64] */;
  %486 = cast(%var_5462, dtype="float64") /* ty=Tensor[(11, 8, 6), float64] */;
  %487 = subtract(%485, %486) /* ty=Tensor[(11, 8, 6), float64] */;
  %488 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  (%487, %488)
}

def @func_1143() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %489 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %490 = %489.0;
  %491 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  (%490, %491)
}

def @func_1354() -> (Tensor[(6, 9, 6), float64],) {
  %492 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %493 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(6, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %496 = floor_divide(%494, %495) /* ty=Tensor[(6, 9, 6), float64] */;
  (%496,)
}

def @func_1903() -> (Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(980), int8]) {
  %497 = @func_1486() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %498 = cast(meta[relay.Constant][22] /* ty=Tensor[(980), int8] */, dtype="int8") /* ty=Tensor[(980), int8] */;
  %499 = cast(meta[relay.Constant][22] /* ty=Tensor[(980), int8] */, dtype="int8") /* ty=Tensor[(980), int8] */;
  %500 = reshape(%498, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
  %501 = reshape(%499, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
  %502 = @func_1468(%500, %501) /* ty=(Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) */;
  %503 = %497.0;
  %504 = %502.0;
  (%503, %504, meta[relay.Constant][22] /* ty=Tensor[(980), int8] */)
}

def @func_1595() -> (Tensor[(8, 6, 3), bool],) {
  %505 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %506 = %505.0;
  (%506,)
}

def @func_6073(%var_6040: Tensor[(2, 2, 5), float32], %var_6041: Tensor[(2, 2, 5), float32]) -> Tensor[(2, 2, 5), float32] {
  %507 = cast(%var_6041, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  %508 = shape_of(%var_6040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_6040, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %511 = divide(%509, %510) /* ty=Tensor[(2, 2, 5), float32] */;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  sigmoid(%512) /* ty=Tensor[(2, 2, 5), float32] */
}

def @func_8626() -> Tensor[(8, 6, 3), float64] {
  %513 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %513.0
}

def @func_7968() -> (Tensor[(8, 6, 3), float64],) {
  %514 = @func_4727() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %515 = %514.0;
  (%515,)
}

def @func_8192(%var_8185: Tensor[(624), uint16]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) {
  %516 = @func_7278() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %517 = cast(%var_8185, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %518 = reshape(%517, newshape=[624]) /* ty=Tensor[(624), uint16] */;
  %519 = @func_4998(%518) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) */;
  %520 = %516.0;
  %521 = %519.1;
  (%520, %521, %var_8185)
}

def @func_5242(%var_5187: Tensor[(4, 11, 11), float32], %var_5221: Tensor[(4, 11, 11), bool]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(4, 11, 11), uint16], Tensor[(8, 6, 3), bool]) {
  %522 = @func_4727() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %523 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %524 = cast(%var_5187, dtype="float32") /* ty=Tensor[(4, 11, 11), float32] */;
  %525 = sqrt(%524) /* ty=Tensor[(4, 11, 11), float32] */;
  %526 = cast(%var_5187, dtype="bool") /* ty=Tensor[(4, 11, 11), bool] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="bool") /* ty=Tensor[(4, 11, 11), bool] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %530 = equal(%528, %529) /* ty=Tensor[(4, 11, 11), bool] */;
  %531 = cast(%var_5221, dtype="uint16") /* ty=Tensor[(4, 11, 11), uint16] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%530, dtype="uint16") /* ty=Tensor[(4, 11, 11), uint16] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %535 = %522.0;
  %536 = cast(%535, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %537 = reshape(%536, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %538 = @func_2996(%537) /* ty=(Tensor[(8, 6, 3), bool],) */;
  %539 = %523.0;
  %540 = minimum(%533, %534) /* ty=Tensor[(4, 11, 11), uint16] */;
  %541 = %538.0;
  (%535, %539, %540, %541)
}

def @func_4955(%var_4932: float32, %var_4933: Tensor[(9, 9, 5), float32]) -> (Tensor[(9, 9, 5), float32], Tensor[(9, 9, 5), uint64]) {
  %542 = cast(%var_4932, dtype="float32") /* ty=float32 */;
  %543 = cast(%var_4933, dtype="float32") /* ty=Tensor[(9, 9, 5), float32] */;
  %544 = cast(%var_4933, dtype="uint64") /* ty=Tensor[(9, 9, 5), uint64] */;
  %545 = cast(%var_4932, dtype="uint64") /* ty=uint64 */;
  %546 = power(%542, %543) /* ty=Tensor[(9, 9, 5), float32] */;
  %547 = multiply(%544, %545) /* ty=Tensor[(9, 9, 5), uint64] */;
  (%546, %547)
}

def @func_905() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) {
  %548 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %549 = %548.0;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %551 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %552 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %553 = asin(%550) /* ty=Tensor[(8, 6, 3), float64] */;
  %554 = %551.1;
  %555 = %552.0;
  (%553, %554, %555)
}

def @func_3884(%var_3880: Tensor[(14, 2, 13), float64]) -> Tensor[(14, 2, 13), float64] {
  %556 = cast(%var_3880, dtype="float64") /* ty=Tensor[(14, 2, 13), float64] */;
  atanh(%556) /* ty=Tensor[(14, 2, 13), float64] */
}

def @func_601(%var_546: Tensor[(7, 5, 9), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) {
  %557 = @func_416() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %558 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %559 = cast(%var_546, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %560 = sinh(%559) /* ty=Tensor[(7, 5, 9), float64] */;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %562 = erf(%561) /* ty=Tensor[(7, 5, 9), float64] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %564 = acosh(%563) /* ty=Tensor[(7, 5, 9), float64] */;
  %565 = cast(%var_546, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %569 = %557.1;
  %570 = %558.0;
  %571 = floor_mod(%567, %568) /* ty=Tensor[(7, 5, 9), float64] */;
  (%569, %570, %571)
}

def @func_8313() -> Tensor[(8, 6, 3), bool] {
  @func_842() /* ty=Tensor[(8, 6, 3), bool] */
}

def @func_7810(%var_7757: Tensor[(15, 6, 12), float32]) -> (Tensor[(15, 6, 12), float32], Tensor[(1764), float64], Tensor[(8, 16, 8), bool]) {
  %572 = cast(%var_7757, dtype="float32") /* ty=Tensor[(15, 6, 12), float32] */;
  %573 = @func_7576() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) */;
  %574 = cast(meta[relay.Constant][23] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %575 = reshape(%574, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), float64] */;
  %576 = @func_2820(%575) /* ty=(Tensor[(8, 16, 8), float64],) */;
  %577 = %576.0;
  %578 = cast(meta[relay.Constant][23] /* ty=Tensor[(1024), float64] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %582 = log(%572) /* ty=Tensor[(15, 6, 12), float32] */;
  %583 = %573.2;
  %584 = less_equal(%580, %581) /* ty=Tensor[(8, 16, 8), bool] */;
  (%582, %583, %584)
}

def @func_2397(%var_2350: Tensor[(1176), float32]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32], Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) {
  %585 = @func_2027() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %586 = cast(%var_2350, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %587 = reshape(%586, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %588 = @func_826(%587) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
  %589 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %590 = %585.0;
  %591 = %588.5;
  %592 = %589.1;
  (%590, %591, %var_2350, %592)
}

def @func_7576() -> (Tensor[(8, 6, 3), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) {
  %593 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %594 = cast(meta[relay.Constant][24] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %595 = cast(meta[relay.Constant][24] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %596 = reshape(%594, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), float64] */;
  %597 = reshape(%595, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), float64] */;
  %598 = @func_5746(%596, %597) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), float32], Tensor[(8, 6, 3), float64]) */;
  %599 = %593.0;
  %600 = %598.0;
  (%599, %600, meta[relay.Constant][24] /* ty=Tensor[(1764), float64] */)
}

def @func_7230(%var_7228: Tensor[(1, 90), float64]) -> (Tensor[(8, 6, 3), float64], Tensor[(6, 1, 15), float32], Tensor[(1, 90), float64]) {
  %601 = @func_2712() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) */;
  %602 = cast(%var_7228, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %603 = reshape(%602, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), float64] */;
  %604 = @func_4051(%603) /* ty=(Tensor[(6, 1, 15), float32],) */;
  %605 = %601.1;
  %606 = %604.0;
  (%605, %606, %var_7228)
}

def @func_3944() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %607 = @func_3359() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %608 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %609 = %607.0;
  %610 = %608.0;
  (%609, %610)
}

def @func_416() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %611 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %612 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %613 = %611.0;
  %614 = %612.0;
  (%613, %614)
}

def @func_6471() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), bool], Tensor[(14, 70), int8], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %615 = @func_3944() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %616 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %617 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 70), int8] */, dtype="int8") /* ty=Tensor[(14, 70), int8] */;
  %618 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 70), int8] */, dtype="int8") /* ty=Tensor[(14, 70), int8] */;
  %619 = reshape(%617, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
  %620 = reshape(%618, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
  %621 = @func_1468(%619, %620) /* ty=(Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) */;
  %622 = @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %623 = %615.0;
  %624 = %616.0;
  %625 = %621.1;
  %626 = @func_3865() /* ty=Tensor[(8, 6, 3), float64] */;
  %627 = %622.0;
  (%623, %624, %625, meta[relay.Constant][25] /* ty=Tensor[(14, 70), int8] */, %626, %627)
}

def @func_8558() -> Tensor[(8, 6, 3), bool] {
  %628 = @func_8155() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %628.0
}

def @func_3117() -> (Tensor[(8, 6, 3), float64],) {
  %629 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %630 = %629.0;
  (%630,)
}

def @func_2712() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) {
  %631 = @func_1486() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %632 = %631.0;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %634 = cos(%633) /* ty=Tensor[(8, 6, 3), float32] */;
  %635 = cast(%634, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %636 = @func_1112() /* ty=Tensor[(8, 6, 3), bool] */;
  %637 = cast(%636, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %638 = reshape(%635, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %639 = reshape(%637, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %640 = @func_2128(%638, %639) /* ty=(Tensor[(8, 6, 3), int16], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %641 = cast(%634, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %642 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
  %643 = %640.5;
  %644 = exp(%641) /* ty=Tensor[(8, 6, 3), float32] */;
  %645 = %642.0;
  (%636, %643, %644, %645)
}

def @func_4727() -> (Tensor[(8, 6, 3), float64],) {
  %646 = @func_3164() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %647 = %646.0;
  (%647,)
}

def @func_7875() -> Tensor[(8, 6, 3), bool] {
  %648 = @func_5114() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %648.0
}

def @func_3865() -> Tensor[(8, 6, 3), float64] {
  %649 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %649.0
}

def @func_7716() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %650 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %651 = @func_3719() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %652 = %650.0;
  %653 = %651.0;
  (%652, %653)
}

def @func_5899() -> (Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float64]) {
  %654 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %655 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %658 = sinh(%657) /* ty=Tensor[(7, 10, 5), float64] */;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %660 = cast(%658, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %661 = %654.0;
  %662 = cos(%659) /* ty=Tensor[(7, 10, 5), float64] */;
  %663 = log10(%660) /* ty=Tensor[(7, 10, 5), float64] */;
  (%661, %662, %663)
}

def @func_7415() -> (Tensor[(8, 6, 3), bool],) {
  %664 = @func_1486() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %665 = %664.0;
  (%665,)
}

def @func_2996(%var_2966: Tensor[(8, 6, 3), bool]) -> (Tensor[(8, 6, 3), bool],) {
  %666 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %667 = %666.0;
  %668 = cast(%var_2966, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %672 = less(%670, %671) /* ty=Tensor[(8, 6, 3), bool] */;
  (%672,)
}

def @func_6187(%var_6178: Tensor[(11, 4, 14), int16], %var_6179: Tensor[(11, 4, 14), int16]) -> Tensor[(11, 4, 14), int16] {
  %673 = cast(%var_6179, dtype="int16") /* ty=Tensor[(11, 4, 14), int16] */;
  %674 = shape_of(%var_6178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%var_6178, dtype="int16") /* ty=Tensor[(11, 4, 14), int16] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%675, %676) /* ty=Tensor[(11, 4, 14), int16] */
}

def @func_3257() -> (Tensor[(8, 6, 3), bool],) {
  %677 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %678 = %677.0;
  (%678,)
}

def @func_43() -> (Tensor[(8, 6, 3), bool],) {
  %679 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %680 = atanh(%679) /* ty=Tensor[(8, 6, 3), float32] */;
  %681 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 6, 3), float32] */, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%680, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %685 = logical_xor(%683, %684) /* ty=Tensor[(8, 6, 3), int16] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %687 = sqrt(%686) /* ty=Tensor[(8, 6, 3), float32] */;
  %688 = cast(%687, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %689 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%680, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %692 = logical_or(%690, %691) /* ty=Tensor[(8, 6, 3), bool] */;
  (%692,)
}

def @func_4204() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %693 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %694 = @func_3235() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %695 = %693.0;
  %696 = %694.3;
  (%695, %696)
}

def @func_6908(%var_6885: Tensor[(324), float64]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int64], Tensor[(12, 3, 9), float32], Tensor[(324), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %697 = @func_6097() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %698 = %697.0;
  %699 = cast(%698, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %700 = reshape(%699, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %701 = @func_1326(%700) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %702 = cast(meta[relay.Constant][27] /* ty=Tensor[(324), float64] */, dtype="float64") /* ty=Tensor[(324), float64] */;
  %703 = reshape(%702, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float64] */;
  %704 = @func_3547(%703) /* ty=(Tensor[(12, 3, 9), float64], Tensor[(12, 3, 9), float32]) */;
  %705 = cast(%var_6885, dtype="float32") /* ty=Tensor[(324), float32] */;
  %706 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(324), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %707 = cast(meta[relay.Constant][27] /* ty=Tensor[(324), float64] */, dtype="float32") /* ty=Tensor[(324), float32] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?), float32] */;
  %709 = @func_2712() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) */;
  %710 = @func_3909() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %711 = %701.0;
  %712 = %704.1;
  %713 = power(%707, %708) /* ty=Tensor[(324), float32] */;
  %714 = %709.1;
  %715 = %710.0;
  (%698, %711, %712, %713, %714, %715)
}

def @func_67() -> (Tensor[(8, 6, 3), bool],) {
  %716 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %717 = %716.0;
  (%717,)
}

def @func_826(%var_798: Tensor[(1176), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) {
  %718 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %719 = %718.1;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %721 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %722 = cast(%var_798, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %723 = reshape(%722, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %724 = @func_133(%723) /* ty=(Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) */;
  %725 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %726 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %727 = log2(%720) /* ty=Tensor[(8, 6, 3), float64] */;
  %728 = %721.0;
  %729 = %724.2;
  %730 = %725.0;
  (%726, %727, %728, %729, %var_798, %730)
}

def @func_2244(%var_2223: Tensor[(6, 9, 6), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), uint16], Tensor[(8, 6, 3), bool]) {
  %731 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %732 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
  %733 = %732.0;
  %734 = cast(%var_2223, dtype="uint16") /* ty=Tensor[(6, 9, 6), uint16] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="uint16") /* ty=Tensor[(6, 9, 6), uint16] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %738 = @func_2027() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %739 = %731.0;
  %740 = logical_xor(%736, %737) /* ty=Tensor[(6, 9, 6), uint16] */;
  %741 = %738.1;
  (%739, %740, %741)
}

def @func_4051(%var_4030: Tensor[(6, 1, 15), float64]) -> (Tensor[(6, 1, 15), float32],) {
  %742 = cast(%var_4030, dtype="float64") /* ty=Tensor[(6, 1, 15), float64] */;
  %743 = exp(%742) /* ty=Tensor[(6, 1, 15), float64] */;
  %744 = cast(%743, dtype="float32") /* ty=Tensor[(6, 1, 15), float32] */;
  %745 = sqrt(%744) /* ty=Tensor[(6, 1, 15), float32] */;
  (%745,)
}

def @func_5085(%var_5064: Tensor[(8, 6, 3), float64]) -> (Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), bool]) {
  %746 = @func_3865() /* ty=Tensor[(8, 6, 3), float64] */;
  %747 = cast(%var_5064, dtype="int8") /* ty=Tensor[(8, 6, 3), int8] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="int8") /* ty=Tensor[(8, 6, 3), int8] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %751 = @func_4204() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %752 = multiply(%749, %750) /* ty=Tensor[(8, 6, 3), int8] */;
  %753 = %751.0;
  (%752, %753)
}

def @func_1578() -> (Tensor[(8, 6, 3), bool],) {
  %754 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %755 = %754.1;
  (%755,)
}

def @func_7154(%var_7149: Tensor[(4, 3, 11), float32]) -> Tensor[(4, 3, 11), float32] {
  %756 = cast(%var_7149, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %757 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(4, 3, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %758 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%758, %759) /* ty=Tensor[(4, 3, 11), float32] */
}

def @func_7723() -> Tensor[(7, 10, 5), float64] {
  %760 = @func_5899() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float64]) */;
  %760.2
}

def @func_1872() -> Tensor[(8, 6, 3), float64] {
  %761 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %762 = %761.1;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  asinh(%763) /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_371() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %764 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %765 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %766 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %767 = %766.0;
  %768 = cast(%767, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %769 = log10(%768) /* ty=Tensor[(8, 6, 3), float32] */;
  %770 = cast(%769, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %771 = %764.0;
  %772 = %765.0;
  %773 = erf(%770) /* ty=Tensor[(8, 6, 3), float64] */;
  (%771, %772, %773)
}

def @func_4468(%var_4456: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), float32], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) {
  %774 = cast(%var_4456, dtype="float32") /* ty=Tensor[(16, 9, 13), float32] */;
  %775 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %776 = @func_3788() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) */;
  %777 = log10(%774) /* ty=Tensor[(16, 9, 13), float32] */;
  %778 = %775.0;
  %779 = %776.2;
  (%777, %778, %779)
}

def @func_1507() -> (Tensor[(8, 6, 3), float64],) {
  %780 = @func_1066() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %781 = %780.1;
  (%781,)
}

def @func_2325(%var_2275: Tensor[(8, 6, 13), uint16], %var_2276: Tensor[(8, 6, 13), uint16], %var_2311: Tensor[(8, 6, 13), float32]) -> (Tensor[(8, 6, 13), bool], Tensor[(8, 6, 13), float32]) {
  %782 = cast(%var_2276, dtype="uint16") /* ty=Tensor[(8, 6, 13), uint16] */;
  %783 = shape_of(%var_2275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%var_2275, dtype="uint16") /* ty=Tensor[(8, 6, 13), uint16] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %786 = right_shift(%784, %785) /* ty=Tensor[(8, 6, 13), uint16] */;
  %787 = cast(%786, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %788 = log2(%787) /* ty=Tensor[(8, 6, 13), float32] */;
  %789 = cast(%var_2311, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %790 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %791 = cast(%788, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %792 = dyn.reshape(%789, %790, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %793 = cast(%var_2311, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %794 = less(%791, %792) /* ty=Tensor[(8, 6, 13), bool] */;
  %795 = atanh(%793) /* ty=Tensor[(8, 6, 13), float32] */;
  (%794, %795)
}

def @func_4315() -> (Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) {
  %796 = @func_3909() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %797 = @func_3320() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */;
  %798 = %796.0;
  %799 = %797.0;
  (%798, %799)
}

def @func_6174(%var_6125: Tensor[(20), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(2, 2, 5), float32], Tensor[(20), float32], Tensor[(8, 6, 3), bool], Tensor[(315), float64], Tensor[(7, 5, 9), float64]) {
  %800 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %801 = cast(%var_6125, dtype="float32") /* ty=Tensor[(20), float32] */;
  %802 = cast(%var_6125, dtype="float32") /* ty=Tensor[(20), float32] */;
  %803 = reshape(%801, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), float32] */;
  %804 = reshape(%802, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), float32] */;
  %805 = %800.0;
  %806 = cast(%805, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %807 = reshape(%806, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %808 = @func_1326(%807) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %809 = cast(meta[relay.Constant][29] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %810 = reshape(%809, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
  %811 = @func_601(%810) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) */;
  %812 = %811.2;
  %813 = cast(%812, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %814 = @func_6073(%803, %804) /* ty=Tensor[(2, 2, 5), float32] */;
  %815 = %808.1;
  %816 = atanh(%813) /* ty=Tensor[(7, 5, 9), float64] */;
  (%805, %814, %var_6125, %815, meta[relay.Constant][29] /* ty=Tensor[(315), float64] */, %816)
}

def @func_6724() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) {
  %817 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %818 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %819 = %817.0;
  %820 = @func_6634() /* ty=Tensor[(8, 6, 3), float64] */;
  %821 = %818.0;
  (%819, %820, %821)
}

def @func_8107() -> (Tensor[(8, 6, 3), bool],) {
  %822 = @func_2547() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %823 = %822.0;
  (%823,)
}

def @func_8663() -> (Tensor[(7, 10, 5), float64],) {
  %824 = @func_7723() /* ty=Tensor[(7, 10, 5), float64] */;
  (%824,)
}

def @func_3547(%var_3540: Tensor[(12, 3, 9), float64]) -> (Tensor[(12, 3, 9), float64], Tensor[(12, 3, 9), float32]) {
  %825 = cast(%var_3540, dtype="float64") /* ty=Tensor[(12, 3, 9), float64] */;
  %826 = cast(%var_3540, dtype="float32") /* ty=Tensor[(12, 3, 9), float32] */;
  %827 = atanh(%825) /* ty=Tensor[(12, 3, 9), float64] */;
  %828 = exp(%826) /* ty=Tensor[(12, 3, 9), float32] */;
  (%827, %828)
}

def @func_2027() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %829 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %830 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %831 = %829.0;
  %832 = %830.1;
  (%831, %832)
}

def @func_3235() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %833 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %834 = @func_416() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %835 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %836 = @func_1872() /* ty=Tensor[(8, 6, 3), float64] */;
  %837 = %833.0;
  %838 = %834.1;
  %839 = %835.1;
  (%836, %837, %838, %839)
}

def @func_2792() -> (Tensor[(8, 6, 3), bool],) {
  %840 = @func_1595() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %841 = %840.0;
  (%841,)
}

def @func_1812(%var_1780: Tensor[(16, 14, 3), float64], %var_1781: Tensor[(16, 14, 3), float64]) -> Tensor[(16, 14, 3), bool] {
  %842 = cast(%var_1781, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %843 = shape_of(%var_1780, dtype="int32") /* ty=Tensor[(3), int32] */;
  %844 = cast(%var_1780, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %846 = mod(%844, %845) /* ty=Tensor[(16, 14, 3), float64] */;
  %847 = cast(%846, dtype="int64") /* ty=Tensor[(16, 14, 3), int64] */;
  %848 = shape_of(%var_1781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%var_1781, dtype="int64") /* ty=Tensor[(16, 14, 3), int64] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %851 = bitwise_or(%849, %850) /* ty=Tensor[(16, 14, 3), int64] */;
  %852 = cast(%851, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %853 = shape_of(%846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%846, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%854, %855) /* ty=Tensor[(16, 14, 3), bool] */
}

def @func_5114() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %856 = @func_4796() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %857 = %856.0;
  %858 = cast(%857, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %859 = reshape(%858, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %860 = @func_1326(%859) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %861 = %860.1;
  (%857, %861)
}

def @func_3659() -> (Tensor[(8, 6, 3), bool],) {
  %862 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %863 = %862.1;
  (%863,)
}

def @func_8393() -> (Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), float64]) {
  %864 = @func_6264() /* ty=(Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), int8], Tensor[(24, 6), float64]) */;
  %865 = @func_7278() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %866 = %864.1;
  %867 = %865.0;
  (%866, %867)
}

def @func_7245(%var_7243: Tensor[(616), int16]) -> (Tensor[(8, 6, 3), bool], Tensor[(11, 4, 14), int16], Tensor[(616), int16]) {
  %868 = @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %869 = cast(%var_7243, dtype="int16") /* ty=Tensor[(616), int16] */;
  %870 = cast(%var_7243, dtype="int16") /* ty=Tensor[(616), int16] */;
  %871 = reshape(%869, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), int16] */;
  %872 = reshape(%870, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), int16] */;
  %873 = %868.0;
  %874 = @func_6187(%871, %872) /* ty=Tensor[(11, 4, 14), int16] */;
  (%873, %874, %var_7243)
}

def @func_6791(%var_6786: Tensor[(12, 7, 13), int8]) -> Tensor[(12, 7, 13), int8] {
  %875 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 7, 13), int8] */, dtype="int8") /* ty=Tensor[(12, 7, 13), int8] */;
  %876 = shape_of(%var_6786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(%var_6786, dtype="int8") /* ty=Tensor[(12, 7, 13), int8] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  maximum(%877, %878) /* ty=Tensor[(12, 7, 13), int8] */
}

def @func_6998() -> (Tensor[(8, 6, 3), bool],) {
  %879 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %880 = %879.0;
  (%880,)
}

def @func_6762() -> (Tensor[(8, 6, 3), bool], Tensor[(1872), float32], Tensor[(16, 64), float64], Tensor[(1872), float32]) {
  %881 = @func_6471() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), bool], Tensor[(14, 70), int8], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %882 = cast(meta[relay.Constant][31] /* ty=Tensor[(16, 64), float64] */, dtype="float64") /* ty=Tensor[(16, 64), float64] */;
  %883 = cast(meta[relay.Constant][32] /* ty=Tensor[(1872), float32] */, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %884 = reshape(%882, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %885 = reshape(%883, newshape=[1872]) /* ty=Tensor[(1872), float32] */;
  %886 = @func_6511(%884, %885) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 16, 8), float64], Tensor[(1024), float64], Tensor[(8, 6, 3), bool], Tensor[(1872), float32]) */;
  %887 = %881.5;
  %888 = %886.4;
  (%887, %888, meta[relay.Constant][31] /* ty=Tensor[(16, 64), float64] */, meta[relay.Constant][32] /* ty=Tensor[(1872), float32] */)
}

def @func_4639() -> (Tensor[(8, 6, 3), bool],) {
  %889 = @func_3320() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */;
  %890 = %889.1;
  (%890,)
}

def @func_1112() -> Tensor[(8, 6, 3), bool] {
  %891 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %891.0
}

def @func_4415(%var_4369: Tensor[(6, 9, 6), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), bool], Tensor[(8, 6, 3), float64], Tensor[(1176), float32], Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float64]) {
  %892 = @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %893 = @func_3788() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) */;
  %894 = @func_3719() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %895 = @func_1420() /* ty=(Tensor[(1176), float32], Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), bool], Tensor[(315), float64]) */;
  %896 = %895.1;
  %897 = cast(%var_4369, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %898 = shape_of(%896, dtype="int32") /* ty=Tensor[(3), int32] */;
  %899 = cast(%896, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %901 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %902 = @func_4315() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %903 = cast(%var_4369, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %904 = erf(%903) /* ty=Tensor[(6, 9, 6), float32] */;
  %905 = cast(%904, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %906 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
  %907 = %892.0;
  %908 = %893.1;
  %909 = %894.3;
  %910 = not_equal(%899, %900) /* ty=Tensor[(6, 9, 6), bool] */;
  %911 = %901.0;
  %912 = %902.1;
  %913 = log2(%905) /* ty=Tensor[(6, 9, 6), float32] */;
  %914 = %906.0;
  (%907, %908, %909, %910, %911, %912, %913, %914)
}

def @func_5594(%var_5589: Tensor[(1920), bool]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), float32], Tensor[(624), uint16], Tensor[(16, 12, 10), float64], Tensor[(1920), bool]) {
  %915 = @func_3359() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %916 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %917 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %918 = cast(meta[relay.Constant][33] /* ty=Tensor[(624), uint16] */, dtype="float32") /* ty=Tensor[(624), float32] */;
  %919 = reshape(%916, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), uint16] */;
  %920 = reshape(%917, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), uint16] */;
  %921 = reshape(%918, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
  %922 = @func_2325(%919, %920, %921) /* ty=(Tensor[(8, 6, 13), bool], Tensor[(8, 6, 13), float32]) */;
  %923 = cast(%var_5589, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %924 = reshape(%923, newshape=[16, 12, 10]) /* ty=Tensor[(16, 12, 10), bool] */;
  %925 = %915.1;
  %926 = %922.1;
  %927 = @func_3994(%924) /* ty=Tensor[(16, 12, 10), float64] */;
  (%925, %926, meta[relay.Constant][33] /* ty=Tensor[(624), uint16] */, %927, %var_5589)
}

def @func_2820(%var_2816: Tensor[(8, 16, 8), float64]) -> (Tensor[(8, 16, 8), float64],) {
  %928 = cast(%var_2816, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %929 = asinh(%928) /* ty=Tensor[(8, 16, 8), float64] */;
  (%929,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2128(%var_2034: Tensor[(8, 6, 3), bool], %var_2058: Tensor[(8, 6, 3), bool]) -> (Tensor[(8, 6, 3), int16], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) {
  %0 = @func_416() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %1 = %0.0;
  %2 = cast(%var_2034, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %6 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %7 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %8 = cast(%var_2058, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %9 = shape_of(%var_2034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_2034, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %12 = power(%10, %11) /* ty=Tensor[(8, 6, 3), float32] */;
  %13 = cast(%var_2034, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %17 = floor_divide(%15, %16) /* ty=Tensor[(8, 6, 3), float32] */;
  %18 = cast(%17, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %19 = reshape(%18, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %20 = @func_1326(%19) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %21 = @func_1989() /* ty=(Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
  %22 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %23 = subtract(%4, %5) /* ty=Tensor[(8, 6, 3), int16] */;
  %24 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %25 = %6.1;
  %26 = %7.0;
  %27 = %20.2;
  %28 = %21.9;
  %29 = %22.0;
  (%23, %24, %25, %26, %17, %27, %28, %29)
}

def @func_4641() -> (Tensor[(8, 6, 3), bool],) {
  @func_4639() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_6187(%var_6178: Tensor[(11, 4, 14), int16], %var_6179: Tensor[(11, 4, 14), int16]) -> Tensor[(11, 4, 14), int16] {
  %30 = cast(%var_6179, dtype="int16") /* ty=Tensor[(11, 4, 14), int16] */;
  %31 = shape_of(%var_6178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_6178, dtype="int16") /* ty=Tensor[(11, 4, 14), int16] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%32, %33) /* ty=Tensor[(11, 4, 14), int16] */
}

def @func_1990() -> (Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) {
  %63 = fn () -> (Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) {
    %34 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
    %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 70), int8] */, dtype="int8") /* ty=Tensor[(14, 70), int8] */;
    %36 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 70), int8] */, dtype="int8") /* ty=Tensor[(14, 70), int8] */;
    %37 = reshape(%35, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
    %38 = reshape(%36, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
    %39 = @func_1468(%37, %38) /* ty=(Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) */;
    %40 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 70), int8] */, dtype="float64") /* ty=Tensor[(14, 70), float64] */;
    %41 = exp(%40) /* ty=Tensor[(14, 70), float64] */;
    %42 = cast(%41, dtype="float64") /* ty=Tensor[(14, 70), float64] */;
    %43 = @func_1066() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
    %44 = cast(%41, dtype="float32") /* ty=Tensor[(14, 70), float32] */;
    %45 = sigmoid(%44) /* ty=Tensor[(14, 70), float32] */;
    %46 = cast(%45, dtype="float32") /* ty=Tensor[(14, 70), float32] */;
    %47 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
    %48 = cast(%47, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %49 = reshape(%48, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
    %50 = @func_1326(%49) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %51 = @func_1903() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(980), int8]) */;
    %52 = @func_1420() /* ty=(Tensor[(1176), float32], Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), bool], Tensor[(315), float64]) */;
    %53 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
    %54 = %34.0;
    %55 = %39.0;
    %56 = atanh(%42) /* ty=Tensor[(14, 70), float64] */;
    %57 = %43.2;
    %58 = sin(%46) /* ty=Tensor[(14, 70), float32] */;
    %59 = %50.1;
    %60 = %51.1;
    %61 = %52.0;
    %62 = %53.2;
    (%54, %55, %56, %57, %58, %47, %59, %60, %61, %62)
  };
  %63() /* ty=(Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */
}

def @func_7248(%var_7246: Tensor[(616), int16]) -> (Tensor[(8, 6, 3), bool], Tensor[(11, 4, 14), int16], Tensor[(616), int16]) {
  @func_7245(%var_7246) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(11, 4, 14), int16], Tensor[(616), int16]) */
}

def @func_5824(%var_5822: Tensor[(3, 700), float64]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(3, 700), float64]) {
  @func_5821(%var_5822) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(3, 700), float64]) */
}

def @func_4471(%var_4469: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), float32], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) {
  @func_4468(%var_4469) /* ty=(Tensor[(16, 9, 13), float32], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) */
}

def @func_7655() -> Tensor[(8, 6, 3), float64] {
  %65 = fn () -> Tensor[(8, 6, 3), float64] {
    %64 = @func_7506() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %64.0
  };
  %65() /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_133(%var_92: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) {
  %66 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 14, 7), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 7), bool] */;
  %67 = shape_of(%var_92, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%var_92, dtype="bool") /* ty=Tensor[(12, 14, 7), bool] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %70 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %71 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %72 = cast(%var_92, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %73 = acos(%72) /* ty=Tensor[(12, 14, 7), float32] */;
  %74 = cast(meta[relay.Constant][2] /* ty=Tensor[(12, 14, 7), float32] */, dtype="bool") /* ty=Tensor[(12, 14, 7), bool] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="bool") /* ty=Tensor[(12, 14, 7), bool] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %78 = not_equal(%68, %69) /* ty=Tensor[(12, 14, 7), bool] */;
  %79 = %70.0;
  %80 = %71.0;
  %81 = logical_and(%76, %77) /* ty=Tensor[(12, 14, 7), bool] */;
  (%78, %79, %80, %81)
}

def @func_7876() -> Tensor[(8, 6, 3), bool] {
  %83 = fn () -> Tensor[(8, 6, 3), bool] {
    %82 = @func_5114() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
    %82.0
  };
  %83() /* ty=Tensor[(8, 6, 3), bool] */
}

def @func_2792() -> (Tensor[(8, 6, 3), bool],) {
  %84 = @func_1595() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %85 = %84.0;
  (%85,)
}

def @func_7157(%var_7155: Tensor[(4, 3, 11), float32]) -> Tensor[(4, 3, 11), float32] {
  @func_7154(%var_7155) /* ty=Tensor[(4, 3, 11), float32] */
}

def @func_1421() -> (Tensor[(1176), float32], Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), bool], Tensor[(315), float64]) {
  %94 = fn () -> (Tensor[(1176), float32], Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), bool], Tensor[(315), float64]) {
    %86 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
    %87 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
    %88 = cast(meta[relay.Constant][3] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %89 = reshape(%88, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
    %90 = @func_601(%89) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) */;
    %91 = %86.2;
    %92 = %87.0;
    %93 = %90.0;
    (%91, %92, %93, meta[relay.Constant][3] /* ty=Tensor[(315), float64] */)
  };
  %94() /* ty=(Tensor[(1176), float32], Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), bool], Tensor[(315), float64]) */
}

def @func_8024() -> (Tensor[(8, 6, 3), bool],) {
  %97 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %95 = @func_1989() /* ty=(Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
    %96 = %95.3;
    (%96,)
  };
  %97() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_2397(%var_2350: Tensor[(1176), float32]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32], Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) {
  %98 = @func_2027() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %99 = cast(%var_2350, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %100 = reshape(%99, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %101 = @func_826(%100) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
  %102 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %103 = %98.0;
  %104 = %101.5;
  %105 = %102.1;
  (%103, %104, %var_2350, %105)
}

def @func_1872() -> Tensor[(8, 6, 3), float64] {
  %106 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %107 = %106.1;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  asinh(%108) /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_5245(%var_5243: Tensor[(4, 11, 11), float32], %var_5244: Tensor[(4, 11, 11), bool]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(4, 11, 11), uint16], Tensor[(8, 6, 3), bool]) {
  %129 = fn (%var_5187: Tensor[(4, 11, 11), float32], %var_5221: Tensor[(4, 11, 11), bool]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(4, 11, 11), uint16], Tensor[(8, 6, 3), bool]) {
    %109 = @func_4727() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %110 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %111 = cast(%var_5187, dtype="float32") /* ty=Tensor[(4, 11, 11), float32] */;
    %112 = sqrt(%111) /* ty=Tensor[(4, 11, 11), float32] */;
    %113 = cast(%var_5187, dtype="bool") /* ty=Tensor[(4, 11, 11), bool] */;
    %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
    %115 = cast(%112, dtype="bool") /* ty=Tensor[(4, 11, 11), bool] */;
    %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %117 = equal(%115, %116) /* ty=Tensor[(4, 11, 11), bool] */;
    %118 = cast(%var_5221, dtype="uint16") /* ty=Tensor[(4, 11, 11), uint16] */;
    %119 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
    %120 = cast(%117, dtype="uint16") /* ty=Tensor[(4, 11, 11), uint16] */;
    %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %122 = %109.0;
    %123 = cast(%122, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %124 = reshape(%123, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
    %125 = @func_2996(%124) /* ty=(Tensor[(8, 6, 3), bool],) */;
    %126 = %110.0;
    %127 = minimum(%120, %121) /* ty=Tensor[(4, 11, 11), uint16] */;
    %128 = %125.0;
    (%122, %126, %127, %128)
  };
  %129(%var_5243, %var_5244) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(4, 11, 11), uint16], Tensor[(8, 6, 3), bool]) */
}

def @func_7280() -> (Tensor[(8, 6, 3), float64],) {
  @func_7278() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_5969(%var_5967: Tensor[(1, 9), float32]) -> (Tensor[(1, 9), float32], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  @func_5966(%var_5967) /* ty=(Tensor[(1, 9), float32], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_1114() -> Tensor[(8, 6, 3), bool] {
  @func_1112() /* ty=Tensor[(8, 6, 3), bool] */
}

def @func_2936() -> (Tensor[(8, 6, 3), float64],) {
  @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_752(%var_730: Tensor[(35, 9), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(7, 5, 9), float64], Tensor[(35, 9), float64], Tensor[(8, 6, 3), bool]) {
  %130 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %131 = cast(%var_730, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
  %132 = reshape(%131, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
  %133 = @func_601(%132) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) */;
  %134 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %135 = %134.0;
  %136 = cast(%var_730, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
  %137 = reshape(%136, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
  %138 = @func_601(%137) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) */;
  %139 = %138.1;
  %140 = cast(%139, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %141 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%135, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = %130.1;
  %145 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %146 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %147 = %133.2;
  %148 = logical_and(%142, %143) /* ty=Tensor[(8, 6, 3), bool] */;
  (%144, %145, %146, %147, %var_730, %148)
}

def @func_1507() -> (Tensor[(8, 6, 3), float64],) {
  %149 = @func_1066() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %150 = %149.1;
  (%150,)
}

def @func_2794() -> (Tensor[(8, 6, 3), bool],) {
  @func_2792() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_604(%var_602: Tensor[(7, 5, 9), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) {
  @func_601(%var_602) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) */
}

def @func_6689() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %151 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %152 = @func_4292() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %153 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %154 = %151.0;
  %155 = %152.0;
  %156 = %153.0;
  (%154, %155, %156)
}

def @func_5899() -> (Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float64]) {
  %157 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %158 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
  %159 = %158.0;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %161 = sinh(%160) /* ty=Tensor[(7, 10, 5), float64] */;
  %162 = cast(%161, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %163 = cast(%161, dtype="float64") /* ty=Tensor[(7, 10, 5), float64] */;
  %164 = %157.0;
  %165 = cos(%162) /* ty=Tensor[(7, 10, 5), float64] */;
  %166 = log10(%163) /* ty=Tensor[(7, 10, 5), float64] */;
  (%164, %165, %166)
}

def @func_8109() -> (Tensor[(8, 6, 3), bool],) {
  @func_8107() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_4418(%var_4416: Tensor[(6, 9, 6), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), bool], Tensor[(8, 6, 3), float64], Tensor[(1176), float32], Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float64]) {
  @func_4415(%var_4416) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), bool], Tensor[(8, 6, 3), float64], Tensor[(1176), float32], Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float64]) */
}

def @func_7230(%var_7228: Tensor[(1, 90), float64]) -> (Tensor[(8, 6, 3), float64], Tensor[(6, 1, 15), float32], Tensor[(1, 90), float64]) {
  %167 = @func_2712() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) */;
  %168 = cast(%var_7228, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %169 = reshape(%168, newshape=[6, 1, 15]) /* ty=Tensor[(6, 1, 15), float64] */;
  %170 = @func_4051(%169) /* ty=(Tensor[(6, 1, 15), float32],) */;
  %171 = %167.1;
  %172 = %170.0;
  (%171, %172, %var_7228)
}

def @func_3119() -> (Tensor[(8, 6, 3), float64],) {
  @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_5401(%var_5397: Tensor[(10, 15, 5), uint64]) -> (Tensor[(10, 15, 5), uint64],) {
  %173 = cast(meta[relay.Constant][4] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %174 = cast(%var_5397, dtype="uint64") /* ty=Tensor[(10, 15, 5), uint64] */;
  %175 = right_shift(%173, %174) /* ty=Tensor[(10, 15, 5), uint64] */;
  (%175,)
}

def @func_8156() -> (Tensor[(8, 6, 3), bool],) {
  %178 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %176 = @func_7339() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
    %177 = %176.1;
    (%177,)
  };
  %178() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_2132(%var_2130: Tensor[(8, 6, 3), bool], %var_2131: Tensor[(8, 6, 3), bool]) -> (Tensor[(8, 6, 3), int16], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) {
  @func_2128(%var_2130, %var_2131) /* ty=(Tensor[(8, 6, 3), int16], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */
}

def @func_6073(%var_6040: Tensor[(2, 2, 5), float32], %var_6041: Tensor[(2, 2, 5), float32]) -> Tensor[(2, 2, 5), float32] {
  %179 = cast(%var_6041, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  %180 = shape_of(%var_6040, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%var_6040, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %183 = divide(%181, %182) /* ty=Tensor[(2, 2, 5), float32] */;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  sigmoid(%184) /* ty=Tensor[(2, 2, 5), float32] */
}

def @func_2714() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) {
  @func_2712() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) */
}

def @func_6980() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(624), uint16], Tensor[(312, 2), uint16], Tensor[(8, 6, 3), float64]) {
  %195 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(624), uint16], Tensor[(312, 2), uint16], Tensor[(8, 6, 3), float64]) {
    %185 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %186 = @func_2547() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %187 = cast(meta[relay.Constant][5] /* ty=Tensor[(312, 2), uint16] */, dtype="uint16") /* ty=Tensor[(312, 2), uint16] */;
    %188 = reshape(%187, newshape=[624]) /* ty=Tensor[(624), uint16] */;
    %189 = @func_4998(%188) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) */;
    %190 = @func_4706() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %191 = %185.0;
    %192 = %186.0;
    %193 = %189.2;
    %194 = %190.2;
    (%191, %192, %193, meta[relay.Constant][5] /* ty=Tensor[(312, 2), uint16] */, %194)
  };
  %195() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(624), uint16], Tensor[(312, 2), uint16], Tensor[(8, 6, 3), float64]) */
}

def @func_6999() -> (Tensor[(8, 6, 3), bool],) {
  %198 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %196 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %197 = %196.0;
    (%197,)
  };
  %198() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_8591(%var_8590: Tensor[(9, 4, 9), float32]) -> (Tensor[(9, 4, 9), int8], Tensor[(8, 6, 3), float64]) {
  %208 = fn (%var_8564: Tensor[(9, 4, 9), float32]) -> (Tensor[(9, 4, 9), int8], Tensor[(8, 6, 3), float64]) {
    %199 = cast(%var_8564, dtype="float32") /* ty=Tensor[(9, 4, 9), float32] */;
    %200 = asinh(%199) /* ty=Tensor[(9, 4, 9), float32] */;
    %201 = cast(%var_8564, dtype="int8") /* ty=Tensor[(9, 4, 9), int8] */;
    %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%200, dtype="int8") /* ty=Tensor[(9, 4, 9), int8] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %205 = @func_7278() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %206 = logical_xor(%203, %204) /* ty=Tensor[(9, 4, 9), int8] */;
    %207 = %205.0;
    (%206, %207)
  };
  %208(%var_8590) /* ty=(Tensor[(9, 4, 9), int8], Tensor[(8, 6, 3), float64]) */
}

def @func_3790() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) {
  @func_3788() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) */
}

def @func_1144() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %212 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
    %209 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %210 = %209.0;
    %211 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
    (%210, %211)
  };
  %212() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */
}

def @func_418() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  @func_416() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_4051(%var_4030: Tensor[(6, 1, 15), float64]) -> (Tensor[(6, 1, 15), float32],) {
  %213 = cast(%var_4030, dtype="float64") /* ty=Tensor[(6, 1, 15), float64] */;
  %214 = exp(%213) /* ty=Tensor[(6, 1, 15), float64] */;
  %215 = cast(%214, dtype="float32") /* ty=Tensor[(6, 1, 15), float32] */;
  %216 = sqrt(%215) /* ty=Tensor[(6, 1, 15), float32] */;
  (%216,)
}

def @func_4707() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %223 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
    %217 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %218 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %219 = @func_1539() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */;
    %220 = %217.0;
    %221 = %218.0;
    %222 = %219.1;
    (%220, %221, %222)
  };
  %223() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */
}

def @func_7970() -> (Tensor[(8, 6, 3), float64],) {
  @func_7968() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_3496() -> (Tensor[(8, 6, 3), bool], Tensor[(7, 10, 5), int32], Tensor[(8, 6, 3), float32]) {
  %231 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(7, 10, 5), int32], Tensor[(8, 6, 3), float32]) {
    %224 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
    %225 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %226 = %225.0;
    %227 = cast(%226, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
    %228 = @func_842() /* ty=Tensor[(8, 6, 3), bool] */;
    %229 = %224.0;
    %230 = cosh(%227) /* ty=Tensor[(8, 6, 3), float32] */;
    (%228, %229, %230)
  };
  %231() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(7, 10, 5), int32], Tensor[(8, 6, 3), float32]) */
}

def @func_5821(%var_5805: Tensor[(3, 700), float64]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(3, 700), float64]) {
  %232 = cast(%var_5805, dtype="float64") /* ty=Tensor[(3, 700), float64] */;
  %233 = reshape(%232, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float64] */;
  %234 = @func_3152(%233) /* ty=(Tensor[(15, 10, 14), float64], Tensor[(8, 6, 3), bool]) */;
  %235 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %236 = %234.1;
  (%235, %236, %var_5805)
}

def @func_7435() -> (Tensor[(8, 6, 3), bool], Tensor[(7, 10, 5), int32]) {
  @func_7433() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(7, 10, 5), int32]) */
}

def @func_7717() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %241 = fn () -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
    %237 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %238 = @func_3719() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
    %239 = %237.0;
    %240 = %238.0;
    (%239, %240)
  };
  %241() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */
}

def @func_3550(%var_3548: Tensor[(12, 3, 9), float64]) -> (Tensor[(12, 3, 9), float64], Tensor[(12, 3, 9), float32]) {
  @func_3547(%var_3548) /* ty=(Tensor[(12, 3, 9), float64], Tensor[(12, 3, 9), float32]) */
}

def @func_5596(%var_5595: Tensor[(1920), bool]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), float32], Tensor[(624), uint16], Tensor[(16, 12, 10), float64], Tensor[(1920), bool]) {
  %255 = fn (%var_5589: Tensor[(1920), bool]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), float32], Tensor[(624), uint16], Tensor[(16, 12, 10), float64], Tensor[(1920), bool]) {
    %242 = @func_3359() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
    %243 = cast(meta[relay.Constant][6] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
    %244 = cast(meta[relay.Constant][6] /* ty=Tensor[(624), uint16] */, dtype="uint16") /* ty=Tensor[(624), uint16] */;
    %245 = cast(meta[relay.Constant][6] /* ty=Tensor[(624), uint16] */, dtype="float32") /* ty=Tensor[(624), float32] */;
    %246 = reshape(%243, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), uint16] */;
    %247 = reshape(%244, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), uint16] */;
    %248 = reshape(%245, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
    %249 = @func_2325(%246, %247, %248) /* ty=(Tensor[(8, 6, 13), bool], Tensor[(8, 6, 13), float32]) */;
    %250 = cast(%var_5589, dtype="bool") /* ty=Tensor[(1920), bool] */;
    %251 = reshape(%250, newshape=[16, 12, 10]) /* ty=Tensor[(16, 12, 10), bool] */;
    %252 = %242.1;
    %253 = %249.1;
    %254 = @func_3994(%251) /* ty=Tensor[(16, 12, 10), float64] */;
    (%252, %253, meta[relay.Constant][6] /* ty=Tensor[(624), uint16] */, %254, %var_5589)
  };
  %255(%var_5595) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), float32], Tensor[(624), uint16], Tensor[(16, 12, 10), float64], Tensor[(1920), bool]) */
}

def @func_7813(%var_7811: Tensor[(15, 6, 12), float32]) -> (Tensor[(15, 6, 12), float32], Tensor[(1764), float64], Tensor[(8, 16, 8), bool]) {
  @func_7810(%var_7811) /* ty=(Tensor[(15, 6, 12), float32], Tensor[(1764), float64], Tensor[(8, 16, 8), bool]) */
}

def @func_4468(%var_4456: Tensor[(16, 9, 13), float32]) -> (Tensor[(16, 9, 13), float32], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) {
  %256 = cast(%var_4456, dtype="float32") /* ty=Tensor[(16, 9, 13), float32] */;
  %257 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %258 = @func_3788() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) */;
  %259 = log10(%256) /* ty=Tensor[(16, 9, 13), float32] */;
  %260 = %257.0;
  %261 = %258.2;
  (%259, %260, %261)
}

def @func_2934() -> (Tensor[(8, 6, 3), float64],) {
  %262 = @func_1112() /* ty=Tensor[(8, 6, 3), bool] */;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %264 = acosh(%263) /* ty=Tensor[(8, 6, 3), float64] */;
  (%264,)
}

def @func_5473(%var_5471: Tensor[(11, 8, 1), float64], %var_5472: Tensor[(11, 8, 6), float64]) -> (Tensor[(11, 8, 6), float64], Tensor[(8, 6, 3), float64]) {
  %269 = fn (%var_5461: Tensor[(11, 8, 1), float64], %var_5462: Tensor[(11, 8, 6), float64]) -> (Tensor[(11, 8, 6), float64], Tensor[(8, 6, 3), float64]) {
    %265 = cast(%var_5461, dtype="float64") /* ty=Tensor[(11, 8, 1), float64] */;
    %266 = cast(%var_5462, dtype="float64") /* ty=Tensor[(11, 8, 6), float64] */;
    %267 = subtract(%265, %266) /* ty=Tensor[(11, 8, 6), float64] */;
    %268 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
    (%267, %268)
  };
  %269(%var_5471, %var_5472) /* ty=(Tensor[(11, 8, 6), float64], Tensor[(8, 6, 3), float64]) */
}

def @func_497() -> (Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) {
  @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */
}

def @func_4596(%var_4594: int32) -> (Tensor[(5, 16, 5), bool],) {
  @func_4593(%var_4594) /* ty=(Tensor[(5, 16, 5), bool],) */
}

def @func_4293() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %274 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
    %270 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %271 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %272 = %270.0;
    %273 = %271.0;
    (%272, %273)
  };
  %274() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_7340() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %283 = fn () -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
    %275 = @func_1539() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */;
    %276 = @func_6333() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
    %277 = @func_4727() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %278 = @func_6333() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
    %279 = %275.1;
    %280 = %276.1;
    %281 = %277.0;
    %282 = %278.1;
    (%279, %280, %281, %282)
  };
  %283() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */
}

def @func_1067() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %292 = fn () -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
    %284 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %285 = %284.0;
    %286 = cast(%285, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
    %287 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %288 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %289 = atan(%286) /* ty=Tensor[(8, 6, 3), float64] */;
    %290 = %287.2;
    %291 = %288.1;
    (%289, %290, %291)
  };
  %292() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */
}

def @func_6334() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %297 = fn () -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
    %293 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %294 = @func_2712() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) */;
    %295 = %293.0;
    %296 = %294.0;
    (%295, %296)
  };
  %297() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */
}

def @func_8070() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %302 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
    %298 = @func_3909() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %299 = @func_6724() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */;
    %300 = %298.0;
    %301 = %299.2;
    (%300, %301)
  };
  %302() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */
}

def @func_2712() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) {
  %303 = @func_1486() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %304 = %303.0;
  %305 = cast(%304, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %306 = cos(%305) /* ty=Tensor[(8, 6, 3), float32] */;
  %307 = cast(%306, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %308 = @func_1112() /* ty=Tensor[(8, 6, 3), bool] */;
  %309 = cast(%308, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %310 = reshape(%307, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %311 = reshape(%309, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
  %312 = @func_2128(%310, %311) /* ty=(Tensor[(8, 6, 3), int16], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %313 = cast(%306, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
  %314 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
  %315 = %312.5;
  %316 = exp(%313) /* ty=Tensor[(8, 6, 3), float32] */;
  %317 = %314.0;
  (%308, %315, %316, %317)
}

def @func_3909() -> (Tensor[(8, 6, 3), bool],) {
  %318 = @func_842() /* ty=Tensor[(8, 6, 3), bool] */;
  (%318,)
}

def @func_1329(%var_1327: Tensor[(8, 6, 3), bool]) -> (Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  @func_1326(%var_1327) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */
}

def @func_3996(%var_3995: Tensor[(16, 12, 10), bool]) -> Tensor[(16, 12, 10), float64] {
  %328 = fn (%var_3968: Tensor[(16, 12, 10), bool]) -> Tensor[(16, 12, 10), float64] {
    %319 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 12, 10), bool] */, dtype="bool") /* ty=Tensor[(16, 12, 10), bool] */;
    %320 = shape_of(%var_3968, dtype="int32") /* ty=Tensor[(3), int32] */;
    %321 = cast(%var_3968, dtype="bool") /* ty=Tensor[(16, 12, 10), bool] */;
    %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %323 = logical_or(%321, %322) /* ty=Tensor[(16, 12, 10), bool] */;
    %324 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 12, 10), bool] */, dtype="float64") /* ty=Tensor[(16, 12, 10), float64] */;
    %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
    %326 = cast(%323, dtype="float64") /* ty=Tensor[(16, 12, 10), float64] */;
    %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%326, %327) /* ty=Tensor[(16, 12, 10), float64] */
  };
  %328(%var_3995) /* ty=Tensor[(16, 12, 10), float64] */
}

def @func_3867() -> Tensor[(8, 6, 3), float64] {
  @func_3865() /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_6725() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) {
  %334 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) {
    %329 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %330 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %331 = %329.0;
    %332 = @func_6634() /* ty=Tensor[(8, 6, 3), float64] */;
    %333 = %330.0;
    (%331, %332, %333)
  };
  %334() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */
}

def @func_8559() -> Tensor[(8, 6, 3), bool] {
  %336 = fn () -> Tensor[(8, 6, 3), bool] {
    %335 = @func_8155() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %335.0
  };
  %336() /* ty=Tensor[(8, 6, 3), bool] */
}

def @func_2996(%var_2966: Tensor[(8, 6, 3), bool]) -> (Tensor[(8, 6, 3), bool],) {
  %337 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %338 = %337.0;
  %339 = cast(%var_2966, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %343 = less(%341, %342) /* ty=Tensor[(8, 6, 3), bool] */;
  (%343,)
}

def @func_495() -> (Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) {
  %344 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %345 = %344.0;
  %346 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 6, 3), bool] */, dtype="int32") /* ty=Tensor[(8, 6, 3), int32] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="int32") /* ty=Tensor[(8, 6, 3), int32] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %350 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %351 = right_shift(%348, %349) /* ty=Tensor[(8, 6, 3), int32] */;
  %352 = %350.0;
  (%351, %352)
}

def @func_4096(%var_4095: Tensor[(14, 3, 8), float64]) -> (Tensor[(14, 3, 8), float64], Tensor[(8, 6, 3), bool], Tensor[(1, 144), bool]) {
  %359 = fn (%var_4084: Tensor[(14, 3, 8), float64]) -> (Tensor[(14, 3, 8), float64], Tensor[(8, 6, 3), bool], Tensor[(1, 144), bool]) {
    %353 = cast(%var_4084, dtype="float64") /* ty=Tensor[(14, 3, 8), float64] */;
    %354 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 144), bool] */, dtype="bool") /* ty=Tensor[(1, 144), bool] */;
    %355 = reshape(%354, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
    %356 = @func_2996(%355) /* ty=(Tensor[(8, 6, 3), bool],) */;
    %357 = acosh(%353) /* ty=Tensor[(14, 3, 8), float64] */;
    %358 = %356.0;
    (%357, %358, meta[relay.Constant][9] /* ty=Tensor[(1, 144), bool] */)
  };
  %359(%var_4095) /* ty=(Tensor[(14, 3, 8), float64], Tensor[(8, 6, 3), bool], Tensor[(1, 144), bool]) */
}

def @func_6691() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  @func_6689() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */
}

def @func_1472(%var_1470: Tensor[(7, 14, 10), int8], %var_1471: Tensor[(7, 14, 10), int8]) -> (Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) {
  @func_1468(%var_1470, %var_1471) /* ty=(Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) */
}

def @func_8192(%var_8185: Tensor[(624), uint16]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) {
  %360 = @func_7278() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %361 = cast(%var_8185, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %362 = reshape(%361, newshape=[624]) /* ty=Tensor[(624), uint16] */;
  %363 = @func_4998(%362) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) */;
  %364 = %360.0;
  %365 = %363.1;
  (%364, %365, %var_8185)
}

def @func_3887(%var_3885: Tensor[(14, 2, 13), float64]) -> Tensor[(14, 2, 13), float64] {
  @func_3884(%var_3885) /* ty=Tensor[(14, 2, 13), float64] */
}

def @func_1836() -> (Tensor[(8, 6, 3), bool],) {
  %366 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %367 = %366.0;
  (%367,)
}

def @func_3944() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %368 = @func_3359() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %369 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %370 = %368.0;
  %371 = %369.0;
  (%370, %371)
}

def @func_842() -> Tensor[(8, 6, 3), bool] {
  %372 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %372.1
}

def @func_5459(%var_5458: float64) -> (Tensor[(11, 1, 1), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %382 = fn (%var_5414: float64) -> (Tensor[(11, 1, 1), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
    %373 = cast(%var_5414, dtype="bool") /* ty=bool */;
    %374 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 1, 1), float64] */, dtype="bool") /* ty=Tensor[(11, 1, 1), bool] */;
    %375 = @func_3235() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
    %376 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %377 = @func_4796() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %378 = equal(%373, %374) /* ty=Tensor[(11, 1, 1), bool] */;
    %379 = %375.1;
    %380 = %376.0;
    %381 = %377.0;
    (%378, %379, %380, %381)
  };
  %382(%var_5458) /* ty=(Tensor[(11, 1, 1), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_3586() -> (Tensor[(8, 6, 3), float64],) {
  %383 = @func_3164() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %384 = %383.0;
  (%384,)
}

def @func_5404(%var_5402: Tensor[(10, 15, 5), uint64]) -> (Tensor[(10, 15, 5), uint64],) {
  @func_5401(%var_5402) /* ty=(Tensor[(10, 15, 5), uint64],) */
}

def @func_3258() -> (Tensor[(8, 6, 3), bool],) {
  %387 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %385 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %386 = %385.0;
    (%386,)
  };
  %387() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_7578() -> (Tensor[(8, 6, 3), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) {
  @func_7576() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) */
}

def @func_5901() -> (Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float64]) {
  @func_5899() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float64]) */
}

def @func_7154(%var_7149: Tensor[(4, 3, 11), float32]) -> Tensor[(4, 3, 11), float32] {
  %388 = cast(%var_7149, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %389 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(4, 3, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 3, 11), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 11), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%390, %391) /* ty=Tensor[(4, 3, 11), float32] */
}

def @func_5164() -> (Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(8, 6, 3), float64]) {
  @func_5162() /* ty=(Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(8, 6, 3), float64]) */
}

def @func_3788() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) {
  %392 = @func_1595() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %393 = @func_3257() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %394 = @func_2712() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) */;
  %395 = %394.3;
  %396 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(6, 9, 6), int32] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="int32") /* ty=Tensor[(6, 9, 6), int32] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %400 = %392.0;
  %401 = %393.0;
  %402 = add(%398, %399) /* ty=Tensor[(6, 9, 6), int32] */;
  (%400, %401, %402)
}

def @func_3659() -> (Tensor[(8, 6, 3), bool],) {
  %403 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %404 = %403.1;
  (%404,)
}

def @func_4639() -> (Tensor[(8, 6, 3), bool],) {
  %405 = @func_3320() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */;
  %406 = %405.1;
  (%406,)
}

def @func_755(%var_753: Tensor[(35, 9), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(7, 5, 9), float64], Tensor[(35, 9), float64], Tensor[(8, 6, 3), bool]) {
  @func_752(%var_753) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(7, 5, 9), float64], Tensor[(35, 9), float64], Tensor[(8, 6, 3), bool]) */
}

def @func_4798() -> (Tensor[(8, 6, 3), bool],) {
  @func_4796() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_1815(%var_1813: Tensor[(16, 14, 3), float64], %var_1814: Tensor[(16, 14, 3), float64]) -> Tensor[(16, 14, 3), bool] {
  %421 = fn (%var_1780: Tensor[(16, 14, 3), float64], %var_1781: Tensor[(16, 14, 3), float64]) -> Tensor[(16, 14, 3), bool] {
    %407 = cast(%var_1781, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
    %408 = shape_of(%var_1780, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%var_1780, dtype="float64") /* ty=Tensor[(16, 14, 3), float64] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %411 = mod(%409, %410) /* ty=Tensor[(16, 14, 3), float64] */;
    %412 = cast(%411, dtype="int64") /* ty=Tensor[(16, 14, 3), int64] */;
    %413 = shape_of(%var_1781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %414 = cast(%var_1781, dtype="int64") /* ty=Tensor[(16, 14, 3), int64] */;
    %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %416 = bitwise_or(%414, %415) /* ty=Tensor[(16, 14, 3), int64] */;
    %417 = cast(%416, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
    %418 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
    %419 = cast(%411, dtype="bool") /* ty=Tensor[(16, 14, 3), bool] */;
    %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%419, %420) /* ty=Tensor[(16, 14, 3), bool] */
  };
  %421(%var_1813, %var_1814) /* ty=Tensor[(16, 14, 3), bool] */
}

def @func_6622(%var_6568: Tensor[(10, 10, 13), float32], %var_6590: Tensor[(10, 10, 13), float32]) -> (Tensor[(10, 10, 13), float32], Tensor[(10, 10, 13), bool], Tensor[(10, 10, 13), uint64], Tensor[(8, 6, 13), bool], Tensor[(624, 1), uint16], Tensor[(8, 6, 3), bool]) {
  %422 = cast(%var_6568, dtype="float32") /* ty=Tensor[(10, 10, 13), float32] */;
  %423 = cast(%var_6568, dtype="float32") /* ty=Tensor[(10, 10, 13), float32] */;
  %424 = asinh(%423) /* ty=Tensor[(10, 10, 13), float32] */;
  %425 = cast(%424, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
  %426 = shape_of(%var_6568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_6568, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %429 = cast(%var_6590, dtype="uint64") /* ty=Tensor[(10, 10, 13), uint64] */;
  %430 = shape_of(%var_6568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_6568, dtype="uint64") /* ty=Tensor[(10, 10, 13), uint64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %433 = cast(meta[relay.Constant][13] /* ty=Tensor[(624, 1), uint16] */, dtype="uint16") /* ty=Tensor[(624, 1), uint16] */;
  %434 = reshape(%433, newshape=[624]) /* ty=Tensor[(624), uint16] */;
  %435 = @func_4998(%434) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) */;
  %436 = @func_4204() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %437 = rsqrt(%422) /* ty=Tensor[(10, 10, 13), float32] */;
  %438 = logical_and(%427, %428) /* ty=Tensor[(10, 10, 13), bool] */;
  %439 = multiply(%431, %432) /* ty=Tensor[(10, 10, 13), uint64] */;
  %440 = %435.1;
  %441 = %436.1;
  (%437, %438, %439, %440, meta[relay.Constant][13] /* ty=Tensor[(624, 1), uint16] */, %441)
}

def @func_4316() -> (Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) {
  %446 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) {
    %442 = @func_3909() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %443 = @func_3320() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */;
    %444 = %442.0;
    %445 = %443.0;
    (%444, %445)
  };
  %446() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */
}

def @func_3359() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %447 = @func_1143() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %448 = @func_1486() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %449 = %447.0;
  %450 = %448.0;
  (%449, %450)
}

def @func_3720() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %461 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
    %451 = @func_3257() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %452 = @func_1066() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
    %453 = @func_3320() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */;
    %454 = %452.2;
    %455 = cast(%454, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %456 = reshape(%455, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
    %457 = @func_1326(%456) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %458 = %451.0;
    %459 = %453.1;
    %460 = %457.1;
    (%458, %454, %459, %460)
  };
  %461() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_2823(%var_2821: Tensor[(8, 16, 8), float64]) -> (Tensor[(8, 16, 8), float64],) {
  @func_2820(%var_2821) /* ty=(Tensor[(8, 16, 8), float64],) */
}

def @func_3361() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  @func_3359() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_601(%var_546: Tensor[(7, 5, 9), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) {
  %462 = @func_416() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %463 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %464 = cast(%var_546, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %465 = sinh(%464) /* ty=Tensor[(7, 5, 9), float64] */;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %467 = erf(%466) /* ty=Tensor[(7, 5, 9), float64] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %469 = acosh(%468) /* ty=Tensor[(7, 5, 9), float64] */;
  %470 = cast(%var_546, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %474 = %462.1;
  %475 = %463.0;
  %476 = floor_mod(%472, %473) /* ty=Tensor[(7, 5, 9), float64] */;
  (%474, %475, %476)
}

def @func_6472() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), bool], Tensor[(14, 70), int8], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %490 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), bool], Tensor[(14, 70), int8], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
    %477 = @func_3944() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %478 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %479 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 70), int8] */, dtype="int8") /* ty=Tensor[(14, 70), int8] */;
    %480 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 70), int8] */, dtype="int8") /* ty=Tensor[(14, 70), int8] */;
    %481 = reshape(%479, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
    %482 = reshape(%480, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
    %483 = @func_1468(%481, %482) /* ty=(Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) */;
    %484 = @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %485 = %477.0;
    %486 = %478.0;
    %487 = %483.1;
    %488 = @func_3865() /* ty=Tensor[(8, 6, 3), float64] */;
    %489 = %484.0;
    (%485, %486, %487, meta[relay.Constant][14] /* ty=Tensor[(14, 70), int8] */, %488, %489)
  };
  %490() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), bool], Tensor[(14, 70), int8], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */
}

def @func_5001(%var_4999: Tensor[(624), uint16]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) {
  @func_4998(%var_4999) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) */
}

def @func_4204() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %491 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %492 = @func_3235() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %493 = %491.0;
  %494 = %492.3;
  (%493, %494)
}

def @func_1486() -> (Tensor[(8, 6, 3), bool],) {
  %495 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %496 = %495.0;
  (%496,)
}

def @func_68() -> (Tensor[(8, 6, 3), bool],) {
  %499 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %497 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %498 = %497.0;
    (%498,)
  };
  %499() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_8627() -> Tensor[(8, 6, 3), float64] {
  %501 = fn () -> Tensor[(8, 6, 3), float64] {
    %500 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %500.0
  };
  %501() /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_416() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %502 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %503 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %504 = %502.0;
  %505 = %503.0;
  (%504, %505)
}

def @func_7378(%var_7377: Tensor[(1092), int8]) -> (Tensor[(8, 6, 3), float64], Tensor[(12, 7, 13), int8], Tensor[(1092), int8]) {
  %510 = fn (%var_7370: Tensor[(1092), int8]) -> (Tensor[(8, 6, 3), float64], Tensor[(12, 7, 13), int8], Tensor[(1092), int8]) {
    %506 = cast(%var_7370, dtype="int8") /* ty=Tensor[(1092), int8] */;
    %507 = reshape(%506, newshape=[12, 7, 13]) /* ty=Tensor[(12, 7, 13), int8] */;
    %508 = @func_3865() /* ty=Tensor[(8, 6, 3), float64] */;
    %509 = @func_6791(%507) /* ty=Tensor[(12, 7, 13), int8] */;
    (%508, %509, %var_7370)
  };
  %510(%var_7377) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(12, 7, 13), int8], Tensor[(1092), int8]) */
}

def @func_8017() -> (Tensor[(8, 6, 3), bool],) {
  %513 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %511 = @func_4796() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %512 = %511.0;
    (%512,)
  };
  %513() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_6176(%var_6175: Tensor[(20), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(2, 2, 5), float32], Tensor[(20), float32], Tensor[(8, 6, 3), bool], Tensor[(315), float64], Tensor[(7, 5, 9), float64]) {
  %531 = fn (%var_6125: Tensor[(20), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(2, 2, 5), float32], Tensor[(20), float32], Tensor[(8, 6, 3), bool], Tensor[(315), float64], Tensor[(7, 5, 9), float64]) {
    %514 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %515 = cast(%var_6125, dtype="float32") /* ty=Tensor[(20), float32] */;
    %516 = cast(%var_6125, dtype="float32") /* ty=Tensor[(20), float32] */;
    %517 = reshape(%515, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), float32] */;
    %518 = reshape(%516, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), float32] */;
    %519 = %514.0;
    %520 = cast(%519, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %521 = reshape(%520, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
    %522 = @func_1326(%521) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %523 = cast(meta[relay.Constant][15] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %524 = reshape(%523, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
    %525 = @func_601(%524) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 5, 9), float64]) */;
    %526 = %525.2;
    %527 = cast(%526, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
    %528 = @func_6073(%517, %518) /* ty=Tensor[(2, 2, 5), float32] */;
    %529 = %522.1;
    %530 = atanh(%527) /* ty=Tensor[(7, 5, 9), float64] */;
    (%519, %528, %var_6125, %529, meta[relay.Constant][15] /* ty=Tensor[(315), float64] */, %530)
  };
  %531(%var_6175) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(2, 2, 5), float32], Tensor[(20), float32], Tensor[(8, 6, 3), bool], Tensor[(315), float64], Tensor[(7, 5, 9), float64]) */
}

def @func_6762() -> (Tensor[(8, 6, 3), bool], Tensor[(1872), float32], Tensor[(16, 64), float64], Tensor[(1872), float32]) {
  %532 = @func_6471() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), bool], Tensor[(14, 70), int8], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %533 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 64), float64] */, dtype="float64") /* ty=Tensor[(16, 64), float64] */;
  %534 = cast(meta[relay.Constant][17] /* ty=Tensor[(1872), float32] */, dtype="float32") /* ty=Tensor[(1872), float32] */;
  %535 = reshape(%533, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %536 = reshape(%534, newshape=[1872]) /* ty=Tensor[(1872), float32] */;
  %537 = @func_6511(%535, %536) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 16, 8), float64], Tensor[(1024), float64], Tensor[(8, 6, 3), bool], Tensor[(1872), float32]) */;
  %538 = %532.5;
  %539 = %537.4;
  (%538, %539, meta[relay.Constant][16] /* ty=Tensor[(16, 64), float64] */, meta[relay.Constant][17] /* ty=Tensor[(1872), float32] */)
}

def @func_8195(%var_8193: Tensor[(624), uint16]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) {
  @func_8192(%var_8193) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) */
}

def @func_3166() -> (Tensor[(8, 6, 3), float64],) {
  @func_3164() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_665() -> Tensor[(8, 6, 3), float64] {
  %540 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %540.2
}

def @func_1597() -> (Tensor[(8, 6, 3), bool],) {
  @func_1595() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_3164() -> (Tensor[(8, 6, 3), float64],) {
  %541 = @func_1143() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %542 = %541.0;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %544 = rsqrt(%543) /* ty=Tensor[(8, 6, 3), float64] */;
  (%544,)
}

def @func_6265() -> (Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), int8], Tensor[(24, 6), float64]) {
  %551 = fn () -> (Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), int8], Tensor[(24, 6), float64]) {
    %545 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
    %546 = cast(meta[relay.Constant][18] /* ty=Tensor[(24, 6), float64] */, dtype="float64") /* ty=Tensor[(24, 6), float64] */;
    %547 = reshape(%546, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), float64] */;
    %548 = @func_5085(%547) /* ty=(Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), bool]) */;
    %549 = %545.0;
    %550 = %548.0;
    (%549, %550, meta[relay.Constant][18] /* ty=Tensor[(24, 6), float64] */)
  };
  %551() /* ty=(Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), int8], Tensor[(24, 6), float64]) */
}

def @func_1904() -> (Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(980), int8]) {
  %560 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(980), int8]) {
    %552 = @func_1486() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %553 = cast(meta[relay.Constant][19] /* ty=Tensor[(980), int8] */, dtype="int8") /* ty=Tensor[(980), int8] */;
    %554 = cast(meta[relay.Constant][19] /* ty=Tensor[(980), int8] */, dtype="int8") /* ty=Tensor[(980), int8] */;
    %555 = reshape(%553, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
    %556 = reshape(%554, newshape=[7, 14, 10]) /* ty=Tensor[(7, 14, 10), int8] */;
    %557 = @func_1468(%555, %556) /* ty=(Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) */;
    %558 = %552.0;
    %559 = %557.0;
    (%558, %559, meta[relay.Constant][19] /* ty=Tensor[(980), int8] */)
  };
  %560() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(980), int8]) */
}

def @func_7724() -> Tensor[(7, 10, 5), float64] {
  %562 = fn () -> Tensor[(7, 10, 5), float64] {
    %561 = @func_5899() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), float64], Tensor[(7, 10, 5), float64]) */;
    %561.2
  };
  %562() /* ty=Tensor[(7, 10, 5), float64] */
}

def @func_4959(%var_4957: float32, %var_4958: Tensor[(9, 9, 5), float32]) -> (Tensor[(9, 9, 5), float32], Tensor[(9, 9, 5), uint64]) {
  @func_4955(%var_4957, %var_4958) /* ty=(Tensor[(9, 9, 5), float32], Tensor[(9, 9, 5), uint64]) */
}

def @func_5043() -> (Tensor[(8, 6, 3), float64],) {
  %565 = fn () -> (Tensor[(8, 6, 3), float64],) {
    %563 = @func_1143() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %564 = %563.1;
    (%564,)
  };
  %565() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_7968() -> (Tensor[(8, 6, 3), float64],) {
  %566 = @func_4727() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %567 = %566.0;
  (%567,)
}

def @func_4728() -> (Tensor[(8, 6, 3), float64],) {
  %570 = fn () -> (Tensor[(8, 6, 3), float64],) {
    %568 = @func_3164() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %569 = %568.0;
    (%569,)
  };
  %570() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_7245(%var_7243: Tensor[(616), int16]) -> (Tensor[(8, 6, 3), bool], Tensor[(11, 4, 14), int16], Tensor[(616), int16]) {
  %571 = @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %572 = cast(%var_7243, dtype="int16") /* ty=Tensor[(616), int16] */;
  %573 = cast(%var_7243, dtype="int16") /* ty=Tensor[(616), int16] */;
  %574 = reshape(%572, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), int16] */;
  %575 = reshape(%573, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), int16] */;
  %576 = %571.0;
  %577 = @func_6187(%574, %575) /* ty=Tensor[(11, 4, 14), int16] */;
  (%576, %577, %var_7243)
}

def @func_2244(%var_2223: Tensor[(6, 9, 6), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), uint16], Tensor[(8, 6, 3), bool]) {
  %578 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %579 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
  %580 = %579.0;
  %581 = cast(%var_2223, dtype="uint16") /* ty=Tensor[(6, 9, 6), uint16] */;
  %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%580, dtype="uint16") /* ty=Tensor[(6, 9, 6), uint16] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %585 = @func_2027() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %586 = %578.0;
  %587 = logical_xor(%583, %584) /* ty=Tensor[(6, 9, 6), uint16] */;
  %588 = %585.1;
  (%586, %587, %588)
}

def @func_2624() -> (Tensor[(8, 6, 3), bool],) {
  %591 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %589 = @func_2027() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
    %590 = %589.0;
    (%590,)
  };
  %591() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_1488() -> (Tensor[(8, 6, 3), bool],) {
  @func_1486() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_3117() -> (Tensor[(8, 6, 3), float64],) {
  %592 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %593 = %592.0;
  (%593,)
}

def @func_6764() -> (Tensor[(8, 6, 3), bool], Tensor[(1872), float32], Tensor[(16, 64), float64], Tensor[(1872), float32]) {
  @func_6762() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1872), float32], Tensor[(16, 64), float64], Tensor[(1872), float32]) */
}

def @func_6098() -> (Tensor[(8, 6, 3), float64],) {
  %596 = fn () -> (Tensor[(8, 6, 3), float64],) {
    %594 = @func_1539() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */;
    %595 = %594.1;
    (%595,)
  };
  %596() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_44() -> (Tensor[(8, 6, 3), bool],) {
  %611 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %597 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
    %598 = atanh(%597) /* ty=Tensor[(8, 6, 3), float32] */;
    %599 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 6, 3), float32] */, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
    %600 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
    %601 = cast(%598, dtype="int16") /* ty=Tensor[(8, 6, 3), int16] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %603 = logical_xor(%601, %602) /* ty=Tensor[(8, 6, 3), int16] */;
    %604 = cast(%603, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
    %605 = sqrt(%604) /* ty=Tensor[(8, 6, 3), float32] */;
    %606 = cast(%605, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %607 = shape_of(%598, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(%598, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %610 = logical_or(%608, %609) /* ty=Tensor[(8, 6, 3), bool] */;
    (%610,)
  };
  %611() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_1243() -> (Tensor[(7, 10, 5), int32],) {
  %617 = fn () -> (Tensor[(7, 10, 5), int32],) {
    %612 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 10, 5), int32] */;
    %613 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(7, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %614 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 10, 5), int32] */, dtype="int32") /* ty=Tensor[(7, 10, 5), int32] */;
    %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %616 = bitwise_xor(%614, %615) /* ty=Tensor[(7, 10, 5), int32] */;
    (%616,)
  };
  %617() /* ty=(Tensor[(7, 10, 5), int32],) */
}

def @func_5749(%var_5747: Tensor[(14, 9, 14), float64], %var_5748: Tensor[(14, 9, 14), float64]) -> (Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), float32], Tensor[(8, 6, 3), float64]) {
  %627 = fn (%var_5721: Tensor[(14, 9, 14), float64], %var_5722: Tensor[(14, 9, 14), float64]) -> (Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), float32], Tensor[(8, 6, 3), float64]) {
    %618 = cast(%var_5722, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
    %619 = shape_of(%var_5721, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%var_5721, dtype="bool") /* ty=Tensor[(14, 9, 14), bool] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %622 = cast(%var_5721, dtype="float32") /* ty=Tensor[(14, 9, 14), float32] */;
    %623 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %624 = less_equal(%620, %621) /* ty=Tensor[(14, 9, 14), bool] */;
    %625 = sinh(%622) /* ty=Tensor[(14, 9, 14), float32] */;
    %626 = %623.0;
    (%624, %625, %626)
  };
  %627(%var_5747, %var_5748) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), float32], Tensor[(8, 6, 3), float64]) */
}

def @func_826(%var_798: Tensor[(1176), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) {
  %628 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %629 = %628.1;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %631 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %632 = cast(%var_798, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %633 = reshape(%632, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %634 = @func_133(%633) /* ty=(Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) */;
  %635 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %636 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %637 = log2(%630) /* ty=Tensor[(8, 6, 3), float64] */;
  %638 = %631.0;
  %639 = %634.2;
  %640 = %635.0;
  (%636, %637, %638, %639, %var_798, %640)
}

def @func_2028() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %645 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
    %641 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %642 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
    %643 = %641.0;
    %644 = %642.1;
    (%643, %644)
  };
  %645() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_1112() -> Tensor[(8, 6, 3), bool] {
  %646 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %646.0
}

def @func_8314() -> Tensor[(8, 6, 3), bool] {
  %647 = fn () -> Tensor[(8, 6, 3), bool] {
    @func_842() /* ty=Tensor[(8, 6, 3), bool] */
  };
  %647() /* ty=Tensor[(8, 6, 3), bool] */
}

def @func_5966(%var_5912: Tensor[(1, 9), float32]) -> (Tensor[(1, 9), float32], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %648 = cast(%var_5912, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
  %649 = @func_2623() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %650 = @func_3719() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %651 = log2(%648) /* ty=Tensor[(1, 9), float32] */;
  %652 = %649.0;
  %653 = %650.1;
  (%651, %652, %653)
}

def @func_7901() -> (Tensor[(15, 12, 13), float64],) {
  @func_7899() /* ty=(Tensor[(15, 12, 13), float64],) */
}

def @func_7135() -> (Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) {
  %654 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %655 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %656 = %654.2;
  %657 = %655.0;
  (%656, %657)
}

def @func_6791(%var_6786: Tensor[(12, 7, 13), int8]) -> Tensor[(12, 7, 13), int8] {
  %658 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 7, 13), int8] */, dtype="int8") /* ty=Tensor[(12, 7, 13), int8] */;
  %659 = shape_of(%var_6786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_6786, dtype="int8") /* ty=Tensor[(12, 7, 13), int8] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  maximum(%660, %661) /* ty=Tensor[(12, 7, 13), int8] */
}

def @func_2247(%var_2245: Tensor[(6, 9, 6), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), uint16], Tensor[(8, 6, 3), bool]) {
  @func_2244(%var_2245) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), uint16], Tensor[(8, 6, 3), bool]) */
}

def @func_3946() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  @func_3944() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */
}

def @func_6794(%var_6792: Tensor[(12, 7, 13), int8]) -> Tensor[(12, 7, 13), int8] {
  @func_6791(%var_6792) /* ty=Tensor[(12, 7, 13), int8] */
}

def @func_6636() -> Tensor[(8, 6, 3), float64] {
  @func_6634() /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_5680() -> (Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), int32]) {
  %662 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
  %663 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
  %664 = %662.0;
  (%663, %664)
}

def @func_7866(%var_7864: Tensor[(1, 324), float64], %var_7865: Tensor[(1, 750), uint64]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(12, 3, 9), float64], Tensor[(1, 324), float64], Tensor[(8, 6, 3), float64], Tensor[(315), float64], Tensor[(980), int8], Tensor[(6, 9, 6), float64], Tensor[(10, 15, 5), uint64], Tensor[(1, 750), uint64]) {
  %684 = fn (%var_7843: Tensor[(1, 324), float64], %var_7860: Tensor[(1, 750), uint64]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(12, 3, 9), float64], Tensor[(1, 324), float64], Tensor[(8, 6, 3), float64], Tensor[(315), float64], Tensor[(980), int8], Tensor[(6, 9, 6), float64], Tensor[(10, 15, 5), uint64], Tensor[(1, 750), uint64]) {
    %665 = @func_7716() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
    %666 = cast(%var_7843, dtype="float64") /* ty=Tensor[(1, 324), float64] */;
    %667 = reshape(%666, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float64] */;
    %668 = @func_3547(%667) /* ty=(Tensor[(12, 3, 9), float64], Tensor[(12, 3, 9), float32]) */;
    %669 = cast(meta[relay.Constant][24] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %670 = reshape(%669, newshape=[35, 9]) /* ty=Tensor[(35, 9), float64] */;
    %671 = @func_752(%670) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(7, 5, 9), float64], Tensor[(35, 9), float64], Tensor[(8, 6, 3), bool]) */;
    %672 = @func_1903() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(980), int8]) */;
    %673 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
    %674 = cast(%var_7860, dtype="uint64") /* ty=Tensor[(1, 750), uint64] */;
    %675 = reshape(%674, newshape=[10, 15, 5]) /* ty=Tensor[(10, 15, 5), uint64] */;
    %676 = @func_5401(%675) /* ty=(Tensor[(10, 15, 5), uint64],) */;
    %677 = @func_1872() /* ty=Tensor[(8, 6, 3), float64] */;
    %678 = %665.0;
    %679 = %668.0;
    %680 = %671.1;
    %681 = %672.2;
    %682 = %673.0;
    %683 = %676.0;
    (%677, %678, %679, %var_7843, %680, meta[relay.Constant][24] /* ty=Tensor[(315), float64] */, %681, %682, %683, %var_7860)
  };
  %684(%var_7864, %var_7865) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(12, 3, 9), float64], Tensor[(1, 324), float64], Tensor[(8, 6, 3), float64], Tensor[(315), float64], Tensor[(980), int8], Tensor[(6, 9, 6), float64], Tensor[(10, 15, 5), uint64], Tensor[(1, 750), uint64]) */
}

def @func_8131() -> (Tensor[(1872), float32],) {
  @func_8129() /* ty=(Tensor[(1872), float32],) */
}

def @func_2820(%var_2816: Tensor[(8, 16, 8), float64]) -> (Tensor[(8, 16, 8), float64],) {
  %685 = cast(%var_2816, dtype="float64") /* ty=Tensor[(8, 16, 8), float64] */;
  %686 = asinh(%685) /* ty=Tensor[(8, 16, 8), float64] */;
  (%686,)
}

def @func_8107() -> (Tensor[(8, 6, 3), bool],) {
  %687 = @func_2547() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %688 = %687.0;
  (%688,)
}

def @func_1579() -> (Tensor[(8, 6, 3), bool],) {
  %691 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %689 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
    %690 = %689.1;
    (%690,)
  };
  %691() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_8362() -> (Tensor[(6, 7, 16), int64], Tensor[(14, 9, 14), bool]) {
  %701 = fn () -> (Tensor[(6, 7, 16), int64], Tensor[(14, 9, 14), bool]) {
    %692 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 7, 16), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 16), float32] */;
    %693 = sinh(%692) /* ty=Tensor[(6, 7, 16), float32] */;
    %694 = cast(%693, dtype="int64") /* ty=Tensor[(6, 7, 16), int64] */;
    %695 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(6, 7, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %696 = cast(meta[relay.Constant][25] /* ty=Tensor[(6, 7, 16), float32] */, dtype="int64") /* ty=Tensor[(6, 7, 16), int64] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %698 = @func_7576() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) */;
    %699 = bitwise_and(%696, %697) /* ty=Tensor[(6, 7, 16), int64] */;
    %700 = %698.1;
    (%699, %700)
  };
  %701() /* ty=(Tensor[(6, 7, 16), int64], Tensor[(14, 9, 14), bool]) */
}

def @func_1595() -> (Tensor[(8, 6, 3), bool],) {
  %702 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %703 = %702.0;
  (%703,)
}

def @func_3154(%var_3153: Tensor[(15, 10, 14), float64]) -> (Tensor[(15, 10, 14), float64], Tensor[(8, 6, 3), bool]) {
  %708 = fn (%var_3137: Tensor[(15, 10, 14), float64]) -> (Tensor[(15, 10, 14), float64], Tensor[(8, 6, 3), bool]) {
    %704 = cast(%var_3137, dtype="float64") /* ty=Tensor[(15, 10, 14), float64] */;
    %705 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %706 = tan(%704) /* ty=Tensor[(15, 10, 14), float64] */;
    %707 = %705.0;
    (%706, %707)
  };
  %708(%var_3153) /* ty=(Tensor[(15, 10, 14), float64], Tensor[(8, 6, 3), bool]) */
}

def @func_1874() -> Tensor[(8, 6, 3), float64] {
  @func_1872() /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_667() -> Tensor[(8, 6, 3), float64] {
  @func_665() /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_3865() -> Tensor[(8, 6, 3), float64] {
  %709 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %709.0
}

def @func_7507() -> (Tensor[(8, 6, 3), float64],) {
  %712 = fn () -> (Tensor[(8, 6, 3), float64],) {
    %710 = @func_5162() /* ty=(Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(8, 6, 3), float64]) */;
    %711 = %710.2;
    (%711,)
  };
  %712() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_5115() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %719 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
    %713 = @func_4796() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %714 = %713.0;
    %715 = cast(%714, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %716 = reshape(%715, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
    %717 = @func_1326(%716) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %718 = %717.1;
    (%714, %718)
  };
  %719() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_7137() -> (Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) {
  @func_7135() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */
}

def @func_4998(%var_4976: Tensor[(624), uint16]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 13), bool], Tensor[(624), uint16]) {
  %720 = @func_1066() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %721 = cast(%var_4976, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %722 = cast(%var_4976, dtype="uint16") /* ty=Tensor[(624), uint16] */;
  %723 = cast(%var_4976, dtype="float32") /* ty=Tensor[(624), float32] */;
  %724 = reshape(%721, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), uint16] */;
  %725 = reshape(%722, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), uint16] */;
  %726 = reshape(%723, newshape=[8, 6, 13]) /* ty=Tensor[(8, 6, 13), float32] */;
  %727 = @func_2325(%724, %725, %726) /* ty=(Tensor[(8, 6, 13), bool], Tensor[(8, 6, 13), float32]) */;
  %728 = %720.2;
  %729 = %727.0;
  (%728, %729, %var_4976)
}

def @func_8394() -> (Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), float64]) {
  %734 = fn () -> (Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), float64]) {
    %730 = @func_6264() /* ty=(Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), int8], Tensor[(24, 6), float64]) */;
    %731 = @func_7278() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %732 = %730.1;
    %733 = %731.0;
    (%732, %733)
  };
  %734() /* ty=(Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), float64]) */
}

def @func_2999(%var_2997: Tensor[(8, 6, 3), bool]) -> (Tensor[(8, 6, 3), bool],) {
  @func_2996(%var_2997) /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_136(%var_134: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) {
  @func_133(%var_134) /* ty=(Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) */
}

def @func_1540() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) {
  %738 = fn () -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) {
    %735 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %736 = @func_665() /* ty=Tensor[(8, 6, 3), float64] */;
    %737 = %735.0;
    (%736, %737)
  };
  %738() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64]) */
}

def @func_3237() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  @func_3235() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_7278() -> (Tensor[(8, 6, 3), float64],) {
  %739 = @func_371() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
  %740 = %739.2;
  (%740,)
}

def @func_7810(%var_7757: Tensor[(15, 6, 12), float32]) -> (Tensor[(15, 6, 12), float32], Tensor[(1764), float64], Tensor[(8, 16, 8), bool]) {
  %741 = cast(%var_7757, dtype="float32") /* ty=Tensor[(15, 6, 12), float32] */;
  %742 = @func_7576() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) */;
  %743 = cast(meta[relay.Constant][26] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %744 = reshape(%743, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), float64] */;
  %745 = @func_2820(%744) /* ty=(Tensor[(8, 16, 8), float64],) */;
  %746 = %745.0;
  %747 = cast(meta[relay.Constant][26] /* ty=Tensor[(1024), float64] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %748 = shape_of(%746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%746, dtype="bool") /* ty=Tensor[(8, 16, 8), bool] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %751 = log(%741) /* ty=Tensor[(15, 6, 12), float32] */;
  %752 = %742.2;
  %753 = less_equal(%749, %750) /* ty=Tensor[(8, 16, 8), bool] */;
  (%751, %752, %753)
}

def @func_4955(%var_4932: float32, %var_4933: Tensor[(9, 9, 5), float32]) -> (Tensor[(9, 9, 5), float32], Tensor[(9, 9, 5), uint64]) {
  %754 = cast(%var_4932, dtype="float32") /* ty=float32 */;
  %755 = cast(%var_4933, dtype="float32") /* ty=Tensor[(9, 9, 5), float32] */;
  %756 = cast(%var_4933, dtype="uint64") /* ty=Tensor[(9, 9, 5), uint64] */;
  %757 = cast(%var_4932, dtype="uint64") /* ty=uint64 */;
  %758 = power(%754, %755) /* ty=Tensor[(9, 9, 5), float32] */;
  %759 = multiply(%756, %757) /* ty=Tensor[(9, 9, 5), uint64] */;
  (%758, %759)
}

def @func_7415() -> (Tensor[(8, 6, 3), bool],) {
  %760 = @func_1486() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %761 = %760.0;
  (%761,)
}

def @func_7206(%var_7205: Tensor[(1176), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(12, 14, 7), bool], Tensor[(1176), float32], Tensor[(1176), float32]) {
  %772 = fn (%var_7187: Tensor[(1176), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(12, 14, 7), bool], Tensor[(1176), float32], Tensor[(1176), float32]) {
    %762 = @func_2934() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %763 = @func_5042() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %764 = cast(%var_7187, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %765 = reshape(%764, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
    %766 = @func_133(%765) /* ty=(Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) */;
    %767 = @func_7135() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */;
    %768 = %762.0;
    %769 = %763.0;
    %770 = %766.0;
    %771 = %767.0;
    (%768, %769, %770, %var_7187, %771)
  };
  %772(%var_7205) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(12, 14, 7), bool], Tensor[(1176), float32], Tensor[(1176), float32]) */
}

def @func_3547(%var_3540: Tensor[(12, 3, 9), float64]) -> (Tensor[(12, 3, 9), float64], Tensor[(12, 3, 9), float32]) {
  %773 = cast(%var_3540, dtype="float64") /* ty=Tensor[(12, 3, 9), float64] */;
  %774 = cast(%var_3540, dtype="float32") /* ty=Tensor[(12, 3, 9), float32] */;
  %775 = atanh(%773) /* ty=Tensor[(12, 3, 9), float64] */;
  %776 = exp(%774) /* ty=Tensor[(12, 3, 9), float32] */;
  (%775, %776)
}

def @func_5682() -> (Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), int32]) {
  @func_5680() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(7, 10, 5), int32]) */
}

def @func_8262() -> Tensor[(8, 6, 3), float64] {
  %778 = fn () -> Tensor[(8, 6, 3), float64] {
    %777 = @func_6097() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %777.0
  };
  %778() /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_2548() -> (Tensor[(8, 6, 3), bool],) {
  %781 = fn () -> (Tensor[(8, 6, 3), bool],) {
    %779 = @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %780 = %779.0;
    (%780,)
  };
  %781() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_3235() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %782 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %783 = @func_416() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %784 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
  %785 = @func_1872() /* ty=Tensor[(8, 6, 3), float64] */;
  %786 = %782.0;
  %787 = %783.1;
  %788 = %784.1;
  (%785, %786, %787, %788)
}

def @func_4054(%var_4052: Tensor[(6, 1, 15), float64]) -> (Tensor[(6, 1, 15), float32],) {
  @func_4051(%var_4052) /* ty=(Tensor[(6, 1, 15), float32],) */
}

def @func_8663() -> (Tensor[(7, 10, 5), float64],) {
  %789 = @func_7723() /* ty=Tensor[(7, 10, 5), float64] */;
  (%789,)
}

def @func_1326(%var_1313: Tensor[(8, 6, 3), bool]) -> (Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %790 = @func_1112() /* ty=Tensor[(8, 6, 3), bool] */;
  %791 = cast(%var_1313, dtype="int64") /* ty=Tensor[(8, 6, 3), int64] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%790, dtype="int64") /* ty=Tensor[(8, 6, 3), int64] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %795 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %796 = cast(%var_1313, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
  %797 = bitwise_or(%793, %794) /* ty=Tensor[(8, 6, 3), int64] */;
  %798 = %795.1;
  %799 = sigmoid(%796) /* ty=Tensor[(8, 6, 3), float64] */;
  (%797, %798, %799)
}

def @func_5087(%var_5086: Tensor[(8, 6, 3), float64]) -> (Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), bool]) {
  %808 = fn (%var_5064: Tensor[(8, 6, 3), float64]) -> (Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), bool]) {
    %800 = @func_3865() /* ty=Tensor[(8, 6, 3), float64] */;
    %801 = cast(%var_5064, dtype="int8") /* ty=Tensor[(8, 6, 3), int8] */;
    %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
    %803 = cast(%800, dtype="int8") /* ty=Tensor[(8, 6, 3), int8] */;
    %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %805 = @func_4204() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
    %806 = multiply(%803, %804) /* ty=Tensor[(8, 6, 3), int8] */;
    %807 = %805.0;
    (%806, %807)
  };
  %808(%var_5086) /* ty=(Tensor[(8, 6, 3), int8], Tensor[(8, 6, 3), bool]) */
}

def @func_6626(%var_6624: Tensor[(10, 10, 13), float32], %var_6625: Tensor[(10, 10, 13), float32]) -> (Tensor[(10, 10, 13), float32], Tensor[(10, 10, 13), bool], Tensor[(10, 10, 13), uint64], Tensor[(8, 6, 13), bool], Tensor[(624, 1), uint16], Tensor[(8, 6, 3), bool]) {
  @func_6622(%var_6624, %var_6625) /* ty=(Tensor[(10, 10, 13), float32], Tensor[(10, 10, 13), bool], Tensor[(10, 10, 13), uint64], Tensor[(8, 6, 13), bool], Tensor[(624, 1), uint16], Tensor[(8, 6, 3), bool]) */
}

def @func_2330(%var_2327: Tensor[(8, 6, 13), uint16], %var_2328: Tensor[(8, 6, 13), uint16], %var_2329: Tensor[(8, 6, 13), float32]) -> (Tensor[(8, 6, 13), bool], Tensor[(8, 6, 13), float32]) {
  @func_2325(%var_2327, %var_2328, %var_2329) /* ty=(Tensor[(8, 6, 13), bool], Tensor[(8, 6, 13), float32]) */
}

def @func_5162() -> (Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(8, 6, 3), float64]) {
  %809 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %810 = %809.2;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %812 = reshape(%811, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %813 = @func_133(%812) /* ty=(Tensor[(12, 14, 7), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(12, 14, 7), bool]) */;
  %814 = %813.0;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %816 = cast(%814, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %817 = reshape(%816, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %818 = @func_826(%817) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
  %819 = log10(%815) /* ty=Tensor[(12, 14, 7), float32] */;
  %820 = %818.1;
  (%810, %819, %820)
}

def @func_6832() -> Tensor[(8, 6, 3), float64] {
  %822 = fn () -> Tensor[(8, 6, 3), float64] {
    %821 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %821.0
  };
  %822() /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_1355() -> (Tensor[(6, 9, 6), float64],) {
  %828 = fn () -> (Tensor[(6, 9, 6), float64],) {
    %823 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
    %824 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(6, 9, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %825 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(6, 9, 6), float64] */;
    %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %827 = floor_divide(%825, %826) /* ty=Tensor[(6, 9, 6), float64] */;
    (%827,)
  };
  %828() /* ty=(Tensor[(6, 9, 6), float64],) */
}

def @func_6077(%var_6075: Tensor[(2, 2, 5), float32], %var_6076: Tensor[(2, 2, 5), float32]) -> Tensor[(2, 2, 5), float32] {
  @func_6073(%var_6075, %var_6076) /* ty=Tensor[(2, 2, 5), float32] */
}

def @func_7576() -> (Tensor[(8, 6, 3), float64], Tensor[(14, 9, 14), bool], Tensor[(1764), float64]) {
  %829 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %830 = cast(meta[relay.Constant][29] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %831 = cast(meta[relay.Constant][29] /* ty=Tensor[(1764), float64] */, dtype="float64") /* ty=Tensor[(1764), float64] */;
  %832 = reshape(%830, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), float64] */;
  %833 = reshape(%831, newshape=[14, 9, 14]) /* ty=Tensor[(14, 9, 14), float64] */;
  %834 = @func_5746(%832, %833) /* ty=(Tensor[(14, 9, 14), bool], Tensor[(14, 9, 14), float32], Tensor[(8, 6, 3), float64]) */;
  %835 = %829.0;
  %836 = %834.0;
  (%835, %836, meta[relay.Constant][29] /* ty=Tensor[(1764), float64] */)
}

def @func_4796() -> (Tensor[(8, 6, 3), bool],) {
  %837 = @func_1578() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %838 = %837.0;
  (%838,)
}

def @func_4206() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  @func_4204() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_4593(%var_4570: int32) -> (Tensor[(5, 16, 5), bool],) {
  %839 = cast(%var_4570, dtype="bool") /* ty=bool */;
  %840 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 16, 5), int32] */, dtype="bool") /* ty=Tensor[(5, 16, 5), bool] */;
  %841 = greater_equal(%839, %840) /* ty=Tensor[(5, 16, 5), bool] */;
  (%841,)
}

def @func_7063() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  @func_7061() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_1838() -> (Tensor[(8, 6, 3), bool],) {
  @func_1836() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_6910(%var_6909: Tensor[(324), float64]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int64], Tensor[(12, 3, 9), float32], Tensor[(324), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
  %861 = fn (%var_6885: Tensor[(324), float64]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int64], Tensor[(12, 3, 9), float32], Tensor[(324), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) {
    %842 = @func_6097() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %843 = %842.0;
    %844 = cast(%843, dtype="bool") /* ty=Tensor[(8, 6, 3), bool] */;
    %845 = reshape(%844, newshape=[8, 6, 3]) /* ty=Tensor[(8, 6, 3), bool] */;
    %846 = @func_1326(%845) /* ty=(Tensor[(8, 6, 3), int64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */;
    %847 = cast(meta[relay.Constant][31] /* ty=Tensor[(324), float64] */, dtype="float64") /* ty=Tensor[(324), float64] */;
    %848 = reshape(%847, newshape=[12, 3, 9]) /* ty=Tensor[(12, 3, 9), float64] */;
    %849 = @func_3547(%848) /* ty=(Tensor[(12, 3, 9), float64], Tensor[(12, 3, 9), float32]) */;
    %850 = cast(%var_6885, dtype="float32") /* ty=Tensor[(324), float32] */;
    %851 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(324), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %852 = cast(meta[relay.Constant][31] /* ty=Tensor[(324), float64] */, dtype="float32") /* ty=Tensor[(324), float32] */;
    %853 = dyn.reshape(%850, %851, newshape=[]) /* ty=Tensor[(?), float32] */;
    %854 = @func_2712() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float32], Tensor[(6, 9, 6), float64]) */;
    %855 = @func_3909() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %856 = %846.0;
    %857 = %849.1;
    %858 = power(%852, %853) /* ty=Tensor[(324), float32] */;
    %859 = %854.1;
    %860 = %855.0;
    (%843, %856, %857, %858, %859, %860)
  };
  %861(%var_6909) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int64], Tensor[(12, 3, 9), float32], Tensor[(324), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */
}

def @func_1509() -> (Tensor[(8, 6, 3), float64],) {
  @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_1468(%var_1439: Tensor[(7, 14, 10), int8], %var_1440: Tensor[(7, 14, 10), int8]) -> (Tensor[(7, 14, 10), int8], Tensor[(7, 14, 10), bool]) {
  %862 = cast(%var_1440, dtype="int8") /* ty=Tensor[(7, 14, 10), int8] */;
  %863 = shape_of(%var_1439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_1439, dtype="int8") /* ty=Tensor[(7, 14, 10), int8] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %866 = cast(%var_1439, dtype="bool") /* ty=Tensor[(7, 14, 10), bool] */;
  %867 = shape_of(%var_1440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%var_1440, dtype="bool") /* ty=Tensor[(7, 14, 10), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %870 = subtract(%864, %865) /* ty=Tensor[(7, 14, 10), int8] */;
  %871 = less_equal(%868, %869) /* ty=Tensor[(7, 14, 10), bool] */;
  (%870, %871)
}

def @func_3884(%var_3880: Tensor[(14, 2, 13), float64]) -> Tensor[(14, 2, 13), float64] {
  %872 = cast(%var_3880, dtype="float64") /* ty=Tensor[(14, 2, 13), float64] */;
  atanh(%872) /* ty=Tensor[(14, 2, 13), float64] */
}

def @func_4415(%var_4369: Tensor[(6, 9, 6), float64]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), bool], Tensor[(8, 6, 3), float64], Tensor[(1176), float32], Tensor[(6, 9, 6), float32], Tensor[(6, 9, 6), float64]) {
  %873 = @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %874 = @func_3788() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) */;
  %875 = @func_3719() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */;
  %876 = @func_1420() /* ty=(Tensor[(1176), float32], Tensor[(6, 9, 6), float64], Tensor[(8, 6, 3), bool], Tensor[(315), float64]) */;
  %877 = %876.1;
  %878 = cast(%var_4369, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %879 = shape_of(%877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %880 = cast(%877, dtype="bool") /* ty=Tensor[(6, 9, 6), bool] */;
  %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %882 = @func_905() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */;
  %883 = @func_4315() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
  %884 = cast(%var_4369, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %885 = erf(%884) /* ty=Tensor[(6, 9, 6), float32] */;
  %886 = cast(%885, dtype="float32") /* ty=Tensor[(6, 9, 6), float32] */;
  %887 = @func_1354() /* ty=(Tensor[(6, 9, 6), float64],) */;
  %888 = %873.0;
  %889 = %874.1;
  %890 = %875.3;
  %891 = not_equal(%880, %881) /* ty=Tensor[(6, 9, 6), bool] */;
  %892 = %882.0;
  %893 = %883.1;
  %894 = log2(%886) /* ty=Tensor[(6, 9, 6), float32] */;
  %895 = %887.0;
  (%888, %889, %890, %891, %892, %893, %894, %895)
}

def @func_906() -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) {
  %904 = fn () -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) {
    %896 = @func_67() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %897 = %896.0;
    %898 = cast(%897, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
    %899 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
    %900 = @func_495() /* ty=(Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool]) */;
    %901 = asin(%898) /* ty=Tensor[(8, 6, 3), float64] */;
    %902 = %899.1;
    %903 = %900.0;
    (%901, %902, %903)
  };
  %904() /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32]) */
}

def @func_6514(%var_6512: Tensor[(1024), float64], %var_6513: Tensor[(1872), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 16, 8), float64], Tensor[(1024), float64], Tensor[(8, 6, 3), bool], Tensor[(1872), float32]) {
  %915 = fn (%var_6501: Tensor[(1024), float64], %var_6507: Tensor[(1872), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 16, 8), float64], Tensor[(1024), float64], Tensor[(8, 6, 3), bool], Tensor[(1872), float32]) {
    %905 = @func_1507() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %906 = cast(%var_6501, dtype="float64") /* ty=Tensor[(1024), float64] */;
    %907 = reshape(%906, newshape=[8, 16, 8]) /* ty=Tensor[(8, 16, 8), float64] */;
    %908 = @func_2820(%907) /* ty=(Tensor[(8, 16, 8), float64],) */;
    %909 = cast(%var_6507, dtype="float32") /* ty=Tensor[(1872), float32] */;
    %910 = reshape(%909, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), float32] */;
    %911 = @func_4468(%910) /* ty=(Tensor[(16, 9, 13), float32], Tensor[(8, 6, 3), bool], Tensor[(6, 9, 6), int32]) */;
    %912 = %905.0;
    %913 = %908.0;
    %914 = %911.1;
    (%912, %913, %var_6501, %914, %var_6507)
  };
  %915(%var_6512, %var_6513) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 16, 8), float64], Tensor[(1024), float64], Tensor[(8, 6, 3), bool], Tensor[(1872), float32]) */
}

def @func_2400(%var_2398: Tensor[(1176), float32]) -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32], Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) {
  @func_2397(%var_2398) /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), int32], Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */
}

def @func_7433() -> (Tensor[(8, 6, 3), bool], Tensor[(7, 10, 5), int32]) {
  %916 = @func_3257() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %917 = @func_1242() /* ty=(Tensor[(7, 10, 5), int32],) */;
  %918 = %916.0;
  %919 = %917.0;
  (%918, %919)
}

def @func_7554() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %920 = @func_6471() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), bool], Tensor[(14, 70), int8], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool]) */;
  %921 = @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %922 = %920.1;
  %923 = %921.0;
  (%922, %923)
}

def @func_7417() -> (Tensor[(8, 6, 3), bool],) {
  @func_7415() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_829(%var_827: Tensor[(1176), float32]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) {
  @func_826(%var_827) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */
}

def @func_8129() -> (Tensor[(1872), float32],) {
  %924 = @func_6762() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1872), float32], Tensor[(16, 64), float64], Tensor[(1872), float32]) */;
  %925 = %924.3;
  (%925,)
}

def @func_3911() -> (Tensor[(8, 6, 3), bool],) {
  @func_3909() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_3588() -> (Tensor[(8, 6, 3), float64],) {
  @func_3586() /* ty=(Tensor[(8, 6, 3), float64],) */
}

def @func_2325(%var_2275: Tensor[(8, 6, 13), uint16], %var_2276: Tensor[(8, 6, 13), uint16], %var_2311: Tensor[(8, 6, 13), float32]) -> (Tensor[(8, 6, 13), bool], Tensor[(8, 6, 13), float32]) {
  %926 = cast(%var_2276, dtype="uint16") /* ty=Tensor[(8, 6, 13), uint16] */;
  %927 = shape_of(%var_2275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %928 = cast(%var_2275, dtype="uint16") /* ty=Tensor[(8, 6, 13), uint16] */;
  %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %930 = right_shift(%928, %929) /* ty=Tensor[(8, 6, 13), uint16] */;
  %931 = cast(%930, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %932 = log2(%931) /* ty=Tensor[(8, 6, 13), float32] */;
  %933 = cast(%var_2311, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %935 = cast(%932, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %937 = cast(%var_2311, dtype="float32") /* ty=Tensor[(8, 6, 13), float32] */;
  %938 = less(%935, %936) /* ty=Tensor[(8, 6, 13), bool] */;
  %939 = atanh(%937) /* ty=Tensor[(8, 6, 13), float32] */;
  (%938, %939)
}

def @func_3661() -> (Tensor[(8, 6, 3), bool],) {
  @func_3659() /* ty=(Tensor[(8, 6, 3), bool],) */
}

def @func_3321() -> (Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) {
  %944 = fn () -> (Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) {
    %940 = @func_1989() /* ty=(Tensor[(7, 10, 5), int32], Tensor[(7, 14, 10), int8], Tensor[(14, 70), float64], Tensor[(8, 6, 3), bool], Tensor[(14, 70), float32], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(7, 14, 10), int8], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
    %941 = @func_1384() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
    %942 = %940.8;
    %943 = %941.0;
    (%942, %943)
  };
  %944() /* ty=(Tensor[(1176), float32], Tensor[(8, 6, 3), bool]) */
}

def @func_3686() -> Tensor[(8, 6, 3), float64] {
  %948 = fn () -> Tensor[(8, 6, 3), float64] {
    %945 = @func_3117() /* ty=(Tensor[(8, 6, 3), float64],) */;
    %946 = %945.0;
    %947 = cast(%946, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
    sin(%947) /* ty=Tensor[(8, 6, 3), float64] */
  };
  %948() /* ty=Tensor[(8, 6, 3), float64] */
}

def @func_7233(%var_7231: Tensor[(1, 90), float64]) -> (Tensor[(8, 6, 3), float64], Tensor[(6, 1, 15), float32], Tensor[(1, 90), float64]) {
  @func_7230(%var_7231) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(6, 1, 15), float32], Tensor[(1, 90), float64]) */
}

def @func_844() -> Tensor[(8, 6, 3), bool] {
  @func_842() /* ty=Tensor[(8, 6, 3), bool] */
}

def @func_7556() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  @func_7554() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_7899() -> (Tensor[(15, 12, 13), float64],) {
  %949 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 12, 13), float64] */, dtype="float64") /* ty=Tensor[(15, 12, 13), float64] */;
  %950 = tan(%949) /* ty=Tensor[(15, 12, 13), float64] */;
  (%950,)
}

def @func_6634() -> Tensor[(8, 6, 3), float64] {
  %951 = @func_3164() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %951.0
}

def @func_5517() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %956 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
    %952 = @func_4315() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */;
    %953 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %954 = %952.0;
    %955 = %953.0;
    (%954, %955)
  };
  %956() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) */
}

def @func_8665() -> (Tensor[(7, 10, 5), float64],) {
  @func_8663() /* ty=(Tensor[(7, 10, 5), float64],) */
}

def @func_7061() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool]) {
  %957 = @func_6762() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(1872), float32], Tensor[(16, 64), float64], Tensor[(1872), float32]) */;
  %958 = @func_2792() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %959 = %957.0;
  %960 = %958.0;
  (%959, %960)
}

def @main(%var_8693: Tensor[(5, 3, 1), int16], %var_8694: Tensor[(5, 3, 1), int16]) -> (Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(5, 3, ?), float32], Tensor[(8, 6, 3), bool], Tensor[(5, 3, ?), int16]) {
  %961 = @func_3588() /* ty=(Tensor[(8, 6, 3), float64],) */;
  %962 = @func_3661() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %963 = cast(%var_8694, dtype="bool") /* ty=Tensor[(5, 3, 1), bool] */;
  %964 = shape_of(%var_8693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%var_8693, dtype="bool") /* ty=Tensor[(5, 3, 1), bool] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %967 = equal(%965, %966) /* ty=Tensor[(5, 3, ?), bool] */;
  %968 = cast(%967, dtype="float32") /* ty=Tensor[(5, 3, ?), float32] */;
  %969 = shape_of(%var_8693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %970 = cast(%var_8693, dtype="float32") /* ty=Tensor[(5, 3, 1), float32] */;
  %971 = dyn.reshape(%968, %969, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %972 = @func_8024() /* ty=(Tensor[(8, 6, 3), bool],) */;
  %973 = cast(%var_8694, dtype="int16") /* ty=Tensor[(5, 3, 1), int16] */;
  %974 = shape_of(%967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %975 = cast(%967, dtype="int16") /* ty=Tensor[(5, 3, ?), int16] */;
  %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %977 = %961.0;
  %978 = @func_8313() /* ty=Tensor[(8, 6, 3), bool] */;
  %979 = %962.0;
  %980 = mod(%970, %971) /* ty=Tensor[(5, 3, ?), float32] */;
  %981 = %972.0;
  %982 = bitwise_xor(%975, %976) /* ty=Tensor[(5, 3, ?), int16] */;
  (%977, %978, %979, %980, %981, %982)
}

def @func_1385() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) {
  %988 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) {
    %983 = cast(meta[relay.Constant][33] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %984 = reshape(%983, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
    %985 = @func_826(%984) /* ty=(Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), float64], Tensor[(8, 6, 3), int32], Tensor[(8, 6, 3), bool], Tensor[(1176), float32], Tensor[(8, 6, 3), int32]) */;
    %986 = @func_842() /* ty=Tensor[(8, 6, 3), bool] */;
    %987 = %985.3;
    (%986, %987, meta[relay.Constant][33] /* ty=Tensor[(1176), float32] */)
  };
  %988() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(1176), float32]) */
}

def @func_372() -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
  %999 = fn () -> (Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) {
    %989 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %990 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %991 = @func_43() /* ty=(Tensor[(8, 6, 3), bool],) */;
    %992 = %991.0;
    %993 = cast(%992, dtype="float32") /* ty=Tensor[(8, 6, 3), float32] */;
    %994 = log10(%993) /* ty=Tensor[(8, 6, 3), float32] */;
    %995 = cast(%994, dtype="float64") /* ty=Tensor[(8, 6, 3), float64] */;
    %996 = %989.0;
    %997 = %990.0;
    %998 = erf(%995) /* ty=Tensor[(8, 6, 3), float64] */;
    (%996, %997, %998)
  };
  %999() /* ty=(Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), bool], Tensor[(8, 6, 3), float64]) */
}

def @func_6191(%var_6189: Tensor[(11, 4, 14), int16], %var_6190: Tensor[(11, 4, 14), int16]) -> Tensor[(11, 4, 14), int16] {
  @func_6187(%var_6189, %var_6190) /* ty=Tensor[(11, 4, 14), int16] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen185/build/output.py", line 3001, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:55:45] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

