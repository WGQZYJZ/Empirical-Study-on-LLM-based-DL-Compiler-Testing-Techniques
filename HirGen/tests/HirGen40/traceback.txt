==========mod==========
#[version = "0.0.5"]
def @func_8605(%var_8583: Tensor[(9, 14, 13), float32]) -> (Tensor[(5, 14), float64], Tensor[(9, 14, 13), uint8]) {
  %0 = @func_7184() /* ty=(Tensor[(5, 14), float64],) */;
  %1 = cast(%var_8583, dtype="float32") /* ty=Tensor[(9, 14, 13), float32] */;
  %2 = atanh(%1) /* ty=Tensor[(9, 14, 13), float32] */;
  %3 = cast(%2, dtype="float32") /* ty=Tensor[(9, 14, 13), float32] */;
  %4 = sinh(%3) /* ty=Tensor[(9, 14, 13), float32] */;
  %5 = cast(%var_8583, dtype="uint8") /* ty=Tensor[(9, 14, 13), uint8] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="uint8") /* ty=Tensor[(9, 14, 13), uint8] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %9 = %0.0;
  %10 = right_shift(%7, %8) /* ty=Tensor[(9, 14, 13), uint8] */;
  (%9, %10)
}

def @func_4756(%var_4732: Tensor[(9, 9, 7), float32]) -> (Tensor[(9, 9, 7), int32], Tensor[(5, 14), float64], Tensor[(640), int32]) {
  %11 = cast(%var_4732, dtype="float32") /* ty=Tensor[(9, 9, 7), float32] */;
  %12 = atanh(%11) /* ty=Tensor[(9, 9, 7), float32] */;
  %13 = cast(%var_4732, dtype="int32") /* ty=Tensor[(9, 9, 7), int32] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="int32") /* ty=Tensor[(9, 9, 7), int32] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %17 = right_shift(%15, %16) /* ty=Tensor[(9, 9, 7), int32] */;
  %18 = cast(%17, dtype="int32") /* ty=Tensor[(9, 9, 7), int32] */;
  %19 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%12, dtype="int32") /* ty=Tensor[(9, 9, 7), int32] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %22 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
  %23 = logical_xor(%20, %21) /* ty=Tensor[(9, 9, 7), int32] */;
  %24 = @func_4508() /* ty=Tensor[(5, 14), float64] */;
  %25 = %22.2;
  (%23, %24, %25)
}

def @func_7184() -> (Tensor[(5, 14), float64],) {
  %26 = @func_4508() /* ty=Tensor[(5, 14), float64] */;
  (%26,)
}

def @func_954(%var_944: Tensor[(16, 1, 13), int16], %var_945: Tensor[(16, 16, 13), int16]) -> (Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) {
  %27 = cast(%var_944, dtype="bool") /* ty=Tensor[(16, 1, 13), bool] */;
  %28 = cast(%var_945, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
  %29 = cast(%var_944, dtype="float64") /* ty=Tensor[(16, 1, 13), float64] */;
  %30 = not_equal(%27, %28) /* ty=Tensor[(16, 16, 13), bool] */;
  %31 = cosh(%29) /* ty=Tensor[(16, 1, 13), float64] */;
  (%30, %31)
}

def @func_6329() -> (Tensor[(5, 14), float64],) {
  %32 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  (%32,)
}

def @func_4275(%var_4264: Tensor[(3328), int16]) -> (Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(2, 104), float64]) {
  %33 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
  %34 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 104), int16] */, dtype="int16") /* ty=Tensor[(2, 104), int16] */;
  %35 = cast(%var_4264, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %36 = reshape(%34, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), int16] */;
  %37 = reshape(%35, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), int16] */;
  %38 = @func_954(%36, %37) /* ty=(Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) */;
  %39 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 104), int16] */, dtype="float64") /* ty=Tensor[(2, 104), float64] */;
  %40 = %33.2;
  %41 = %38.1;
  %42 = cosh(%39) /* ty=Tensor[(2, 104), float64] */;
  (%40, %41, %var_4264, %42)
}

def @func_8275(%var_8268: Tensor[(77), float64]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 7, 1), float64], Tensor[(77), float64], Tensor[(5, 14), float64]) {
  %43 = @func_8162() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %44 = cast(%var_8268, dtype="float64") /* ty=Tensor[(77), float64] */;
  %45 = reshape(%44, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
  %46 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
  %47 = %43.0;
  %48 = @func_4431(%45) /* ty=Tensor[(11, 7, 1), float64] */;
  %49 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
  (%46, %47, %48, %var_8268, %49)
}

def @func_6771(%var_6748: Tensor[(14, 15, 9), int64], %var_6749: Tensor[(14, 15, 9), int64]) -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float32]) {
  %50 = cast(%var_6749, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
  %51 = shape_of(%var_6748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%var_6748, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %54 = cast(%var_6748, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %55 = minimum(%52, %53) /* ty=Tensor[(14, 15, 9), int64] */;
  %56 = atanh(%54) /* ty=Tensor[(14, 15, 9), float32] */;
  (%55, %56)
}

def @func_4508() -> Tensor[(5, 14), float64] {
  @func_3295() /* ty=Tensor[(5, 14), float64] */
}

def @func_3325() -> (Tensor[(5, 14), float64],) {
  %57 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %58 = %57.0;
  (%58,)
}

def @func_7348() -> (Tensor[(1120), float64],) {
  %59 = @func_3982() /* ty=(Tensor[(5, 14), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(20, 32), int32]) */;
  %60 = %59.2;
  %61 = cast(%60, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %62 = asinh(%61) /* ty=Tensor[(1120), float64] */;
  (%62,)
}

def @func_4715() -> (Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], uint8, Tensor[(784), uint8]) {
  %63 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %64 = cast(meta[relay.Constant][1] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %65 = cast(meta[relay.Constant][2] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %66 = reshape(%64, newshape=[]) /* ty=uint8 */;
  %67 = reshape(%65, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), uint8] */;
  %68 = @func_383(%66, %67) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) */;
  %69 = %63.0;
  %70 = %68.2;
  (%69, %70, meta[relay.Constant][1] /* ty=uint8 */, meta[relay.Constant][2] /* ty=Tensor[(784), uint8] */)
}

def @func_8451(%var_8420: Tensor[(210), float64], %var_8421: Tensor[(288), int32]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(4, 14, 8), float32], Tensor[(1, 448), float32], Tensor[(5, 14), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(288), int32], Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(1, 490), float32], Tensor[(5, 14), float64]) {
  %71 = @func_6502() /* ty=(Tensor[(5, 14), float64],) */;
  %72 = @func_7380() /* ty=(Tensor[(5, 14), float64],) */;
  %73 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 448), float32] */, dtype="float32") /* ty=Tensor[(1, 448), float32] */;
  %74 = reshape(%73, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), float32] */;
  %75 = cast(meta[relay.Constant][4] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %76 = cast(%var_8420, dtype="float64") /* ty=Tensor[(210), float64] */;
  %77 = cast(%var_8421, dtype="int32") /* ty=Tensor[(288), int32] */;
  %78 = reshape(%75, newshape=[55]) /* ty=Tensor[(55), float32] */;
  %79 = reshape(%76, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %80 = reshape(%77, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %81 = @func_3753(%78, %79, %80) /* ty=(Tensor[(640), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(490), float32], Tensor[(288), int32]) */;
  %82 = @func_7654() /* ty=(Tensor[(5, 14), float64], Tensor[(20, 32), int32]) */;
  %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 490), float32] */, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
  %84 = reshape(%83, newshape=[490]) /* ty=Tensor[(490), float32] */;
  %85 = @func_2536(%84) /* ty=(Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(5, 14), float64], Tensor[(490), float32], Tensor[(5, 7, 14), bool]) */;
  %86 = %71.0;
  %87 = %72.0;
  %88 = @func_6521(%74) /* ty=Tensor[(4, 14, 8), float32] */;
  %89 = %81.4;
  %90 = %82.0;
  %91 = %85.1;
  %92 = @func_3295() /* ty=Tensor[(5, 14), float64] */;
  (%86, %87, %88, meta[relay.Constant][3] /* ty=Tensor[(1, 448), float32] */, %89, meta[relay.Constant][4] /* ty=Tensor[(55), float32] */, %var_8420, %var_8421, %90, %91, meta[relay.Constant][5] /* ty=Tensor[(1, 490), float32] */, %92)
}

def @func_6521(%var_6517: Tensor[(4, 14, 8), float32]) -> Tensor[(4, 14, 8), float32] {
  %93 = cast(%var_6517, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
  %94 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(4, 14, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%95, %96) /* ty=Tensor[(4, 14, 8), float32] */
}

def @func_1283(%var_1270: Tensor[(6, 10, 10), int8], %var_1279: Tensor[(462), uint16]) -> (Tensor[(6, 10, 10), bool], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) {
  %97 = cast(%var_1270, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
  %98 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(6, 10, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 10, 10), int8] */, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %101 = cast(%var_1279, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %102 = cast(%var_1279, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %103 = cast(%var_1279, dtype="bool") /* ty=Tensor[(462), bool] */;
  %104 = reshape(%101, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %105 = reshape(%102, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %106 = reshape(%103, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), bool] */;
  %107 = @func_712(%104, %105, %106) /* ty=(Tensor[(11, 3, 14), bool],) */;
  %108 = greater_equal(%99, %100) /* ty=Tensor[(6, 10, 10), bool] */;
  %109 = %107.0;
  (%108, %109, %var_1279)
}

def @func_4869() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %110 = @func_3539() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %111 = %110.0;
  %112 = @func_2693() /* ty=Tensor[(5, 14), float64] */;
  (%111, %112)
}

def @func_3850(%var_3837: Tensor[(210), float64]) -> (Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(16, 1, 13), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(52, 4), float64]) {
  %113 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
  %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(52, 4), int16] */, dtype="int16") /* ty=Tensor[(52, 4), int16] */;
  %115 = cast(meta[relay.Constant][9] /* ty=Tensor[(3328), int16] */, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %116 = reshape(%114, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), int16] */;
  %117 = reshape(%115, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), int16] */;
  %118 = @func_954(%116, %117) /* ty=(Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) */;
  %119 = %118.1;
  %120 = cast(%119, dtype="int16") /* ty=Tensor[(16, 1, 13), int16] */;
  %121 = cast(meta[relay.Constant][9] /* ty=Tensor[(3328), int16] */, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %122 = reshape(%120, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), int16] */;
  %123 = reshape(%121, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), int16] */;
  %124 = @func_954(%122, %123) /* ty=(Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) */;
  %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %126 = cast(%var_3837, dtype="float64") /* ty=Tensor[(210), float64] */;
  %127 = reshape(%125, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), float32] */;
  %128 = reshape(%126, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %129 = @func_1498(%127, %128) /* ty=(Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) */;
  %130 = cast(meta[relay.Constant][8] /* ty=Tensor[(52, 4), int16] */, dtype="float64") /* ty=Tensor[(52, 4), float64] */;
  %131 = %113.2;
  %132 = %124.1;
  %133 = %129.2;
  %134 = rsqrt(%130) /* ty=Tensor[(52, 4), float64] */;
  (%131, %119, meta[relay.Constant][9] /* ty=Tensor[(3328), int16] */, %132, %133, meta[relay.Constant][10] /* ty=Tensor[(55), float32] */, %var_3837, %134)
}

def @func_8382(%var_8359: Tensor[(9, 2, 14), float64]) -> (Tensor[(9, 2, 14), float64], Tensor[(9, 2, 14), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %135 = cast(%var_8359, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
  %136 = cast(%var_8359, dtype="float32") /* ty=Tensor[(9, 2, 14), float32] */;
  %137 = asin(%135) /* ty=Tensor[(9, 2, 14), float64] */;
  %138 = log10(%136) /* ty=Tensor[(9, 2, 14), float32] */;
  %139 = @func_4373() /* ty=Tensor[(5, 14), float64] */;
  %140 = @func_4373() /* ty=Tensor[(5, 14), float64] */;
  (%137, %138, %139, %140)
}

def @func_5389() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %141 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %142 = @func_2932() /* ty=Tensor[(5, 14), float64] */;
  %143 = %141.0;
  (%142, %143)
}

def @func_8034(%var_8005: Tensor[(10, 16, 5), int16], %var_8006: Tensor[(10, 16, 5), int16], %var_8017: Tensor[(60, 10), float32]) -> (Tensor[(10, 16, 5), int16], Tensor[(16, 9, 2), bool], Tensor[(16), float64], Tensor[(35, 6), float64], Tensor[(60, 10), float32]) {
  %144 = cast(%var_8006, dtype="int16") /* ty=Tensor[(10, 16, 5), int16] */;
  %145 = shape_of(%var_8005, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%var_8005, dtype="int16") /* ty=Tensor[(10, 16, 5), int16] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %148 = cast(meta[relay.Constant][11] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
  %149 = cast(meta[relay.Constant][12] /* ty=Tensor[(35, 6), float64] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
  %150 = cast(%var_8017, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
  %151 = reshape(%148, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
  %152 = reshape(%149, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %153 = reshape(%150, newshape=[600]) /* ty=Tensor[(600), float32] */;
  %154 = @func_5216(%151, %152, %153) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(55), float32], Tensor[(55), float32], Tensor[(210), float64], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) */;
  %155 = left_shift(%146, %147) /* ty=Tensor[(10, 16, 5), int16] */;
  %156 = %154.3;
  (%155, %156, meta[relay.Constant][11] /* ty=Tensor[(16), float64] */, meta[relay.Constant][12] /* ty=Tensor[(35, 6), float64] */, %var_8017)
}

def @func_4818() -> (Tensor[(5, 14), float64],) {
  %157 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %158 = %157.1;
  (%158,)
}

def @func_1200(%var_1180: Tensor[(6, 9, 2), float64], %var_1187: Tensor[(462), uint16]) -> (Tensor[(6, 9, 2), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) {
  %159 = cast(%var_1180, dtype="float64") /* ty=Tensor[(6, 9, 2), float64] */;
  %160 = cast(%var_1187, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %161 = cast(%var_1187, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %162 = cast(%var_1187, dtype="bool") /* ty=Tensor[(462), bool] */;
  %163 = reshape(%160, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %164 = reshape(%161, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %165 = reshape(%162, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), bool] */;
  %166 = @func_712(%163, %164, %165) /* ty=(Tensor[(11, 3, 14), bool],) */;
  %167 = asin(%159) /* ty=Tensor[(6, 9, 2), float64] */;
  %168 = %166.0;
  (%167, %168, %var_1187)
}

def @func_9115(%var_9103: Tensor[(11, 6, 16), uint64], %var_9104: Tensor[(11, 6, 16), uint64]) -> (Tensor[(11, 6, 16), uint64], Tensor[(5, 14), float64]) {
  %169 = cast(%var_9104, dtype="uint64") /* ty=Tensor[(11, 6, 16), uint64] */;
  %170 = shape_of(%var_9103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%var_9103, dtype="uint64") /* ty=Tensor[(11, 6, 16), uint64] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %173 = logical_xor(%171, %172) /* ty=Tensor[(11, 6, 16), uint64] */;
  %174 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
  (%173, %174)
}

def @func_3982() -> (Tensor[(5, 14), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(20, 32), int32]) {
  %175 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
  %176 = %175.0;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(5, 14), float32] */;
  %178 = cast(meta[relay.Constant][13] /* ty=Tensor[(1120), uint32] */, dtype="uint32") /* ty=Tensor[(1120), uint32] */;
  %179 = cast(meta[relay.Constant][14] /* ty=Tensor[(20, 32), int32] */, dtype="int32") /* ty=Tensor[(20, 32), int32] */;
  %180 = reshape(%178, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), uint32] */;
  %181 = reshape(%179, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %182 = @func_2184(%180, %181) /* ty=(Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
  %183 = asin(%177) /* ty=Tensor[(5, 14), float32] */;
  %184 = %182.0;
  (%183, %184, meta[relay.Constant][13] /* ty=Tensor[(1120), uint32] */, meta[relay.Constant][14] /* ty=Tensor[(20, 32), int32] */)
}

def @func_2345() -> Tensor[(5, 14), float64] {
  %185 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 14), float64] */, dtype="float64") /* ty=Tensor[(5, 14), float64] */;
  sigmoid(%185) /* ty=Tensor[(5, 14), float64] */
}

def @func_1233(%var_1230: Tensor[(1, 15, 14), float64]) -> (Tensor[(1, 15, 14), float64],) {
  %186 = cast(%var_1230, dtype="float64") /* ty=Tensor[(1, 15, 14), float64] */;
  %187 = log10(%186) /* ty=Tensor[(1, 15, 14), float64] */;
  (%187,)
}

def @func_6820() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %188 = @func_6014() /* ty=(Tensor[(5, 14), float64],) */;
  %189 = @func_4942() /* ty=(Tensor[(5, 14), float64],) */;
  %190 = @func_3774() /* ty=(Tensor[(5, 14), float64],) */;
  %191 = %188.0;
  %192 = %189.0;
  %193 = %190.0;
  (%191, %192, %193)
}

def @func_7668(%var_7657: Tensor[(7, 13, 7), float32]) -> Tensor[(7, 13, 7), float32] {
  %194 = cast(%var_7657, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
  sqrt(%194) /* ty=Tensor[(7, 13, 7), float32] */
}

def @func_9472() -> Tensor[(5, 14), float64] {
  %195 = @func_9027() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %195.1
}

def @func_6573(%var_6558: Tensor[(13, 1, 8), int8], %var_6559: Tensor[(13, 1, 8), int8]) -> (Tensor[(13, ?, 8), int8], Tensor[(13, 1, 8), float64]) {
  %196 = cast(%var_6559, dtype="int8") /* ty=Tensor[(13, 1, 8), int8] */;
  %197 = shape_of(%var_6558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_6558, dtype="int8") /* ty=Tensor[(13, 1, 8), int8] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %200 = cast(%var_6559, dtype="float64") /* ty=Tensor[(13, 1, 8), float64] */;
  %201 = subtract(%198, %199) /* ty=Tensor[(13, ?, 8), int8] */;
  %202 = exp(%200) /* ty=Tensor[(13, 1, 8), float64] */;
  (%201, %202)
}

def @func_7380() -> (Tensor[(5, 14), float64],) {
  %203 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %204 = %203.0;
  (%204,)
}

def @func_9071() -> Tensor[(5, 14), float64] {
  %205 = @func_3022() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %205.0
}

def @func_8162() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %206 = @func_3774() /* ty=(Tensor[(5, 14), float64],) */;
  %207 = @func_3382() /* ty=Tensor[(5, 14), float64] */;
  %208 = %206.0;
  (%207, %208)
}

def @func_1367(%var_1345: Tensor[(4, 13, 4), float32]) -> Tensor[(4, 13, 4), float32] {
  %209 = cast(%var_1345, dtype="float32") /* ty=Tensor[(4, 13, 4), float32] */;
  %210 = sigmoid(%209) /* ty=Tensor[(4, 13, 4), float32] */;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(4, 13, 4), float32] */;
  rsqrt(%211) /* ty=Tensor[(4, 13, 4), float32] */
}

def @func_5415() -> (Tensor[(5, 14), float64],) {
  %212 = @func_3325() /* ty=(Tensor[(5, 14), float64],) */;
  %213 = %212.0;
  (%213,)
}

def @func_8889(%var_8847: Tensor[(50, 15), int16]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(50, 15), int16], Tensor[(8, 14, 7), float32], Tensor[(784), uint8], Tensor[(11, 7, 1), float64], Tensor[(77, 1), float64], Tensor[(750), float32]) {
  %214 = @func_2988() /* ty=(Tensor[(5, 14), float64],) */;
  %215 = cast(%var_8847, dtype="int16") /* ty=Tensor[(50, 15), int16] */;
  %216 = reshape(%215, newshape=[750]) /* ty=Tensor[(750), int16] */;
  %217 = @func_7867(%216) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), int16]) */;
  %218 = cast(meta[relay.Constant][16] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %219 = reshape(%218, newshape=[784, 1]) /* ty=Tensor[(784, 1), uint8] */;
  %220 = @func_7549(%219) /* ty=(Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], Tensor[(784, 1), float32], Tensor[(8, 2, 9), float32], Tensor[(5, 14), float64], Tensor[(784, 1), float64]) */;
  %221 = cast(meta[relay.Constant][17] /* ty=Tensor[(77, 1), float64] */, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
  %222 = reshape(%221, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
  %223 = @func_7074() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(14, 3, 6), int16], Tensor[(252), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), float32]) */;
  %224 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
  %225 = %214.0;
  %226 = %217.0;
  %227 = %220.1;
  %228 = @func_4431(%222) /* ty=Tensor[(11, 7, 1), float64] */;
  %229 = %223.12;
  (%224, %225, %226, %var_8847, %227, meta[relay.Constant][16] /* ty=Tensor[(784), uint8] */, %228, meta[relay.Constant][17] /* ty=Tensor[(77, 1), float64] */, %229)
}

def @func_7867(%var_7865: Tensor[(750), int16]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), int16]) {
  %230 = @func_4022() /* ty=(Tensor[(5, 14), float64],) */;
  %231 = cast(%var_7865, dtype="int16") /* ty=Tensor[(750), int16] */;
  %232 = reshape(%231, newshape=[750]) /* ty=Tensor[(750), int16] */;
  %233 = @func_6436(%232) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16]) */;
  %234 = %230.0;
  %235 = %233.0;
  (%234, %235, %var_7865)
}

def @func_2429(%var_2422: uint32) -> Tensor[(15, 5, 1), uint32] {
  %236 = cast(%var_2422, dtype="uint32") /* ty=uint32 */;
  %237 = cast(meta[relay.Constant][18] /* ty=Tensor[(15, 5, 1), uint32] */, dtype="uint32") /* ty=Tensor[(15, 5, 1), uint32] */;
  right_shift(%236, %237) /* ty=Tensor[(15, 5, 1), uint32] */
}

def @func_2405(%var_2391: Tensor[(2100, 1), int64]) -> (Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100, ?), float64]) {
  %238 = cast(meta[relay.Constant][19] /* ty=Tensor[(2100, 1), int64] */, dtype="int64") /* ty=Tensor[(2100, 1), int64] */;
  %239 = reshape(%238, newshape=[15, 14, 10]) /* ty=Tensor[(15, 14, 10), int64] */;
  %240 = @func_1708(%239) /* ty=(Tensor[(15, 14, 10), int64],) */;
  %241 = cast(%var_2391, dtype="float64") /* ty=Tensor[(2100, 1), float64] */;
  %242 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(2100, 1), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %243 = cast(meta[relay.Constant][19] /* ty=Tensor[(2100, 1), int64] */, dtype="float64") /* ty=Tensor[(2100, 1), float64] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %245 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  %246 = %240.0;
  %247 = divide(%243, %244) /* ty=Tensor[(2100, ?), float64] */;
  (%245, %246, %247)
}

def @func_2988() -> (Tensor[(5, 14), float64],) {
  %248 = @func_2693() /* ty=Tensor[(5, 14), float64] */;
  (%248,)
}

def @func_5771() -> (Tensor[(5, 14), float64],) {
  %249 = @func_5618() /* ty=(Tensor[(5, 14), float64],) */;
  %250 = %249.0;
  (%250,)
}

def @func_6072() -> (Tensor[(5, 14), float64],) {
  %251 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %252 = %251.0;
  (%252,)
}

def @func_4617(%var_4597: Tensor[(640), int32], %var_4602: Tensor[(640), int32], %var_4610: Tensor[(4, 10, 16), bool]) -> (Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(4, 10, 16), uint32], Tensor[(5, 14), float64]) {
  %253 = @func_3325() /* ty=(Tensor[(5, 14), float64],) */;
  %254 = cast(%var_4602, dtype="float64") /* ty=Tensor[(640), float64] */;
  %255 = shape_of(%var_4597, dtype="int32") /* ty=Tensor[(1), int32] */;
  %256 = cast(%var_4597, dtype="float64") /* ty=Tensor[(640), float64] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?), float64] */;
  %258 = cast(%var_4597, dtype="int32") /* ty=Tensor[(640), int32] */;
  %259 = cast(%var_4597, dtype="int32") /* ty=Tensor[(640), int32] */;
  %260 = reshape(%258, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %261 = reshape(%259, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %262 = @func_1525(%260, %261) /* ty=Tensor[(4, 10, 16), bool] */;
  %263 = cast(%var_4610, dtype="uint32") /* ty=Tensor[(4, 10, 16), uint32] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="uint32") /* ty=Tensor[(4, 10, 16), uint32] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %267 = %253.0;
  %268 = mod(%256, %257) /* ty=Tensor[(640), float64] */;
  %269 = left_shift(%265, %266) /* ty=Tensor[(4, 10, 16), uint32] */;
  %270 = @func_4508() /* ty=Tensor[(5, 14), float64] */;
  (%267, %268, %269, %270)
}

def @func_9549() -> Tensor[(5, 14), float64] {
  %271 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
  %271.0
}

def @func_6549() -> (Tensor[(8, 2, 9), float32],) {
  %272 = @func_5238() /* ty=Tensor[(8, 2, 9), float32] */;
  (%272,)
}

def @func_6638(%var_6632: Tensor[(12, 13, 13), float64]) -> Tensor[(12, 13, 13), float64] {
  %273 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 13, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 13), float64] */;
  %274 = shape_of(%var_6632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%var_6632, dtype="float64") /* ty=Tensor[(12, 13, 13), float64] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%275, %276) /* ty=Tensor[(12, 13, 13), float64] */
}

def @func_5335(%var_5300: Tensor[(660), uint16]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(864), float32], Tensor[(5, 11, 12), uint16], Tensor[(660), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32]) {
  %277 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %278 = cast(meta[relay.Constant][21] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %279 = reshape(%278, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %280 = @func_4252(%279) /* ty=(Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) */;
  %281 = cast(meta[relay.Constant][21] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %282 = cast(%var_5300, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %283 = reshape(%282, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), uint16] */;
  %284 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
  %285 = cast(meta[relay.Constant][22] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
  %286 = reshape(%285, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %287 = @func_3194(%286) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) */;
  %288 = %277.0;
  %289 = %280.9;
  %290 = erf(%281) /* ty=Tensor[(864), float32] */;
  %291 = @func_4687(%283) /* ty=Tensor[(5, 11, 12), uint16] */;
  %292 = %284.0;
  %293 = %287.1;
  (%288, %289, %290, %291, %var_5300, %292, %293, meta[relay.Constant][22] /* ty=Tensor[(640), int32] */)
}

def @func_5216(%var_5173: Tensor[(1, 4, 4), float64], %var_5199: Tensor[(210), float64], %var_5202: Tensor[(600), float32]) -> (Tensor[(1, 4, 4), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(55), float32], Tensor[(55), float32], Tensor[(210), float64], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) {
  %294 = cast(%var_5173, dtype="float64") /* ty=Tensor[(1, 4, 4), float64] */;
  %295 = cast(meta[relay.Constant][23] /* ty=Tensor[(750), int16] */, dtype="int16") /* ty=Tensor[(750), int16] */;
  %296 = reshape(%295, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
  %297 = @func_1832(%296) /* ty=(Tensor[(5, 10, 15), int16],) */;
  %298 = cast(meta[relay.Constant][24] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %299 = reshape(%298, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
  %300 = cast(meta[relay.Constant][25] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
  %301 = cast(%var_5199, dtype="float64") /* ty=Tensor[(210), float64] */;
  %302 = reshape(%300, newshape=[55]) /* ty=Tensor[(55), float32] */;
  %303 = reshape(%301, newshape=[1, 210]) /* ty=Tensor[(1, 210), float64] */;
  %304 = @func_2642(%302, %303) /* ty=(Tensor[(5, 14), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(1, 210), float64]) */;
  %305 = cast(%var_5202, dtype="float32") /* ty=Tensor[(600), float32] */;
  %306 = reshape(%305, newshape=[12, 5, 10]) /* ty=Tensor[(12, 5, 10), float32] */;
  %307 = @func_1400(%306) /* ty=(Tensor[(12, 5, 10), float32],) */;
  %308 = erf(%294) /* ty=Tensor[(1, 4, 4), float64] */;
  %309 = %297.0;
  %310 = @func_272(%299) /* ty=Tensor[(16, 9, 2), bool] */;
  %311 = %304.2;
  %312 = %307.0;
  (%308, %309, meta[relay.Constant][23] /* ty=Tensor[(750), int16] */, %310, meta[relay.Constant][24] /* ty=Tensor[(288), int32] */, %311, meta[relay.Constant][25] /* ty=Tensor[(55), float32] */, %var_5199, %312, %var_5202)
}

def @func_7795() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %313 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %314 = @func_5415() /* ty=(Tensor[(5, 14), float64],) */;
  %315 = @func_5000() /* ty=Tensor[(5, 14), float64] */;
  %316 = %313.0;
  %317 = %314.0;
  (%315, %316, %317)
}

def @func_8473(%var_8464: Tensor[(16, 6, 13), float64]) -> Tensor[(16, 6, 13), float64] {
  %318 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
  %319 = shape_of(%var_8464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%var_8464, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%320, %321) /* ty=Tensor[(16, 6, 13), float64] */
}

def @func_6307() -> Tensor[(5, 14), float64] {
  @func_4035() /* ty=Tensor[(5, 14), float64] */
}

def @func_2908() -> Tensor[(5, 14), float64] {
  @func_2693() /* ty=Tensor[(5, 14), float64] */
}

def @func_2932() -> Tensor[(5, 14), float64] {
  @func_2567() /* ty=Tensor[(5, 14), float64] */
}

def @func_5809() -> Tensor[(8, 2, 9), float32] {
  @func_5238() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_1400(%var_1390: Tensor[(12, 5, 10), float32]) -> (Tensor[(12, 5, 10), float32],) {
  %322 = cast(%var_1390, dtype="float32") /* ty=Tensor[(12, 5, 10), float32] */;
  %323 = tan(%322) /* ty=Tensor[(12, 5, 10), float32] */;
  %324 = cast(%var_1390, dtype="float32") /* ty=Tensor[(12, 5, 10), float32] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="float32") /* ty=Tensor[(12, 5, 10), float32] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %328 = floor_divide(%326, %327) /* ty=Tensor[(12, 5, 10), float32] */;
  (%328,)
}

def @func_7302() -> (Tensor[(5, 14), float64],) {
  %329 = @func_3325() /* ty=(Tensor[(5, 14), float64],) */;
  %330 = %329.0;
  (%330,)
}

def @func_7321() -> (Tensor[(5, 14), float64],) {
  %331 = @func_6698() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %332 = %331.0;
  (%332,)
}

def @func_7285(%var_7278: Tensor[(864), float32]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(567), bool], Tensor[(5, 14), float64], Tensor[(864), float32]) {
  %333 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %334 = @func_6184() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52, 1), float32]) */;
  %335 = cast(meta[relay.Constant][27] /* ty=Tensor[(462), uint16] */, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %336 = cast(meta[relay.Constant][27] /* ty=Tensor[(462), uint16] */, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %337 = cast(meta[relay.Constant][27] /* ty=Tensor[(462), uint16] */, dtype="bool") /* ty=Tensor[(462), bool] */;
  %338 = reshape(%335, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %339 = reshape(%336, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %340 = reshape(%337, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), bool] */;
  %341 = @func_712(%338, %339, %340) /* ty=(Tensor[(11, 3, 14), bool],) */;
  %342 = cast(meta[relay.Constant][28] /* ty=Tensor[(567), float32] */, dtype="float32") /* ty=Tensor[(567), float32] */;
  %343 = reshape(%342, newshape=[9, 9, 7]) /* ty=Tensor[(9, 9, 7), float32] */;
  %344 = @func_4756(%343) /* ty=(Tensor[(9, 9, 7), int32], Tensor[(5, 14), float64], Tensor[(640), int32]) */;
  %345 = cast(meta[relay.Constant][28] /* ty=Tensor[(567), float32] */, dtype="float32") /* ty=Tensor[(567), float32] */;
  %346 = reshape(%345, newshape=[9, 9, 7]) /* ty=Tensor[(9, 9, 7), float32] */;
  %347 = @func_4756(%346) /* ty=(Tensor[(9, 9, 7), int32], Tensor[(5, 14), float64], Tensor[(640), int32]) */;
  %348 = cast(meta[relay.Constant][29] /* ty=Tensor[(567), float32] */, dtype="bool") /* ty=Tensor[(567), bool] */;
  %349 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(567), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %350 = cast(meta[relay.Constant][28] /* ty=Tensor[(567), float32] */, dtype="bool") /* ty=Tensor[(567), bool] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?), bool] */;
  %352 = cast(%var_7278, dtype="float32") /* ty=Tensor[(864), float32] */;
  %353 = reshape(%352, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %354 = @func_4252(%353) /* ty=(Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) */;
  %355 = %333.0;
  %356 = %334.0;
  %357 = %341.0;
  %358 = %344.1;
  %359 = %347.1;
  %360 = equal(%350, %351) /* ty=Tensor[(567), bool] */;
  %361 = %354.9;
  (%355, %356, %357, meta[relay.Constant][27] /* ty=Tensor[(462), uint16] */, %358, %359, %360, %361, %var_7278)
}

def @func_3242() -> (Tensor[(5, 14), float64],) {
  %362 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %363 = %362.0;
  (%363,)
}

def @func_2049(%var_2032: Tensor[(9, 8, 12), float32]) -> (Tensor[(9, 8, 12), float32], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) {
  %364 = cast(%var_2032, dtype="float32") /* ty=Tensor[(9, 8, 12), float32] */;
  %365 = cast(meta[relay.Constant][30] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %366 = reshape(%365, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
  %367 = tan(%364) /* ty=Tensor[(9, 8, 12), float32] */;
  %368 = @func_272(%366) /* ty=Tensor[(16, 9, 2), bool] */;
  (%367, %368, meta[relay.Constant][30] /* ty=Tensor[(288), int32] */)
}

def @func_4431(%var_4405: Tensor[(11, 7, 1), float64]) -> Tensor[(11, 7, 1), float64] {
  %369 = cast(%var_4405, dtype="float64") /* ty=Tensor[(11, 7, 1), float64] */;
  %370 = sin(%369) /* ty=Tensor[(11, 7, 1), float64] */;
  %371 = cast(%370, dtype="float64") /* ty=Tensor[(11, 7, 1), float64] */;
  atanh(%371) /* ty=Tensor[(11, 7, 1), float64] */
}

def @func_1708(%var_1702: Tensor[(15, 14, 10), int64]) -> (Tensor[(15, 14, 10), int64],) {
  %372 = cast(%var_1702, dtype="int64") /* ty=Tensor[(15, 14, 10), int64] */;
  %373 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(15, 14, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 14, 10), int64] */, dtype="int64") /* ty=Tensor[(15, 14, 10), int64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %376 = logical_xor(%374, %375) /* ty=Tensor[(15, 14, 10), int64] */;
  (%376,)
}

def @func_3272(%var_3268: Tensor[(288), int32]) -> (Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) {
  %377 = cast(%var_3268, dtype="int32") /* ty=Tensor[(288), int32] */;
  %378 = reshape(%377, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
  %379 = @func_2693() /* ty=Tensor[(5, 14), float64] */;
  %380 = @func_272(%378) /* ty=Tensor[(16, 9, 2), bool] */;
  (%379, %380, %var_3268)
}

def @func_4035() -> Tensor[(5, 14), float64] {
  %381 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %381.1
}

def @func_5060() -> (Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(288), int32]) {
  %382 = cast(meta[relay.Constant][32] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %383 = reshape(%382, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %384 = @func_4356(%383) /* ty=(Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(3, 36), float64], Tensor[(462), uint16], Tensor[(288), int32], Tensor[(288), int32]) */;
  %385 = @func_2693() /* ty=Tensor[(5, 14), float64] */;
  %386 = %384.1;
  (%385, %386, meta[relay.Constant][32] /* ty=Tensor[(288), int32] */)
}

def @func_2814(%var_2779: Tensor[(55), float32], %var_2780: Tensor[(210), float64], %var_2792: Tensor[(600), int8], %var_2799: Tensor[(108), float64]) -> (Tensor[(3, 5), float32], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(462), uint16], Tensor[(600), int8], Tensor[(1, 462), uint16], Tensor[(11, 3, 14), bool], Tensor[(108), float64]) {
  %387 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 5), float32] */;
  %388 = cast(%var_2779, dtype="float32") /* ty=Tensor[(55), float32] */;
  %389 = cast(%var_2780, dtype="float64") /* ty=Tensor[(210), float64] */;
  %390 = reshape(%388, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), float32] */;
  %391 = reshape(%389, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %392 = @func_1498(%390, %391) /* ty=(Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) */;
  %393 = cast(%var_2792, dtype="int8") /* ty=Tensor[(600), int8] */;
  %394 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 462), uint16] */, dtype="uint16") /* ty=Tensor[(1, 462), uint16] */;
  %395 = reshape(%393, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), int8] */;
  %396 = reshape(%394, newshape=[462]) /* ty=Tensor[(462), uint16] */;
  %397 = @func_1283(%395, %396) /* ty=(Tensor[(6, 10, 10), bool], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) */;
  %398 = cast(%var_2799, dtype="float64") /* ty=Tensor[(108), float64] */;
  %399 = %397.2;
  %400 = cast(%399, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %401 = reshape(%398, newshape=[6, 9, 2]) /* ty=Tensor[(6, 9, 2), float64] */;
  %402 = reshape(%400, newshape=[462]) /* ty=Tensor[(462), uint16] */;
  %403 = @func_1200(%401, %402) /* ty=(Tensor[(6, 9, 2), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) */;
  %404 = log2(%387) /* ty=Tensor[(3, 5), float32] */;
  %405 = %392.2;
  %406 = %403.1;
  (%404, %405, %var_2779, %var_2780, %399, %var_2792, meta[relay.Constant][34] /* ty=Tensor[(1, 462), uint16] */, %406, %var_2799)
}

def @func_3101() -> (Tensor[(5, 14), float64],) {
  %407 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %408 = %407.0;
  (%408,)
}

def @func_4373() -> Tensor[(5, 14), float64] {
  @func_2567() /* ty=Tensor[(5, 14), float64] */
}

def @func_4491(%var_4489: Tensor[(462), uint16]) -> (Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) {
  %409 = cast(%var_4489, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %410 = cast(%var_4489, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %411 = cast(%var_4489, dtype="bool") /* ty=Tensor[(462), bool] */;
  %412 = reshape(%409, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %413 = reshape(%410, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %414 = reshape(%411, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), bool] */;
  %415 = @func_712(%412, %413, %414) /* ty=(Tensor[(11, 3, 14), bool],) */;
  %416 = @func_3382() /* ty=Tensor[(5, 14), float64] */;
  %417 = %415.0;
  (%416, %417, %var_4489)
}

def @func_4252(%var_4241: Tensor[(864), float32]) -> (Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) {
  %418 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 208), float32] */, dtype="float32") /* ty=Tensor[(1, 208), float32] */;
  %419 = reshape(%418, newshape=[4, 13, 4]) /* ty=Tensor[(4, 13, 4), float32] */;
  %420 = @func_3022() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %421 = cast(%var_4241, dtype="float32") /* ty=Tensor[(864), float32] */;
  %422 = reshape(%421, newshape=[9, 8, 12]) /* ty=Tensor[(9, 8, 12), float32] */;
  %423 = @func_2049(%422) /* ty=(Tensor[(9, 8, 12), float32], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */;
  %424 = cast(meta[relay.Constant][36] /* ty=Tensor[(750), int16] */, dtype="int16") /* ty=Tensor[(750), int16] */;
  %425 = reshape(%424, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
  %426 = @func_1832(%425) /* ty=(Tensor[(5, 10, 15), int16],) */;
  %427 = @func_4163() /* ty=(Tensor[(5, 14), float64],) */;
  %428 = @func_3932() /* ty=Tensor[(5, 14), float64] */;
  %429 = @func_1367(%419) /* ty=Tensor[(4, 13, 4), float32] */;
  %430 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  %431 = %420.1;
  %432 = %423.0;
  %433 = %426.0;
  %434 = %427.0;
  (%428, %429, meta[relay.Constant][35] /* ty=Tensor[(1, 208), float32] */, %430, %431, %432, %var_4241, %433, meta[relay.Constant][36] /* ty=Tensor[(750), int16] */, %434)
}

def @func_4687(%var_4680: Tensor[(5, 11, 12), uint16]) -> Tensor[(5, 11, 12), uint16] {
  %435 = cast(%var_4680, dtype="uint16") /* ty=Tensor[(5, 11, 12), uint16] */;
  %436 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(5, 11, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(5, 11, 12), uint16] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%437, %438) /* ty=Tensor[(5, 11, 12), uint16] */
}

def @func_5547(%var_5524: Tensor[(10, 8, 5), uint32], %var_5525: Tensor[(10, 8, 5), uint32]) -> (Tensor[(10, 8, 5), uint32], Tensor[(5, 14), float64], Tensor[(864), float32]) {
  %439 = cast(%var_5525, dtype="uint32") /* ty=Tensor[(10, 8, 5), uint32] */;
  %440 = shape_of(%var_5524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%var_5524, dtype="uint32") /* ty=Tensor[(10, 8, 5), uint32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %443 = cast(meta[relay.Constant][38] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %444 = reshape(%443, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %445 = @func_4252(%444) /* ty=(Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) */;
  %446 = bitwise_or(%441, %442) /* ty=Tensor[(10, 8, 5), uint32] */;
  %447 = %445.4;
  (%446, %447, meta[relay.Constant][38] /* ty=Tensor[(864), float32] */)
}

def @func_8965() -> Tensor[(5, 14), float64] {
  @func_4035() /* ty=Tensor[(5, 14), float64] */
}

def @func_3539() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %448 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %449 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  %450 = %448.0;
  (%449, %450)
}

def @func_9324() -> (Tensor[(5, 14), float64],) {
  %451 = @func_6307() /* ty=Tensor[(5, 14), float64] */;
  (%451,)
}

def @func_8561() -> (Tensor[(52), float64],) {
  %452 = @func_8532() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52), float32]) */;
  %453 = %452.3;
  %454 = cast(%453, dtype="float64") /* ty=Tensor[(52), float64] */;
  %455 = sqrt(%454) /* ty=Tensor[(52), float64] */;
  (%455,)
}

def @main() -> Tensor[(640), int16] {
  %456 = @func_9200() /* ty=(Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %457 = %456.0;
  %458 = cast(meta[relay.Constant][39] /* ty=Tensor[(640), int32] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(1), int32] */;
  %460 = cast(%457, dtype="int16") /* ty=Tensor[(640), int16] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?), int16] */;
  bitwise_xor(%460, %461) /* ty=Tensor[(640), int16] */
}

def @func_3382() -> Tensor[(5, 14), float64] {
  %462 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %462.0
}

def @func_2698() -> Tensor[(5, 14), float64] {
  @func_2345() /* ty=Tensor[(5, 14), float64] */
}

def @func_712(%var_690: Tensor[(11, 3, 14), uint16], %var_691: Tensor[(11, 3, 14), uint16], %var_695: Tensor[(11, 3, 14), bool]) -> (Tensor[(11, 3, 14), bool],) {
  %463 = cast(%var_691, dtype="bool") /* ty=Tensor[(11, 3, 14), bool] */;
  %464 = shape_of(%var_690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(%var_690, dtype="bool") /* ty=Tensor[(11, 3, 14), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = less(%465, %466) /* ty=Tensor[(11, 3, 14), bool] */;
  %468 = cast(%var_695, dtype="bool") /* ty=Tensor[(11, 3, 14), bool] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="bool") /* ty=Tensor[(11, 3, 14), bool] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %472 = less_equal(%470, %471) /* ty=Tensor[(11, 3, 14), bool] */;
  (%472,)
}

def @func_2642(%var_2634: Tensor[(55), float32], %var_2635: Tensor[(1, 210), float64]) -> (Tensor[(5, 14), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(1, 210), float64]) {
  %473 = cast(%var_2634, dtype="float32") /* ty=Tensor[(55), float32] */;
  %474 = cast(%var_2635, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
  %475 = reshape(%473, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), float32] */;
  %476 = reshape(%474, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %477 = @func_1498(%475, %476) /* ty=(Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) */;
  %478 = @func_2567() /* ty=Tensor[(5, 14), float64] */;
  %479 = %477.2;
  (%478, %479, %var_2634, %var_2635)
}

def @func_7436() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %480 = @func_6270() /* ty=Tensor[(5, 14), float64] */;
  %481 = @func_2698() /* ty=Tensor[(5, 14), float64] */;
  (%480, %481)
}

def @func_1498(%var_1472: Tensor[(1, 11, 5), float32], %var_1494: Tensor[(210), float64]) -> (Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) {
  %482 = cast(%var_1472, dtype="float32") /* ty=Tensor[(1, 11, 5), float32] */;
  %483 = sqrt(%482) /* ty=Tensor[(1, 11, 5), float32] */;
  %484 = cast(%483, dtype="float32") /* ty=Tensor[(1, 11, 5), float32] */;
  %485 = shape_of(%var_1472, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_1472, dtype="float32") /* ty=Tensor[(1, 11, 5), float32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %488 = floor_divide(%486, %487) /* ty=Tensor[(?, 11, 5), float32] */;
  %489 = cast(%var_1472, dtype="bool") /* ty=Tensor[(1, 11, 5), bool] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="bool") /* ty=Tensor[(?, 11, 5), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %493 = less_equal(%491, %492) /* ty=Tensor[(?, 11, 5), bool] */;
  %494 = cast(%493, dtype="bool") /* ty=Tensor[(?, 11, 5), bool] */;
  %495 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%488, dtype="bool") /* ty=Tensor[(?, 11, 5), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %498 = cast(%var_1494, dtype="float64") /* ty=Tensor[(210), float64] */;
  %499 = reshape(%498, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
  %500 = @func_1233(%499) /* ty=(Tensor[(1, 15, 14), float64],) */;
  %501 = greater_equal(%496, %497) /* ty=Tensor[(?, 11, 5), bool] */;
  %502 = %500.0;
  (%501, %502, %var_1494)
}

def @func_7074() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(14, 3, 6), int16], Tensor[(252), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), float32]) {
  %503 = @func_2988() /* ty=(Tensor[(5, 14), float64],) */;
  %504 = @func_6820() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %505 = @func_6820() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %506 = @func_4022() /* ty=(Tensor[(5, 14), float64],) */;
  %507 = cast(meta[relay.Constant][40] /* ty=Tensor[(252), uint32] */, dtype="uint32") /* ty=Tensor[(252), uint32] */;
  %508 = cast(meta[relay.Constant][40] /* ty=Tensor[(252), uint32] */, dtype="uint32") /* ty=Tensor[(252), uint32] */;
  %509 = reshape(%507, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), uint32] */;
  %510 = reshape(%508, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), uint32] */;
  %511 = @func_4906(%509, %510) /* ty=(Tensor[(14, 3, 6), uint32],) */;
  %512 = %511.0;
  %513 = cast(meta[relay.Constant][40] /* ty=Tensor[(252), uint32] */, dtype="bool") /* ty=Tensor[(252), bool] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="bool") /* ty=Tensor[(14, 3, 6), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %517 = less_equal(%515, %516) /* ty=Tensor[(14, 3, 6), bool] */;
  %518 = cast(%512, dtype="int16") /* ty=Tensor[(14, 3, 6), int16] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="int16") /* ty=Tensor[(14, 3, 6), int16] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %522 = cast(%517, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
  %523 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(252), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %524 = cast(meta[relay.Constant][40] /* ty=Tensor[(252), uint32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?), float32] */;
  %526 = cast(meta[relay.Constant][41] /* ty=Tensor[(1120), uint32] */, dtype="uint32") /* ty=Tensor[(1120), uint32] */;
  %527 = cast(meta[relay.Constant][42] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
  %528 = reshape(%526, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), uint32] */;
  %529 = reshape(%527, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %530 = @func_2184(%528, %529) /* ty=(Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
  %531 = cast(meta[relay.Constant][42] /* ty=Tensor[(640), int32] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %532 = @func_3506() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %533 = cast(meta[relay.Constant][43] /* ty=Tensor[(750), int16] */, dtype="int16") /* ty=Tensor[(750), int16] */;
  %534 = reshape(%533, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
  %535 = @func_1832(%534) /* ty=(Tensor[(5, 10, 15), int16],) */;
  %536 = %535.0;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
  %538 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(750), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %539 = cast(meta[relay.Constant][43] /* ty=Tensor[(750), int16] */, dtype="float32") /* ty=Tensor[(750), float32] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?), float32] */;
  %541 = %503.0;
  %542 = %504.0;
  %543 = %505.0;
  %544 = %506.0;
  %545 = right_shift(%520, %521) /* ty=Tensor[(14, 3, 6), int16] */;
  %546 = divide(%524, %525) /* ty=Tensor[(252), float32] */;
  %547 = %530.0;
  %548 = @func_2932() /* ty=Tensor[(5, 14), float64] */;
  %549 = log10(%531) /* ty=Tensor[(640), float64] */;
  %550 = @func_6270() /* ty=Tensor[(5, 14), float64] */;
  %551 = %532.0;
  %552 = power(%539, %540) /* ty=Tensor[(750), float32] */;
  (%541, %542, %543, %544, %545, %546, %547, meta[relay.Constant][41] /* ty=Tensor[(1120), uint32] */, %548, %549, %550, %551, %552)
}

def @func_4942() -> (Tensor[(5, 14), float64],) {
  %553 = @func_3774() /* ty=(Tensor[(5, 14), float64],) */;
  %554 = %553.0;
  (%554,)
}

def @func_4906(%var_4898: Tensor[(14, 3, 6), uint32], %var_4899: Tensor[(14, 3, 6), uint32]) -> (Tensor[(14, 3, 6), uint32],) {
  %555 = cast(%var_4899, dtype="uint32") /* ty=Tensor[(14, 3, 6), uint32] */;
  %556 = shape_of(%var_4898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%var_4898, dtype="uint32") /* ty=Tensor[(14, 3, 6), uint32] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %559 = bitwise_xor(%557, %558) /* ty=Tensor[(14, 3, 6), uint32] */;
  (%559,)
}

def @func_5514(%var_5485: Tensor[(16, 9, 2), bool]) -> (Tensor[(5, 14), float64], Tensor[(16, 9, 2), float64], Tensor[(5, 14), float64]) {
  %560 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
  %561 = %560.1;
  %562 = cast(%var_5485, dtype="float64") /* ty=Tensor[(16, 9, 2), float64] */;
  %563 = shape_of(%561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%561, dtype="float64") /* ty=Tensor[(16, 9, 2), float64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %566 = @func_4022() /* ty=(Tensor[(5, 14), float64],) */;
  %567 = @func_2698() /* ty=Tensor[(5, 14), float64] */;
  %568 = floor_mod(%564, %565) /* ty=Tensor[(16, 9, 2), float64] */;
  %569 = %566.0;
  (%567, %568, %569)
}

def @func_3234() -> (Tensor[(5, 14), float64],) {
  %570 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
  %571 = %570.0;
  (%571,)
}

def @func_3774() -> (Tensor[(5, 14), float64],) {
  %572 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %573 = %572.0;
  (%573,)
}

def @func_6184() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52, 1), float32]) {
  %574 = @func_4163() /* ty=(Tensor[(5, 14), float64],) */;
  %575 = cast(meta[relay.Constant][44] /* ty=Tensor[(52, 1), float32] */, dtype="float32") /* ty=Tensor[(52, 1), float32] */;
  %576 = cast(meta[relay.Constant][44] /* ty=Tensor[(52, 1), float32] */, dtype="float32") /* ty=Tensor[(52, 1), float32] */;
  %577 = reshape(%575, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float32] */;
  %578 = reshape(%576, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float32] */;
  %579 = @func_6061(%577, %578) /* ty=(Tensor[(5, 14), float64], Tensor[(2, 2, 13), int16]) */;
  %580 = %574.0;
  %581 = %579.0;
  (%580, %581, meta[relay.Constant][44] /* ty=Tensor[(52, 1), float32] */)
}

def @func_937(%var_900: Tensor[(5, 7, 14), float32], %var_901: Tensor[(5, 7, 14), float32], %var_912: Tensor[(288, 1), int32]) -> (Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) {
  %582 = cast(%var_912, dtype="int32") /* ty=Tensor[(288, 1), int32] */;
  %583 = reshape(%582, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
  %584 = cast(%var_901, dtype="float32") /* ty=Tensor[(5, 7, 14), float32] */;
  %585 = shape_of(%var_900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_900, dtype="float32") /* ty=Tensor[(5, 7, 14), float32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %588 = subtract(%586, %587) /* ty=Tensor[(5, 7, 14), float32] */;
  %589 = cast(%588, dtype="bool") /* ty=Tensor[(5, 7, 14), bool] */;
  %590 = shape_of(%var_901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_901, dtype="bool") /* ty=Tensor[(5, 7, 14), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = @func_272(%583) /* ty=Tensor[(16, 9, 2), bool] */;
  %594 = not_equal(%591, %592) /* ty=Tensor[(5, 7, 14), bool] */;
  (%593, %var_912, %594)
}

def @func_7979(%var_7916: Tensor[(3, 7, 4), uint32], %var_7917: Tensor[(3, 7, 4), uint32], %var_7934: Tensor[(640), int32], %var_7937: Tensor[(36, 24), float32]) -> (Tensor[(3, 7, 4), uint16], Tensor[(2100), float32], Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(36, 24), float32], Tensor[(640), int32], Tensor[(3328), int16], uint8, Tensor[(784), uint8], Tensor[(16, 9, 2), float64]) {
  %595 = cast(%var_7917, dtype="uint32") /* ty=Tensor[(3, 7, 4), uint32] */;
  %596 = shape_of(%var_7916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%var_7916, dtype="uint32") /* ty=Tensor[(3, 7, 4), uint32] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %599 = left_shift(%597, %598) /* ty=Tensor[(3, 7, 4), uint32] */;
  %600 = cast(%599, dtype="uint16") /* ty=Tensor[(3, 7, 4), uint16] */;
  %601 = shape_of(%var_7917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%var_7917, dtype="uint16") /* ty=Tensor[(3, 7, 4), uint16] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %604 = cast(%var_7934, dtype="int32") /* ty=Tensor[(640), int32] */;
  %605 = reshape(%604, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %606 = @func_2890(%605) /* ty=(Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
  %607 = cast(%var_7937, dtype="float32") /* ty=Tensor[(36, 24), float32] */;
  %608 = reshape(%607, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %609 = @func_7285(%608) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(567), bool], Tensor[(5, 14), float64], Tensor[(864), float32]) */;
  %610 = cast(meta[relay.Constant][45] /* ty=Tensor[(3328), int16] */, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %611 = reshape(%610, newshape=[3328]) /* ty=Tensor[(3328), int16] */;
  %612 = @func_4275(%611) /* ty=(Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(2, 104), float64]) */;
  %613 = cast(meta[relay.Constant][46] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %614 = cast(meta[relay.Constant][47] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %615 = reshape(%613, newshape=[]) /* ty=uint8 */;
  %616 = reshape(%614, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), uint8] */;
  %617 = @func_383(%615, %616) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) */;
  %618 = %617.0;
  %619 = cast(%618, dtype="float64") /* ty=Tensor[(16, 9, 2), float64] */;
  %620 = right_shift(%602, %603) /* ty=Tensor[(3, 7, 4), uint16] */;
  %621 = %606.2;
  %622 = %609.7;
  %623 = %612.0;
  %624 = sigmoid(%619) /* ty=Tensor[(16, 9, 2), float64] */;
  (%620, %621, %var_7934, %622, %var_7937, %623, meta[relay.Constant][45] /* ty=Tensor[(3328), int16] */, meta[relay.Constant][46] /* ty=uint8 */, meta[relay.Constant][47] /* ty=Tensor[(784), uint8] */, %624)
}

def @func_6250(%var_6199: Tensor[(11, 13, 4), float32]) -> (Tensor[(5, 14), float64], Tensor[(40, 16), int32], Tensor[(11, 13, 4), uint16], Tensor[(5, 14), float64], Tensor[(11, 13, 4), float64]) {
  %625 = cast(meta[relay.Constant][48] /* ty=Tensor[(40, 16), int32] */, dtype="int32") /* ty=Tensor[(40, 16), int32] */;
  %626 = cast(meta[relay.Constant][48] /* ty=Tensor[(40, 16), int32] */, dtype="int32") /* ty=Tensor[(40, 16), int32] */;
  %627 = cast(meta[relay.Constant][48] /* ty=Tensor[(40, 16), int32] */, dtype="bool") /* ty=Tensor[(40, 16), bool] */;
  %628 = reshape(%625, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %629 = reshape(%626, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %630 = reshape(%627, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), bool] */;
  %631 = @func_4617(%628, %629, %630) /* ty=(Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(4, 10, 16), uint32], Tensor[(5, 14), float64]) */;
  %632 = cast(6.71495f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %633 = cast(%var_6199, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
  %634 = floor_divide(%632, %633) /* ty=Tensor[(11, 13, 4), float32] */;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
  %636 = shape_of(%var_6199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%var_6199, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %639 = floor_mod(%637, %638) /* ty=Tensor[(11, 13, 4), float32] */;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %641 = atan(%640) /* ty=Tensor[(11, 13, 4), float64] */;
  %642 = cast(%641, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %643 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%639, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %646 = mod(%644, %645) /* ty=Tensor[(11, 13, 4), float64] */;
  %647 = cast(%639, dtype="uint16") /* ty=Tensor[(11, 13, 4), uint16] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="uint16") /* ty=Tensor[(11, 13, 4), uint16] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %651 = @func_3325() /* ty=(Tensor[(5, 14), float64],) */;
  %652 = cast(%646, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %653 = %631.0;
  %654 = bitwise_and(%649, %650) /* ty=Tensor[(11, 13, 4), uint16] */;
  %655 = %651.0;
  %656 = atanh(%652) /* ty=Tensor[(11, 13, 4), float64] */;
  (%653, meta[relay.Constant][48] /* ty=Tensor[(40, 16), int32] */, %654, %655, %656)
}

def @func_2567() -> Tensor[(5, 14), float64] {
  @func_2345() /* ty=Tensor[(5, 14), float64] */
}

def @func_9027() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %657 = @func_4022() /* ty=(Tensor[(5, 14), float64],) */;
  %658 = %657.0;
  %659 = @func_6270() /* ty=Tensor[(5, 14), float64] */;
  (%658, %659)
}

def @func_3602(%var_3553: Tensor[(210), float64]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %660 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %661 = @func_3539() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %662 = cast(%var_3553, dtype="float64") /* ty=Tensor[(210), float64] */;
  %663 = reshape(%662, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
  %664 = @func_1233(%663) /* ty=(Tensor[(1, 15, 14), float64],) */;
  %665 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %666 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %667 = %660.0;
  %668 = %661.1;
  %669 = %664.0;
  %670 = @func_2908() /* ty=Tensor[(5, 14), float64] */;
  %671 = %665.0;
  %672 = %666.0;
  %673 = @func_3295() /* ty=Tensor[(5, 14), float64] */;
  (%667, %668, %669, %var_3553, %670, %671, %672, %673)
}

def @func_5000() -> Tensor[(5, 14), float64] {
  @func_4373() /* ty=Tensor[(5, 14), float64] */
}

def @func_6100() -> (Tensor[(5, 14), float64],) {
  %674 = @func_3539() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %675 = %674.1;
  (%675,)
}

def @func_8711(%var_8673: Tensor[(20, 32), int32], %var_8707: Tensor[(288), int32]) -> (Tensor[(20, 32), int16], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64], Tensor[(20, 32), float64], Tensor[(288), int32], Tensor[(288), int32]) {
  %676 = @func_7654() /* ty=(Tensor[(5, 14), float64], Tensor[(20, 32), int32]) */;
  %677 = %676.1;
  %678 = cast(%var_8673, dtype="int16") /* ty=Tensor[(20, 32), int16] */;
  %679 = shape_of(%677, dtype="int32") /* ty=Tensor[(2), int32] */;
  %680 = cast(%677, dtype="int16") /* ty=Tensor[(20, 32), int16] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %682 = cast(meta[relay.Constant][49] /* ty=Tensor[(750), int16] */, dtype="int16") /* ty=Tensor[(750), int16] */;
  %683 = reshape(%682, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
  %684 = @func_1832(%683) /* ty=(Tensor[(5, 10, 15), int16],) */;
  %685 = @func_7302() /* ty=(Tensor[(5, 14), float64],) */;
  %686 = cast(%677, dtype="uint64") /* ty=Tensor[(20, 32), uint64] */;
  %687 = shape_of(%var_8673, dtype="int32") /* ty=Tensor[(2), int32] */;
  %688 = cast(%var_8673, dtype="uint64") /* ty=Tensor[(20, 32), uint64] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %690 = right_shift(%688, %689) /* ty=Tensor[(20, 32), uint64] */;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(20, 32), float64] */;
  %692 = shape_of(%var_8673, dtype="int32") /* ty=Tensor[(2), int32] */;
  %693 = cast(%var_8673, dtype="float64") /* ty=Tensor[(20, 32), float64] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %695 = cast(%var_8707, dtype="int32") /* ty=Tensor[(288), int32] */;
  %696 = reshape(%695, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %697 = @func_3272(%696) /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */;
  %698 = logical_xor(%680, %681) /* ty=Tensor[(20, 32), int16] */;
  %699 = %684.0;
  %700 = %685.0;
  %701 = power(%693, %694) /* ty=Tensor[(20, 32), float64] */;
  %702 = %697.2;
  (%698, %699, meta[relay.Constant][49] /* ty=Tensor[(750), int16] */, %700, %701, %702, %var_8707)
}

def @func_3194(%var_3172: Tensor[(640), int32]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) {
  %703 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %704 = cast(%var_3172, dtype="int32") /* ty=Tensor[(640), int32] */;
  %705 = reshape(%704, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %706 = @func_2890(%705) /* ty=(Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
  %707 = cast(meta[relay.Constant][50] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %708 = reshape(%707, newshape=[12, 5, 10]) /* ty=Tensor[(12, 5, 10), float32] */;
  %709 = @func_1400(%708) /* ty=(Tensor[(12, 5, 10), float32],) */;
  %710 = %703.0;
  %711 = @func_2932() /* ty=Tensor[(5, 14), float64] */;
  %712 = %706.0;
  %713 = %709.0;
  (%710, %711, %712, %var_3172, %713, meta[relay.Constant][50] /* ty=Tensor[(600), float32] */)
}

def @func_3506() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %714 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
  %715 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %716 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %717 = %714.0;
  %718 = %715.1;
  %719 = %716.1;
  (%717, %718, %719)
}

def @func_6698() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %720 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
  %721 = @func_2908() /* ty=Tensor[(5, 14), float64] */;
  %722 = %720.0;
  (%721, %722)
}

def @func_4528() -> Tensor[(5, 14), float64] {
  %723 = @func_3774() /* ty=(Tensor[(5, 14), float64],) */;
  %723.0
}

def @func_2184(%var_2167: Tensor[(16, 5, 14), uint32], %var_2178: Tensor[(640), int32]) -> (Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) {
  %724 = cast(meta[relay.Constant][51] /* ty=Tensor[(16, 5, 14), uint32] */, dtype="uint32") /* ty=Tensor[(16, 5, 14), uint32] */;
  %725 = shape_of(%var_2167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%var_2167, dtype="uint32") /* ty=Tensor[(16, 5, 14), uint32] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %728 = cast(%var_2178, dtype="int32") /* ty=Tensor[(640), int32] */;
  %729 = cast(%var_2178, dtype="int32") /* ty=Tensor[(640), int32] */;
  %730 = reshape(%728, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %731 = reshape(%729, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %732 = bitwise_xor(%726, %727) /* ty=Tensor[(16, 5, 14), uint32] */;
  %733 = @func_1525(%730, %731) /* ty=Tensor[(4, 10, 16), bool] */;
  (%732, %733, %var_2178)
}

def @func_3022() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %734 = @func_2908() /* ty=Tensor[(5, 14), float64] */;
  %735 = @func_2698() /* ty=Tensor[(5, 14), float64] */;
  (%734, %735)
}

def @func_9512(%var_9501: Tensor[(864), float32]) -> (Tensor[(5, 14), float64], Tensor[(11, 3, 14), float32], Tensor[(864), uint64]) {
  %736 = cast(meta[relay.Constant][52] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %737 = reshape(%736, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %738 = @func_7285(%737) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(567), bool], Tensor[(5, 14), float64], Tensor[(864), float32]) */;
  %739 = %738.2;
  %740 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 3, 14), bool] */, dtype="float32") /* ty=Tensor[(11, 3, 14), float32] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%739, dtype="float32") /* ty=Tensor[(11, 3, 14), float32] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %744 = cast(%var_9501, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %745 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(864), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %746 = cast(meta[relay.Constant][52] /* ty=Tensor[(864), float32] */, dtype="uint64") /* ty=Tensor[(864), uint64] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %748 = @func_6270() /* ty=Tensor[(5, 14), float64] */;
  %749 = divide(%742, %743) /* ty=Tensor[(11, 3, 14), float32] */;
  %750 = subtract(%746, %747) /* ty=Tensor[(864), uint64] */;
  (%748, %749, %750)
}

def @func_8138() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %751 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
  %752 = @func_7380() /* ty=(Tensor[(5, 14), float64],) */;
  %753 = %751.0;
  %754 = %752.0;
  (%753, %754)
}

def @func_1832(%var_1822: Tensor[(5, 10, 15), int16]) -> (Tensor[(5, 10, 15), int16],) {
  %755 = cast(%var_1822, dtype="int16") /* ty=Tensor[(5, 10, 15), int16] */;
  %756 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(5, 10, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(meta[relay.Constant][54] /* ty=Tensor[(5, 10, 15), int16] */, dtype="int16") /* ty=Tensor[(5, 10, 15), int16] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %759 = left_shift(%757, %758) /* ty=Tensor[(5, 10, 15), int16] */;
  (%759,)
}

def @func_3043() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %760 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  %761 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  (%760, %761)
}

def @func_6482(%var_6449: Tensor[(14, 11, 2), float64], %var_6450: Tensor[(14, 11, 2), float64]) -> (Tensor[(14, 11, 2), float64], Tensor[(14, 11, 2), float64], Tensor[(3, 36), float64], Tensor[(288), int32], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(4, 280), uint32], Tensor[(80, 8), int32]) {
  %762 = cast(%var_6450, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
  %763 = shape_of(%var_6449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%var_6449, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %766 = cast(%var_6449, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
  %767 = shape_of(%var_6450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%var_6450, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %770 = cast(meta[relay.Constant][55] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %771 = reshape(%770, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %772 = @func_4356(%771) /* ty=(Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(3, 36), float64], Tensor[(462), uint16], Tensor[(288), int32], Tensor[(288), int32]) */;
  %773 = @func_4869() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %774 = cast(meta[relay.Constant][56] /* ty=Tensor[(4, 280), uint32] */, dtype="uint32") /* ty=Tensor[(4, 280), uint32] */;
  %775 = cast(meta[relay.Constant][57] /* ty=Tensor[(80, 8), int32] */, dtype="int32") /* ty=Tensor[(80, 8), int32] */;
  %776 = reshape(%774, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), uint32] */;
  %777 = reshape(%775, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %778 = @func_2184(%776, %777) /* ty=(Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
  %779 = maximum(%764, %765) /* ty=Tensor[(14, 11, 2), float64] */;
  %780 = mod(%768, %769) /* ty=Tensor[(14, 11, 2), float64] */;
  %781 = %772.2;
  %782 = %773.0;
  %783 = %778.2;
  (%779, %780, %781, meta[relay.Constant][55] /* ty=Tensor[(288), int32] */, %782, %783, meta[relay.Constant][56] /* ty=Tensor[(4, 280), uint32] */, meta[relay.Constant][57] /* ty=Tensor[(80, 8), int32] */)
}

def @func_5618() -> (Tensor[(5, 14), float64],) {
  %784 = @func_5415() /* ty=(Tensor[(5, 14), float64],) */;
  %785 = %784.0;
  (%785,)
}

def @func_3753(%var_3718: Tensor[(55), float32], %var_3719: Tensor[(210), float64], %var_3749: Tensor[(288), int32]) -> (Tensor[(640), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(490), float32], Tensor[(288), int32]) {
  %786 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
  %787 = %786.2;
  %788 = cast(%787, dtype="float64") /* ty=Tensor[(640), float64] */;
  %789 = cast(%var_3718, dtype="float32") /* ty=Tensor[(55), float32] */;
  %790 = cast(%var_3719, dtype="float64") /* ty=Tensor[(210), float64] */;
  %791 = reshape(%789, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), float32] */;
  %792 = reshape(%790, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %793 = @func_1498(%791, %792) /* ty=(Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) */;
  %794 = @func_2988() /* ty=(Tensor[(5, 14), float64],) */;
  %795 = @func_2988() /* ty=(Tensor[(5, 14), float64],) */;
  %796 = cast(meta[relay.Constant][58] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %797 = cast(meta[relay.Constant][58] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %798 = cast(%var_3749, dtype="int32") /* ty=Tensor[(288), int32] */;
  %799 = reshape(%796, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
  %800 = reshape(%797, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
  %801 = reshape(%798, newshape=[288, 1]) /* ty=Tensor[(288, 1), int32] */;
  %802 = @func_937(%799, %800, %801) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) */;
  %803 = sinh(%788) /* ty=Tensor[(640), float64] */;
  %804 = %793.2;
  %805 = %794.0;
  %806 = %795.0;
  %807 = %802.0;
  (%803, %804, %var_3718, %var_3719, %805, %806, %807, meta[relay.Constant][58] /* ty=Tensor[(490), float32] */, %var_3749)
}

def @func_4163() -> (Tensor[(5, 14), float64],) {
  %808 = @func_4035() /* ty=Tensor[(5, 14), float64] */;
  (%808,)
}

def @func_4798() -> (Tensor[(5, 14), float64],) {
  %809 = @func_4528() /* ty=Tensor[(5, 14), float64] */;
  (%809,)
}

def @func_272(%var_266: Tensor[(16, 9, 2), int32]) -> Tensor[(16, 9, 2), bool] {
  %810 = cast(%var_266, dtype="bool") /* ty=Tensor[(16, 9, 2), bool] */;
  %811 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(16, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(meta[relay.Constant][59] /* ty=Tensor[(16, 9, 2), int32] */, dtype="bool") /* ty=Tensor[(16, 9, 2), bool] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%812, %813) /* ty=Tensor[(16, 9, 2), bool] */
}

def @func_6014() -> (Tensor[(5, 14), float64],) {
  %814 = @func_5000() /* ty=Tensor[(5, 14), float64] */;
  (%814,)
}

def @func_4356(%var_4341: Tensor[(288), int32]) -> (Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(3, 36), float64], Tensor[(462), uint16], Tensor[(288), int32], Tensor[(288), int32]) {
  %815 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
  %816 = cast(meta[relay.Constant][60] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %817 = cast(meta[relay.Constant][61] /* ty=Tensor[(462), uint16] */, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %818 = reshape(%816, newshape=[6, 9, 2]) /* ty=Tensor[(6, 9, 2), float64] */;
  %819 = reshape(%817, newshape=[462]) /* ty=Tensor[(462), uint16] */;
  %820 = @func_1200(%818, %819) /* ty=(Tensor[(6, 9, 2), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) */;
  %821 = cast(%var_4341, dtype="int32") /* ty=Tensor[(288), int32] */;
  %822 = reshape(%821, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %823 = @func_3272(%822) /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */;
  %824 = %815.0;
  %825 = %820.2;
  %826 = %823.2;
  (%824, %825, meta[relay.Constant][60] /* ty=Tensor[(3, 36), float64] */, meta[relay.Constant][61] /* ty=Tensor[(462), uint16] */, %826, %var_4341)
}

def @func_383(%var_357: uint8, %var_358: Tensor[(8, 14, 7), uint8]) -> (Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) {
  %827 = cast(meta[relay.Constant][62] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %828 = reshape(%827, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
  %829 = cast(%var_357, dtype="bool") /* ty=bool */;
  %830 = cast(%var_358, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
  %831 = equal(%829, %830) /* ty=Tensor[(8, 14, 7), bool] */;
  %832 = cast(%831, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
  %833 = @func_272(%828) /* ty=Tensor[(16, 9, 2), bool] */;
  %834 = sqrt(%832) /* ty=Tensor[(8, 14, 7), float32] */;
  (%833, meta[relay.Constant][62] /* ty=Tensor[(288), int32] */, %834)
}

def @func_2536(%var_2468: Tensor[(490), float32]) -> (Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(5, 14), float64], Tensor[(490), float32], Tensor[(5, 7, 14), bool]) {
  %835 = cast(%var_2468, dtype="float32") /* ty=Tensor[(490), float32] */;
  %836 = cast(%var_2468, dtype="float32") /* ty=Tensor[(490), float32] */;
  %837 = cast(meta[relay.Constant][63] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %838 = reshape(%835, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
  %839 = reshape(%836, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
  %840 = reshape(%837, newshape=[288, 1]) /* ty=Tensor[(288, 1), int32] */;
  %841 = @func_937(%838, %839, %840) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) */;
  %842 = %841.1;
  %843 = cast(meta[relay.Constant][63] /* ty=Tensor[(288), int32] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %844 = shape_of(%842, dtype="int32") /* ty=Tensor[(2), int32] */;
  %845 = cast(%842, dtype="bool") /* ty=Tensor[(288, 1), bool] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %847 = cast(%var_2468, dtype="float32") /* ty=Tensor[(490), float32] */;
  %848 = cast(%var_2468, dtype="float32") /* ty=Tensor[(490), float32] */;
  %849 = acos(%847) /* ty=Tensor[(490), float32] */;
  %850 = cast(%849, dtype="float32") /* ty=Tensor[(490), float32] */;
  %851 = cast(meta[relay.Constant][63] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %852 = reshape(%848, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
  %853 = reshape(%850, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
  %854 = reshape(%851, newshape=[288, 1]) /* ty=Tensor[(288, 1), int32] */;
  %855 = @func_937(%852, %853, %854) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) */;
  %856 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  %857 = not_equal(%845, %846) /* ty=Tensor[(288, ?), bool] */;
  %858 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  %859 = %855.2;
  (%856, %857, %858, %849, %859)
}

def @func_8647(%var_8641: Tensor[(8, 2, 9), float32]) -> (Tensor[(8, 2, 9), bool],) {
  %860 = @func_5809() /* ty=Tensor[(8, 2, 9), float32] */;
  %861 = cast(%var_8641, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %863 = cast(%860, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %865 = not_equal(%863, %864) /* ty=Tensor[(8, 2, 9), bool] */;
  (%865,)
}

def @func_5238() -> Tensor[(8, 2, 9), float32] {
  %866 = cast(meta[relay.Constant][64] /* ty=Tensor[(8, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  cosh(%866) /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_8341() -> Tensor[(5, 14), float64] {
  @func_2908() /* ty=Tensor[(5, 14), float64] */
}

def @func_6061(%var_6038: Tensor[(2, 2, 13), float32], %var_6054: Tensor[(2, 2, 13), float32]) -> (Tensor[(5, 14), float64], Tensor[(2, 2, 13), int16]) {
  %867 = @func_6014() /* ty=(Tensor[(5, 14), float64],) */;
  %868 = cast(%var_6038, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
  %869 = atanh(%868) /* ty=Tensor[(2, 2, 13), float32] */;
  %870 = cast(%var_6054, dtype="int16") /* ty=Tensor[(2, 2, 13), int16] */;
  %871 = shape_of(%869, dtype="int32") /* ty=Tensor[(3), int32] */;
  %872 = cast(%869, dtype="int16") /* ty=Tensor[(2, 2, 13), int16] */;
  %873 = dyn.reshape(%870, %871, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %874 = %867.0;
  %875 = bitwise_or(%872, %873) /* ty=Tensor[(2, 2, 13), int16] */;
  (%874, %875)
}

def @func_3472() -> (Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) {
  %876 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
  %877 = cast(meta[relay.Constant][65] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
  %878 = reshape(%877, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %879 = @func_2890(%878) /* ty=(Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
  %880 = %876.0;
  %881 = %879.3;
  (%880, %881, meta[relay.Constant][65] /* ty=Tensor[(640), int32] */)
}

def @func_9286() -> (Tensor[(5, 14), float64],) {
  %882 = @func_3295() /* ty=Tensor[(5, 14), float64] */;
  (%882,)
}

def @func_3295() -> Tensor[(5, 14), float64] {
  %883 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
  %883.0
}

def @func_8211() -> Tensor[(5, 14), float64] {
  %884 = @func_6072() /* ty=(Tensor[(5, 14), float64],) */;
  %884.0
}

def @func_9225() -> (Tensor[(5, 14), float64],) {
  %885 = @func_3022() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %886 = %885.0;
  (%886,)
}

def @func_6436(%var_6433: Tensor[(750), int16]) -> (Tensor[(5, 14), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16]) {
  %887 = cast(%var_6433, dtype="int16") /* ty=Tensor[(750), int16] */;
  %888 = reshape(%887, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
  %889 = @func_1832(%888) /* ty=(Tensor[(5, 10, 15), int16],) */;
  %890 = @func_2932() /* ty=Tensor[(5, 14), float64] */;
  %891 = %889.0;
  (%890, %891, %var_6433)
}

def @func_1525(%var_1512: Tensor[(4, 10, 16), int32], %var_1513: Tensor[(4, 10, 16), int32]) -> Tensor[(4, 10, 16), bool] {
  %892 = cast(%var_1513, dtype="bool") /* ty=Tensor[(4, 10, 16), bool] */;
  %893 = shape_of(%var_1512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%var_1512, dtype="bool") /* ty=Tensor[(4, 10, 16), bool] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%894, %895) /* ty=Tensor[(4, 10, 16), bool] */
}

def @func_2890(%var_2875: Tensor[(640), int32]) -> (Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) {
  %896 = cast(meta[relay.Constant][66] /* ty=Tensor[(2100), int64] */, dtype="int64") /* ty=Tensor[(2100), int64] */;
  %897 = reshape(%896, newshape=[15, 14, 10]) /* ty=Tensor[(15, 14, 10), int64] */;
  %898 = @func_1708(%897) /* ty=(Tensor[(15, 14, 10), int64],) */;
  %899 = cast(meta[relay.Constant][66] /* ty=Tensor[(2100), int64] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %900 = cast(meta[relay.Constant][67] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %901 = reshape(%900, newshape=[9, 8, 12]) /* ty=Tensor[(9, 8, 12), float32] */;
  %902 = @func_2049(%901) /* ty=(Tensor[(9, 8, 12), float32], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */;
  %903 = cast(%var_2875, dtype="int32") /* ty=Tensor[(640), int32] */;
  %904 = cast(%var_2875, dtype="int32") /* ty=Tensor[(640), int32] */;
  %905 = reshape(%903, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %906 = reshape(%904, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %907 = @func_2567() /* ty=Tensor[(5, 14), float64] */;
  %908 = %898.0;
  %909 = tan(%899) /* ty=Tensor[(2100), float32] */;
  %910 = %902.1;
  %911 = @func_1525(%905, %906) /* ty=Tensor[(4, 10, 16), bool] */;
  (%907, %908, %909, %910, meta[relay.Constant][67] /* ty=Tensor[(864), float32] */, %911, %var_2875)
}

def @func_9200() -> (Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %912 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
  %913 = @func_7795() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %914 = @func_6698() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %915 = @func_6100() /* ty=(Tensor[(5, 14), float64],) */;
  %916 = %912.2;
  %917 = %913.1;
  %918 = %914.0;
  %919 = %915.0;
  (%916, %917, %918, %919)
}

def @func_9418(%var_9406: Tensor[(2, 2, 15), float64]) -> (Tensor[(2, 2, 15), float64],) {
  %920 = cast(meta[relay.Constant][68] /* ty=Tensor[(1, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 1, 15), float64] */;
  %921 = cast(%var_9406, dtype="float64") /* ty=Tensor[(2, 2, 15), float64] */;
  %922 = floor_mod(%920, %921) /* ty=Tensor[(2, 2, 15), float64] */;
  (%922,)
}

def @func_7549(%var_7502: Tensor[(784, 1), uint8]) -> (Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], Tensor[(784, 1), float32], Tensor[(8, 2, 9), float32], Tensor[(5, 14), float64], Tensor[(784, 1), float64]) {
  %923 = @func_6014() /* ty=(Tensor[(5, 14), float64],) */;
  %924 = cast(meta[relay.Constant][69] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %925 = cast(%var_7502, dtype="uint8") /* ty=Tensor[(784, 1), uint8] */;
  %926 = reshape(%924, newshape=[]) /* ty=uint8 */;
  %927 = reshape(%925, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), uint8] */;
  %928 = @func_383(%926, %927) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) */;
  %929 = cast(%var_7502, dtype="float32") /* ty=Tensor[(784, 1), float32] */;
  %930 = cast(meta[relay.Constant][69] /* ty=uint8 */, dtype="float32") /* ty=float32 */;
  %931 = cast(%var_7502, dtype="float64") /* ty=Tensor[(784, 1), float64] */;
  %932 = %923.0;
  %933 = %928.2;
  %934 = floor_divide(%929, %930) /* ty=Tensor[(784, 1), float32] */;
  %935 = @func_5238() /* ty=Tensor[(8, 2, 9), float32] */;
  %936 = @func_4035() /* ty=Tensor[(5, 14), float64] */;
  %937 = exp(%931) /* ty=Tensor[(784, 1), float64] */;
  (%932, %933, %934, %935, %936, %937)
}

def @func_7853() -> (Tensor[(5, 14), float64],) {
  %938 = @func_5389() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %939 = %938.0;
  (%939,)
}

def @func_5952(%var_5942: Tensor[(8, 2, 9), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(5, 14), float64]) {
  %940 = @func_5238() /* ty=Tensor[(8, 2, 9), float32] */;
  %941 = cast(%var_5942, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
  %942 = shape_of(%940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%940, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %945 = @func_5771() /* ty=(Tensor[(5, 14), float64],) */;
  %946 = divide(%943, %944) /* ty=Tensor[(8, 2, 9), float64] */;
  %947 = %945.0;
  (%946, %947)
}

def @func_6364() -> Tensor[(13, 15, 2), float64] {
  %948 = cast(meta[relay.Constant][70] /* ty=Tensor[(13, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  sigmoid(%948) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_7600() -> (Tensor[(5, 14), float64],) {
  %949 = @func_4528() /* ty=Tensor[(5, 14), float64] */;
  (%949,)
}

def @func_2693() -> Tensor[(5, 14), float64] {
  @func_2345() /* ty=Tensor[(5, 14), float64] */
}

def @func_5699(%var_5688: Tensor[(5, 16, 6), int8], %var_5689: Tensor[(5, 16, 6), int8]) -> (Tensor[(5, 16, 6), uint16],) {
  %950 = cast(%var_5689, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %951 = shape_of(%var_5688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %952 = cast(%var_5688, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %953 = dyn.reshape(%950, %951, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %954 = greater(%952, %953) /* ty=Tensor[(5, 16, 6), bool] */;
  %955 = cast(%954, dtype="uint16") /* ty=Tensor[(5, 16, 6), uint16] */;
  %956 = shape_of(%var_5689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%var_5689, dtype="uint16") /* ty=Tensor[(5, 16, 6), uint16] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %959 = maximum(%957, %958) /* ty=Tensor[(5, 16, 6), uint16] */;
  (%959,)
}

def @func_8532() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52), float32]) {
  %960 = @func_8138() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %961 = @func_7074() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(14, 3, 6), int16], Tensor[(252), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), float32]) */;
  %962 = cast(meta[relay.Constant][71] /* ty=Tensor[(52), float32] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %963 = cast(meta[relay.Constant][71] /* ty=Tensor[(52), float32] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %964 = reshape(%962, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float32] */;
  %965 = reshape(%963, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float32] */;
  %966 = @func_6061(%964, %965) /* ty=(Tensor[(5, 14), float64], Tensor[(2, 2, 13), int16]) */;
  %967 = %960.1;
  %968 = %961.3;
  %969 = %966.0;
  (%967, %968, %969, meta[relay.Constant][71] /* ty=Tensor[(52), float32] */)
}

def @func_6502() -> (Tensor[(5, 14), float64],) {
  %970 = @func_6100() /* ty=(Tensor[(5, 14), float64],) */;
  %971 = %970.0;
  (%971,)
}

def @func_7654() -> (Tensor[(5, 14), float64], Tensor[(20, 32), int32]) {
  %972 = @func_7321() /* ty=(Tensor[(5, 14), float64],) */;
  %973 = @func_3982() /* ty=(Tensor[(5, 14), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(20, 32), int32]) */;
  %974 = %972.0;
  %975 = %973.3;
  (%974, %975)
}

def @func_3932() -> Tensor[(5, 14), float64] {
  %976 = @func_3022() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %976.1
}

def @func_6270() -> Tensor[(5, 14), float64] {
  @func_2693() /* ty=Tensor[(5, 14), float64] */
}

def @func_4022() -> (Tensor[(5, 14), float64],) {
  %977 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %978 = %977.0;
  (%978,)
}

def @func_9593() -> (Tensor[(5, 14), float64], uint8, Tensor[(5, 14), float64], Tensor[(52), float64]) {
  %979 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %980 = @func_4715() /* ty=(Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], uint8, Tensor[(784), uint8]) */;
  %981 = @func_8561() /* ty=(Tensor[(52), float64],) */;
  %982 = %979.0;
  %983 = %980.2;
  %984 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
  %985 = %981.0;
  (%982, %983, %984, %985)
}

def @func_8092() -> Tensor[(5, 14), float64] {
  %986 = @func_7795() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %986.1
}

def @func_2972() -> (Tensor[(5, 14), float64],) {
  %987 = @func_2908() /* ty=Tensor[(5, 14), float64] */;
  (%987,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1204(%var_1202: Tensor[(6, 9, 2), float64], %var_1203: Tensor[(462), uint16]) -> (Tensor[(6, 9, 2), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) {
  @func_1200(%var_1202, %var_1203) /* ty=(Tensor[(6, 9, 2), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) */
}

def @func_9027() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %0 = @func_4022() /* ty=(Tensor[(5, 14), float64],) */;
  %1 = %0.0;
  %2 = @func_6270() /* ty=Tensor[(5, 14), float64] */;
  (%1, %2)
}

def @func_8711(%var_8673: Tensor[(20, 32), int32], %var_8707: Tensor[(288), int32]) -> (Tensor[(20, 32), int16], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64], Tensor[(20, 32), float64], Tensor[(288), int32], Tensor[(288), int32]) {
  %3 = @func_7654() /* ty=(Tensor[(5, 14), float64], Tensor[(20, 32), int32]) */;
  %4 = %3.1;
  %5 = cast(%var_8673, dtype="int16") /* ty=Tensor[(20, 32), int16] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(2), int32] */;
  %7 = cast(%4, dtype="int16") /* ty=Tensor[(20, 32), int16] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(750), int16] */, dtype="int16") /* ty=Tensor[(750), int16] */;
  %10 = reshape(%9, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
  %11 = @func_1832(%10) /* ty=(Tensor[(5, 10, 15), int16],) */;
  %12 = @func_7302() /* ty=(Tensor[(5, 14), float64],) */;
  %13 = cast(%4, dtype="uint64") /* ty=Tensor[(20, 32), uint64] */;
  %14 = shape_of(%var_8673, dtype="int32") /* ty=Tensor[(2), int32] */;
  %15 = cast(%var_8673, dtype="uint64") /* ty=Tensor[(20, 32), uint64] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %17 = right_shift(%15, %16) /* ty=Tensor[(20, 32), uint64] */;
  %18 = cast(%17, dtype="float64") /* ty=Tensor[(20, 32), float64] */;
  %19 = shape_of(%var_8673, dtype="int32") /* ty=Tensor[(2), int32] */;
  %20 = cast(%var_8673, dtype="float64") /* ty=Tensor[(20, 32), float64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %22 = cast(%var_8707, dtype="int32") /* ty=Tensor[(288), int32] */;
  %23 = reshape(%22, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %24 = @func_3272(%23) /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */;
  %25 = logical_xor(%7, %8) /* ty=Tensor[(20, 32), int16] */;
  %26 = %11.0;
  %27 = %12.0;
  %28 = power(%20, %21) /* ty=Tensor[(20, 32), float64] */;
  %29 = %24.2;
  (%25, %26, meta[relay.Constant][0] /* ty=Tensor[(750), int16] */, %27, %28, %29, %var_8707)
}

def @func_9418(%var_9406: Tensor[(2, 2, 15), float64]) -> (Tensor[(2, 2, 15), float64],) {
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 1, 15), float64] */, dtype="float64") /* ty=Tensor[(1, 1, 15), float64] */;
  %31 = cast(%var_9406, dtype="float64") /* ty=Tensor[(2, 2, 15), float64] */;
  %32 = floor_mod(%30, %31) /* ty=Tensor[(2, 2, 15), float64] */;
  (%32,)
}

def @func_2184(%var_2167: Tensor[(16, 5, 14), uint32], %var_2178: Tensor[(640), int32]) -> (Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) {
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 5, 14), uint32] */, dtype="uint32") /* ty=Tensor[(16, 5, 14), uint32] */;
  %34 = shape_of(%var_2167, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%var_2167, dtype="uint32") /* ty=Tensor[(16, 5, 14), uint32] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %37 = cast(%var_2178, dtype="int32") /* ty=Tensor[(640), int32] */;
  %38 = cast(%var_2178, dtype="int32") /* ty=Tensor[(640), int32] */;
  %39 = reshape(%37, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %40 = reshape(%38, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %41 = bitwise_xor(%35, %36) /* ty=Tensor[(16, 5, 14), uint32] */;
  %42 = @func_1525(%39, %40) /* ty=Tensor[(4, 10, 16), bool] */;
  (%41, %42, %var_2178)
}

def @func_4493(%var_4492: Tensor[(462), uint16]) -> (Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) {
  %52 = fn (%var_4489: Tensor[(462), uint16]) -> (Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) {
    %43 = cast(%var_4489, dtype="uint16") /* ty=Tensor[(462), uint16] */;
    %44 = cast(%var_4489, dtype="uint16") /* ty=Tensor[(462), uint16] */;
    %45 = cast(%var_4489, dtype="bool") /* ty=Tensor[(462), bool] */;
    %46 = reshape(%43, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
    %47 = reshape(%44, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
    %48 = reshape(%45, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), bool] */;
    %49 = @func_712(%46, %47, %48) /* ty=(Tensor[(11, 3, 14), bool],) */;
    %50 = @func_3382() /* ty=Tensor[(5, 14), float64] */;
    %51 = %49.0;
    (%50, %51, %var_4489)
  };
  %52(%var_4492) /* ty=(Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) */
}

def @func_7186() -> (Tensor[(5, 14), float64],) {
  @func_7184() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_4943() -> (Tensor[(5, 14), float64],) {
  %55 = fn () -> (Tensor[(5, 14), float64],) {
    %53 = @func_3774() /* ty=(Tensor[(5, 14), float64],) */;
    %54 = %53.0;
    (%54,)
  };
  %55() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_6271() -> Tensor[(5, 14), float64] {
  %56 = fn () -> Tensor[(5, 14), float64] {
    @func_2693() /* ty=Tensor[(5, 14), float64] */
  };
  %56() /* ty=Tensor[(5, 14), float64] */
}

def @func_9071() -> Tensor[(5, 14), float64] {
  %57 = @func_3022() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %57.0
}

def @func_6064(%var_6062: Tensor[(2, 2, 13), float32], %var_6063: Tensor[(2, 2, 13), float32]) -> (Tensor[(5, 14), float64], Tensor[(2, 2, 13), int16]) {
  %67 = fn (%var_6038: Tensor[(2, 2, 13), float32], %var_6054: Tensor[(2, 2, 13), float32]) -> (Tensor[(5, 14), float64], Tensor[(2, 2, 13), int16]) {
    %58 = @func_6014() /* ty=(Tensor[(5, 14), float64],) */;
    %59 = cast(%var_6038, dtype="float32") /* ty=Tensor[(2, 2, 13), float32] */;
    %60 = atanh(%59) /* ty=Tensor[(2, 2, 13), float32] */;
    %61 = cast(%var_6054, dtype="int16") /* ty=Tensor[(2, 2, 13), int16] */;
    %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
    %63 = cast(%60, dtype="int16") /* ty=Tensor[(2, 2, 13), int16] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %65 = %58.0;
    %66 = bitwise_or(%63, %64) /* ty=Tensor[(2, 2, 13), int16] */;
    (%65, %66)
  };
  %67(%var_6062, %var_6063) /* ty=(Tensor[(5, 14), float64], Tensor[(2, 2, 13), int16]) */
}

def @func_386(%var_384: uint8, %var_385: Tensor[(8, 14, 7), uint8]) -> (Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) {
  %76 = fn (%var_357: uint8, %var_358: Tensor[(8, 14, 7), uint8]) -> (Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) {
    %68 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %69 = reshape(%68, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
    %70 = cast(%var_357, dtype="bool") /* ty=bool */;
    %71 = cast(%var_358, dtype="bool") /* ty=Tensor[(8, 14, 7), bool] */;
    %72 = equal(%70, %71) /* ty=Tensor[(8, 14, 7), bool] */;
    %73 = cast(%72, dtype="float32") /* ty=Tensor[(8, 14, 7), float32] */;
    %74 = @func_272(%69) /* ty=Tensor[(16, 9, 2), bool] */;
    %75 = sqrt(%73) /* ty=Tensor[(8, 14, 7), float32] */;
    (%74, meta[relay.Constant][3] /* ty=Tensor[(288), int32] */, %75)
  };
  %76(%var_384, %var_385) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) */
}

def @func_4024() -> (Tensor[(5, 14), float64],) {
  @func_4022() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_8093() -> Tensor[(5, 14), float64] {
  %78 = fn () -> Tensor[(5, 14), float64] {
    %77 = @func_7795() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %77.1
  };
  %78() /* ty=Tensor[(5, 14), float64] */
}

def @func_9286() -> (Tensor[(5, 14), float64],) {
  %79 = @func_3295() /* ty=Tensor[(5, 14), float64] */;
  (%79,)
}

def @func_9115(%var_9103: Tensor[(11, 6, 16), uint64], %var_9104: Tensor[(11, 6, 16), uint64]) -> (Tensor[(11, 6, 16), uint64], Tensor[(5, 14), float64]) {
  %80 = cast(%var_9104, dtype="uint64") /* ty=Tensor[(11, 6, 16), uint64] */;
  %81 = shape_of(%var_9103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%var_9103, dtype="uint64") /* ty=Tensor[(11, 6, 16), uint64] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %84 = logical_xor(%82, %83) /* ty=Tensor[(11, 6, 16), uint64] */;
  %85 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
  (%84, %85)
}

def @func_1501(%var_1499: Tensor[(1, 11, 5), float32], %var_1500: Tensor[(210), float64]) -> (Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) {
  %107 = fn (%var_1472: Tensor[(1, 11, 5), float32], %var_1494: Tensor[(210), float64]) -> (Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) {
    %86 = cast(%var_1472, dtype="float32") /* ty=Tensor[(1, 11, 5), float32] */;
    %87 = sqrt(%86) /* ty=Tensor[(1, 11, 5), float32] */;
    %88 = cast(%87, dtype="float32") /* ty=Tensor[(1, 11, 5), float32] */;
    %89 = shape_of(%var_1472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %90 = cast(%var_1472, dtype="float32") /* ty=Tensor[(1, 11, 5), float32] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %92 = floor_divide(%90, %91) /* ty=Tensor[(?, 11, 5), float32] */;
    %93 = cast(%var_1472, dtype="bool") /* ty=Tensor[(1, 11, 5), bool] */;
    %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
    %95 = cast(%92, dtype="bool") /* ty=Tensor[(?, 11, 5), bool] */;
    %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %97 = less_equal(%95, %96) /* ty=Tensor[(?, 11, 5), bool] */;
    %98 = cast(%97, dtype="bool") /* ty=Tensor[(?, 11, 5), bool] */;
    %99 = shape_of(%92, dtype="int32") /* ty=Tensor[(3), int32] */;
    %100 = cast(%92, dtype="bool") /* ty=Tensor[(?, 11, 5), bool] */;
    %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %102 = cast(%var_1494, dtype="float64") /* ty=Tensor[(210), float64] */;
    %103 = reshape(%102, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
    %104 = @func_1233(%103) /* ty=(Tensor[(1, 15, 14), float64],) */;
    %105 = greater_equal(%100, %101) /* ty=Tensor[(?, 11, 5), bool] */;
    %106 = %104.0;
    (%105, %106, %var_1494)
  };
  %107(%var_1499, %var_1500) /* ty=(Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) */
}

def @func_1525(%var_1512: Tensor[(4, 10, 16), int32], %var_1513: Tensor[(4, 10, 16), int32]) -> Tensor[(4, 10, 16), bool] {
  %108 = cast(%var_1513, dtype="bool") /* ty=Tensor[(4, 10, 16), bool] */;
  %109 = shape_of(%var_1512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%var_1512, dtype="bool") /* ty=Tensor[(4, 10, 16), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%110, %111) /* ty=Tensor[(4, 10, 16), bool] */
}

def @func_5773() -> (Tensor[(5, 14), float64],) {
  @func_5771() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_3101() -> (Tensor[(5, 14), float64],) {
  %112 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %113 = %112.0;
  (%113,)
}

def @func_3326() -> (Tensor[(5, 14), float64],) {
  %116 = fn () -> (Tensor[(5, 14), float64],) {
    %114 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
    %115 = %114.0;
    (%115,)
  };
  %116() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_3295() -> Tensor[(5, 14), float64] {
  %117 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
  %117.0
}

def @func_2814(%var_2779: Tensor[(55), float32], %var_2780: Tensor[(210), float64], %var_2792: Tensor[(600), int8], %var_2799: Tensor[(108), float64]) -> (Tensor[(3, 5), float32], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(462), uint16], Tensor[(600), int8], Tensor[(1, 462), uint16], Tensor[(11, 3, 14), bool], Tensor[(108), float64]) {
  %118 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 5), float32] */, dtype="float32") /* ty=Tensor[(3, 5), float32] */;
  %119 = cast(%var_2779, dtype="float32") /* ty=Tensor[(55), float32] */;
  %120 = cast(%var_2780, dtype="float64") /* ty=Tensor[(210), float64] */;
  %121 = reshape(%119, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), float32] */;
  %122 = reshape(%120, newshape=[210]) /* ty=Tensor[(210), float64] */;
  %123 = @func_1498(%121, %122) /* ty=(Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) */;
  %124 = cast(%var_2792, dtype="int8") /* ty=Tensor[(600), int8] */;
  %125 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 462), uint16] */, dtype="uint16") /* ty=Tensor[(1, 462), uint16] */;
  %126 = reshape(%124, newshape=[6, 10, 10]) /* ty=Tensor[(6, 10, 10), int8] */;
  %127 = reshape(%125, newshape=[462]) /* ty=Tensor[(462), uint16] */;
  %128 = @func_1283(%126, %127) /* ty=(Tensor[(6, 10, 10), bool], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) */;
  %129 = cast(%var_2799, dtype="float64") /* ty=Tensor[(108), float64] */;
  %130 = %128.2;
  %131 = cast(%130, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %132 = reshape(%129, newshape=[6, 9, 2]) /* ty=Tensor[(6, 9, 2), float64] */;
  %133 = reshape(%131, newshape=[462]) /* ty=Tensor[(462), uint16] */;
  %134 = @func_1200(%132, %133) /* ty=(Tensor[(6, 9, 2), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) */;
  %135 = log2(%118) /* ty=Tensor[(3, 5), float32] */;
  %136 = %123.2;
  %137 = %134.1;
  (%135, %136, %var_2779, %var_2780, %130, %var_2792, meta[relay.Constant][5] /* ty=Tensor[(1, 462), uint16] */, %137, %var_2799)
}

def @func_5335(%var_5300: Tensor[(660), uint16]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(864), float32], Tensor[(5, 11, 12), uint16], Tensor[(660), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32]) {
  %138 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %139 = cast(meta[relay.Constant][6] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %140 = reshape(%139, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %141 = @func_4252(%140) /* ty=(Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) */;
  %142 = cast(meta[relay.Constant][6] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %143 = cast(%var_5300, dtype="uint16") /* ty=Tensor[(660), uint16] */;
  %144 = reshape(%143, newshape=[5, 11, 12]) /* ty=Tensor[(5, 11, 12), uint16] */;
  %145 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
  %146 = cast(meta[relay.Constant][7] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
  %147 = reshape(%146, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %148 = @func_3194(%147) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) */;
  %149 = %138.0;
  %150 = %141.9;
  %151 = erf(%142) /* ty=Tensor[(864), float32] */;
  %152 = @func_4687(%144) /* ty=Tensor[(5, 11, 12), uint16] */;
  %153 = %145.0;
  %154 = %148.1;
  (%149, %150, %151, %152, %var_5300, %153, %154, meta[relay.Constant][7] /* ty=Tensor[(640), int32] */)
}

def @func_4758(%var_4757: Tensor[(9, 9, 7), float32]) -> (Tensor[(9, 9, 7), int32], Tensor[(5, 14), float64], Tensor[(640), int32]) {
  %170 = fn (%var_4732: Tensor[(9, 9, 7), float32]) -> (Tensor[(9, 9, 7), int32], Tensor[(5, 14), float64], Tensor[(640), int32]) {
    %155 = cast(%var_4732, dtype="float32") /* ty=Tensor[(9, 9, 7), float32] */;
    %156 = atanh(%155) /* ty=Tensor[(9, 9, 7), float32] */;
    %157 = cast(%var_4732, dtype="int32") /* ty=Tensor[(9, 9, 7), int32] */;
    %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(%156, dtype="int32") /* ty=Tensor[(9, 9, 7), int32] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %161 = right_shift(%159, %160) /* ty=Tensor[(9, 9, 7), int32] */;
    %162 = cast(%161, dtype="int32") /* ty=Tensor[(9, 9, 7), int32] */;
    %163 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
    %164 = cast(%156, dtype="int32") /* ty=Tensor[(9, 9, 7), int32] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %166 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
    %167 = logical_xor(%164, %165) /* ty=Tensor[(9, 9, 7), int32] */;
    %168 = @func_4508() /* ty=Tensor[(5, 14), float64] */;
    %169 = %166.2;
    (%167, %168, %169)
  };
  %170(%var_4757) /* ty=(Tensor[(9, 9, 7), int32], Tensor[(5, 14), float64], Tensor[(640), int32]) */
}

def @func_7288(%var_7286: Tensor[(864), float32]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(567), bool], Tensor[(5, 14), float64], Tensor[(864), float32]) {
  @func_7285(%var_7286) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(567), bool], Tensor[(5, 14), float64], Tensor[(864), float32]) */
}

def @func_4689(%var_4688: Tensor[(5, 11, 12), uint16]) -> Tensor[(5, 11, 12), uint16] {
  %175 = fn (%var_4680: Tensor[(5, 11, 12), uint16]) -> Tensor[(5, 11, 12), uint16] {
    %171 = cast(%var_4680, dtype="uint16") /* ty=Tensor[(5, 11, 12), uint16] */;
    %172 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(5, 11, 12), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %173 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 11, 12), uint16] */, dtype="uint16") /* ty=Tensor[(5, 11, 12), uint16] */;
    %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_xor(%173, %174) /* ty=Tensor[(5, 11, 12), uint16] */
  };
  %175(%var_4688) /* ty=Tensor[(5, 11, 12), uint16] */
}

def @func_7349() -> (Tensor[(1120), float64],) {
  %180 = fn () -> (Tensor[(1120), float64],) {
    %176 = @func_3982() /* ty=(Tensor[(5, 14), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(20, 32), int32]) */;
    %177 = %176.2;
    %178 = cast(%177, dtype="float64") /* ty=Tensor[(1120), float64] */;
    %179 = asinh(%178) /* ty=Tensor[(1120), float64] */;
    (%179,)
  };
  %180() /* ty=(Tensor[(1120), float64],) */
}

def @func_2909() -> Tensor[(5, 14), float64] {
  %181 = fn () -> Tensor[(5, 14), float64] {
    @func_2693() /* ty=Tensor[(5, 14), float64] */
  };
  %181() /* ty=Tensor[(5, 14), float64] */
}

def @func_8607(%var_8606: Tensor[(9, 14, 13), float32]) -> (Tensor[(5, 14), float64], Tensor[(9, 14, 13), uint8]) {
  %193 = fn (%var_8583: Tensor[(9, 14, 13), float32]) -> (Tensor[(5, 14), float64], Tensor[(9, 14, 13), uint8]) {
    %182 = @func_7184() /* ty=(Tensor[(5, 14), float64],) */;
    %183 = cast(%var_8583, dtype="float32") /* ty=Tensor[(9, 14, 13), float32] */;
    %184 = atanh(%183) /* ty=Tensor[(9, 14, 13), float32] */;
    %185 = cast(%184, dtype="float32") /* ty=Tensor[(9, 14, 13), float32] */;
    %186 = sinh(%185) /* ty=Tensor[(9, 14, 13), float32] */;
    %187 = cast(%var_8583, dtype="uint8") /* ty=Tensor[(9, 14, 13), uint8] */;
    %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%186, dtype="uint8") /* ty=Tensor[(9, 14, 13), uint8] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %191 = %182.0;
    %192 = right_shift(%189, %190) /* ty=Tensor[(9, 14, 13), uint8] */;
    (%191, %192)
  };
  %193(%var_8606) /* ty=(Tensor[(5, 14), float64], Tensor[(9, 14, 13), uint8]) */
}

def @func_3045() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_5810() -> Tensor[(8, 2, 9), float32] {
  %194 = fn () -> Tensor[(8, 2, 9), float32] {
    @func_5238() /* ty=Tensor[(8, 2, 9), float32] */
  };
  %194() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_4164() -> (Tensor[(5, 14), float64],) {
  %196 = fn () -> (Tensor[(5, 14), float64],) {
    %195 = @func_4035() /* ty=Tensor[(5, 14), float64] */;
    (%195,)
  };
  %196() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_6365() -> Tensor[(13, 15, 2), float64] {
  %198 = fn () -> Tensor[(13, 15, 2), float64] {
    %197 = cast(meta[relay.Constant][9] /* ty=Tensor[(13, 15, 2), float64] */, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
    sigmoid(%197) /* ty=Tensor[(13, 15, 2), float64] */
  };
  %198() /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_7322() -> (Tensor[(5, 14), float64],) {
  %201 = fn () -> (Tensor[(5, 14), float64],) {
    %199 = @func_6698() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %200 = %199.0;
    (%200,)
  };
  %201() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_1400(%var_1390: Tensor[(12, 5, 10), float32]) -> (Tensor[(12, 5, 10), float32],) {
  %202 = cast(%var_1390, dtype="float32") /* ty=Tensor[(12, 5, 10), float32] */;
  %203 = tan(%202) /* ty=Tensor[(12, 5, 10), float32] */;
  %204 = cast(%var_1390, dtype="float32") /* ty=Tensor[(12, 5, 10), float32] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%203, dtype="float32") /* ty=Tensor[(12, 5, 10), float32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %208 = floor_divide(%206, %207) /* ty=Tensor[(12, 5, 10), float32] */;
  (%208,)
}

def @func_8965() -> Tensor[(5, 14), float64] {
  @func_4035() /* ty=Tensor[(5, 14), float64] */
}

def @func_7670(%var_7669: Tensor[(7, 13, 7), float32]) -> Tensor[(7, 13, 7), float32] {
  %210 = fn (%var_7657: Tensor[(7, 13, 7), float32]) -> Tensor[(7, 13, 7), float32] {
    %209 = cast(%var_7657, dtype="float32") /* ty=Tensor[(7, 13, 7), float32] */;
    sqrt(%209) /* ty=Tensor[(7, 13, 7), float32] */
  };
  %210(%var_7669) /* ty=Tensor[(7, 13, 7), float32] */
}

def @func_3539() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %211 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %212 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  %213 = %211.0;
  (%212, %213)
}

def @func_4373() -> Tensor[(5, 14), float64] {
  @func_2567() /* ty=Tensor[(5, 14), float64] */
}

def @func_3196(%var_3195: Tensor[(640), int32]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) {
  %225 = fn (%var_3172: Tensor[(640), int32]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) {
    %214 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %215 = cast(%var_3172, dtype="int32") /* ty=Tensor[(640), int32] */;
    %216 = reshape(%215, newshape=[640]) /* ty=Tensor[(640), int32] */;
    %217 = @func_2890(%216) /* ty=(Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
    %218 = cast(meta[relay.Constant][10] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %219 = reshape(%218, newshape=[12, 5, 10]) /* ty=Tensor[(12, 5, 10), float32] */;
    %220 = @func_1400(%219) /* ty=(Tensor[(12, 5, 10), float32],) */;
    %221 = %214.0;
    %222 = @func_2932() /* ty=Tensor[(5, 14), float64] */;
    %223 = %217.0;
    %224 = %220.0;
    (%221, %222, %223, %var_3172, %224, meta[relay.Constant][10] /* ty=Tensor[(600), float32] */)
  };
  %225(%var_3195) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) */
}

def @func_1711(%var_1709: Tensor[(15, 14, 10), int64]) -> (Tensor[(15, 14, 10), int64],) {
  @func_1708(%var_1709) /* ty=(Tensor[(15, 14, 10), int64],) */
}

def @func_6699() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %229 = fn () -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
    %226 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
    %227 = @func_2908() /* ty=Tensor[(5, 14), float64] */;
    %228 = %226.0;
    (%227, %228)
  };
  %229() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_5618() -> (Tensor[(5, 14), float64],) {
  %230 = @func_5415() /* ty=(Tensor[(5, 14), float64],) */;
  %231 = %230.0;
  (%231,)
}

def @func_3541() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  @func_3539() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_8562() -> (Tensor[(52), float64],) {
  %236 = fn () -> (Tensor[(52), float64],) {
    %232 = @func_8532() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52), float32]) */;
    %233 = %232.3;
    %234 = cast(%233, dtype="float64") /* ty=Tensor[(52), float64] */;
    %235 = sqrt(%234) /* ty=Tensor[(52), float64] */;
    (%235,)
  };
  %236() /* ty=(Tensor[(52), float64],) */
}

def @func_1283(%var_1270: Tensor[(6, 10, 10), int8], %var_1279: Tensor[(462), uint16]) -> (Tensor[(6, 10, 10), bool], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) {
  %237 = cast(%var_1270, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
  %238 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(6, 10, 10), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 10, 10), int8] */, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = cast(%var_1279, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %242 = cast(%var_1279, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %243 = cast(%var_1279, dtype="bool") /* ty=Tensor[(462), bool] */;
  %244 = reshape(%241, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %245 = reshape(%242, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %246 = reshape(%243, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), bool] */;
  %247 = @func_712(%244, %245, %246) /* ty=(Tensor[(11, 3, 14), bool],) */;
  %248 = greater_equal(%239, %240) /* ty=Tensor[(6, 10, 10), bool] */;
  %249 = %247.0;
  (%248, %249, %var_1279)
}

def @func_1200(%var_1180: Tensor[(6, 9, 2), float64], %var_1187: Tensor[(462), uint16]) -> (Tensor[(6, 9, 2), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) {
  %250 = cast(%var_1180, dtype="float64") /* ty=Tensor[(6, 9, 2), float64] */;
  %251 = cast(%var_1187, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %252 = cast(%var_1187, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %253 = cast(%var_1187, dtype="bool") /* ty=Tensor[(462), bool] */;
  %254 = reshape(%251, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %255 = reshape(%252, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %256 = reshape(%253, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), bool] */;
  %257 = @func_712(%254, %255, %256) /* ty=(Tensor[(11, 3, 14), bool],) */;
  %258 = asin(%250) /* ty=Tensor[(6, 9, 2), float64] */;
  %259 = %257.0;
  (%258, %259, %var_1187)
}

def @func_3234() -> (Tensor[(5, 14), float64],) {
  %260 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
  %261 = %260.0;
  (%261,)
}

def @func_3506() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %262 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
  %263 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %264 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %265 = %262.0;
  %266 = %263.1;
  %267 = %264.1;
  (%265, %266, %267)
}

def @func_9474() -> Tensor[(5, 14), float64] {
  @func_9472() /* ty=Tensor[(5, 14), float64] */
}

def @func_1403(%var_1401: Tensor[(12, 5, 10), float32]) -> (Tensor[(12, 5, 10), float32],) {
  @func_1400(%var_1401) /* ty=(Tensor[(12, 5, 10), float32],) */
}

def @func_4715() -> (Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], uint8, Tensor[(784), uint8]) {
  %268 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %269 = cast(meta[relay.Constant][12] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %270 = cast(meta[relay.Constant][13] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %271 = reshape(%269, newshape=[]) /* ty=uint8 */;
  %272 = reshape(%270, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), uint8] */;
  %273 = @func_383(%271, %272) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) */;
  %274 = %268.0;
  %275 = %273.2;
  (%274, %275, meta[relay.Constant][12] /* ty=uint8 */, meta[relay.Constant][13] /* ty=Tensor[(784), uint8] */)
}

def @func_2933() -> Tensor[(5, 14), float64] {
  %276 = fn () -> Tensor[(5, 14), float64] {
    @func_2567() /* ty=Tensor[(5, 14), float64] */
  };
  %276() /* ty=Tensor[(5, 14), float64] */
}

def @func_2568() -> Tensor[(5, 14), float64] {
  %277 = fn () -> Tensor[(5, 14), float64] {
    @func_2345() /* ty=Tensor[(5, 14), float64] */
  };
  %277() /* ty=Tensor[(5, 14), float64] */
}

def @func_8213() -> Tensor[(5, 14), float64] {
  @func_8211() /* ty=Tensor[(5, 14), float64] */
}

def @func_3242() -> (Tensor[(5, 14), float64],) {
  %278 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %279 = %278.0;
  (%279,)
}

def @func_9514(%var_9513: Tensor[(864), float32]) -> (Tensor[(5, 14), float64], Tensor[(11, 3, 14), float32], Tensor[(864), uint64]) {
  %295 = fn (%var_9501: Tensor[(864), float32]) -> (Tensor[(5, 14), float64], Tensor[(11, 3, 14), float32], Tensor[(864), uint64]) {
    %280 = cast(meta[relay.Constant][14] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
    %281 = reshape(%280, newshape=[864]) /* ty=Tensor[(864), float32] */;
    %282 = @func_7285(%281) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(567), bool], Tensor[(5, 14), float64], Tensor[(864), float32]) */;
    %283 = %282.2;
    %284 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 3, 14), bool] */, dtype="float32") /* ty=Tensor[(11, 3, 14), float32] */;
    %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
    %286 = cast(%283, dtype="float32") /* ty=Tensor[(11, 3, 14), float32] */;
    %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %288 = cast(%var_9501, dtype="uint64") /* ty=Tensor[(864), uint64] */;
    %289 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(864), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %290 = cast(meta[relay.Constant][14] /* ty=Tensor[(864), float32] */, dtype="uint64") /* ty=Tensor[(864), uint64] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %292 = @func_6270() /* ty=Tensor[(5, 14), float64] */;
    %293 = divide(%286, %287) /* ty=Tensor[(11, 3, 14), float32] */;
    %294 = subtract(%290, %291) /* ty=Tensor[(864), uint64] */;
    (%292, %293, %294)
  };
  %295(%var_9513) /* ty=(Tensor[(5, 14), float64], Tensor[(11, 3, 14), float32], Tensor[(864), uint64]) */
}

def @func_6250(%var_6199: Tensor[(11, 13, 4), float32]) -> (Tensor[(5, 14), float64], Tensor[(40, 16), int32], Tensor[(11, 13, 4), uint16], Tensor[(5, 14), float64], Tensor[(11, 13, 4), float64]) {
  %296 = cast(meta[relay.Constant][16] /* ty=Tensor[(40, 16), int32] */, dtype="int32") /* ty=Tensor[(40, 16), int32] */;
  %297 = cast(meta[relay.Constant][16] /* ty=Tensor[(40, 16), int32] */, dtype="int32") /* ty=Tensor[(40, 16), int32] */;
  %298 = cast(meta[relay.Constant][16] /* ty=Tensor[(40, 16), int32] */, dtype="bool") /* ty=Tensor[(40, 16), bool] */;
  %299 = reshape(%296, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %300 = reshape(%297, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %301 = reshape(%298, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), bool] */;
  %302 = @func_4617(%299, %300, %301) /* ty=(Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(4, 10, 16), uint32], Tensor[(5, 14), float64]) */;
  %303 = cast(6.71495f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %304 = cast(%var_6199, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
  %305 = floor_divide(%303, %304) /* ty=Tensor[(11, 13, 4), float32] */;
  %306 = cast(%305, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
  %307 = shape_of(%var_6199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%var_6199, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %310 = floor_mod(%308, %309) /* ty=Tensor[(11, 13, 4), float32] */;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %312 = atan(%311) /* ty=Tensor[(11, 13, 4), float64] */;
  %313 = cast(%312, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %314 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%310, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %317 = mod(%315, %316) /* ty=Tensor[(11, 13, 4), float64] */;
  %318 = cast(%310, dtype="uint16") /* ty=Tensor[(11, 13, 4), uint16] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="uint16") /* ty=Tensor[(11, 13, 4), uint16] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %322 = @func_3325() /* ty=(Tensor[(5, 14), float64],) */;
  %323 = cast(%317, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %324 = %302.0;
  %325 = bitwise_and(%320, %321) /* ty=Tensor[(11, 13, 4), uint16] */;
  %326 = %322.0;
  %327 = atanh(%323) /* ty=Tensor[(11, 13, 4), float64] */;
  (%324, meta[relay.Constant][16] /* ty=Tensor[(40, 16), int32] */, %325, %326, %327)
}

def @func_2974() -> (Tensor[(5, 14), float64],) {
  @func_2972() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_4529() -> Tensor[(5, 14), float64] {
  %329 = fn () -> Tensor[(5, 14), float64] {
    %328 = @func_3774() /* ty=(Tensor[(5, 14), float64],) */;
    %328.0
  };
  %329() /* ty=Tensor[(5, 14), float64] */
}

def @func_7184() -> (Tensor[(5, 14), float64],) {
  %330 = @func_4508() /* ty=Tensor[(5, 14), float64] */;
  (%330,)
}

def @func_4358(%var_4357: Tensor[(288), int32]) -> (Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(3, 36), float64], Tensor[(462), uint16], Tensor[(288), int32], Tensor[(288), int32]) {
  %343 = fn (%var_4341: Tensor[(288), int32]) -> (Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(3, 36), float64], Tensor[(462), uint16], Tensor[(288), int32], Tensor[(288), int32]) {
    %331 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
    %332 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 36), float64] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
    %333 = cast(meta[relay.Constant][18] /* ty=Tensor[(462), uint16] */, dtype="uint16") /* ty=Tensor[(462), uint16] */;
    %334 = reshape(%332, newshape=[6, 9, 2]) /* ty=Tensor[(6, 9, 2), float64] */;
    %335 = reshape(%333, newshape=[462]) /* ty=Tensor[(462), uint16] */;
    %336 = @func_1200(%334, %335) /* ty=(Tensor[(6, 9, 2), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) */;
    %337 = cast(%var_4341, dtype="int32") /* ty=Tensor[(288), int32] */;
    %338 = reshape(%337, newshape=[288]) /* ty=Tensor[(288), int32] */;
    %339 = @func_3272(%338) /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */;
    %340 = %331.0;
    %341 = %336.2;
    %342 = %339.2;
    (%340, %341, meta[relay.Constant][17] /* ty=Tensor[(3, 36), float64] */, meta[relay.Constant][18] /* ty=Tensor[(462), uint16] */, %342, %var_4341)
  };
  %343(%var_4357) /* ty=(Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(3, 36), float64], Tensor[(462), uint16], Tensor[(288), int32], Tensor[(288), int32]) */
}

def @func_3022() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %344 = @func_2908() /* ty=Tensor[(5, 14), float64] */;
  %345 = @func_2698() /* ty=Tensor[(5, 14), float64] */;
  (%344, %345)
}

def @func_274(%var_273: Tensor[(16, 9, 2), int32]) -> Tensor[(16, 9, 2), bool] {
  %350 = fn (%var_266: Tensor[(16, 9, 2), int32]) -> Tensor[(16, 9, 2), bool] {
    %346 = cast(%var_266, dtype="bool") /* ty=Tensor[(16, 9, 2), bool] */;
    %347 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(16, 9, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %348 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 9, 2), int32] */, dtype="bool") /* ty=Tensor[(16, 9, 2), bool] */;
    %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%348, %349) /* ty=Tensor[(16, 9, 2), bool] */
  };
  %350(%var_273) /* ty=Tensor[(16, 9, 2), bool] */
}

def @func_4278(%var_4276: Tensor[(3328), int16]) -> (Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(2, 104), float64]) {
  @func_4275(%var_4276) /* ty=(Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(2, 104), float64]) */
}

def @func_5239() -> Tensor[(8, 2, 9), float32] {
  %352 = fn () -> Tensor[(8, 2, 9), float32] {
    %351 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 2, 9), float32] */, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
    cosh(%351) /* ty=Tensor[(8, 2, 9), float32] */
  };
  %352() /* ty=Tensor[(8, 2, 9), float32] */
}

def @func_8384(%var_8383: Tensor[(9, 2, 14), float64]) -> (Tensor[(9, 2, 14), float64], Tensor[(9, 2, 14), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %359 = fn (%var_8359: Tensor[(9, 2, 14), float64]) -> (Tensor[(9, 2, 14), float64], Tensor[(9, 2, 14), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
    %353 = cast(%var_8359, dtype="float64") /* ty=Tensor[(9, 2, 14), float64] */;
    %354 = cast(%var_8359, dtype="float32") /* ty=Tensor[(9, 2, 14), float32] */;
    %355 = asin(%353) /* ty=Tensor[(9, 2, 14), float64] */;
    %356 = log10(%354) /* ty=Tensor[(9, 2, 14), float32] */;
    %357 = @func_4373() /* ty=Tensor[(5, 14), float64] */;
    %358 = @func_4373() /* ty=Tensor[(5, 14), float64] */;
    (%355, %356, %357, %358)
  };
  %359(%var_8383) /* ty=(Tensor[(9, 2, 14), float64], Tensor[(9, 2, 14), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_4906(%var_4898: Tensor[(14, 3, 6), uint32], %var_4899: Tensor[(14, 3, 6), uint32]) -> (Tensor[(14, 3, 6), uint32],) {
  %360 = cast(%var_4899, dtype="uint32") /* ty=Tensor[(14, 3, 6), uint32] */;
  %361 = shape_of(%var_4898, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_4898, dtype="uint32") /* ty=Tensor[(14, 3, 6), uint32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %364 = bitwise_xor(%362, %363) /* ty=Tensor[(14, 3, 6), uint32] */;
  (%364,)
}

def @func_3604(%var_3603: Tensor[(210), float64]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %379 = fn (%var_3553: Tensor[(210), float64]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
    %365 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
    %366 = @func_3539() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %367 = cast(%var_3553, dtype="float64") /* ty=Tensor[(210), float64] */;
    %368 = reshape(%367, newshape=[1, 15, 14]) /* ty=Tensor[(1, 15, 14), float64] */;
    %369 = @func_1233(%368) /* ty=(Tensor[(1, 15, 14), float64],) */;
    %370 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
    %371 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
    %372 = %365.0;
    %373 = %366.1;
    %374 = %369.0;
    %375 = @func_2908() /* ty=Tensor[(5, 14), float64] */;
    %376 = %370.0;
    %377 = %371.0;
    %378 = @func_3295() /* ty=Tensor[(5, 14), float64] */;
    (%372, %373, %374, %var_3553, %375, %376, %377, %378)
  };
  %379(%var_3603) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(1, 15, 14), float64], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_4717() -> (Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], uint8, Tensor[(784), uint8]) {
  @func_4715() /* ty=(Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], uint8, Tensor[(784), uint8]) */
}

def @func_4622(%var_4619: Tensor[(640), int32], %var_4620: Tensor[(640), int32], %var_4621: Tensor[(4, 10, 16), bool]) -> (Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(4, 10, 16), uint32], Tensor[(5, 14), float64]) {
  @func_4617(%var_4619, %var_4620, %var_4621) /* ty=(Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(4, 10, 16), uint32], Tensor[(5, 14), float64]) */
}

def @func_3932() -> Tensor[(5, 14), float64] {
  %380 = @func_3022() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %380.1
}

def @func_5061() -> (Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(288), int32]) {
  %386 = fn () -> (Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(288), int32]) {
    %381 = cast(meta[relay.Constant][21] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %382 = reshape(%381, newshape=[288]) /* ty=Tensor[(288), int32] */;
    %383 = @func_4356(%382) /* ty=(Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(3, 36), float64], Tensor[(462), uint16], Tensor[(288), int32], Tensor[(288), int32]) */;
    %384 = @func_2693() /* ty=Tensor[(5, 14), float64] */;
    %385 = %383.1;
    (%384, %385, meta[relay.Constant][21] /* ty=Tensor[(288), int32] */)
  };
  %386() /* ty=(Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(288), int32]) */
}

def @func_5391() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  @func_5389() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_6573(%var_6558: Tensor[(13, 1, 8), int8], %var_6559: Tensor[(13, 1, 8), int8]) -> (Tensor[(13, ?, 8), int8], Tensor[(13, 1, 8), float64]) {
  %387 = cast(%var_6559, dtype="int8") /* ty=Tensor[(13, 1, 8), int8] */;
  %388 = shape_of(%var_6558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%var_6558, dtype="int8") /* ty=Tensor[(13, 1, 8), int8] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %391 = cast(%var_6559, dtype="float64") /* ty=Tensor[(13, 1, 8), float64] */;
  %392 = subtract(%389, %390) /* ty=Tensor[(13, ?, 8), int8] */;
  %393 = exp(%391) /* ty=Tensor[(13, 1, 8), float64] */;
  (%392, %393)
}

def @func_5514(%var_5485: Tensor[(16, 9, 2), bool]) -> (Tensor[(5, 14), float64], Tensor[(16, 9, 2), float64], Tensor[(5, 14), float64]) {
  %394 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
  %395 = %394.1;
  %396 = cast(%var_5485, dtype="float64") /* ty=Tensor[(16, 9, 2), float64] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="float64") /* ty=Tensor[(16, 9, 2), float64] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %400 = @func_4022() /* ty=(Tensor[(5, 14), float64],) */;
  %401 = @func_2698() /* ty=Tensor[(5, 14), float64] */;
  %402 = floor_mod(%398, %399) /* ty=Tensor[(16, 9, 2), float64] */;
  %403 = %400.0;
  (%401, %402, %403)
}

def @func_5955(%var_5953: Tensor[(8, 2, 9), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(5, 14), float64]) {
  @func_5952(%var_5953) /* ty=(Tensor[(8, 2, 9), float64], Tensor[(5, 14), float64]) */
}

def @func_1287(%var_1285: Tensor[(6, 10, 10), int8], %var_1286: Tensor[(462), uint16]) -> (Tensor[(6, 10, 10), bool], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) {
  @func_1283(%var_1285, %var_1286) /* ty=(Tensor[(6, 10, 10), bool], Tensor[(11, 3, 14), bool], Tensor[(462), uint16]) */
}

def @func_937(%var_900: Tensor[(5, 7, 14), float32], %var_901: Tensor[(5, 7, 14), float32], %var_912: Tensor[(288, 1), int32]) -> (Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) {
  %404 = cast(%var_912, dtype="int32") /* ty=Tensor[(288, 1), int32] */;
  %405 = reshape(%404, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
  %406 = cast(%var_901, dtype="float32") /* ty=Tensor[(5, 7, 14), float32] */;
  %407 = shape_of(%var_900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_900, dtype="float32") /* ty=Tensor[(5, 7, 14), float32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %410 = subtract(%408, %409) /* ty=Tensor[(5, 7, 14), float32] */;
  %411 = cast(%410, dtype="bool") /* ty=Tensor[(5, 7, 14), bool] */;
  %412 = shape_of(%var_901, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_901, dtype="bool") /* ty=Tensor[(5, 7, 14), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = @func_272(%405) /* ty=Tensor[(16, 9, 2), bool] */;
  %416 = not_equal(%413, %414) /* ty=Tensor[(5, 7, 14), bool] */;
  (%415, %var_912, %416)
}

def @func_4375() -> Tensor[(5, 14), float64] {
  @func_4373() /* ty=Tensor[(5, 14), float64] */
}

def @func_2700() -> Tensor[(5, 14), float64] {
  @func_2698() /* ty=Tensor[(5, 14), float64] */
}

def @func_5389() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %417 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %418 = @func_2932() /* ty=Tensor[(5, 14), float64] */;
  %419 = %417.0;
  (%418, %419)
}

def @func_6638(%var_6632: Tensor[(12, 13, 13), float64]) -> Tensor[(12, 13, 13), float64] {
  %420 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 13, 13), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 13), float64] */;
  %421 = shape_of(%var_6632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_6632, dtype="float64") /* ty=Tensor[(12, 13, 13), float64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%422, %423) /* ty=Tensor[(12, 13, 13), float64] */
}

def @func_5952(%var_5942: Tensor[(8, 2, 9), float32]) -> (Tensor[(8, 2, 9), float64], Tensor[(5, 14), float64]) {
  %424 = @func_5238() /* ty=Tensor[(8, 2, 9), float32] */;
  %425 = cast(%var_5942, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %429 = @func_5771() /* ty=(Tensor[(5, 14), float64],) */;
  %430 = divide(%427, %428) /* ty=Tensor[(8, 2, 9), float64] */;
  %431 = %429.0;
  (%430, %431)
}

def @func_5551(%var_5549: Tensor[(10, 8, 5), uint32], %var_5550: Tensor[(10, 8, 5), uint32]) -> (Tensor[(10, 8, 5), uint32], Tensor[(5, 14), float64], Tensor[(864), float32]) {
  @func_5547(%var_5549, %var_5550) /* ty=(Tensor[(10, 8, 5), uint32], Tensor[(5, 14), float64], Tensor[(864), float32]) */
}

def @func_7855() -> (Tensor[(5, 14), float64],) {
  @func_7853() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_3383() -> Tensor[(5, 14), float64] {
  %433 = fn () -> Tensor[(5, 14), float64] {
    %432 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
    %432.0
  };
  %433() /* ty=Tensor[(5, 14), float64] */
}

def @func_6438(%var_6437: Tensor[(750), int16]) -> (Tensor[(5, 14), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16]) {
  %439 = fn (%var_6433: Tensor[(750), int16]) -> (Tensor[(5, 14), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16]) {
    %434 = cast(%var_6433, dtype="int16") /* ty=Tensor[(750), int16] */;
    %435 = reshape(%434, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
    %436 = @func_1832(%435) /* ty=(Tensor[(5, 10, 15), int16],) */;
    %437 = @func_2932() /* ty=Tensor[(5, 14), float64] */;
    %438 = %436.0;
    (%437, %438, %var_6433)
  };
  %439(%var_6437) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16]) */
}

def @func_5699(%var_5688: Tensor[(5, 16, 6), int8], %var_5689: Tensor[(5, 16, 6), int8]) -> (Tensor[(5, 16, 6), uint16],) {
  %440 = cast(%var_5689, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %441 = shape_of(%var_5688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_5688, dtype="bool") /* ty=Tensor[(5, 16, 6), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = greater(%442, %443) /* ty=Tensor[(5, 16, 6), bool] */;
  %445 = cast(%444, dtype="uint16") /* ty=Tensor[(5, 16, 6), uint16] */;
  %446 = shape_of(%var_5689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%var_5689, dtype="uint16") /* ty=Tensor[(5, 16, 6), uint16] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %449 = maximum(%447, %448) /* ty=Tensor[(5, 16, 6), uint16] */;
  (%449,)
}

def @func_6184() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52, 1), float32]) {
  %450 = @func_4163() /* ty=(Tensor[(5, 14), float64],) */;
  %451 = cast(meta[relay.Constant][23] /* ty=Tensor[(52, 1), float32] */, dtype="float32") /* ty=Tensor[(52, 1), float32] */;
  %452 = cast(meta[relay.Constant][23] /* ty=Tensor[(52, 1), float32] */, dtype="float32") /* ty=Tensor[(52, 1), float32] */;
  %453 = reshape(%451, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float32] */;
  %454 = reshape(%452, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float32] */;
  %455 = @func_6061(%453, %454) /* ty=(Tensor[(5, 14), float64], Tensor[(2, 2, 13), int16]) */;
  %456 = %450.0;
  %457 = %455.0;
  (%456, %457, meta[relay.Constant][23] /* ty=Tensor[(52, 1), float32] */)
}

def @func_7797() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  @func_7795() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_7380() -> (Tensor[(5, 14), float64],) {
  %458 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %459 = %458.0;
  (%459,)
}

def @func_4819() -> (Tensor[(5, 14), float64],) {
  %462 = fn () -> (Tensor[(5, 14), float64],) {
    %460 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %461 = %460.1;
    (%461,)
  };
  %462() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_7985(%var_7981: Tensor[(3, 7, 4), uint32], %var_7982: Tensor[(3, 7, 4), uint32], %var_7983: Tensor[(640), int32], %var_7984: Tensor[(36, 24), float32]) -> (Tensor[(3, 7, 4), uint16], Tensor[(2100), float32], Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(36, 24), float32], Tensor[(640), int32], Tensor[(3328), int16], uint8, Tensor[(784), uint8], Tensor[(16, 9, 2), float64]) {
  @func_7979(%var_7981, %var_7982, %var_7983, %var_7984) /* ty=(Tensor[(3, 7, 4), uint16], Tensor[(2100), float32], Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(36, 24), float32], Tensor[(640), int32], Tensor[(3328), int16], uint8, Tensor[(784), uint8], Tensor[(16, 9, 2), float64]) */
}

def @func_6330() -> (Tensor[(5, 14), float64],) {
  %464 = fn () -> (Tensor[(5, 14), float64],) {
    %463 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
    (%463,)
  };
  %464() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_8139() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %469 = fn () -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
    %465 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
    %466 = @func_7380() /* ty=(Tensor[(5, 14), float64],) */;
    %467 = %465.0;
    %468 = %466.0;
    (%467, %468)
  };
  %469() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_9288() -> (Tensor[(5, 14), float64],) {
  @func_9286() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_2890(%var_2875: Tensor[(640), int32]) -> (Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) {
  %470 = cast(meta[relay.Constant][24] /* ty=Tensor[(2100), int64] */, dtype="int64") /* ty=Tensor[(2100), int64] */;
  %471 = reshape(%470, newshape=[15, 14, 10]) /* ty=Tensor[(15, 14, 10), int64] */;
  %472 = @func_1708(%471) /* ty=(Tensor[(15, 14, 10), int64],) */;
  %473 = cast(meta[relay.Constant][24] /* ty=Tensor[(2100), int64] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %474 = cast(meta[relay.Constant][25] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %475 = reshape(%474, newshape=[9, 8, 12]) /* ty=Tensor[(9, 8, 12), float32] */;
  %476 = @func_2049(%475) /* ty=(Tensor[(9, 8, 12), float32], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */;
  %477 = cast(%var_2875, dtype="int32") /* ty=Tensor[(640), int32] */;
  %478 = cast(%var_2875, dtype="int32") /* ty=Tensor[(640), int32] */;
  %479 = reshape(%477, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %480 = reshape(%478, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %481 = @func_2567() /* ty=Tensor[(5, 14), float64] */;
  %482 = %472.0;
  %483 = tan(%473) /* ty=Tensor[(2100), float32] */;
  %484 = %476.1;
  %485 = @func_1525(%479, %480) /* ty=Tensor[(4, 10, 16), bool] */;
  (%481, %482, %483, %484, meta[relay.Constant][25] /* ty=Tensor[(864), float32] */, %485, %var_2875)
}

def @func_717(%var_714: Tensor[(11, 3, 14), uint16], %var_715: Tensor[(11, 3, 14), uint16], %var_716: Tensor[(11, 3, 14), bool]) -> (Tensor[(11, 3, 14), bool],) {
  @func_712(%var_714, %var_715, %var_716) /* ty=(Tensor[(11, 3, 14), bool],) */
}

def @func_3983() -> (Tensor[(5, 14), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(20, 32), int32]) {
  %496 = fn () -> (Tensor[(5, 14), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(20, 32), int32]) {
    %486 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
    %487 = %486.0;
    %488 = cast(%487, dtype="float32") /* ty=Tensor[(5, 14), float32] */;
    %489 = cast(meta[relay.Constant][26] /* ty=Tensor[(1120), uint32] */, dtype="uint32") /* ty=Tensor[(1120), uint32] */;
    %490 = cast(meta[relay.Constant][27] /* ty=Tensor[(20, 32), int32] */, dtype="int32") /* ty=Tensor[(20, 32), int32] */;
    %491 = reshape(%489, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), uint32] */;
    %492 = reshape(%490, newshape=[640]) /* ty=Tensor[(640), int32] */;
    %493 = @func_2184(%491, %492) /* ty=(Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
    %494 = asin(%488) /* ty=Tensor[(5, 14), float32] */;
    %495 = %493.0;
    (%494, %495, meta[relay.Constant][26] /* ty=Tensor[(1120), uint32] */, meta[relay.Constant][27] /* ty=Tensor[(20, 32), int32] */)
  };
  %496() /* ty=(Tensor[(5, 14), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(20, 32), int32]) */
}

def @func_6074() -> (Tensor[(5, 14), float64],) {
  @func_6072() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_3474() -> (Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) {
  @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */
}

def @func_712(%var_690: Tensor[(11, 3, 14), uint16], %var_691: Tensor[(11, 3, 14), uint16], %var_695: Tensor[(11, 3, 14), bool]) -> (Tensor[(11, 3, 14), bool],) {
  %497 = cast(%var_691, dtype="bool") /* ty=Tensor[(11, 3, 14), bool] */;
  %498 = shape_of(%var_690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%var_690, dtype="bool") /* ty=Tensor[(11, 3, 14), bool] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %501 = less(%499, %500) /* ty=Tensor[(11, 3, 14), bool] */;
  %502 = cast(%var_695, dtype="bool") /* ty=Tensor[(11, 3, 14), bool] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="bool") /* ty=Tensor[(11, 3, 14), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = less_equal(%504, %505) /* ty=Tensor[(11, 3, 14), bool] */;
  (%506,)
}

def @func_7601() -> (Tensor[(5, 14), float64],) {
  %508 = fn () -> (Tensor[(5, 14), float64],) {
    %507 = @func_4528() /* ty=Tensor[(5, 14), float64] */;
    (%507,)
  };
  %508() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_6485(%var_6483: Tensor[(14, 11, 2), float64], %var_6484: Tensor[(14, 11, 2), float64]) -> (Tensor[(14, 11, 2), float64], Tensor[(14, 11, 2), float64], Tensor[(3, 36), float64], Tensor[(288), int32], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(4, 280), uint32], Tensor[(80, 8), int32]) {
  %531 = fn (%var_6449: Tensor[(14, 11, 2), float64], %var_6450: Tensor[(14, 11, 2), float64]) -> (Tensor[(14, 11, 2), float64], Tensor[(14, 11, 2), float64], Tensor[(3, 36), float64], Tensor[(288), int32], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(4, 280), uint32], Tensor[(80, 8), int32]) {
    %509 = cast(%var_6450, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
    %510 = shape_of(%var_6449, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%var_6449, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %513 = cast(%var_6449, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
    %514 = shape_of(%var_6450, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(%var_6450, dtype="float64") /* ty=Tensor[(14, 11, 2), float64] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %517 = cast(meta[relay.Constant][28] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %518 = reshape(%517, newshape=[288]) /* ty=Tensor[(288), int32] */;
    %519 = @func_4356(%518) /* ty=(Tensor[(5, 14), float64], Tensor[(462), uint16], Tensor[(3, 36), float64], Tensor[(462), uint16], Tensor[(288), int32], Tensor[(288), int32]) */;
    %520 = @func_4869() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %521 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 280), uint32] */, dtype="uint32") /* ty=Tensor[(4, 280), uint32] */;
    %522 = cast(meta[relay.Constant][30] /* ty=Tensor[(80, 8), int32] */, dtype="int32") /* ty=Tensor[(80, 8), int32] */;
    %523 = reshape(%521, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), uint32] */;
    %524 = reshape(%522, newshape=[640]) /* ty=Tensor[(640), int32] */;
    %525 = @func_2184(%523, %524) /* ty=(Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
    %526 = maximum(%511, %512) /* ty=Tensor[(14, 11, 2), float64] */;
    %527 = mod(%515, %516) /* ty=Tensor[(14, 11, 2), float64] */;
    %528 = %519.2;
    %529 = %520.0;
    %530 = %525.2;
    (%526, %527, %528, meta[relay.Constant][28] /* ty=Tensor[(288), int32] */, %529, %530, meta[relay.Constant][29] /* ty=Tensor[(4, 280), uint32] */, meta[relay.Constant][30] /* ty=Tensor[(80, 8), int32] */)
  };
  %531(%var_6483, %var_6484) /* ty=(Tensor[(14, 11, 2), float64], Tensor[(14, 11, 2), float64], Tensor[(3, 36), float64], Tensor[(288), int32], Tensor[(5, 14), float64], Tensor[(640), int32], Tensor[(4, 280), uint32], Tensor[(80, 8), int32]) */
}

def @func_5547(%var_5524: Tensor[(10, 8, 5), uint32], %var_5525: Tensor[(10, 8, 5), uint32]) -> (Tensor[(10, 8, 5), uint32], Tensor[(5, 14), float64], Tensor[(864), float32]) {
  %532 = cast(%var_5525, dtype="uint32") /* ty=Tensor[(10, 8, 5), uint32] */;
  %533 = shape_of(%var_5524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %534 = cast(%var_5524, dtype="uint32") /* ty=Tensor[(10, 8, 5), uint32] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %536 = cast(meta[relay.Constant][31] /* ty=Tensor[(864), float32] */, dtype="float32") /* ty=Tensor[(864), float32] */;
  %537 = reshape(%536, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %538 = @func_4252(%537) /* ty=(Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) */;
  %539 = bitwise_or(%534, %535) /* ty=Tensor[(10, 8, 5), uint32] */;
  %540 = %538.4;
  (%539, %540, meta[relay.Constant][31] /* ty=Tensor[(864), float32] */)
}

def @func_8967() -> Tensor[(5, 14), float64] {
  @func_8965() /* ty=Tensor[(5, 14), float64] */
}

def @func_6253(%var_6251: Tensor[(11, 13, 4), float32]) -> (Tensor[(5, 14), float64], Tensor[(40, 16), int32], Tensor[(11, 13, 4), uint16], Tensor[(5, 14), float64], Tensor[(11, 13, 4), float64]) {
  @func_6250(%var_6251) /* ty=(Tensor[(5, 14), float64], Tensor[(40, 16), int32], Tensor[(11, 13, 4), uint16], Tensor[(5, 14), float64], Tensor[(11, 13, 4), float64]) */
}

def @func_2972() -> (Tensor[(5, 14), float64],) {
  %541 = @func_2908() /* ty=Tensor[(5, 14), float64] */;
  (%541,)
}

def @func_6821() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %548 = fn () -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
    %542 = @func_6014() /* ty=(Tensor[(5, 14), float64],) */;
    %543 = @func_4942() /* ty=(Tensor[(5, 14), float64],) */;
    %544 = @func_3774() /* ty=(Tensor[(5, 14), float64],) */;
    %545 = %542.0;
    %546 = %543.0;
    %547 = %544.0;
    (%545, %546, %547)
  };
  %548() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_5771() -> (Tensor[(5, 14), float64],) {
  %549 = @func_5618() /* ty=(Tensor[(5, 14), float64],) */;
  %550 = %549.0;
  (%550,)
}

def @func_9029() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  @func_9027() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_3103() -> (Tensor[(5, 14), float64],) {
  @func_3101() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_1529(%var_1527: Tensor[(4, 10, 16), int32], %var_1528: Tensor[(4, 10, 16), int32]) -> Tensor[(4, 10, 16), bool] {
  @func_1525(%var_1527, %var_1528) /* ty=Tensor[(4, 10, 16), bool] */
}

def @func_6641(%var_6639: Tensor[(12, 13, 13), float64]) -> Tensor[(12, 13, 13), float64] {
  @func_6638(%var_6639) /* ty=Tensor[(12, 13, 13), float64] */
}

def @func_8650(%var_8648: Tensor[(8, 2, 9), float32]) -> (Tensor[(8, 2, 9), bool],) {
  @func_8647(%var_8648) /* ty=(Tensor[(8, 2, 9), bool],) */
}

def @func_9201() -> (Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %559 = fn () -> (Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
    %551 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
    %552 = @func_7795() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %553 = @func_6698() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %554 = @func_6100() /* ty=(Tensor[(5, 14), float64],) */;
    %555 = %551.2;
    %556 = %552.1;
    %557 = %553.0;
    %558 = %554.0;
    (%555, %556, %557, %558)
  };
  %559() /* ty=(Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_9325() -> (Tensor[(5, 14), float64],) {
  %561 = fn () -> (Tensor[(5, 14), float64],) {
    %560 = @func_6307() /* ty=Tensor[(5, 14), float64] */;
    (%560,)
  };
  %561() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_8475(%var_8474: Tensor[(16, 6, 13), float64]) -> Tensor[(16, 6, 13), float64] {
  %566 = fn (%var_8464: Tensor[(16, 6, 13), float64]) -> Tensor[(16, 6, 13), float64] {
    %562 = cast(meta[relay.Constant][32] /* ty=Tensor[(16, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
    %563 = shape_of(%var_8464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %564 = cast(%var_8464, dtype="float64") /* ty=Tensor[(16, 6, 13), float64] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%564, %565) /* ty=Tensor[(16, 6, 13), float64] */
  };
  %566(%var_8474) /* ty=Tensor[(16, 6, 13), float64] */
}

def @func_3244() -> (Tensor[(5, 14), float64],) {
  @func_3242() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_7867(%var_7865: Tensor[(750), int16]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), int16]) {
  %567 = @func_4022() /* ty=(Tensor[(5, 14), float64],) */;
  %568 = cast(%var_7865, dtype="int16") /* ty=Tensor[(750), int16] */;
  %569 = reshape(%568, newshape=[750]) /* ty=Tensor[(750), int16] */;
  %570 = @func_6436(%569) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16]) */;
  %571 = %567.0;
  %572 = %570.0;
  (%571, %572, %var_7865)
}

def @func_1832(%var_1822: Tensor[(5, 10, 15), int16]) -> (Tensor[(5, 10, 15), int16],) {
  %573 = cast(%var_1822, dtype="int16") /* ty=Tensor[(5, 10, 15), int16] */;
  %574 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(5, 10, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 10, 15), int16] */, dtype="int16") /* ty=Tensor[(5, 10, 15), int16] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %577 = left_shift(%575, %576) /* ty=Tensor[(5, 10, 15), int16] */;
  (%577,)
}

def @func_2049(%var_2032: Tensor[(9, 8, 12), float32]) -> (Tensor[(9, 8, 12), float32], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) {
  %578 = cast(%var_2032, dtype="float32") /* ty=Tensor[(9, 8, 12), float32] */;
  %579 = cast(meta[relay.Constant][34] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %580 = reshape(%579, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
  %581 = tan(%578) /* ty=Tensor[(9, 8, 12), float32] */;
  %582 = @func_272(%580) /* ty=Tensor[(16, 9, 2), bool] */;
  (%581, %582, meta[relay.Constant][34] /* ty=Tensor[(288), int32] */)
}

def @func_6015() -> (Tensor[(5, 14), float64],) {
  %584 = fn () -> (Tensor[(5, 14), float64],) {
    %583 = @func_5000() /* ty=Tensor[(5, 14), float64] */;
    (%583,)
  };
  %584() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_8454(%var_8452: Tensor[(210), float64], %var_8453: Tensor[(288), int32]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(4, 14, 8), float32], Tensor[(1, 448), float32], Tensor[(5, 14), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(288), int32], Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(1, 490), float32], Tensor[(5, 14), float64]) {
  %607 = fn (%var_8420: Tensor[(210), float64], %var_8421: Tensor[(288), int32]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(4, 14, 8), float32], Tensor[(1, 448), float32], Tensor[(5, 14), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(288), int32], Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(1, 490), float32], Tensor[(5, 14), float64]) {
    %585 = @func_6502() /* ty=(Tensor[(5, 14), float64],) */;
    %586 = @func_7380() /* ty=(Tensor[(5, 14), float64],) */;
    %587 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 448), float32] */, dtype="float32") /* ty=Tensor[(1, 448), float32] */;
    %588 = reshape(%587, newshape=[4, 14, 8]) /* ty=Tensor[(4, 14, 8), float32] */;
    %589 = cast(meta[relay.Constant][36] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
    %590 = cast(%var_8420, dtype="float64") /* ty=Tensor[(210), float64] */;
    %591 = cast(%var_8421, dtype="int32") /* ty=Tensor[(288), int32] */;
    %592 = reshape(%589, newshape=[55]) /* ty=Tensor[(55), float32] */;
    %593 = reshape(%590, newshape=[210]) /* ty=Tensor[(210), float64] */;
    %594 = reshape(%591, newshape=[288]) /* ty=Tensor[(288), int32] */;
    %595 = @func_3753(%592, %593, %594) /* ty=(Tensor[(640), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(490), float32], Tensor[(288), int32]) */;
    %596 = @func_7654() /* ty=(Tensor[(5, 14), float64], Tensor[(20, 32), int32]) */;
    %597 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 490), float32] */, dtype="float32") /* ty=Tensor[(1, 490), float32] */;
    %598 = reshape(%597, newshape=[490]) /* ty=Tensor[(490), float32] */;
    %599 = @func_2536(%598) /* ty=(Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(5, 14), float64], Tensor[(490), float32], Tensor[(5, 7, 14), bool]) */;
    %600 = %585.0;
    %601 = %586.0;
    %602 = @func_6521(%588) /* ty=Tensor[(4, 14, 8), float32] */;
    %603 = %595.4;
    %604 = %596.0;
    %605 = %599.1;
    %606 = @func_3295() /* ty=Tensor[(5, 14), float64] */;
    (%600, %601, %602, meta[relay.Constant][35] /* ty=Tensor[(1, 448), float32] */, %603, meta[relay.Constant][36] /* ty=Tensor[(55), float32] */, %var_8420, %var_8421, %604, %605, meta[relay.Constant][37] /* ty=Tensor[(1, 490), float32] */, %606)
  };
  %607(%var_8452, %var_8453) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(4, 14, 8), float32], Tensor[(1, 448), float32], Tensor[(5, 14), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(288), int32], Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(1, 490), float32], Tensor[(5, 14), float64]) */
}

def @func_4910(%var_4908: Tensor[(14, 3, 6), uint32], %var_4909: Tensor[(14, 3, 6), uint32]) -> (Tensor[(14, 3, 6), uint32],) {
  @func_4906(%var_4908, %var_4909) /* ty=(Tensor[(14, 3, 6), uint32],) */
}

def @func_3775() -> (Tensor[(5, 14), float64],) {
  %610 = fn () -> (Tensor[(5, 14), float64],) {
    %608 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
    %609 = %608.0;
    (%609,)
  };
  %610() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_3852(%var_3851: Tensor[(210), float64]) -> (Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(16, 1, 13), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(52, 4), float64]) {
  %633 = fn (%var_3837: Tensor[(210), float64]) -> (Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(16, 1, 13), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(52, 4), float64]) {
    %611 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
    %612 = cast(meta[relay.Constant][38] /* ty=Tensor[(52, 4), int16] */, dtype="int16") /* ty=Tensor[(52, 4), int16] */;
    %613 = cast(meta[relay.Constant][39] /* ty=Tensor[(3328), int16] */, dtype="int16") /* ty=Tensor[(3328), int16] */;
    %614 = reshape(%612, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), int16] */;
    %615 = reshape(%613, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), int16] */;
    %616 = @func_954(%614, %615) /* ty=(Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) */;
    %617 = %616.1;
    %618 = cast(%617, dtype="int16") /* ty=Tensor[(16, 1, 13), int16] */;
    %619 = cast(meta[relay.Constant][39] /* ty=Tensor[(3328), int16] */, dtype="int16") /* ty=Tensor[(3328), int16] */;
    %620 = reshape(%618, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), int16] */;
    %621 = reshape(%619, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), int16] */;
    %622 = @func_954(%620, %621) /* ty=(Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) */;
    %623 = cast(meta[relay.Constant][40] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
    %624 = cast(%var_3837, dtype="float64") /* ty=Tensor[(210), float64] */;
    %625 = reshape(%623, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), float32] */;
    %626 = reshape(%624, newshape=[210]) /* ty=Tensor[(210), float64] */;
    %627 = @func_1498(%625, %626) /* ty=(Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) */;
    %628 = cast(meta[relay.Constant][38] /* ty=Tensor[(52, 4), int16] */, dtype="float64") /* ty=Tensor[(52, 4), float64] */;
    %629 = %611.2;
    %630 = %622.1;
    %631 = %627.2;
    %632 = rsqrt(%628) /* ty=Tensor[(52, 4), float64] */;
    (%629, %617, meta[relay.Constant][39] /* ty=Tensor[(3328), int16] */, %630, %631, meta[relay.Constant][40] /* ty=Tensor[(55), float32] */, %var_3837, %632)
  };
  %633(%var_3851) /* ty=(Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(16, 1, 13), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(52, 4), float64]) */
}

def @func_8342() -> Tensor[(5, 14), float64] {
  %634 = fn () -> Tensor[(5, 14), float64] {
    @func_2908() /* ty=Tensor[(5, 14), float64] */
  };
  %634() /* ty=Tensor[(5, 14), float64] */
}

def @func_8532() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52), float32]) {
  %635 = @func_8138() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %636 = @func_7074() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(14, 3, 6), int16], Tensor[(252), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), float32]) */;
  %637 = cast(meta[relay.Constant][41] /* ty=Tensor[(52), float32] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %638 = cast(meta[relay.Constant][41] /* ty=Tensor[(52), float32] */, dtype="float32") /* ty=Tensor[(52), float32] */;
  %639 = reshape(%637, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float32] */;
  %640 = reshape(%638, newshape=[2, 2, 13]) /* ty=Tensor[(2, 2, 13), float32] */;
  %641 = @func_6061(%639, %640) /* ty=(Tensor[(5, 14), float64], Tensor[(2, 2, 13), int16]) */;
  %642 = %635.1;
  %643 = %636.3;
  %644 = %641.0;
  (%642, %643, %644, meta[relay.Constant][41] /* ty=Tensor[(52), float32] */)
}

def @func_4275(%var_4264: Tensor[(3328), int16]) -> (Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(2, 104), float64]) {
  %645 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
  %646 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 104), int16] */, dtype="int16") /* ty=Tensor[(2, 104), int16] */;
  %647 = cast(%var_4264, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %648 = reshape(%646, newshape=[16, 1, 13]) /* ty=Tensor[(16, 1, 13), int16] */;
  %649 = reshape(%647, newshape=[16, 16, 13]) /* ty=Tensor[(16, 16, 13), int16] */;
  %650 = @func_954(%648, %649) /* ty=(Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) */;
  %651 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 104), int16] */, dtype="float64") /* ty=Tensor[(2, 104), float64] */;
  %652 = %645.2;
  %653 = %650.1;
  %654 = cosh(%651) /* ty=Tensor[(2, 104), float64] */;
  (%652, %653, %var_4264, %654)
}

def @func_6523(%var_6522: Tensor[(4, 14, 8), float32]) -> Tensor[(4, 14, 8), float32] {
  %659 = fn (%var_6517: Tensor[(4, 14, 8), float32]) -> Tensor[(4, 14, 8), float32] {
    %655 = cast(%var_6517, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
    %656 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(4, 14, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %657 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 8), float32] */;
    %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_divide(%657, %658) /* ty=Tensor[(4, 14, 8), float32] */
  };
  %659(%var_6522) /* ty=Tensor[(4, 14, 8), float32] */
}

def @func_2052(%var_2050: Tensor[(9, 8, 12), float32]) -> (Tensor[(9, 8, 12), float32], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) {
  @func_2049(%var_2050) /* ty=(Tensor[(9, 8, 12), float32], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */
}

def @func_8038(%var_8035: Tensor[(10, 16, 5), int16], %var_8036: Tensor[(10, 16, 5), int16], %var_8037: Tensor[(60, 10), float32]) -> (Tensor[(10, 16, 5), int16], Tensor[(16, 9, 2), bool], Tensor[(16), float64], Tensor[(35, 6), float64], Tensor[(60, 10), float32]) {
  %673 = fn (%var_8005: Tensor[(10, 16, 5), int16], %var_8006: Tensor[(10, 16, 5), int16], %var_8017: Tensor[(60, 10), float32]) -> (Tensor[(10, 16, 5), int16], Tensor[(16, 9, 2), bool], Tensor[(16), float64], Tensor[(35, 6), float64], Tensor[(60, 10), float32]) {
    %660 = cast(%var_8006, dtype="int16") /* ty=Tensor[(10, 16, 5), int16] */;
    %661 = shape_of(%var_8005, dtype="int32") /* ty=Tensor[(3), int32] */;
    %662 = cast(%var_8005, dtype="int16") /* ty=Tensor[(10, 16, 5), int16] */;
    %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %664 = cast(meta[relay.Constant][44] /* ty=Tensor[(16), float64] */, dtype="float64") /* ty=Tensor[(16), float64] */;
    %665 = cast(meta[relay.Constant][45] /* ty=Tensor[(35, 6), float64] */, dtype="float64") /* ty=Tensor[(35, 6), float64] */;
    %666 = cast(%var_8017, dtype="float32") /* ty=Tensor[(60, 10), float32] */;
    %667 = reshape(%664, newshape=[1, 4, 4]) /* ty=Tensor[(1, 4, 4), float64] */;
    %668 = reshape(%665, newshape=[210]) /* ty=Tensor[(210), float64] */;
    %669 = reshape(%666, newshape=[600]) /* ty=Tensor[(600), float32] */;
    %670 = @func_5216(%667, %668, %669) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(55), float32], Tensor[(55), float32], Tensor[(210), float64], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) */;
    %671 = left_shift(%662, %663) /* ty=Tensor[(10, 16, 5), int16] */;
    %672 = %670.3;
    (%671, %672, meta[relay.Constant][44] /* ty=Tensor[(16), float64] */, meta[relay.Constant][45] /* ty=Tensor[(35, 6), float64] */, %var_8017)
  };
  %673(%var_8035, %var_8036, %var_8037) /* ty=(Tensor[(10, 16, 5), int16], Tensor[(16, 9, 2), bool], Tensor[(16), float64], Tensor[(35, 6), float64], Tensor[(60, 10), float32]) */
}

def @func_4617(%var_4597: Tensor[(640), int32], %var_4602: Tensor[(640), int32], %var_4610: Tensor[(4, 10, 16), bool]) -> (Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(4, 10, 16), uint32], Tensor[(5, 14), float64]) {
  %674 = @func_3325() /* ty=(Tensor[(5, 14), float64],) */;
  %675 = cast(%var_4602, dtype="float64") /* ty=Tensor[(640), float64] */;
  %676 = shape_of(%var_4597, dtype="int32") /* ty=Tensor[(1), int32] */;
  %677 = cast(%var_4597, dtype="float64") /* ty=Tensor[(640), float64] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?), float64] */;
  %679 = cast(%var_4597, dtype="int32") /* ty=Tensor[(640), int32] */;
  %680 = cast(%var_4597, dtype="int32") /* ty=Tensor[(640), int32] */;
  %681 = reshape(%679, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %682 = reshape(%680, newshape=[4, 10, 16]) /* ty=Tensor[(4, 10, 16), int32] */;
  %683 = @func_1525(%681, %682) /* ty=Tensor[(4, 10, 16), bool] */;
  %684 = cast(%var_4610, dtype="uint32") /* ty=Tensor[(4, 10, 16), uint32] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="uint32") /* ty=Tensor[(4, 10, 16), uint32] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %688 = %674.0;
  %689 = mod(%677, %678) /* ty=Tensor[(640), float64] */;
  %690 = left_shift(%686, %687) /* ty=Tensor[(4, 10, 16), uint32] */;
  %691 = @func_4508() /* ty=Tensor[(5, 14), float64] */;
  (%688, %689, %690, %691)
}

def @func_4254(%var_4253: Tensor[(864), float32]) -> (Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) {
  %709 = fn (%var_4241: Tensor[(864), float32]) -> (Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) {
    %692 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 208), float32] */, dtype="float32") /* ty=Tensor[(1, 208), float32] */;
    %693 = reshape(%692, newshape=[4, 13, 4]) /* ty=Tensor[(4, 13, 4), float32] */;
    %694 = @func_3022() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %695 = cast(%var_4241, dtype="float32") /* ty=Tensor[(864), float32] */;
    %696 = reshape(%695, newshape=[9, 8, 12]) /* ty=Tensor[(9, 8, 12), float32] */;
    %697 = @func_2049(%696) /* ty=(Tensor[(9, 8, 12), float32], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */;
    %698 = cast(meta[relay.Constant][47] /* ty=Tensor[(750), int16] */, dtype="int16") /* ty=Tensor[(750), int16] */;
    %699 = reshape(%698, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
    %700 = @func_1832(%699) /* ty=(Tensor[(5, 10, 15), int16],) */;
    %701 = @func_4163() /* ty=(Tensor[(5, 14), float64],) */;
    %702 = @func_3932() /* ty=Tensor[(5, 14), float64] */;
    %703 = @func_1367(%693) /* ty=Tensor[(4, 13, 4), float32] */;
    %704 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
    %705 = %694.1;
    %706 = %697.0;
    %707 = %700.0;
    %708 = %701.0;
    (%702, %703, meta[relay.Constant][46] /* ty=Tensor[(1, 208), float32] */, %704, %705, %706, %var_4241, %707, meta[relay.Constant][47] /* ty=Tensor[(750), int16] */, %708)
  };
  %709(%var_4253) /* ty=(Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) */
}

def @func_9550() -> Tensor[(5, 14), float64] {
  %711 = fn () -> Tensor[(5, 14), float64] {
    %710 = @func_3101() /* ty=(Tensor[(5, 14), float64],) */;
    %710.0
  };
  %711() /* ty=Tensor[(5, 14), float64] */
}

def @func_2820(%var_2816: Tensor[(55), float32], %var_2817: Tensor[(210), float64], %var_2818: Tensor[(600), int8], %var_2819: Tensor[(108), float64]) -> (Tensor[(3, 5), float32], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(462), uint16], Tensor[(600), int8], Tensor[(1, 462), uint16], Tensor[(11, 3, 14), bool], Tensor[(108), float64]) {
  @func_2814(%var_2816, %var_2817, %var_2818, %var_2819) /* ty=(Tensor[(3, 5), float32], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(462), uint16], Tensor[(600), int8], Tensor[(1, 462), uint16], Tensor[(11, 3, 14), bool], Tensor[(108), float64]) */
}

def @func_7437() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %714 = fn () -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
    %712 = @func_6270() /* ty=Tensor[(5, 14), float64] */;
    %713 = @func_2698() /* ty=Tensor[(5, 14), float64] */;
    (%712, %713)
  };
  %714() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_7551(%var_7550: Tensor[(784, 1), uint8]) -> (Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], Tensor[(784, 1), float32], Tensor[(8, 2, 9), float32], Tensor[(5, 14), float64], Tensor[(784, 1), float64]) {
  %730 = fn (%var_7502: Tensor[(784, 1), uint8]) -> (Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], Tensor[(784, 1), float32], Tensor[(8, 2, 9), float32], Tensor[(5, 14), float64], Tensor[(784, 1), float64]) {
    %715 = @func_6014() /* ty=(Tensor[(5, 14), float64],) */;
    %716 = cast(meta[relay.Constant][48] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
    %717 = cast(%var_7502, dtype="uint8") /* ty=Tensor[(784, 1), uint8] */;
    %718 = reshape(%716, newshape=[]) /* ty=uint8 */;
    %719 = reshape(%717, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), uint8] */;
    %720 = @func_383(%718, %719) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) */;
    %721 = cast(%var_7502, dtype="float32") /* ty=Tensor[(784, 1), float32] */;
    %722 = cast(meta[relay.Constant][48] /* ty=uint8 */, dtype="float32") /* ty=float32 */;
    %723 = cast(%var_7502, dtype="float64") /* ty=Tensor[(784, 1), float64] */;
    %724 = %715.0;
    %725 = %720.2;
    %726 = floor_divide(%721, %722) /* ty=Tensor[(784, 1), float32] */;
    %727 = @func_5238() /* ty=Tensor[(8, 2, 9), float32] */;
    %728 = @func_4035() /* ty=Tensor[(5, 14), float64] */;
    %729 = exp(%723) /* ty=Tensor[(784, 1), float64] */;
    (%724, %725, %726, %727, %728, %729)
  };
  %730(%var_7550) /* ty=(Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], Tensor[(784, 1), float32], Tensor[(8, 2, 9), float32], Tensor[(5, 14), float64], Tensor[(784, 1), float64]) */
}

def @func_6100() -> (Tensor[(5, 14), float64],) {
  %731 = @func_3539() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %732 = %731.1;
  (%732,)
}

def @func_9595() -> (Tensor[(5, 14), float64], uint8, Tensor[(5, 14), float64], Tensor[(52), float64]) {
  @func_9593() /* ty=(Tensor[(5, 14), float64], uint8, Tensor[(5, 14), float64], Tensor[(52), float64]) */
}

def @func_2698() -> Tensor[(5, 14), float64] {
  @func_2345() /* ty=Tensor[(5, 14), float64] */
}

def @func_3508() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  @func_3506() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_9472() -> Tensor[(5, 14), float64] {
  %733 = @func_9027() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %733.1
}

def @func_7304() -> (Tensor[(5, 14), float64],) {
  @func_7302() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_2538(%var_2537: Tensor[(490), float32]) -> (Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(5, 14), float64], Tensor[(490), float32], Tensor[(5, 7, 14), bool]) {
  %759 = fn (%var_2468: Tensor[(490), float32]) -> (Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(5, 14), float64], Tensor[(490), float32], Tensor[(5, 7, 14), bool]) {
    %734 = cast(%var_2468, dtype="float32") /* ty=Tensor[(490), float32] */;
    %735 = cast(%var_2468, dtype="float32") /* ty=Tensor[(490), float32] */;
    %736 = cast(meta[relay.Constant][49] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %737 = reshape(%734, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
    %738 = reshape(%735, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
    %739 = reshape(%736, newshape=[288, 1]) /* ty=Tensor[(288, 1), int32] */;
    %740 = @func_937(%737, %738, %739) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) */;
    %741 = %740.1;
    %742 = cast(meta[relay.Constant][49] /* ty=Tensor[(288), int32] */, dtype="bool") /* ty=Tensor[(288), bool] */;
    %743 = shape_of(%741, dtype="int32") /* ty=Tensor[(2), int32] */;
    %744 = cast(%741, dtype="bool") /* ty=Tensor[(288, 1), bool] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %746 = cast(%var_2468, dtype="float32") /* ty=Tensor[(490), float32] */;
    %747 = cast(%var_2468, dtype="float32") /* ty=Tensor[(490), float32] */;
    %748 = acos(%746) /* ty=Tensor[(490), float32] */;
    %749 = cast(%748, dtype="float32") /* ty=Tensor[(490), float32] */;
    %750 = cast(meta[relay.Constant][49] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %751 = reshape(%747, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
    %752 = reshape(%749, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
    %753 = reshape(%750, newshape=[288, 1]) /* ty=Tensor[(288, 1), int32] */;
    %754 = @func_937(%751, %752, %753) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) */;
    %755 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
    %756 = not_equal(%744, %745) /* ty=Tensor[(288, ?), bool] */;
    %757 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
    %758 = %754.2;
    (%755, %756, %757, %748, %758)
  };
  %759(%var_2537) /* ty=(Tensor[(5, 14), float64], Tensor[(288, ?), bool], Tensor[(5, 14), float64], Tensor[(490), float32], Tensor[(5, 7, 14), bool]) */
}

def @func_5001() -> Tensor[(5, 14), float64] {
  %760 = fn () -> Tensor[(5, 14), float64] {
    @func_4373() /* ty=Tensor[(5, 14), float64] */
  };
  %760() /* ty=Tensor[(5, 14), float64] */
}

def @func_7075() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(14, 3, 6), int16], Tensor[(252), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), float32]) {
  %811 = fn () -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(14, 3, 6), int16], Tensor[(252), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), float32]) {
    %761 = @func_2988() /* ty=(Tensor[(5, 14), float64],) */;
    %762 = @func_6820() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %763 = @func_6820() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %764 = @func_4022() /* ty=(Tensor[(5, 14), float64],) */;
    %765 = cast(meta[relay.Constant][50] /* ty=Tensor[(252), uint32] */, dtype="uint32") /* ty=Tensor[(252), uint32] */;
    %766 = cast(meta[relay.Constant][50] /* ty=Tensor[(252), uint32] */, dtype="uint32") /* ty=Tensor[(252), uint32] */;
    %767 = reshape(%765, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), uint32] */;
    %768 = reshape(%766, newshape=[14, 3, 6]) /* ty=Tensor[(14, 3, 6), uint32] */;
    %769 = @func_4906(%767, %768) /* ty=(Tensor[(14, 3, 6), uint32],) */;
    %770 = %769.0;
    %771 = cast(meta[relay.Constant][50] /* ty=Tensor[(252), uint32] */, dtype="bool") /* ty=Tensor[(252), bool] */;
    %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %773 = cast(%770, dtype="bool") /* ty=Tensor[(14, 3, 6), bool] */;
    %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %775 = less_equal(%773, %774) /* ty=Tensor[(14, 3, 6), bool] */;
    %776 = cast(%770, dtype="int16") /* ty=Tensor[(14, 3, 6), int16] */;
    %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
    %778 = cast(%775, dtype="int16") /* ty=Tensor[(14, 3, 6), int16] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %780 = cast(%775, dtype="float32") /* ty=Tensor[(14, 3, 6), float32] */;
    %781 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(252), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %782 = cast(meta[relay.Constant][50] /* ty=Tensor[(252), uint32] */, dtype="float32") /* ty=Tensor[(252), float32] */;
    %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?), float32] */;
    %784 = cast(meta[relay.Constant][51] /* ty=Tensor[(1120), uint32] */, dtype="uint32") /* ty=Tensor[(1120), uint32] */;
    %785 = cast(meta[relay.Constant][52] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
    %786 = reshape(%784, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), uint32] */;
    %787 = reshape(%785, newshape=[640]) /* ty=Tensor[(640), int32] */;
    %788 = @func_2184(%786, %787) /* ty=(Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
    %789 = cast(meta[relay.Constant][52] /* ty=Tensor[(640), int32] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %790 = @func_3506() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %791 = cast(meta[relay.Constant][53] /* ty=Tensor[(750), int16] */, dtype="int16") /* ty=Tensor[(750), int16] */;
    %792 = reshape(%791, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
    %793 = @func_1832(%792) /* ty=(Tensor[(5, 10, 15), int16],) */;
    %794 = %793.0;
    %795 = cast(%794, dtype="float32") /* ty=Tensor[(5, 10, 15), float32] */;
    %796 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(750), int16] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %797 = cast(meta[relay.Constant][53] /* ty=Tensor[(750), int16] */, dtype="float32") /* ty=Tensor[(750), float32] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?), float32] */;
    %799 = %761.0;
    %800 = %762.0;
    %801 = %763.0;
    %802 = %764.0;
    %803 = right_shift(%778, %779) /* ty=Tensor[(14, 3, 6), int16] */;
    %804 = divide(%782, %783) /* ty=Tensor[(252), float32] */;
    %805 = %788.0;
    %806 = @func_2932() /* ty=Tensor[(5, 14), float64] */;
    %807 = log10(%789) /* ty=Tensor[(640), float64] */;
    %808 = @func_6270() /* ty=Tensor[(5, 14), float64] */;
    %809 = %790.0;
    %810 = power(%797, %798) /* ty=Tensor[(750), float32] */;
    (%799, %800, %801, %802, %803, %804, %805, meta[relay.Constant][51] /* ty=Tensor[(1120), uint32] */, %806, %807, %808, %809, %810)
  };
  %811() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(14, 3, 6), int16], Tensor[(252), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), float32]) */
}

def @func_3272(%var_3268: Tensor[(288), int32]) -> (Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) {
  %812 = cast(%var_3268, dtype="int32") /* ty=Tensor[(288), int32] */;
  %813 = reshape(%812, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
  %814 = @func_2693() /* ty=Tensor[(5, 14), float64] */;
  %815 = @func_272(%813) /* ty=Tensor[(16, 9, 2), bool] */;
  (%814, %815, %var_3268)
}

def @func_6309() -> Tensor[(5, 14), float64] {
  @func_6307() /* ty=Tensor[(5, 14), float64] */
}

def @func_5415() -> (Tensor[(5, 14), float64],) {
  %816 = @func_3325() /* ty=(Tensor[(5, 14), float64],) */;
  %817 = %816.0;
  (%817,)
}

def @func_1708(%var_1702: Tensor[(15, 14, 10), int64]) -> (Tensor[(15, 14, 10), int64],) {
  %818 = cast(%var_1702, dtype="int64") /* ty=Tensor[(15, 14, 10), int64] */;
  %819 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(15, 14, 10), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %820 = cast(meta[relay.Constant][54] /* ty=Tensor[(15, 14, 10), int64] */, dtype="int64") /* ty=Tensor[(15, 14, 10), int64] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %822 = logical_xor(%820, %821) /* ty=Tensor[(15, 14, 10), int64] */;
  (%822,)
}

def @func_2990() -> (Tensor[(5, 14), float64],) {
  @func_2988() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_4509() -> Tensor[(5, 14), float64] {
  %823 = fn () -> Tensor[(5, 14), float64] {
    @func_3295() /* ty=Tensor[(5, 14), float64] */
  };
  %823() /* ty=Tensor[(5, 14), float64] */
}

def @func_5703(%var_5701: Tensor[(5, 16, 6), int8], %var_5702: Tensor[(5, 16, 6), int8]) -> (Tensor[(5, 16, 6), uint16],) {
  @func_5699(%var_5701, %var_5702) /* ty=(Tensor[(5, 16, 6), uint16],) */
}

def @func_3757(%var_3754: Tensor[(55), float32], %var_3755: Tensor[(210), float64], %var_3756: Tensor[(288), int32]) -> (Tensor[(640), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(490), float32], Tensor[(288), int32]) {
  %846 = fn (%var_3718: Tensor[(55), float32], %var_3719: Tensor[(210), float64], %var_3749: Tensor[(288), int32]) -> (Tensor[(640), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(490), float32], Tensor[(288), int32]) {
    %824 = @func_3472() /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) */;
    %825 = %824.2;
    %826 = cast(%825, dtype="float64") /* ty=Tensor[(640), float64] */;
    %827 = cast(%var_3718, dtype="float32") /* ty=Tensor[(55), float32] */;
    %828 = cast(%var_3719, dtype="float64") /* ty=Tensor[(210), float64] */;
    %829 = reshape(%827, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), float32] */;
    %830 = reshape(%828, newshape=[210]) /* ty=Tensor[(210), float64] */;
    %831 = @func_1498(%829, %830) /* ty=(Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) */;
    %832 = @func_2988() /* ty=(Tensor[(5, 14), float64],) */;
    %833 = @func_2988() /* ty=(Tensor[(5, 14), float64],) */;
    %834 = cast(meta[relay.Constant][55] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %835 = cast(meta[relay.Constant][55] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %836 = cast(%var_3749, dtype="int32") /* ty=Tensor[(288), int32] */;
    %837 = reshape(%834, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
    %838 = reshape(%835, newshape=[5, 7, 14]) /* ty=Tensor[(5, 7, 14), float32] */;
    %839 = reshape(%836, newshape=[288, 1]) /* ty=Tensor[(288, 1), int32] */;
    %840 = @func_937(%837, %838, %839) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) */;
    %841 = sinh(%826) /* ty=Tensor[(640), float64] */;
    %842 = %831.2;
    %843 = %832.0;
    %844 = %833.0;
    %845 = %840.0;
    (%841, %842, %var_3718, %var_3719, %843, %844, %845, meta[relay.Constant][55] /* ty=Tensor[(490), float32] */, %var_3749)
  };
  %846(%var_3754, %var_3755, %var_3756) /* ty=(Tensor[(640), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(210), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(490), float32], Tensor[(288), int32]) */
}

def @func_8163() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %850 = fn () -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
    %847 = @func_3774() /* ty=(Tensor[(5, 14), float64],) */;
    %848 = @func_3382() /* ty=Tensor[(5, 14), float64] */;
    %849 = %847.0;
    (%848, %849)
  };
  %850() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_7285(%var_7278: Tensor[(864), float32]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(567), bool], Tensor[(5, 14), float64], Tensor[(864), float32]) {
  %851 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %852 = @func_6184() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52, 1), float32]) */;
  %853 = cast(meta[relay.Constant][56] /* ty=Tensor[(462), uint16] */, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %854 = cast(meta[relay.Constant][56] /* ty=Tensor[(462), uint16] */, dtype="uint16") /* ty=Tensor[(462), uint16] */;
  %855 = cast(meta[relay.Constant][56] /* ty=Tensor[(462), uint16] */, dtype="bool") /* ty=Tensor[(462), bool] */;
  %856 = reshape(%853, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %857 = reshape(%854, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), uint16] */;
  %858 = reshape(%855, newshape=[11, 3, 14]) /* ty=Tensor[(11, 3, 14), bool] */;
  %859 = @func_712(%856, %857, %858) /* ty=(Tensor[(11, 3, 14), bool],) */;
  %860 = cast(meta[relay.Constant][57] /* ty=Tensor[(567), float32] */, dtype="float32") /* ty=Tensor[(567), float32] */;
  %861 = reshape(%860, newshape=[9, 9, 7]) /* ty=Tensor[(9, 9, 7), float32] */;
  %862 = @func_4756(%861) /* ty=(Tensor[(9, 9, 7), int32], Tensor[(5, 14), float64], Tensor[(640), int32]) */;
  %863 = cast(meta[relay.Constant][57] /* ty=Tensor[(567), float32] */, dtype="float32") /* ty=Tensor[(567), float32] */;
  %864 = reshape(%863, newshape=[9, 9, 7]) /* ty=Tensor[(9, 9, 7), float32] */;
  %865 = @func_4756(%864) /* ty=(Tensor[(9, 9, 7), int32], Tensor[(5, 14), float64], Tensor[(640), int32]) */;
  %866 = cast(meta[relay.Constant][58] /* ty=Tensor[(567), float32] */, dtype="bool") /* ty=Tensor[(567), bool] */;
  %867 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(567), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %868 = cast(meta[relay.Constant][57] /* ty=Tensor[(567), float32] */, dtype="bool") /* ty=Tensor[(567), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?), bool] */;
  %870 = cast(%var_7278, dtype="float32") /* ty=Tensor[(864), float32] */;
  %871 = reshape(%870, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %872 = @func_4252(%871) /* ty=(Tensor[(5, 14), float64], Tensor[(4, 13, 4), float32], Tensor[(1, 208), float32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(9, 8, 12), float32], Tensor[(864), float32], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64]) */;
  %873 = %851.0;
  %874 = %852.0;
  %875 = %859.0;
  %876 = %862.1;
  %877 = %865.1;
  %878 = equal(%868, %869) /* ty=Tensor[(567), bool] */;
  %879 = %872.9;
  (%873, %874, %875, meta[relay.Constant][56] /* ty=Tensor[(462), uint16] */, %876, %877, %878, %879, %var_7278)
}

def @func_7979(%var_7916: Tensor[(3, 7, 4), uint32], %var_7917: Tensor[(3, 7, 4), uint32], %var_7934: Tensor[(640), int32], %var_7937: Tensor[(36, 24), float32]) -> (Tensor[(3, 7, 4), uint16], Tensor[(2100), float32], Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(36, 24), float32], Tensor[(640), int32], Tensor[(3328), int16], uint8, Tensor[(784), uint8], Tensor[(16, 9, 2), float64]) {
  %880 = cast(%var_7917, dtype="uint32") /* ty=Tensor[(3, 7, 4), uint32] */;
  %881 = shape_of(%var_7916, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%var_7916, dtype="uint32") /* ty=Tensor[(3, 7, 4), uint32] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %884 = left_shift(%882, %883) /* ty=Tensor[(3, 7, 4), uint32] */;
  %885 = cast(%884, dtype="uint16") /* ty=Tensor[(3, 7, 4), uint16] */;
  %886 = shape_of(%var_7917, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(%var_7917, dtype="uint16") /* ty=Tensor[(3, 7, 4), uint16] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %889 = cast(%var_7934, dtype="int32") /* ty=Tensor[(640), int32] */;
  %890 = reshape(%889, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %891 = @func_2890(%890) /* ty=(Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
  %892 = cast(%var_7937, dtype="float32") /* ty=Tensor[(36, 24), float32] */;
  %893 = reshape(%892, newshape=[864]) /* ty=Tensor[(864), float32] */;
  %894 = @func_7285(%893) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 3, 14), bool], Tensor[(462), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(567), bool], Tensor[(5, 14), float64], Tensor[(864), float32]) */;
  %895 = cast(meta[relay.Constant][59] /* ty=Tensor[(3328), int16] */, dtype="int16") /* ty=Tensor[(3328), int16] */;
  %896 = reshape(%895, newshape=[3328]) /* ty=Tensor[(3328), int16] */;
  %897 = @func_4275(%896) /* ty=(Tensor[(640), int32], Tensor[(16, 1, 13), float64], Tensor[(3328), int16], Tensor[(2, 104), float64]) */;
  %898 = cast(meta[relay.Constant][60] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %899 = cast(meta[relay.Constant][61] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
  %900 = reshape(%898, newshape=[]) /* ty=uint8 */;
  %901 = reshape(%899, newshape=[8, 14, 7]) /* ty=Tensor[(8, 14, 7), uint8] */;
  %902 = @func_383(%900, %901) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(8, 14, 7), float32]) */;
  %903 = %902.0;
  %904 = cast(%903, dtype="float64") /* ty=Tensor[(16, 9, 2), float64] */;
  %905 = right_shift(%887, %888) /* ty=Tensor[(3, 7, 4), uint16] */;
  %906 = %891.2;
  %907 = %894.7;
  %908 = %897.0;
  %909 = sigmoid(%904) /* ty=Tensor[(16, 9, 2), float64] */;
  (%905, %906, %var_7934, %907, %var_7937, %908, meta[relay.Constant][59] /* ty=Tensor[(3328), int16] */, meta[relay.Constant][60] /* ty=uint8 */, meta[relay.Constant][61] /* ty=Tensor[(784), uint8] */, %909)
}

def @func_4037() -> Tensor[(5, 14), float64] {
  @func_4035() /* ty=Tensor[(5, 14), float64] */
}

def @func_7870(%var_7868: Tensor[(750), int16]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), int16]) {
  @func_7867(%var_7868) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), int16]) */
}

def @func_3275(%var_3273: Tensor[(288), int32]) -> (Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) {
  @func_3272(%var_3273) /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(288), int32]) */
}

def @func_8534() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52), float32]) {
  @func_8532() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52), float32]) */
}

def @func_2188(%var_2186: Tensor[(16, 5, 14), uint32], %var_2187: Tensor[(640), int32]) -> (Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) {
  @func_2184(%var_2186, %var_2187) /* ty=(Tensor[(16, 5, 14), uint32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */
}

def @func_4799() -> (Tensor[(5, 14), float64],) {
  %911 = fn () -> (Tensor[(5, 14), float64],) {
    %910 = @func_4528() /* ty=Tensor[(5, 14), float64] */;
    (%910,)
  };
  %911() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_2346() -> Tensor[(5, 14), float64] {
  %913 = fn () -> Tensor[(5, 14), float64] {
    %912 = cast(meta[relay.Constant][62] /* ty=Tensor[(5, 14), float64] */, dtype="float64") /* ty=Tensor[(5, 14), float64] */;
    sigmoid(%912) /* ty=Tensor[(5, 14), float64] */
  };
  %913() /* ty=Tensor[(5, 14), float64] */
}

def @func_6774(%var_6772: Tensor[(14, 15, 9), int64], %var_6773: Tensor[(14, 15, 9), int64]) -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float32]) {
  %921 = fn (%var_6748: Tensor[(14, 15, 9), int64], %var_6749: Tensor[(14, 15, 9), int64]) -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float32]) {
    %914 = cast(%var_6749, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
    %915 = shape_of(%var_6748, dtype="int32") /* ty=Tensor[(3), int32] */;
    %916 = cast(%var_6748, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
    %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %918 = cast(%var_6748, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
    %919 = minimum(%916, %917) /* ty=Tensor[(14, 15, 9), int64] */;
    %920 = atanh(%918) /* ty=Tensor[(14, 15, 9), float32] */;
    (%919, %920)
  };
  %921(%var_6772, %var_6773) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float32]) */
}

def @func_957(%var_955: Tensor[(16, 1, 13), int16], %var_956: Tensor[(16, 16, 13), int16]) -> (Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) {
  %927 = fn (%var_944: Tensor[(16, 1, 13), int16], %var_945: Tensor[(16, 16, 13), int16]) -> (Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) {
    %922 = cast(%var_944, dtype="bool") /* ty=Tensor[(16, 1, 13), bool] */;
    %923 = cast(%var_945, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
    %924 = cast(%var_944, dtype="float64") /* ty=Tensor[(16, 1, 13), float64] */;
    %925 = not_equal(%922, %923) /* ty=Tensor[(16, 16, 13), bool] */;
    %926 = cosh(%924) /* ty=Tensor[(16, 1, 13), float64] */;
    (%925, %926)
  };
  %927(%var_955, %var_956) /* ty=(Tensor[(16, 16, 13), bool], Tensor[(16, 1, 13), float64]) */
}

def @func_7853() -> (Tensor[(5, 14), float64],) {
  %928 = @func_5389() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %929 = %928.0;
  (%929,)
}

def @func_8647(%var_8641: Tensor[(8, 2, 9), float32]) -> (Tensor[(8, 2, 9), bool],) {
  %930 = @func_5809() /* ty=Tensor[(8, 2, 9), float32] */;
  %931 = cast(%var_8641, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
  %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%930, dtype="bool") /* ty=Tensor[(8, 2, 9), bool] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %935 = not_equal(%933, %934) /* ty=Tensor[(8, 2, 9), bool] */;
  (%935,)
}

def @func_942(%var_939: Tensor[(5, 7, 14), float32], %var_940: Tensor[(5, 7, 14), float32], %var_941: Tensor[(288, 1), int32]) -> (Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) {
  @func_937(%var_939, %var_940, %var_941) /* ty=(Tensor[(16, 9, 2), bool], Tensor[(288, 1), int32], Tensor[(5, 7, 14), bool]) */
}

def @func_5517(%var_5515: Tensor[(16, 9, 2), bool]) -> (Tensor[(5, 14), float64], Tensor[(16, 9, 2), float64], Tensor[(5, 14), float64]) {
  @func_5514(%var_5515) /* ty=(Tensor[(5, 14), float64], Tensor[(16, 9, 2), float64], Tensor[(5, 14), float64]) */
}

def @func_6102() -> (Tensor[(5, 14), float64],) {
  @func_6100() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_4035() -> Tensor[(5, 14), float64] {
  %936 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %936.1
}

def @func_5220(%var_5217: Tensor[(1, 4, 4), float64], %var_5218: Tensor[(210), float64], %var_5219: Tensor[(600), float32]) -> (Tensor[(1, 4, 4), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(55), float32], Tensor[(55), float32], Tensor[(210), float64], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) {
  %956 = fn (%var_5173: Tensor[(1, 4, 4), float64], %var_5199: Tensor[(210), float64], %var_5202: Tensor[(600), float32]) -> (Tensor[(1, 4, 4), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(55), float32], Tensor[(55), float32], Tensor[(210), float64], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) {
    %937 = cast(%var_5173, dtype="float64") /* ty=Tensor[(1, 4, 4), float64] */;
    %938 = cast(meta[relay.Constant][63] /* ty=Tensor[(750), int16] */, dtype="int16") /* ty=Tensor[(750), int16] */;
    %939 = reshape(%938, newshape=[5, 10, 15]) /* ty=Tensor[(5, 10, 15), int16] */;
    %940 = @func_1832(%939) /* ty=(Tensor[(5, 10, 15), int16],) */;
    %941 = cast(meta[relay.Constant][64] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %942 = reshape(%941, newshape=[16, 9, 2]) /* ty=Tensor[(16, 9, 2), int32] */;
    %943 = cast(meta[relay.Constant][65] /* ty=Tensor[(55), float32] */, dtype="float32") /* ty=Tensor[(55), float32] */;
    %944 = cast(%var_5199, dtype="float64") /* ty=Tensor[(210), float64] */;
    %945 = reshape(%943, newshape=[55]) /* ty=Tensor[(55), float32] */;
    %946 = reshape(%944, newshape=[1, 210]) /* ty=Tensor[(1, 210), float64] */;
    %947 = @func_2642(%945, %946) /* ty=(Tensor[(5, 14), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(1, 210), float64]) */;
    %948 = cast(%var_5202, dtype="float32") /* ty=Tensor[(600), float32] */;
    %949 = reshape(%948, newshape=[12, 5, 10]) /* ty=Tensor[(12, 5, 10), float32] */;
    %950 = @func_1400(%949) /* ty=(Tensor[(12, 5, 10), float32],) */;
    %951 = erf(%937) /* ty=Tensor[(1, 4, 4), float64] */;
    %952 = %940.0;
    %953 = @func_272(%942) /* ty=Tensor[(16, 9, 2), bool] */;
    %954 = %947.2;
    %955 = %950.0;
    (%951, %952, meta[relay.Constant][63] /* ty=Tensor[(750), int16] */, %953, meta[relay.Constant][64] /* ty=Tensor[(288), int32] */, %954, meta[relay.Constant][65] /* ty=Tensor[(55), float32] */, %var_5199, %955, %var_5202)
  };
  %956(%var_5217, %var_5218, %var_5219) /* ty=(Tensor[(1, 4, 4), float64], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(16, 9, 2), bool], Tensor[(288), int32], Tensor[(55), float32], Tensor[(55), float32], Tensor[(210), float64], Tensor[(12, 5, 10), float32], Tensor[(600), float32]) */
}

def @func_5620() -> (Tensor[(5, 14), float64],) {
  @func_5618() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_2893(%var_2891: Tensor[(640), int32]) -> (Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) {
  @func_2890(%var_2891) /* ty=(Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */
}

def @func_3024() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  @func_3022() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_8891(%var_8890: Tensor[(50, 15), int16]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(50, 15), int16], Tensor[(8, 14, 7), float32], Tensor[(784), uint8], Tensor[(11, 7, 1), float64], Tensor[(77, 1), float64], Tensor[(750), float32]) {
  %973 = fn (%var_8847: Tensor[(50, 15), int16]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(50, 15), int16], Tensor[(8, 14, 7), float32], Tensor[(784), uint8], Tensor[(11, 7, 1), float64], Tensor[(77, 1), float64], Tensor[(750), float32]) {
    %957 = @func_2988() /* ty=(Tensor[(5, 14), float64],) */;
    %958 = cast(%var_8847, dtype="int16") /* ty=Tensor[(50, 15), int16] */;
    %959 = reshape(%958, newshape=[750]) /* ty=Tensor[(750), int16] */;
    %960 = @func_7867(%959) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), int16]) */;
    %961 = cast(meta[relay.Constant][66] /* ty=Tensor[(784), uint8] */, dtype="uint8") /* ty=Tensor[(784), uint8] */;
    %962 = reshape(%961, newshape=[784, 1]) /* ty=Tensor[(784, 1), uint8] */;
    %963 = @func_7549(%962) /* ty=(Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], Tensor[(784, 1), float32], Tensor[(8, 2, 9), float32], Tensor[(5, 14), float64], Tensor[(784, 1), float64]) */;
    %964 = cast(meta[relay.Constant][67] /* ty=Tensor[(77, 1), float64] */, dtype="float64") /* ty=Tensor[(77, 1), float64] */;
    %965 = reshape(%964, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
    %966 = @func_7074() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(14, 3, 6), int16], Tensor[(252), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(5, 14), float64], Tensor[(640), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(750), float32]) */;
    %967 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
    %968 = %957.0;
    %969 = %960.0;
    %970 = %963.1;
    %971 = @func_4431(%965) /* ty=Tensor[(11, 7, 1), float64] */;
    %972 = %966.12;
    (%967, %968, %969, %var_8847, %970, meta[relay.Constant][66] /* ty=Tensor[(784), uint8] */, %971, meta[relay.Constant][67] /* ty=Tensor[(77, 1), float64] */, %972)
  };
  %973(%var_8890) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(50, 15), int16], Tensor[(8, 14, 7), float32], Tensor[(784), uint8], Tensor[(11, 7, 1), float64], Tensor[(77, 1), float64], Tensor[(750), float32]) */
}

def @main() -> Tensor[(640), int16] {
  %974 = @func_9201() /* ty=(Tensor[(640), int32], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %975 = %974.0;
  %976 = cast(meta[relay.Constant][68] /* ty=Tensor[(640), int32] */, dtype="int16") /* ty=Tensor[(640), int16] */;
  %977 = shape_of(%975, dtype="int32") /* ty=Tensor[(1), int32] */;
  %978 = cast(%975, dtype="int16") /* ty=Tensor[(640), int16] */;
  %979 = dyn.reshape(%976, %977, newshape=[]) /* ty=Tensor[(?), int16] */;
  bitwise_xor(%978, %979) /* ty=Tensor[(640), int16] */
}

def @func_8715(%var_8713: Tensor[(20, 32), int32], %var_8714: Tensor[(288), int32]) -> (Tensor[(20, 32), int16], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64], Tensor[(20, 32), float64], Tensor[(288), int32], Tensor[(288), int32]) {
  @func_8711(%var_8713, %var_8714) /* ty=(Tensor[(20, 32), int16], Tensor[(5, 10, 15), int16], Tensor[(750), int16], Tensor[(5, 14), float64], Tensor[(20, 32), float64], Tensor[(288), int32], Tensor[(288), int32]) */
}

def @func_7382() -> (Tensor[(5, 14), float64],) {
  @func_7380() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_1235(%var_1234: Tensor[(1, 15, 14), float64]) -> (Tensor[(1, 15, 14), float64],) {
  %982 = fn (%var_1230: Tensor[(1, 15, 14), float64]) -> (Tensor[(1, 15, 14), float64],) {
    %980 = cast(%var_1230, dtype="float64") /* ty=Tensor[(1, 15, 14), float64] */;
    %981 = log10(%980) /* ty=Tensor[(1, 15, 14), float64] */;
    (%981,)
  };
  %982(%var_1234) /* ty=(Tensor[(1, 15, 14), float64],) */
}

def @func_6186() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52, 1), float32]) {
  @func_6184() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(52, 1), float32]) */
}

def @func_2407(%var_2406: Tensor[(2100, 1), int64]) -> (Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100, ?), float64]) {
  %993 = fn (%var_2391: Tensor[(2100, 1), int64]) -> (Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100, ?), float64]) {
    %983 = cast(meta[relay.Constant][69] /* ty=Tensor[(2100, 1), int64] */, dtype="int64") /* ty=Tensor[(2100, 1), int64] */;
    %984 = reshape(%983, newshape=[15, 14, 10]) /* ty=Tensor[(15, 14, 10), int64] */;
    %985 = @func_1708(%984) /* ty=(Tensor[(15, 14, 10), int64],) */;
    %986 = cast(%var_2391, dtype="float64") /* ty=Tensor[(2100, 1), float64] */;
    %987 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(2100, 1), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %988 = cast(meta[relay.Constant][69] /* ty=Tensor[(2100, 1), int64] */, dtype="float64") /* ty=Tensor[(2100, 1), float64] */;
    %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %990 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
    %991 = %985.0;
    %992 = divide(%988, %989) /* ty=Tensor[(2100, ?), float64] */;
    (%990, %991, %992)
  };
  %993(%var_2406) /* ty=(Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100, ?), float64]) */
}

def @func_5417() -> (Tensor[(5, 14), float64],) {
  @func_5415() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_3472() -> (Tensor[(5, 14), float64], Tensor[(16, 9, 2), bool], Tensor[(640), int32]) {
  %994 = @func_3242() /* ty=(Tensor[(5, 14), float64],) */;
  %995 = cast(meta[relay.Constant][70] /* ty=Tensor[(640), int32] */, dtype="int32") /* ty=Tensor[(640), int32] */;
  %996 = reshape(%995, newshape=[640]) /* ty=Tensor[(640), int32] */;
  %997 = @func_2890(%996) /* ty=(Tensor[(5, 14), float64], Tensor[(15, 14, 10), int64], Tensor[(2100), float32], Tensor[(16, 9, 2), bool], Tensor[(864), float32], Tensor[(4, 10, 16), bool], Tensor[(640), int32]) */;
  %998 = %994.0;
  %999 = %997.3;
  (%998, %999, meta[relay.Constant][70] /* ty=Tensor[(640), int32] */)
}

def @func_6577(%var_6575: Tensor[(13, 1, 8), int8], %var_6576: Tensor[(13, 1, 8), int8]) -> (Tensor[(13, ?, 8), int8], Tensor[(13, 1, 8), float64]) {
  @func_6573(%var_6575, %var_6576) /* ty=(Tensor[(13, ?, 8), int8], Tensor[(13, 1, 8), float64]) */
}

def @func_3236() -> (Tensor[(5, 14), float64],) {
  @func_3234() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_8211() -> Tensor[(5, 14), float64] {
  %1000 = @func_6072() /* ty=(Tensor[(5, 14), float64],) */;
  %1000.0
}

def @func_9421(%var_9419: Tensor[(2, 2, 15), float64]) -> (Tensor[(2, 2, 15), float64],) {
  @func_9418(%var_9419) /* ty=(Tensor[(2, 2, 15), float64],) */
}

def @func_3297() -> Tensor[(5, 14), float64] {
  @func_3295() /* ty=Tensor[(5, 14), float64] */
}

def @func_9226() -> (Tensor[(5, 14), float64],) {
  %1003 = fn () -> (Tensor[(5, 14), float64],) {
    %1001 = @func_3022() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %1002 = %1001.0;
    (%1002,)
  };
  %1003() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_5338(%var_5336: Tensor[(660), uint16]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(864), float32], Tensor[(5, 11, 12), uint16], Tensor[(660), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32]) {
  @func_5335(%var_5336) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(864), float32], Tensor[(5, 11, 12), uint16], Tensor[(660), uint16], Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(640), int32]) */
}

def @func_7656() -> (Tensor[(5, 14), float64], Tensor[(20, 32), int32]) {
  @func_7654() /* ty=(Tensor[(5, 14), float64], Tensor[(20, 32), int32]) */
}

def @func_7654() -> (Tensor[(5, 14), float64], Tensor[(20, 32), int32]) {
  %1004 = @func_7321() /* ty=(Tensor[(5, 14), float64],) */;
  %1005 = @func_3982() /* ty=(Tensor[(5, 14), float32], Tensor[(16, 5, 14), uint32], Tensor[(1120), uint32], Tensor[(20, 32), int32]) */;
  %1006 = %1004.0;
  %1007 = %1005.3;
  (%1006, %1007)
}

def @func_1835(%var_1833: Tensor[(5, 10, 15), int16]) -> (Tensor[(5, 10, 15), int16],) {
  @func_1832(%var_1833) /* ty=(Tensor[(5, 10, 15), int16],) */
}

def @func_1369(%var_1368: Tensor[(4, 13, 4), float32]) -> Tensor[(4, 13, 4), float32] {
  %1011 = fn (%var_1345: Tensor[(4, 13, 4), float32]) -> Tensor[(4, 13, 4), float32] {
    %1008 = cast(%var_1345, dtype="float32") /* ty=Tensor[(4, 13, 4), float32] */;
    %1009 = sigmoid(%1008) /* ty=Tensor[(4, 13, 4), float32] */;
    %1010 = cast(%1009, dtype="float32") /* ty=Tensor[(4, 13, 4), float32] */;
    rsqrt(%1010) /* ty=Tensor[(4, 13, 4), float32] */
  };
  %1011(%var_1368) /* ty=Tensor[(4, 13, 4), float32] */
}

def @func_9593() -> (Tensor[(5, 14), float64], uint8, Tensor[(5, 14), float64], Tensor[(52), float64]) {
  %1012 = @func_2972() /* ty=(Tensor[(5, 14), float64],) */;
  %1013 = @func_4715() /* ty=(Tensor[(5, 14), float64], Tensor[(8, 14, 7), float32], uint8, Tensor[(784), uint8]) */;
  %1014 = @func_8561() /* ty=(Tensor[(52), float64],) */;
  %1015 = %1012.0;
  %1016 = %1013.2;
  %1017 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
  %1018 = %1014.0;
  (%1015, %1016, %1017, %1018)
}

def @func_7795() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %1019 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %1020 = @func_5415() /* ty=(Tensor[(5, 14), float64],) */;
  %1021 = @func_5000() /* ty=Tensor[(5, 14), float64] */;
  %1022 = %1019.0;
  %1023 = %1020.0;
  (%1021, %1022, %1023)
}

def @func_4022() -> (Tensor[(5, 14), float64],) {
  %1024 = @func_3234() /* ty=(Tensor[(5, 14), float64],) */;
  %1025 = %1024.0;
  (%1025,)
}

def @func_3934() -> Tensor[(5, 14), float64] {
  @func_3932() /* ty=Tensor[(5, 14), float64] */
}

def @func_6307() -> Tensor[(5, 14), float64] {
  @func_4035() /* ty=Tensor[(5, 14), float64] */
}

def @func_9119(%var_9117: Tensor[(11, 6, 16), uint64], %var_9118: Tensor[(11, 6, 16), uint64]) -> (Tensor[(11, 6, 16), uint64], Tensor[(5, 14), float64]) {
  @func_9115(%var_9117, %var_9118) /* ty=(Tensor[(11, 6, 16), uint64], Tensor[(5, 14), float64]) */
}

def @func_6503() -> (Tensor[(5, 14), float64],) {
  %1028 = fn () -> (Tensor[(5, 14), float64],) {
    %1026 = @func_6100() /* ty=(Tensor[(5, 14), float64],) */;
    %1027 = %1026.0;
    (%1027,)
  };
  %1028() /* ty=(Tensor[(5, 14), float64],) */
}

def @func_9073() -> Tensor[(5, 14), float64] {
  @func_9071() /* ty=Tensor[(5, 14), float64] */
}

def @func_2431(%var_2430: uint32) -> Tensor[(15, 5, 1), uint32] {
  %1031 = fn (%var_2422: uint32) -> Tensor[(15, 5, 1), uint32] {
    %1029 = cast(%var_2422, dtype="uint32") /* ty=uint32 */;
    %1030 = cast(meta[relay.Constant][71] /* ty=Tensor[(15, 5, 1), uint32] */, dtype="uint32") /* ty=Tensor[(15, 5, 1), uint32] */;
    right_shift(%1029, %1030) /* ty=Tensor[(15, 5, 1), uint32] */
  };
  %1031(%var_2430) /* ty=Tensor[(15, 5, 1), uint32] */
}

def @func_4870() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %1035 = fn () -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
    %1032 = @func_3539() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %1033 = %1032.0;
    %1034 = @func_2693() /* ty=Tensor[(5, 14), float64] */;
    (%1033, %1034)
  };
  %1035() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */
}

def @func_4433(%var_4432: Tensor[(11, 7, 1), float64]) -> Tensor[(11, 7, 1), float64] {
  %1039 = fn (%var_4405: Tensor[(11, 7, 1), float64]) -> Tensor[(11, 7, 1), float64] {
    %1036 = cast(%var_4405, dtype="float64") /* ty=Tensor[(11, 7, 1), float64] */;
    %1037 = sin(%1036) /* ty=Tensor[(11, 7, 1), float64] */;
    %1038 = cast(%1037, dtype="float64") /* ty=Tensor[(11, 7, 1), float64] */;
    atanh(%1038) /* ty=Tensor[(11, 7, 1), float64] */
  };
  %1039(%var_4432) /* ty=Tensor[(11, 7, 1), float64] */
}

def @func_2694() -> Tensor[(5, 14), float64] {
  %1040 = fn () -> Tensor[(5, 14), float64] {
    @func_2345() /* ty=Tensor[(5, 14), float64] */
  };
  %1040() /* ty=Tensor[(5, 14), float64] */
}

def @func_8277(%var_8276: Tensor[(77), float64]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 7, 1), float64], Tensor[(77), float64], Tensor[(5, 14), float64]) {
  %1048 = fn (%var_8268: Tensor[(77), float64]) -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 7, 1), float64], Tensor[(77), float64], Tensor[(5, 14), float64]) {
    %1041 = @func_8162() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
    %1042 = cast(%var_8268, dtype="float64") /* ty=Tensor[(77), float64] */;
    %1043 = reshape(%1042, newshape=[11, 7, 1]) /* ty=Tensor[(11, 7, 1), float64] */;
    %1044 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
    %1045 = %1041.0;
    %1046 = @func_4431(%1043) /* ty=Tensor[(11, 7, 1), float64] */;
    %1047 = @func_8211() /* ty=Tensor[(5, 14), float64] */;
    (%1044, %1045, %1046, %var_8268, %1047)
  };
  %1048(%var_8276) /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64], Tensor[(11, 7, 1), float64], Tensor[(77), float64], Tensor[(5, 14), float64]) */
}

def @func_2988() -> (Tensor[(5, 14), float64],) {
  %1049 = @func_2693() /* ty=Tensor[(5, 14), float64] */;
  (%1049,)
}

def @func_7302() -> (Tensor[(5, 14), float64],) {
  %1050 = @func_3325() /* ty=(Tensor[(5, 14), float64],) */;
  %1051 = %1050.0;
  (%1051,)
}

def @func_6550() -> (Tensor[(8, 2, 9), float32],) {
  %1053 = fn () -> (Tensor[(8, 2, 9), float32],) {
    %1052 = @func_5238() /* ty=Tensor[(8, 2, 9), float32] */;
    (%1052,)
  };
  %1053() /* ty=(Tensor[(8, 2, 9), float32],) */
}

def @func_6072() -> (Tensor[(5, 14), float64],) {
  %1054 = @func_3043() /* ty=(Tensor[(5, 14), float64], Tensor[(5, 14), float64]) */;
  %1055 = %1054.0;
  (%1055,)
}

def @func_2645(%var_2643: Tensor[(55), float32], %var_2644: Tensor[(1, 210), float64]) -> (Tensor[(5, 14), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(1, 210), float64]) {
  %1063 = fn (%var_2634: Tensor[(55), float32], %var_2635: Tensor[(1, 210), float64]) -> (Tensor[(5, 14), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(1, 210), float64]) {
    %1056 = cast(%var_2634, dtype="float32") /* ty=Tensor[(55), float32] */;
    %1057 = cast(%var_2635, dtype="float64") /* ty=Tensor[(1, 210), float64] */;
    %1058 = reshape(%1056, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), float32] */;
    %1059 = reshape(%1057, newshape=[210]) /* ty=Tensor[(210), float64] */;
    %1060 = @func_1498(%1058, %1059) /* ty=(Tensor[(?, 11, 5), bool], Tensor[(1, 15, 14), float64], Tensor[(210), float64]) */;
    %1061 = @func_2567() /* ty=Tensor[(5, 14), float64] */;
    %1062 = %1060.2;
    (%1061, %1062, %var_2634, %var_2635)
  };
  %1063(%var_2643, %var_2644) /* ty=(Tensor[(5, 14), float64], Tensor[(210), float64], Tensor[(55), float32], Tensor[(1, 210), float64]) */
}

def @func_3043() -> (Tensor[(5, 14), float64], Tensor[(5, 14), float64]) {
  %1064 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  %1065 = @func_2345() /* ty=Tensor[(5, 14), float64] */;
  (%1064, %1065)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen40/build/output.py", line 3028, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:45:48] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

