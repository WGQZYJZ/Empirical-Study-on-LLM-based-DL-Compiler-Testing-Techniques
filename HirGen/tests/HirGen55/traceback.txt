==========mod==========
#[version = "0.0.5"]
def @func_4883() -> (Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) {
  %0 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 600), int32] */, dtype="int32") /* ty=Tensor[(1, 600), int32] */;
  %2 = reshape(%1, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
  %3 = @func_3214(%2) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %4 = %0.0;
  %5 = %3.2;
  (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(1, 600), int32] */)
}

def @func_5293(%var_5279: Tensor[(2016, 1), float32]) -> (Tensor[(7, 16, 12), bool], Tensor[(2016), float32], float64, Tensor[(1470), float64], Tensor[(84), float64], Tensor[(2016, 1), float32], Tensor[(560), uint32], Tensor[(12, 36), float32]) {
  %6 = @func_5059() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(12), bool]) */;
  %7 = cast(-4.32064f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(1470), float64] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %10 = cast(%var_5279, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
  %11 = cast(meta[relay.Constant][3] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %12 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
  %13 = reshape(%7, newshape=[]) /* ty=float64 */;
  %14 = reshape(%8, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float64] */;
  %15 = reshape(%9, newshape=[84]) /* ty=Tensor[(84), float64] */;
  %16 = reshape(%10, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %17 = reshape(%11, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %18 = reshape(%12, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %19 = @func_2664(%13, %14, %15, %16, %17, %18) /* ty=(Tensor[(7, 15, 14), float64], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(2016), float32], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(16, 1, 4), bool], Tensor[(64), float32], Tensor[(2016), float32], Tensor[(6, 9, 8), float32], Tensor[(432), float32], Tensor[(560), uint16]) */;
  %20 = %6.0;
  %21 = %19.3;
  (%20, %21, -4.32064f64 /* ty=float64 */, meta[relay.Constant][1] /* ty=Tensor[(1470), float64] */, meta[relay.Constant][2] /* ty=Tensor[(84), float64] */, %var_5279, meta[relay.Constant][3] /* ty=Tensor[(560), uint32] */, meta[relay.Constant][4] /* ty=Tensor[(12, 36), float32] */)
}

def @func_5812(%var_5788: Tensor[(14, 144), float32]) -> (Tensor[(14, 144), int32], Tensor[(14, 144), float32]) {
  %22 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %23 = %22.6;
  %24 = cast(%var_5788, dtype="int32") /* ty=Tensor[(14, 144), int32] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(2), int32] */;
  %26 = cast(%23, dtype="int32") /* ty=Tensor[(14, 144), int32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %28 = cast(%var_5788, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %29 = bitwise_xor(%26, %27) /* ty=Tensor[(14, 144), int32] */;
  %30 = acosh(%28) /* ty=Tensor[(14, 144), float32] */;
  (%29, %30)
}

def @func_5185(%var_5172: Tensor[(1792), int64], %var_5173: Tensor[(12), bool]) -> (Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(10, 15, 4), int32], Tensor[(600), int32]) {
  %31 = @func_4883() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) */;
  %32 = cast(%var_5172, dtype="int64") /* ty=Tensor[(1792), int64] */;
  %33 = cast(%var_5173, dtype="bool") /* ty=Tensor[(12), bool] */;
  %34 = reshape(%32, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), int64] */;
  %35 = reshape(%33, newshape=[12]) /* ty=Tensor[(12), bool] */;
  %36 = @func_812(%34, %35) /* ty=(Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) */;
  %37 = cast(meta[relay.Constant][5] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %38 = reshape(%37, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
  %39 = @func_3214(%38) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %40 = %31.0;
  %41 = %36.2;
  %42 = %39.0;
  (%40, %41, %var_5172, %var_5173, %42, meta[relay.Constant][5] /* ty=Tensor[(600), int32] */)
}

def @func_6543(%var_6523: Tensor[(13, 13, 5), int8], %var_6533: Tensor[(2, 300), int32]) -> (Tensor[(13, 13, 5), int8], Tensor[(7, 5, 7), uint64], Tensor[(2, 300), int32]) {
  %43 = cast(%var_6523, dtype="int8") /* ty=Tensor[(13, 13, 5), int8] */;
  %44 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(13, 13, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 13, 5), int8] */, dtype="int8") /* ty=Tensor[(13, 13, 5), int8] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %47 = cast(%var_6533, dtype="int32") /* ty=Tensor[(2, 300), int32] */;
  %48 = reshape(%47, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
  %49 = @func_3214(%48) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %50 = multiply(%45, %46) /* ty=Tensor[(13, 13, 5), int8] */;
  %51 = %49.1;
  (%50, %51, %var_6533)
}

def @func_6696(%var_6681: Tensor[(16, 1, 15), float32]) -> (Tensor[(16, ?, 15), bool], Tensor[(16, 1, 15), float64]) {
  %52 = cast(-2.72908f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %53 = cast(%var_6681, dtype="float32") /* ty=Tensor[(16, 1, 15), float32] */;
  %54 = power(%52, %53) /* ty=Tensor[(16, 1, 15), float32] */;
  %55 = cast(%54, dtype="bool") /* ty=Tensor[(16, 1, 15), bool] */;
  %56 = shape_of(%var_6681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_6681, dtype="bool") /* ty=Tensor[(16, 1, 15), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = cast(%54, dtype="float64") /* ty=Tensor[(16, 1, 15), float64] */;
  %60 = logical_or(%57, %58) /* ty=Tensor[(16, ?, 15), bool] */;
  %61 = sigmoid(%59) /* ty=Tensor[(16, 1, 15), float64] */;
  (%60, %61)
}

def @func_6640() -> (Tensor[(1, 600), float64], Tensor[(7, 8, 2), float64], Tensor[(112), float32], Tensor[(1, 600), float32]) {
  %62 = @func_4883() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) */;
  %63 = %62.2;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %65 = sinh(%64) /* ty=Tensor[(1, 600), float64] */;
  %66 = cast(%65, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %67 = acos(%66) /* ty=Tensor[(1, 600), float64] */;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %69 = cast(meta[relay.Constant][7] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %70 = reshape(%69, newshape=[7, 8, 2]) /* ty=Tensor[(7, 8, 2), float32] */;
  %71 = cast(%67, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %72 = erf(%71) /* ty=Tensor[(1, 600), float64] */;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
  %74 = sin(%68) /* ty=Tensor[(1, 600), float64] */;
  %75 = @func_2910(%70) /* ty=Tensor[(7, 8, 2), float64] */;
  %76 = exp(%73) /* ty=Tensor[(1, 600), float32] */;
  (%74, %75, meta[relay.Constant][7] /* ty=Tensor[(112), float32] */, %76)
}

def @func_8526(%var_8521: Tensor[(260), int64], %var_8522: Tensor[(1792), int64], %var_8523: Tensor[(12), bool]) -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(2704), uint8], Tensor[(4, 28), float32], Tensor[(260), int64], Tensor[(1792), int64], Tensor[(12), bool]) {
  %77 = cast(meta[relay.Constant][8] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %78 = cast(meta[relay.Constant][9] /* ty=Tensor[(2704), uint8] */, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
  %79 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 28), float32] */, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %80 = cast(%var_8521, dtype="int64") /* ty=Tensor[(260), int64] */;
  %81 = cast(%var_8522, dtype="int64") /* ty=Tensor[(1792), int64] */;
  %82 = cast(%var_8523, dtype="bool") /* ty=Tensor[(12), bool] */;
  %83 = reshape(%77, newshape=[4, 140]) /* ty=Tensor[(4, 140), uint32] */;
  %84 = reshape(%78, newshape=[2704]) /* ty=Tensor[(2704), uint8] */;
  %85 = reshape(%79, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %86 = reshape(%80, newshape=[260]) /* ty=Tensor[(260), int64] */;
  %87 = reshape(%81, newshape=[2, 896]) /* ty=Tensor[(2, 896), int64] */;
  %88 = reshape(%82, newshape=[12]) /* ty=Tensor[(12), bool] */;
  %89 = @func_6814(%83, %84, %85, %86, %87, %88) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(4, 140), uint32], Tensor[(7, 16, 12), bool], Tensor[(1, 2704), uint8], Tensor[(112), float32], Tensor[(2, 10, 13), float32], Tensor[(260), int64], Tensor[(2, 896), int64], Tensor[(12), bool], Tensor[(84), float64], Tensor[(2704), float32]) */;
  %90 = @func_7385() /* ty=Tensor[(7, 16, 12), bool] */;
  %91 = %89.0;
  (%90, %91, meta[relay.Constant][8] /* ty=Tensor[(560), uint32] */, meta[relay.Constant][9] /* ty=Tensor[(2704), uint8] */, meta[relay.Constant][10] /* ty=Tensor[(4, 28), float32] */, %var_8521, %var_8522, %var_8523)
}

def @func_441(%var_435: Tensor[(2, 12, 2), uint16]) -> (Tensor[(2, 12, 2), uint16],) {
  %92 = cast(%var_435, dtype="uint16") /* ty=Tensor[(2, 12, 2), uint16] */;
  %93 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(2, 12, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %94 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 12, 2), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12, 2), uint16] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %96 = right_shift(%94, %95) /* ty=Tensor[(2, 12, 2), uint16] */;
  (%96,)
}

def @func_3827() -> (Tensor[(7, 16, 12), bool],) {
  %97 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %98 = %97.0;
  (%98,)
}

def @func_812(%var_775: Tensor[(16, 7, 16), int64], %var_801: Tensor[(12), bool]) -> (Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) {
  %99 = cast(%var_775, dtype="int64") /* ty=Tensor[(16, 7, 16), int64] */;
  %100 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(16, 7, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 7, 16), int64] */, dtype="int64") /* ty=Tensor[(16, 7, 16), int64] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %103 = cast(%var_775, dtype="float32") /* ty=Tensor[(16, 7, 16), float32] */;
  %104 = cast(%var_801, dtype="bool") /* ty=Tensor[(12), bool] */;
  %105 = cast(meta[relay.Constant][13] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %106 = reshape(%104, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
  %107 = reshape(%105, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %108 = @func_607(%106, %107) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
  %109 = bitwise_and(%101, %102) /* ty=Tensor[(16, 7, 16), int64] */;
  %110 = exp(%103) /* ty=Tensor[(16, 7, 16), float32] */;
  %111 = %108.1;
  (%109, %110, %111, %var_801, meta[relay.Constant][13] /* ty=Tensor[(560), uint32] */)
}

def @func_4954() -> (Tensor[(1170), int32], Tensor[(7, 5, 7), uint64], Tensor[(600), int32]) {
  %112 = @func_4765() /* ty=(Tensor[(1792), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32]) */;
  %113 = cast(meta[relay.Constant][14] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %114 = reshape(%113, newshape=[600]) /* ty=Tensor[(600), int32] */;
  %115 = @func_3753(%114) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(7, 5, 7), uint64], Tensor[(600), int32], Tensor[(?, 1792), int8]) */;
  %116 = %112.2;
  %117 = %115.2;
  (%116, %117, meta[relay.Constant][14] /* ty=Tensor[(600), int32] */)
}

def @func_4654(%var_4642: Tensor[(2704), uint8]) -> (Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(2704), uint8], Tensor[(7, 16, 12), bool]) {
  %118 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %119 = cast(%var_4642, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
  %120 = reshape(%119, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint8] */;
  %121 = @func_1977(%120) /* ty=(Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) */;
  %122 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %123 = %118.0;
  %124 = %121.0;
  %125 = %122.0;
  (%123, %124, %var_4642, %125)
}

def @func_7480() -> (Tensor[(7, 16, 12), bool], Tensor[(245), uint64]) {
  %126 = @func_7257() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %127 = @func_4883() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) */;
  %128 = %126.0;
  %129 = %127.1;
  (%128, %129)
}

def @func_5904() -> Tensor[(7, 16, 12), bool] {
  @func_5832() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_2664(%var_2591: float64, %var_2592: Tensor[(7, 15, 14), float64], %var_2600: Tensor[(84), float64], %var_2615: Tensor[(2016), float32], %var_2616: Tensor[(560), uint32], %var_2650: Tensor[(432), float32]) -> (Tensor[(7, 15, 14), float64], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(2016), float32], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(16, 1, 4), bool], Tensor[(64), float32], Tensor[(2016), float32], Tensor[(6, 9, 8), float32], Tensor[(432), float32], Tensor[(560), uint16]) {
  %130 = cast(%var_2591, dtype="float64") /* ty=float64 */;
  %131 = cast(%var_2592, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %132 = cast(%var_2600, dtype="float64") /* ty=Tensor[(84), float64] */;
  %133 = reshape(%132, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
  %134 = cast(meta[relay.Constant][15] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %135 = cast(meta[relay.Constant][15] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %136 = cast(%var_2615, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %137 = cast(%var_2616, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %138 = reshape(%134, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %139 = reshape(%135, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %140 = reshape(%136, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %141 = reshape(%137, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %142 = @func_2329(%138, %139, %140, %141) /* ty=(Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) */;
  %143 = cast(meta[relay.Constant][15] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %144 = cast(meta[relay.Constant][15] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %145 = cast(%var_2615, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %146 = cast(%var_2616, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %147 = reshape(%143, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %148 = reshape(%144, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %149 = reshape(%145, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %150 = reshape(%146, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %151 = @func_2329(%147, %148, %149, %150) /* ty=(Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) */;
  %152 = cast(meta[relay.Constant][16] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %153 = reshape(%152, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), float32] */;
  %154 = @func_312(%153) /* ty=(Tensor[(16, 1, 4), bool],) */;
  %155 = %151.3;
  %156 = cast(%155, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %157 = cast(meta[relay.Constant][15] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %158 = %142.2;
  %159 = cast(%158, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %160 = cast(%var_2616, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %161 = reshape(%156, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %162 = reshape(%157, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %163 = reshape(%159, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %164 = reshape(%160, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %165 = @func_2329(%161, %162, %163, %164) /* ty=(Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) */;
  %166 = cast(%var_2650, dtype="float32") /* ty=Tensor[(432), float32] */;
  %167 = reshape(%166, newshape=[6, 9, 8]) /* ty=Tensor[(6, 9, 8), float32] */;
  %168 = cast(%var_2616, dtype="float64") /* ty=Tensor[(560), float64] */;
  %169 = log2(%168) /* ty=Tensor[(560), float64] */;
  %170 = cast(meta[relay.Constant][17] /* ty=Tensor[(560), float64] */, dtype="uint16") /* ty=Tensor[(560), uint16] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(1), int32] */;
  %172 = cast(%169, dtype="uint16") /* ty=Tensor[(560), uint16] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %174 = power(%130, %131) /* ty=Tensor[(7, 15, 14), float64] */;
  %175 = @func_1205(%133) /* ty=Tensor[(2, 3, 14), float64] */;
  %176 = %154.0;
  %177 = %165.2;
  %178 = @func_2124(%167) /* ty=Tensor[(6, 9, 8), float32] */;
  %179 = logical_xor(%172, %173) /* ty=Tensor[(560), uint16] */;
  (%174, %175, %var_2600, %158, meta[relay.Constant][15] /* ty=Tensor[(189), int8] */, %var_2615, %155, %176, meta[relay.Constant][16] /* ty=Tensor[(64), float32] */, %177, %178, %var_2650, %179)
}

def @func_6059() -> Tensor[(7, 16, 12), bool] {
  @func_5323() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_825(%var_822: Tensor[(9, 14, 16), float32]) -> Tensor[(9, 14, 16), float32] {
  %180 = cast(%var_822, dtype="float32") /* ty=Tensor[(9, 14, 16), float32] */;
  acos(%180) /* ty=Tensor[(9, 14, 16), float32] */
}

def @func_5323() -> Tensor[(7, 16, 12), bool] {
  %181 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %181.0
}

def @func_8075(%var_8000: Tensor[(1, 7, 8), int32], %var_8001: Tensor[(7, 7, 8), int32], %var_8037: Tensor[(560), uint32]) -> (Tensor[(7, 7, 8), int32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(7, 13, 4), float32], Tensor[(364), float32], Tensor[(8, 5, 14), uint32], Tensor[(13, 13, 5), int8], Tensor[(65, 13), int8], Tensor[(600), int32]) {
  %182 = cast(%var_8000, dtype="int32") /* ty=Tensor[(1, 7, 8), int32] */;
  %183 = cast(%var_8001, dtype="int32") /* ty=Tensor[(7, 7, 8), int32] */;
  %184 = cast(%var_8037, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %185 = reshape(%184, newshape=[280, 2]) /* ty=Tensor[(280, 2), uint32] */;
  %186 = @func_4308(%185) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(280, 2), uint32]) */;
  %187 = cast(meta[relay.Constant][18] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %188 = reshape(%187, newshape=[7, 13, 4]) /* ty=Tensor[(7, 13, 4), float32] */;
  %189 = cast(%var_8037, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %190 = cast(%var_8037, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %191 = reshape(%189, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %192 = reshape(%190, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %193 = cast(meta[relay.Constant][19] /* ty=Tensor[(65, 13), int8] */, dtype="int8") /* ty=Tensor[(65, 13), int8] */;
  %194 = cast(meta[relay.Constant][20] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %195 = reshape(%193, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), int8] */;
  %196 = reshape(%194, newshape=[2, 300]) /* ty=Tensor[(2, 300), int32] */;
  %197 = @func_6543(%195, %196) /* ty=(Tensor[(13, 13, 5), int8], Tensor[(7, 5, 7), uint64], Tensor[(2, 300), int32]) */;
  %198 = add(%182, %183) /* ty=Tensor[(7, 7, 8), int32] */;
  %199 = %186.2;
  %200 = @func_7167(%188) /* ty=Tensor[(7, 13, 4), float32] */;
  %201 = @func_147(%191, %192) /* ty=Tensor[(8, 5, 14), uint32] */;
  %202 = %197.0;
  (%198, %199, %var_8037, %200, meta[relay.Constant][18] /* ty=Tensor[(364), float32] */, %201, %202, meta[relay.Constant][19] /* ty=Tensor[(65, 13), int8] */, meta[relay.Constant][20] /* ty=Tensor[(600), int32] */)
}

def @func_1386(%var_1371: float32, %var_1372: Tensor[(11, 8, 8), float32]) -> Tensor[(11, 8, 8), float32] {
  %203 = cast(%var_1371, dtype="float32") /* ty=float32 */;
  %204 = cast(%var_1372, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  %205 = floor_mod(%203, %204) /* ty=Tensor[(11, 8, 8), float32] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  sin(%206) /* ty=Tensor[(11, 8, 8), float32] */
}

def @func_7692() -> (Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(600), int32]) {
  %207 = @func_3827() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %208 = cast(meta[relay.Constant][21] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %209 = reshape(%208, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
  %210 = @func_3214(%209) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %211 = %207.0;
  %212 = %210.2;
  (%211, %212, meta[relay.Constant][21] /* ty=Tensor[(600), int32] */)
}

def @func_5618() -> Tensor[(7, 16, 12), bool] {
  %213 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %213.0
}

def @func_5461() -> (Tensor[(7, 16, 12), bool],) {
  %214 = @func_5323() /* ty=Tensor[(7, 16, 12), bool] */;
  (%214,)
}

def @func_7385() -> Tensor[(7, 16, 12), bool] {
  @func_6492() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_6976(%var_6963: Tensor[(2, 3, 14), float64]) -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool]) {
  %215 = @func_6938() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(112), float32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %216 = @func_5259() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
  %217 = %216.1;
  %218 = cast(%var_6963, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = %215.0;
  %223 = logical_or(%220, %221) /* ty=Tensor[(2, 3, 14), bool] */;
  (%222, %223)
}

def @main(%var_8598: Tensor[(12, 16, 14), float32], %var_8599: Tensor[(12, 16, 14), float32]) -> (Tensor[(12, 16, 14), float32], Tensor[(12, 16, 14), float32]) {
  %224 = cast(%var_8599, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %225 = shape_of(%var_8598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_8598, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %228 = cast(%var_8599, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %229 = asinh(%228) /* ty=Tensor[(12, 16, 14), float32] */;
  %230 = cast(%229, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %231 = floor_mod(%226, %227) /* ty=Tensor[(12, 16, 14), float32] */;
  %232 = asin(%230) /* ty=Tensor[(12, 16, 14), float32] */;
  (%231, %232)
}

def @func_5940(%var_5928: Tensor[(5, 7, 6), uint8]) -> (Tensor[(5, 7, 6), uint8],) {
  %233 = cast(%var_5928, dtype="uint8") /* ty=Tensor[(5, 7, 6), uint8] */;
  %234 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(5, 7, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 7, 6), uint8] */, dtype="uint8") /* ty=Tensor[(5, 7, 6), uint8] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %237 = bitwise_or(%235, %236) /* ty=Tensor[(5, 7, 6), uint8] */;
  (%237,)
}

def @func_3008(%var_3003: Tensor[(7, 5, 7), uint64]) -> Tensor[(7, 5, 7), uint64] {
  %238 = cast(%var_3003, dtype="uint64") /* ty=Tensor[(7, 5, 7), uint64] */;
  %239 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(7, 5, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 5, 7), uint64] */, dtype="uint64") /* ty=Tensor[(7, 5, 7), uint64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%240, %241) /* ty=Tensor[(7, 5, 7), uint64] */
}

def @func_5972() -> Tensor[(84), float64] {
  %242 = @func_5613() /* ty=(Tensor[(84), float64], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool], Tensor[(2704), uint8]) */;
  %242.0
}

def @func_1774(%var_1768: Tensor[(4, 5, 13), int32], %var_1769: Tensor[(4, 5, 13), int32]) -> (Tensor[(4, 5, 13), bool],) {
  %243 = cast(%var_1769, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
  %244 = shape_of(%var_1768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%var_1768, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %247 = not_equal(%245, %246) /* ty=Tensor[(4, 5, 13), bool] */;
  (%247,)
}

def @func_5832() -> Tensor[(7, 16, 12), bool] {
  %248 = @func_5461() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %248.0
}

def @func_5372() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %249 = @func_4620() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(6, 12, 4), float64], Tensor[(288), float64]) */;
  %250 = @func_5259() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
  %251 = %249.1;
  %252 = %250.0;
  (%251, %252)
}

def @func_2458(%var_2447: Tensor[(9, 13, 10), int32], %var_2448: Tensor[(9, 13, 10), int32]) -> (Tensor[(9, 13, 10), bool],) {
  %253 = cast(%var_2448, dtype="bool") /* ty=Tensor[(9, 13, 10), bool] */;
  %254 = shape_of(%var_2447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%var_2447, dtype="bool") /* ty=Tensor[(9, 13, 10), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = equal(%255, %256) /* ty=Tensor[(9, 13, 10), bool] */;
  (%257,)
}

def @func_8503(%var_8482: Tensor[(176), float32], %var_8487: Tensor[(704), float32]) -> (Tensor[(84), float64], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(11, 4, 4), float32], Tensor[(176), float32], Tensor[(11, 8, 8), float32], float32, Tensor[(704), float32]) {
  %258 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
  %259 = %258.2;
  %260 = cast(%259, dtype="float64") /* ty=Tensor[(84), float64] */;
  %261 = reshape(%260, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
  %262 = @func_6976(%261) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool]) */;
  %263 = cast(%var_8482, dtype="float32") /* ty=Tensor[(176), float32] */;
  %264 = reshape(%263, newshape=[11, 4, 4]) /* ty=Tensor[(11, 4, 4), float32] */;
  %265 = cast(-9.58957f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %266 = cast(%var_8487, dtype="float32") /* ty=Tensor[(704), float32] */;
  %267 = reshape(%265, newshape=[]) /* ty=float32 */;
  %268 = reshape(%266, newshape=[11, 8, 8]) /* ty=Tensor[(11, 8, 8), float32] */;
  %269 = %262.0;
  %270 = @func_7385() /* ty=Tensor[(7, 16, 12), bool] */;
  %271 = @func_6383(%264) /* ty=Tensor[(11, 4, 4), float32] */;
  %272 = @func_1386(%267, %268) /* ty=Tensor[(11, 8, 8), float32] */;
  (%259, %269, %270, %271, %var_8482, %272, -9.58957f /* ty=float32 */, %var_8487)
}

def @func_3986(%var_3938: Tensor[(13, 12, 4), int64], %var_3957: Tensor[(13, 12, 4), int64], %var_3974: Tensor[(150), float64]) -> (Tensor[(13, 12, 4), uint64], Tensor[(15, 10, 1), float32], Tensor[(150), float64]) {
  %273 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 12, 4), int64] */, dtype="int64") /* ty=Tensor[(13, 12, 4), int64] */;
  %274 = shape_of(%var_3938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%var_3938, dtype="int64") /* ty=Tensor[(13, 12, 4), int64] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %277 = add(%275, %276) /* ty=Tensor[(13, 12, 4), int64] */;
  %278 = cast(%var_3957, dtype="uint64") /* ty=Tensor[(13, 12, 4), uint64] */;
  %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%277, dtype="uint64") /* ty=Tensor[(13, 12, 4), uint64] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %282 = cast(%var_3974, dtype="float64") /* ty=Tensor[(150), float64] */;
  %283 = reshape(%282, newshape=[15, 10, 1]) /* ty=Tensor[(15, 10, 1), float64] */;
  %284 = @func_3904(%283) /* ty=(Tensor[(15, 10, 1), float32], Tensor[(15, 10, ?), float64]) */;
  %285 = multiply(%280, %281) /* ty=Tensor[(13, 12, 4), uint64] */;
  %286 = %284.0;
  (%285, %286, %var_3974)
}

def @func_4108() -> Tensor[(7, 16, 12), bool] {
  %287 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %287.0
}

def @func_2124(%var_2078: Tensor[(6, 9, 8), float32]) -> Tensor[(6, 9, 8), float32] {
  %288 = cast(%var_2078, dtype="float32") /* ty=Tensor[(6, 9, 8), float32] */;
  %289 = asin(%288) /* ty=Tensor[(6, 9, 8), float32] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(6, 9, 8), float32] */;
  %291 = log10(%290) /* ty=Tensor[(6, 9, 8), float32] */;
  %292 = cast(%291, dtype="float32") /* ty=Tensor[(6, 9, 8), float32] */;
  log2(%292) /* ty=Tensor[(6, 9, 8), float32] */
}

def @func_2822(%var_2792: Tensor[(84), float64], %var_2815: Tensor[(1170), int32]) -> (Tensor[(16, 3, 16), float32], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32], Tensor[(9, 14, 16), float32], Tensor[(2016), float32]) {
  %293 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %294 = cast(%var_2792, dtype="float64") /* ty=Tensor[(84), float64] */;
  %295 = reshape(%294, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
  %296 = cast(%var_2815, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %297 = cast(%var_2815, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %298 = reshape(%296, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), int32] */;
  %299 = reshape(%297, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), int32] */;
  %300 = @func_2458(%298, %299) /* ty=(Tensor[(9, 13, 10), bool],) */;
  %301 = cast(meta[relay.Constant][26] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %302 = reshape(%301, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float32] */;
  %303 = tan(%293) /* ty=Tensor[(16, 3, 16), float32] */;
  %304 = @func_1205(%295) /* ty=Tensor[(2, 3, 14), float64] */;
  %305 = %300.0;
  %306 = @func_825(%302) /* ty=Tensor[(9, 14, 16), float32] */;
  (%303, %304, %var_2792, %305, %var_2815, %306, meta[relay.Constant][26] /* ty=Tensor[(2016), float32] */)
}

def @func_7231() -> (Tensor[(7, 16, 12), bool],) {
  %307 = @func_6059() /* ty=Tensor[(7, 16, 12), bool] */;
  (%307,)
}

def @func_6220() -> Tensor[(84), float64] {
  %308 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
  %308.2
}

def @func_5136(%var_5095: Tensor[(48), uint16], %var_5107: Tensor[(7, 16, 12), bool], %var_5122: Tensor[(288), float64]) -> (Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(7, 16, 12), float32]) {
  %309 = cast(%var_5095, dtype="uint16") /* ty=Tensor[(48), uint16] */;
  %310 = reshape(%309, newshape=[2, 12, 2]) /* ty=Tensor[(2, 12, 2), uint16] */;
  %311 = @func_441(%310) /* ty=(Tensor[(2, 12, 2), uint16],) */;
  %312 = cast(%var_5122, dtype="float64") /* ty=Tensor[(288), float64] */;
  %313 = reshape(%312, newshape=[6, 12, 4]) /* ty=Tensor[(6, 12, 4), float64] */;
  %314 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
  %315 = cast(%var_5107, dtype="uint8") /* ty=Tensor[(7, 16, 12), uint8] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="uint8") /* ty=Tensor[(7, 16, 12), uint8] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %319 = maximum(%317, %318) /* ty=Tensor[(7, 16, 12), uint8] */;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(7, 16, 12), float32] */;
  %321 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%314, dtype="float32") /* ty=Tensor[(7, 16, 12), float32] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %324 = %311.0;
  %325 = @func_426(%313) /* ty=Tensor[(6, 12, 4), float64] */;
  %326 = divide(%322, %323) /* ty=Tensor[(7, 16, 12), float32] */;
  (%324, %var_5095, %325, %var_5122, %326)
}

def @func_8240() -> Tensor[(7, 16, 12), bool] {
  %327 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
  %327.0
}

def @func_1977(%var_1966: Tensor[(13, 13, 16), uint8]) -> (Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) {
  %328 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 1, 16), uint8] */, dtype="uint8") /* ty=Tensor[(13, 1, 16), uint8] */;
  %329 = cast(%var_1966, dtype="uint8") /* ty=Tensor[(13, 13, 16), uint8] */;
  %330 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 1, 16), uint8] */, dtype="float64") /* ty=Tensor[(13, 1, 16), float64] */;
  %331 = bitwise_xor(%328, %329) /* ty=Tensor[(13, 13, 16), uint8] */;
  %332 = atanh(%330) /* ty=Tensor[(13, 1, 16), float64] */;
  (%331, %332)
}

def @func_4059() -> Tensor[(7, 16, 12), bool] {
  %333 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %333.0
}

def @func_3156(%var_3140: Tensor[(2, 10, 13), int64], %var_3149: Tensor[(1, 1792), int64], %var_3150: Tensor[(12, 1), bool]) -> (Tensor[(12), bool], Tensor[(1, 1792), int64], Tensor[(12, 1), bool], Tensor[(2, 10, 13), float32]) {
  %334 = cast(%var_3149, dtype="int64") /* ty=Tensor[(1, 1792), int64] */;
  %335 = cast(%var_3150, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %336 = reshape(%334, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), int64] */;
  %337 = reshape(%335, newshape=[12]) /* ty=Tensor[(12), bool] */;
  %338 = @func_812(%336, %337) /* ty=(Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) */;
  %339 = cast(%var_3140, dtype="int64") /* ty=Tensor[(2, 10, 13), int64] */;
  %340 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(2, 10, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 10, 13), int64] */, dtype="int64") /* ty=Tensor[(2, 10, 13), int64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %343 = multiply(%341, %342) /* ty=Tensor[(2, 10, 13), int64] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  %345 = %338.3;
  %346 = erf(%344) /* ty=Tensor[(2, 10, 13), float32] */;
  (%345, %var_3149, %var_3150, %346)
}

def @func_3753(%var_3740: Tensor[(600), int32]) -> (Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(7, 5, 7), uint64], Tensor[(600), int32], Tensor[(?, 1792), int8]) {
  %347 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %348 = cast(%var_3740, dtype="int32") /* ty=Tensor[(600), int32] */;
  %349 = reshape(%348, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
  %350 = @func_3214(%349) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %351 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1792), int64] */, dtype="int64") /* ty=Tensor[(1, 1792), int64] */;
  %352 = cast(meta[relay.Constant][29] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %353 = reshape(%351, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), int64] */;
  %354 = reshape(%352, newshape=[12]) /* ty=Tensor[(12), bool] */;
  %355 = @func_812(%353, %354) /* ty=(Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) */;
  %356 = %355.0;
  %357 = cast(%356, dtype="int8") /* ty=Tensor[(16, 7, 16), int8] */;
  %358 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(1, 1792), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %359 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1792), int64] */, dtype="int8") /* ty=Tensor[(1, 1792), int8] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %361 = %347.0;
  %362 = %350.1;
  %363 = maximum(%359, %360) /* ty=Tensor[(?, 1792), int8] */;
  (%361, meta[relay.Constant][29] /* ty=Tensor[(12), bool] */, %362, %var_3740, %363)
}

def @func_7849(%var_7835: Tensor[(2, 3, 14), float32]) -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float32], Tensor[(2, 3, 14), bool]) {
  %364 = @func_5372() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
  %365 = @func_5259() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
  %366 = %365.1;
  %367 = cast(%366, dtype="float32") /* ty=Tensor[(2, 3, 14), float32] */;
  %368 = log2(%367) /* ty=Tensor[(2, 3, 14), float32] */;
  %369 = cast(%366, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %370 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%368, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %373 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
  %374 = @func_4584() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %375 = cast(%368, dtype="float32") /* ty=Tensor[(2, 3, 14), float32] */;
  %376 = cast(%var_7835, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %377 = shape_of(%368, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%368, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = %364.0;
  %381 = logical_and(%371, %372) /* ty=Tensor[(2, 3, 14), bool] */;
  %382 = %373.0;
  %383 = %374.0;
  %384 = atanh(%375) /* ty=Tensor[(2, 3, 14), float32] */;
  %385 = greater_equal(%378, %379) /* ty=Tensor[(2, 3, 14), bool] */;
  (%380, %381, %382, %383, %384, %385)
}

def @func_4388(%var_4334: Tensor[(1, 2704), uint8], %var_4358: Tensor[(4, 28), float32]) -> (Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(1, 2704), uint8], Tensor[(7, 8, 2), float64], Tensor[(4, 28), float32], Tensor[(4, 140), uint32], Tensor[(231), float64]) {
  %386 = cast(%var_4334, dtype="uint8") /* ty=Tensor[(1, 2704), uint8] */;
  %387 = reshape(%386, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint8] */;
  %388 = @func_1977(%387) /* ty=(Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) */;
  %389 = cast(%var_4358, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %390 = reshape(%389, newshape=[7, 8, 2]) /* ty=Tensor[(7, 8, 2), float32] */;
  %391 = cast(meta[relay.Constant][31] /* ty=Tensor[(231), uint64] */, dtype="uint64") /* ty=Tensor[(231), uint64] */;
  %392 = reshape(%391, newshape=[7, 11, 3]) /* ty=Tensor[(7, 11, 3), uint64] */;
  %393 = @func_1023(%392) /* ty=(Tensor[(7, 11, 3), bool], Tensor[(8, 5, 14), uint32], Tensor[(4, 140), uint32]) */;
  %394 = cast(meta[relay.Constant][31] /* ty=Tensor[(231), uint64] */, dtype="float64") /* ty=Tensor[(231), float64] */;
  %395 = erf(%394) /* ty=Tensor[(231), float64] */;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(231), float64] */;
  %397 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
  %398 = %388.0;
  %399 = @func_2910(%390) /* ty=Tensor[(7, 8, 2), float64] */;
  %400 = %393.2;
  %401 = log10(%396) /* ty=Tensor[(231), float64] */;
  (%397, %398, %var_4334, %399, %var_4358, %400, %401)
}

def @func_7060() -> Tensor[(7, 16, 12), float64] {
  %402 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %403 = %402.0;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(7, 16, 12), float64] */;
  rsqrt(%404) /* ty=Tensor[(7, 16, 12), float64] */
}

def @func_7167(%var_7163: Tensor[(7, 13, 4), float32]) -> Tensor[(7, 13, 4), float32] {
  %405 = cast(%var_7163, dtype="float32") /* ty=Tensor[(7, 13, 4), float32] */;
  sqrt(%405) /* ty=Tensor[(7, 13, 4), float32] */
}

def @func_147(%var_138: Tensor[(8, 5, 14), uint32], %var_139: Tensor[(8, 5, 14), uint32]) -> Tensor[(8, 5, 14), uint32] {
  %406 = cast(%var_139, dtype="uint32") /* ty=Tensor[(8, 5, 14), uint32] */;
  %407 = shape_of(%var_138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_138, dtype="uint32") /* ty=Tensor[(8, 5, 14), uint32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%408, %409) /* ty=Tensor[(8, 5, 14), uint32] */
}

def @func_7648(%var_7616: Tensor[(288), float64], %var_7633: Tensor[(12), bool], %var_7634: Tensor[(560), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(13, 1, 16), float64], Tensor[(2704), uint8], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(8, 5, 14), uint32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(7, 16, 12), bool]) {
  %410 = cast(meta[relay.Constant][32] /* ty=Tensor[(2704), uint8] */, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
  %411 = reshape(%410, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint8] */;
  %412 = @func_1977(%411) /* ty=(Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) */;
  %413 = cast(%var_7616, dtype="float64") /* ty=Tensor[(288), float64] */;
  %414 = reshape(%413, newshape=[6, 12, 4]) /* ty=Tensor[(6, 12, 4), float64] */;
  %415 = cast(%var_7633, dtype="bool") /* ty=Tensor[(12), bool] */;
  %416 = cast(%var_7634, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %417 = reshape(%415, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
  %418 = reshape(%416, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %419 = @func_607(%417, %418) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
  %420 = @func_6444() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %421 = @func_6851() /* ty=Tensor[(7, 16, 12), bool] */;
  %422 = %412.1;
  %423 = @func_426(%414) /* ty=Tensor[(6, 12, 4), float64] */;
  %424 = %419.4;
  %425 = %420.0;
  (%421, %422, meta[relay.Constant][32] /* ty=Tensor[(2704), uint8] */, %423, %var_7616, %424, %var_7633, %var_7634, %425)
}

def @func_6938() -> (Tensor[(7, 16, 12), bool], Tensor[(112), float32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) {
  %426 = @func_6640() /* ty=(Tensor[(1, 600), float64], Tensor[(7, 8, 2), float64], Tensor[(112), float32], Tensor[(1, 600), float32]) */;
  %427 = cast(meta[relay.Constant][33] /* ty=Tensor[(245), uint64] */, dtype="uint64") /* ty=Tensor[(245), uint64] */;
  %428 = reshape(%427, newshape=[7, 5, 7]) /* ty=Tensor[(7, 5, 7), uint64] */;
  %429 = @func_5618() /* ty=Tensor[(7, 16, 12), bool] */;
  %430 = %426.2;
  %431 = @func_3008(%428) /* ty=Tensor[(7, 5, 7), uint64] */;
  (%429, %430, %431, meta[relay.Constant][33] /* ty=Tensor[(245), uint64] */)
}

def @func_8319(%var_8295: Tensor[(11, 1, 8), float64]) -> Tensor[(11, 1, 8), float64] {
  %432 = cast(%var_8295, dtype="float64") /* ty=Tensor[(11, 1, 8), float64] */;
  %433 = atan(%432) /* ty=Tensor[(11, 1, 8), float64] */;
  %434 = cast(%433, dtype="float64") /* ty=Tensor[(11, 1, 8), float64] */;
  asinh(%434) /* ty=Tensor[(11, 1, 8), float64] */
}

def @func_4584() -> (Tensor[(7, 16, 12), bool],) {
  %435 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %436 = %435.0;
  (%436,)
}

def @func_6020() -> (Tensor[(7, 16, 12), bool],) {
  %437 = @func_5698() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
  %438 = %437.0;
  (%438,)
}

def @func_5842(%var_5835: uint16, %var_5836: Tensor[(3, 5, 1), uint16]) -> (Tensor[(3, 5, 1), uint16],) {
  %439 = cast(%var_5835, dtype="uint16") /* ty=uint16 */;
  %440 = cast(%var_5836, dtype="uint16") /* ty=Tensor[(3, 5, 1), uint16] */;
  %441 = bitwise_and(%439, %440) /* ty=Tensor[(3, 5, 1), uint16] */;
  (%441,)
}

def @func_7305(%var_7260: float64, %var_7261: Tensor[(11, 14, 8), float64]) -> (Tensor[(11, 14, 8), float64], Tensor[(7, 16, 12), bool]) {
  %442 = cast(%var_7260, dtype="float64") /* ty=float64 */;
  %443 = cast(%var_7261, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %444 = divide(%442, %443) /* ty=Tensor[(11, 14, 8), float64] */;
  %445 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
  (%444, %445)
}

def @func_1023(%var_986: Tensor[(7, 11, 3), uint64]) -> (Tensor[(7, 11, 3), bool], Tensor[(8, 5, 14), uint32], Tensor[(4, 140), uint32]) {
  %446 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 11, 3), uint64] */, dtype="bool") /* ty=Tensor[(7, 11, 3), bool] */;
  %447 = shape_of(%var_986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%var_986, dtype="bool") /* ty=Tensor[(7, 11, 3), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 140), uint32] */, dtype="uint32") /* ty=Tensor[(4, 140), uint32] */;
  %451 = cast(meta[relay.Constant][35] /* ty=Tensor[(4, 140), uint32] */, dtype="uint32") /* ty=Tensor[(4, 140), uint32] */;
  %452 = reshape(%450, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %453 = reshape(%451, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %454 = less(%448, %449) /* ty=Tensor[(7, 11, 3), bool] */;
  %455 = @func_147(%452, %453) /* ty=Tensor[(8, 5, 14), uint32] */;
  (%454, %455, meta[relay.Constant][35] /* ty=Tensor[(4, 140), uint32] */)
}

def @func_3702(%var_3689: Tensor[(6, 15, 2), int16], %var_3690: Tensor[(6, 15, 2), int16], %var_3697: Tensor[(84, 1), float64]) -> (Tensor[(6, 15, 2), float32], Tensor[(16, 3, 16), float32], Tensor[(84, 1), float64], Tensor[(1170), int32]) {
  %456 = cast(%var_3690, dtype="int16") /* ty=Tensor[(6, 15, 2), int16] */;
  %457 = shape_of(%var_3689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_3689, dtype="int16") /* ty=Tensor[(6, 15, 2), int16] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %460 = right_shift(%458, %459) /* ty=Tensor[(6, 15, 2), int16] */;
  %461 = cast(%460, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
  %462 = cast(%var_3697, dtype="float64") /* ty=Tensor[(84, 1), float64] */;
  %463 = cast(meta[relay.Constant][36] /* ty=Tensor[(1170), int32] */, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %464 = reshape(%462, newshape=[84]) /* ty=Tensor[(84), float64] */;
  %465 = reshape(%463, newshape=[1170]) /* ty=Tensor[(1170), int32] */;
  %466 = @func_2822(%464, %465) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32], Tensor[(9, 14, 16), float32], Tensor[(2016), float32]) */;
  %467 = acos(%461) /* ty=Tensor[(6, 15, 2), float32] */;
  %468 = %466.0;
  (%467, %468, %var_3697, meta[relay.Constant][36] /* ty=Tensor[(1170), int32] */)
}

def @func_6180() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) {
  %469 = @func_3827() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %470 = cast(meta[relay.Constant][37] /* ty=Tensor[(42, 2), float64] */, dtype="float64") /* ty=Tensor[(42, 2), float64] */;
  %471 = reshape(%470, newshape=[84]) /* ty=Tensor[(84), float64] */;
  %472 = @func_4279(%471) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
  %473 = %469.0;
  %474 = @func_5618() /* ty=Tensor[(7, 16, 12), bool] */;
  %475 = %472.2;
  (%473, %474, %475, meta[relay.Constant][37] /* ty=Tensor[(42, 2), float64] */)
}

def @func_7257() -> (Tensor[(7, 16, 12), bool],) {
  %476 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
  (%476,)
}

def @func_4620() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(6, 12, 4), float64], Tensor[(288), float64]) {
  %477 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %478 = cast(meta[relay.Constant][38] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %479 = reshape(%478, newshape=[6, 12, 4]) /* ty=Tensor[(6, 12, 4), float64] */;
  %480 = %477.0;
  %481 = @func_4108() /* ty=Tensor[(7, 16, 12), bool] */;
  %482 = @func_426(%479) /* ty=Tensor[(6, 12, 4), float64] */;
  (%480, %481, %482, meta[relay.Constant][38] /* ty=Tensor[(288), float64] */)
}

def @func_3922() -> (Tensor[(7, 16, 12), bool],) {
  %483 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %484 = %483.0;
  (%484,)
}

def @func_5504(%var_5467: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), uint32], Tensor[(7, 16, 12), bool]) {
  %485 = cast(%var_5467, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
  %486 = cosh(%485) /* ty=Tensor[(7, 8, 12), float64] */;
  %487 = cast(%486, dtype="uint32") /* ty=Tensor[(7, 8, 12), uint32] */;
  %488 = shape_of(%var_5467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%var_5467, dtype="uint32") /* ty=Tensor[(7, 8, 12), uint32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %491 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %492 = logical_xor(%489, %490) /* ty=Tensor[(7, 8, 12), uint32] */;
  %493 = %491.0;
  (%492, %493)
}

def @func_6290(%var_6263: Tensor[(14, 144), float32]) -> (Tensor[(14, 144), float32], Tensor[(7, 16, 12), bool]) {
  %494 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %495 = %494.6;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %497 = acos(%496) /* ty=Tensor[(14, 144), float32] */;
  %498 = cast(%var_6263, dtype="uint16") /* ty=Tensor[(14, 144), uint16] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(2), int32] */;
  %500 = cast(%497, dtype="uint16") /* ty=Tensor[(14, 144), uint16] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %502 = bitwise_or(%500, %501) /* ty=Tensor[(14, 144), uint16] */;
  %503 = cast(%502, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %504 = exp(%503) /* ty=Tensor[(14, 144), float32] */;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %506 = reshape(%505, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float32] */;
  %507 = @func_5293(%506) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2016), float32], float64, Tensor[(1470), float64], Tensor[(84), float64], Tensor[(2016, 1), float32], Tensor[(560), uint32], Tensor[(12, 36), float32]) */;
  %508 = %507.0;
  (%504, %508)
}

def @func_4928(%var_4895: int16, %var_4896: Tensor[(1, 7, 12), int16]) -> (Tensor[(?, 7, 12), uint16],) {
  %509 = cast(%var_4895, dtype="bool") /* ty=bool */;
  %510 = cast(%var_4896, dtype="bool") /* ty=Tensor[(1, 7, 12), bool] */;
  %511 = less(%509, %510) /* ty=Tensor[(1, 7, 12), bool] */;
  %512 = cast(%var_4896, dtype="uint16") /* ty=Tensor[(1, 7, 12), uint16] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="uint16") /* ty=Tensor[(1, 7, 12), uint16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %516 = subtract(%514, %515) /* ty=Tensor[(?, 7, 12), uint16] */;
  (%516,)
}

def @func_5036() -> (Tensor[(9, 13, 10), bool], Tensor[(6, 9, 8), float32], Tensor[(432), float32]) {
  %517 = @func_4765() /* ty=(Tensor[(1792), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32]) */;
  %518 = cast(meta[relay.Constant][39] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %519 = reshape(%518, newshape=[6, 9, 8]) /* ty=Tensor[(6, 9, 8), float32] */;
  %520 = %517.1;
  %521 = @func_2124(%519) /* ty=Tensor[(6, 9, 8), float32] */;
  (%520, %521, meta[relay.Constant][39] /* ty=Tensor[(432), float32] */)
}

def @func_8360() -> Tensor[(7, 16, 12), bool] {
  %522 = @func_7542() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %522.0
}

def @func_6126(%var_6107: Tensor[(12, 50), int32]) -> (Tensor[(7, 16, 12), bool], Tensor[(7, 5, 7), uint64], Tensor[(12, 50), float64]) {
  %523 = @func_4584() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %524 = cast(%var_6107, dtype="int32") /* ty=Tensor[(12, 50), int32] */;
  %525 = reshape(%524, newshape=[600]) /* ty=Tensor[(600), int32] */;
  %526 = @func_3753(%525) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(7, 5, 7), uint64], Tensor[(600), int32], Tensor[(?, 1792), int8]) */;
  %527 = cast(%var_6107, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
  %528 = %523.0;
  %529 = %526.2;
  %530 = exp(%527) /* ty=Tensor[(12, 50), float64] */;
  (%528, %529, %530)
}

def @func_8432(%var_8414: Tensor[(624), int64]) -> (Tensor[(7, 16, 12), bool], Tensor[(150), float64], Tensor[(15, 10, 624), bool]) {
  %531 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %532 = cast(%var_8414, dtype="int64") /* ty=Tensor[(624), int64] */;
  %533 = cast(%var_8414, dtype="int64") /* ty=Tensor[(624), int64] */;
  %534 = cast(meta[relay.Constant][40] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %535 = reshape(%532, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), int64] */;
  %536 = reshape(%533, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), int64] */;
  %537 = reshape(%534, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %538 = @func_3986(%535, %536, %537) /* ty=(Tensor[(13, 12, 4), uint64], Tensor[(15, 10, 1), float32], Tensor[(150), float64]) */;
  %539 = %538.1;
  %540 = cast(%var_8414, dtype="bool") /* ty=Tensor[(624), bool] */;
  %541 = cast(%539, dtype="bool") /* ty=Tensor[(15, 10, 1), bool] */;
  %542 = %531.0;
  %543 = logical_and(%540, %541) /* ty=Tensor[(15, 10, 624), bool] */;
  (%542, meta[relay.Constant][40] /* ty=Tensor[(150), float64] */, %543)
}

def @func_312(%var_291: Tensor[(16, 1, 4), float32]) -> (Tensor[(16, 1, 4), bool],) {
  %544 = cast(-3.65269f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %545 = cast(%var_291, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
  %546 = less_equal(%544, %545) /* ty=Tensor[(16, 1, 4), bool] */;
  (%546,)
}

def @func_4765() -> (Tensor[(1792), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32]) {
  %547 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %548 = %547.3;
  %549 = cast(%548, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %550 = cast(meta[relay.Constant][41] /* ty=Tensor[(1170), int32] */, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %551 = cast(meta[relay.Constant][41] /* ty=Tensor[(1170), int32] */, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %552 = reshape(%550, newshape=[10, 117]) /* ty=Tensor[(10, 117), int32] */;
  %553 = reshape(%551, newshape=[10, 117]) /* ty=Tensor[(10, 117), int32] */;
  %554 = @func_3679(%552, %553) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(9, 13, 10), bool], Tensor[(10, 117), uint64]) */;
  %555 = exp(%549) /* ty=Tensor[(1792), float64] */;
  %556 = %554.1;
  (%555, %556, meta[relay.Constant][41] /* ty=Tensor[(1170), int32] */)
}

def @func_5404() -> Tensor[(7, 16, 12), bool] {
  %557 = @func_4584() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %557.0
}

def @func_5856() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %558 = @func_5461() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %559 = %558.0;
  %560 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
  (%559, %560)
}

def @func_4238() -> Tensor[(7, 16, 12), bool] {
  @func_4108() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_607(%var_537: Tensor[(6, 2, 1), bool], %var_564: Tensor[(560), uint32]) -> (Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) {
  %561 = cast(%var_564, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %562 = cast(%var_564, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %563 = reshape(%561, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %564 = reshape(%562, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %565 = cast(%var_537, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %566 = sigmoid(%565) /* ty=Tensor[(6, 2, 1), float64] */;
  %567 = cast(%566, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %568 = rsqrt(%567) /* ty=Tensor[(6, 2, 1), float32] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %570 = erf(%569) /* ty=Tensor[(6, 2, 1), float32] */;
  %571 = cast(%var_537, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %572 = cast(meta[relay.Constant][42] /* ty=Tensor[(6, 2, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 2, 9), bool] */;
  %573 = logical_or(%571, %572) /* ty=Tensor[(6, 2, 9), bool] */;
  %574 = cast(%570, dtype="int32") /* ty=Tensor[(6, 2, 1), int32] */;
  %575 = cast(%573, dtype="int32") /* ty=Tensor[(6, 2, 9), int32] */;
  %576 = cast(%570, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %577 = cast(%var_564, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %578 = cast(%var_564, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %579 = reshape(%577, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %580 = reshape(%578, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %581 = @func_147(%563, %564) /* ty=Tensor[(8, 5, 14), uint32] */;
  %582 = logical_xor(%574, %575) /* ty=Tensor[(6, 2, 9), int32] */;
  %583 = acos(%576) /* ty=Tensor[(6, 2, 1), float32] */;
  %584 = @func_147(%579, %580) /* ty=Tensor[(8, 5, 14), uint32] */;
  (%581, %var_564, %582, %583, %584)
}

def @func_7542() -> (Tensor[(7, 16, 12), bool],) {
  %585 = @func_6943() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %586 = %585.0;
  (%586,)
}

def @func_4469(%var_4465: Tensor[(560), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(9, 3, 7), int8], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(560), uint32]) {
  %587 = cast(meta[relay.Constant][43] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %588 = cast(meta[relay.Constant][43] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %589 = cast(meta[relay.Constant][44] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %590 = cast(%var_4465, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %591 = reshape(%587, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %592 = reshape(%588, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %593 = reshape(%589, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %594 = reshape(%590, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %595 = @func_2329(%591, %592, %593, %594) /* ty=(Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) */;
  %596 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
  %597 = %595.0;
  (%596, %597, meta[relay.Constant][43] /* ty=Tensor[(189), int8] */, meta[relay.Constant][44] /* ty=Tensor[(2016), float32] */, %var_4465)
}

def @func_5259() -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) {
  %598 = cast(meta[relay.Constant][45] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %599 = reshape(%598, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
  %600 = cast(meta[relay.Constant][45] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %601 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
  %602 = @func_1205(%599) /* ty=Tensor[(2, 3, 14), float64] */;
  %603 = sigmoid(%600) /* ty=Tensor[(84), float64] */;
  (%601, %602, %603)
}

def @func_3679(%var_3659: Tensor[(10, 117), int32], %var_3665: Tensor[(10, 117), int32]) -> (Tensor[(7, 16, 12), bool], Tensor[(9, 13, 10), bool], Tensor[(10, 117), uint64]) {
  %604 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %605 = cast(%var_3659, dtype="int32") /* ty=Tensor[(10, 117), int32] */;
  %606 = cast(%var_3659, dtype="int32") /* ty=Tensor[(10, 117), int32] */;
  %607 = reshape(%605, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), int32] */;
  %608 = reshape(%606, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), int32] */;
  %609 = @func_2458(%607, %608) /* ty=(Tensor[(9, 13, 10), bool],) */;
  %610 = cast(%var_3665, dtype="uint64") /* ty=Tensor[(10, 117), uint64] */;
  %611 = shape_of(%var_3659, dtype="int32") /* ty=Tensor[(2), int32] */;
  %612 = cast(%var_3659, dtype="uint64") /* ty=Tensor[(10, 117), uint64] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %614 = %604.0;
  %615 = %609.0;
  %616 = right_shift(%612, %613) /* ty=Tensor[(10, 117), uint64] */;
  (%614, %615, %616)
}

def @func_3642() -> (Tensor[(7, 16, 12), bool],) {
  %617 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(1, 16, 12), bool] */;
  %618 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 16, 12), bool] */;
  %619 = greater_equal(%617, %618) /* ty=Tensor[(7, 16, 12), bool] */;
  %620 = cast(meta[relay.Constant][47] /* ty=Tensor[(7, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 16, 12), bool] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="bool") /* ty=Tensor[(7, 16, 12), bool] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %624 = less(%622, %623) /* ty=Tensor[(7, 16, 12), bool] */;
  (%624,)
}

def @func_2329(%var_2270: Tensor[(9, 3, 7), int8], %var_2271: Tensor[(9, 3, 7), int8], %var_2291: Tensor[(2016), float32], %var_2320: Tensor[(560), uint32]) -> (Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) {
  %625 = cast(%var_2271, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %626 = shape_of(%var_2270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%var_2270, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %629 = cast(%var_2291, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %630 = reshape(%629, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float32] */;
  %631 = cast(%var_2270, dtype="float64") /* ty=Tensor[(9, 3, 7), float64] */;
  %632 = log10(%631) /* ty=Tensor[(9, 3, 7), float64] */;
  %633 = cast(%var_2270, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %637 = cast(meta[relay.Constant][48] /* ty=Tensor[(48), uint16] */, dtype="uint16") /* ty=Tensor[(48), uint16] */;
  %638 = reshape(%637, newshape=[2, 12, 2]) /* ty=Tensor[(2, 12, 2), uint16] */;
  %639 = @func_441(%638) /* ty=(Tensor[(2, 12, 2), uint16],) */;
  %640 = cast(meta[relay.Constant][49] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %641 = cast(%var_2320, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %642 = reshape(%640, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
  %643 = reshape(%641, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %644 = @func_607(%642, %643) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
  %645 = cast(meta[relay.Constant][49] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %646 = cast(%var_2320, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %647 = reshape(%645, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
  %648 = reshape(%646, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %649 = @func_607(%647, %648) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
  %650 = add(%627, %628) /* ty=Tensor[(9, 3, 7), int8] */;
  %651 = @func_825(%630) /* ty=Tensor[(9, 14, 16), float32] */;
  %652 = bitwise_and(%635, %636) /* ty=Tensor[(9, 3, 7), int8] */;
  %653 = %639.0;
  %654 = %644.3;
  %655 = %649.1;
  (%650, %651, %var_2291, %652, %653, meta[relay.Constant][48] /* ty=Tensor[(48), uint16] */, %654, meta[relay.Constant][49] /* ty=Tensor[(12), bool] */, %var_2320, %655)
}

def @func_5921() -> Tensor[(7, 16, 12), bool] {
  %656 = @func_5856() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
  %656.0
}

def @func_6814(%var_6726: Tensor[(4, 140), uint32], %var_6760: Tensor[(2704), uint8], %var_6761: Tensor[(112), float32], %var_6764: Tensor[(260), int64], %var_6765: Tensor[(2, 896), int64], %var_6766: Tensor[(12), bool]) -> (Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(4, 140), uint32], Tensor[(7, 16, 12), bool], Tensor[(1, 2704), uint8], Tensor[(112), float32], Tensor[(2, 10, 13), float32], Tensor[(260), int64], Tensor[(2, 896), int64], Tensor[(12), bool], Tensor[(84), float64], Tensor[(2704), float32]) {
  %657 = cast(%var_6726, dtype="uint32") /* ty=Tensor[(4, 140), uint32] */;
  %658 = reshape(%657, newshape=[280, 2]) /* ty=Tensor[(280, 2), uint32] */;
  %659 = @func_4308(%658) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(280, 2), uint32]) */;
  %660 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %661 = cast(%var_6760, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
  %662 = cast(%var_6761, dtype="float32") /* ty=Tensor[(112), float32] */;
  %663 = reshape(%661, newshape=[1, 2704]) /* ty=Tensor[(1, 2704), uint8] */;
  %664 = reshape(%662, newshape=[4, 28]) /* ty=Tensor[(4, 28), float32] */;
  %665 = @func_4388(%663, %664) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(1, 2704), uint8], Tensor[(7, 8, 2), float64], Tensor[(4, 28), float32], Tensor[(4, 140), uint32], Tensor[(231), float64]) */;
  %666 = cast(%var_6764, dtype="int64") /* ty=Tensor[(260), int64] */;
  %667 = cast(%var_6765, dtype="int64") /* ty=Tensor[(2, 896), int64] */;
  %668 = cast(%var_6766, dtype="bool") /* ty=Tensor[(12), bool] */;
  %669 = reshape(%666, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), int64] */;
  %670 = reshape(%667, newshape=[1, 1792]) /* ty=Tensor[(1, 1792), int64] */;
  %671 = reshape(%668, newshape=[12, 1]) /* ty=Tensor[(12, 1), bool] */;
  %672 = @func_3156(%669, %670, %671) /* ty=(Tensor[(12), bool], Tensor[(1, 1792), int64], Tensor[(12, 1), bool], Tensor[(2, 10, 13), float32]) */;
  %673 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
  %674 = cast(%var_6760, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %675 = @func_6492() /* ty=Tensor[(7, 16, 12), bool] */;
  %676 = %659.1;
  %677 = %660.0;
  %678 = %665.2;
  %679 = %672.3;
  %680 = %673.2;
  %681 = sqrt(%674) /* ty=Tensor[(2704), float32] */;
  (%675, %676, %var_6726, %677, %678, %var_6761, %679, %var_6764, %var_6765, %var_6766, %680, %681)
}

def @func_6851() -> Tensor[(7, 16, 12), bool] {
  %682 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %682.0
}

def @func_1205(%var_1196: Tensor[(2, 3, 14), float64]) -> Tensor[(2, 3, 14), float64] {
  %683 = cast(%var_1196, dtype="float64") /* ty=Tensor[(2, 3, 14), float64] */;
  erf(%683) /* ty=Tensor[(2, 3, 14), float64] */
}

def @func_4571() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) {
  %684 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %685 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %686 = cast(meta[relay.Constant][50] /* ty=Tensor[(1792), int64] */, dtype="int64") /* ty=Tensor[(1792), int64] */;
  %687 = cast(meta[relay.Constant][51] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %688 = reshape(%686, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), int64] */;
  %689 = reshape(%687, newshape=[12]) /* ty=Tensor[(12), bool] */;
  %690 = @func_812(%688, %689) /* ty=(Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) */;
  %691 = cast(meta[relay.Constant][52] /* ty=Tensor[(14, 144), float32] */, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %692 = reshape(%691, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float32] */;
  %693 = %684.0;
  %694 = %685.0;
  %695 = %690.3;
  %696 = @func_825(%692) /* ty=Tensor[(9, 14, 16), float32] */;
  (%693, %694, %695, meta[relay.Constant][50] /* ty=Tensor[(1792), int64] */, meta[relay.Constant][51] /* ty=Tensor[(12), bool] */, %696, meta[relay.Constant][52] /* ty=Tensor[(14, 144), float32] */)
}

def @func_2910(%var_2895: Tensor[(7, 8, 2), float32]) -> Tensor[(7, 8, 2), float64] {
  %697 = cast(%var_2895, dtype="float32") /* ty=Tensor[(7, 8, 2), float32] */;
  %698 = cos(%697) /* ty=Tensor[(7, 8, 2), float32] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(7, 8, 2), float32] */;
  %700 = exp(%699) /* ty=Tensor[(7, 8, 2), float32] */;
  %701 = cast(%700, dtype="float64") /* ty=Tensor[(7, 8, 2), float64] */;
  sinh(%701) /* ty=Tensor[(7, 8, 2), float64] */
}

def @func_6365(%var_6359: Tensor[(2, 8, 10), float64]) -> (Tensor[(2, 8, 10), float64],) {
  %702 = cast(%var_6359, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
  %703 = sigmoid(%702) /* ty=Tensor[(2, 8, 10), float64] */;
  (%703,)
}

def @func_5698() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %704 = @func_5404() /* ty=Tensor[(7, 16, 12), bool] */;
  %705 = @func_5323() /* ty=Tensor[(7, 16, 12), bool] */;
  (%704, %705)
}

def @func_426(%var_423: Tensor[(6, 12, 4), float64]) -> Tensor[(6, 12, 4), float64] {
  %706 = cast(%var_423, dtype="float64") /* ty=Tensor[(6, 12, 4), float64] */;
  acos(%706) /* ty=Tensor[(6, 12, 4), float64] */
}

def @func_3809() -> (Tensor[(7, 16, 12), bool],) {
  %707 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %708 = %707.0;
  (%708,)
}

def @func_3214(%var_3193: Tensor[(10, 15, 4), int32]) -> (Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) {
  %709 = cast(%var_3193, dtype="int32") /* ty=Tensor[(10, 15, 4), int32] */;
  %710 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(10, 15, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(meta[relay.Constant][53] /* ty=Tensor[(10, 15, 4), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 4), int32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %713 = cast(meta[relay.Constant][54] /* ty=Tensor[(245), uint64] */, dtype="uint64") /* ty=Tensor[(245), uint64] */;
  %714 = reshape(%713, newshape=[7, 5, 7]) /* ty=Tensor[(7, 5, 7), uint64] */;
  %715 = bitwise_or(%711, %712) /* ty=Tensor[(10, 15, 4), int32] */;
  %716 = @func_3008(%714) /* ty=Tensor[(7, 5, 7), uint64] */;
  (%715, %716, meta[relay.Constant][54] /* ty=Tensor[(245), uint64] */)
}

def @func_5059() -> (Tensor[(7, 16, 12), bool], Tensor[(12), bool]) {
  %717 = @func_4584() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %718 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %719 = %717.0;
  %720 = %718.2;
  (%719, %720)
}

def @func_6052() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %721 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %722 = @func_3827() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %723 = %721.0;
  %724 = @func_5832() /* ty=Tensor[(7, 16, 12), bool] */;
  %725 = %722.0;
  (%723, %724, %725)
}

def @func_3904(%var_3865: Tensor[(15, 10, 1), float64]) -> (Tensor[(15, 10, 1), float32], Tensor[(15, 10, ?), float64]) {
  %726 = cast(%var_3865, dtype="float32") /* ty=Tensor[(15, 10, 1), float32] */;
  %727 = cast(%var_3865, dtype="float32") /* ty=Tensor[(15, 10, 1), float32] */;
  %728 = rsqrt(%727) /* ty=Tensor[(15, 10, 1), float32] */;
  %729 = cast(%var_3865, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %730 = sin(%729) /* ty=Tensor[(15, 10, 1), float64] */;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %732 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %733 = cast(%728, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %734 = dyn.reshape(%731, %732, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %735 = atanh(%726) /* ty=Tensor[(15, 10, 1), float32] */;
  %736 = add(%733, %734) /* ty=Tensor[(15, 10, ?), float64] */;
  (%735, %736)
}

def @func_5613() -> (Tensor[(84), float64], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool], Tensor[(2704), uint8]) {
  %737 = @func_5259() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
  %738 = cast(meta[relay.Constant][55] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %739 = cast(meta[relay.Constant][55] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %740 = reshape(%738, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %741 = reshape(%739, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %742 = cast(meta[relay.Constant][56] /* ty=Tensor[(2704), uint8] */, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
  %743 = reshape(%742, newshape=[2704]) /* ty=Tensor[(2704), uint8] */;
  %744 = @func_4654(%743) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(2704), uint8], Tensor[(7, 16, 12), bool]) */;
  %745 = %737.2;
  %746 = @func_147(%740, %741) /* ty=Tensor[(8, 5, 14), uint32] */;
  %747 = %744.3;
  (%745, %746, meta[relay.Constant][55] /* ty=Tensor[(560), uint32] */, %747, meta[relay.Constant][56] /* ty=Tensor[(2704), uint8] */)
}

def @func_6383(%var_6380: Tensor[(11, 4, 4), float32]) -> Tensor[(11, 4, 4), float32] {
  %748 = cast(%var_6380, dtype="float32") /* ty=Tensor[(11, 4, 4), float32] */;
  tan(%748) /* ty=Tensor[(11, 4, 4), float32] */
}

def @func_6492() -> Tensor[(7, 16, 12), bool] {
  %749 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %749.0
}

def @func_4308(%var_4292: Tensor[(280, 2), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(280, 2), uint32]) {
  %750 = cast(meta[relay.Constant][57] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %751 = cast(%var_4292, dtype="uint32") /* ty=Tensor[(280, 2), uint32] */;
  %752 = reshape(%750, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
  %753 = reshape(%751, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %754 = @func_607(%752, %753) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
  %755 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
  %756 = %754.1;
  (%755, %756, meta[relay.Constant][57] /* ty=Tensor[(12), bool] */, %var_4292)
}

def @func_5435(%var_5431: Tensor[(8, 3, 16), float32]) -> Tensor[(8, 3, 16), float32] {
  %757 = cast(%var_5431, dtype="float32") /* ty=Tensor[(8, 3, 16), float32] */;
  asin(%757) /* ty=Tensor[(8, 3, 16), float32] */
}

def @func_4279(%var_4274: Tensor[(84), float64]) -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) {
  %758 = cast(%var_4274, dtype="float64") /* ty=Tensor[(84), float64] */;
  %759 = reshape(%758, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
  %760 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
  %761 = @func_1205(%759) /* ty=Tensor[(2, 3, 14), float64] */;
  (%760, %761, %var_4274)
}

def @func_6444() -> (Tensor[(7, 16, 12), bool],) {
  %762 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %763 = %762.0;
  (%763,)
}

def @func_8201(%var_8144: Tensor[(12, 4), uint16], %var_8164: Tensor[(2016), float32], %var_8195: Tensor[(560), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(7, 16, 12), float32], Tensor[(12, 4), uint16], Tensor[(288), float64], Tensor[(2016), bool], Tensor[(7, 16, 12), bool], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool]) {
  %764 = cast(meta[relay.Constant][58] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %765 = reshape(%764, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float32] */;
  %766 = @func_5293(%765) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2016), float32], float64, Tensor[(1470), float64], Tensor[(84), float64], Tensor[(2016, 1), float32], Tensor[(560), uint32], Tensor[(12, 36), float32]) */;
  %767 = cast(%var_8144, dtype="uint16") /* ty=Tensor[(12, 4), uint16] */;
  %768 = @func_5904() /* ty=Tensor[(7, 16, 12), bool] */;
  %769 = cast(%768, dtype="bool") /* ty=Tensor[(7, 16, 12), bool] */;
  %770 = cast(meta[relay.Constant][59] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %771 = reshape(%767, newshape=[48]) /* ty=Tensor[(48), uint16] */;
  %772 = reshape(%769, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), bool] */;
  %773 = reshape(%770, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %774 = @func_5136(%771, %772, %773) /* ty=(Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(7, 16, 12), float32]) */;
  %775 = cast(%var_8164, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %776 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(2016), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %777 = cast(meta[relay.Constant][58] /* ty=Tensor[(2016), float32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %779 = right_shift(%777, %778) /* ty=Tensor[(2016), uint32] */;
  %780 = cast(meta[relay.Constant][58] /* ty=Tensor[(2016), float32] */, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(1), int32] */;
  %782 = cast(%779, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?), bool] */;
  %784 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %785 = cast(%var_8195, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %786 = cast(%var_8195, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %787 = reshape(%785, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %788 = reshape(%786, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %789 = @func_5698() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
  %790 = %766.4;
  %791 = %774.4;
  %792 = logical_or(%782, %783) /* ty=Tensor[(2016), bool] */;
  %793 = %784.0;
  %794 = @func_147(%787, %788) /* ty=Tensor[(8, 5, 14), uint32] */;
  %795 = %789.0;
  (%768, %790, %791, %var_8144, meta[relay.Constant][59] /* ty=Tensor[(288), float64] */, %792, %793, %794, %var_8195, %795)
}

def @func_6943() -> (Tensor[(7, 16, 12), bool],) {
  %796 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
  (%796,)
}

def @func_7900(%var_7892: Tensor[(2016), float32], %var_7895: Tensor[(4, 600), float64]) -> (Tensor[(7, 16, 12), bool], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(4, 600), float64]) {
  %797 = @func_6052() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
  %798 = cast(%var_7892, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %799 = reshape(%798, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float32] */;
  %800 = @func_4883() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) */;
  %801 = %800.2;
  %802 = cast(%801, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %803 = asinh(%802) /* ty=Tensor[(1, 600), float64] */;
  %804 = cast(%803, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %805 = cast(%var_7895, dtype="float64") /* ty=Tensor[(4, 600), float64] */;
  %806 = %797.2;
  %807 = @func_825(%799) /* ty=Tensor[(9, 14, 16), float32] */;
  %808 = minimum(%804, %805) /* ty=Tensor[(4, 600), float64] */;
  (%806, %807, %var_7892, %808)
}

def @func_7977() -> Tensor[(7, 16, 12), bool] {
  %809 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %809.0
}

def @func_8090() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %810 = @func_5323() /* ty=Tensor[(7, 16, 12), bool] */;
  %811 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
  (%810, %811)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8090() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %0 = @func_5323() /* ty=Tensor[(7, 16, 12), bool] */;
  %1 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
  (%0, %1)
}

def @func_5061() -> (Tensor[(7, 16, 12), bool], Tensor[(12), bool]) {
  @func_5059() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(12), bool]) */
}

def @func_5406() -> Tensor[(7, 16, 12), bool] {
  @func_5404() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_2329(%var_2270: Tensor[(9, 3, 7), int8], %var_2271: Tensor[(9, 3, 7), int8], %var_2291: Tensor[(2016), float32], %var_2320: Tensor[(560), uint32]) -> (Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) {
  %2 = cast(%var_2271, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %3 = shape_of(%var_2270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_2270, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %6 = cast(%var_2291, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %7 = reshape(%6, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float32] */;
  %8 = cast(%var_2270, dtype="float64") /* ty=Tensor[(9, 3, 7), float64] */;
  %9 = log10(%8) /* ty=Tensor[(9, 3, 7), float64] */;
  %10 = cast(%var_2270, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(48), uint16] */, dtype="uint16") /* ty=Tensor[(48), uint16] */;
  %15 = reshape(%14, newshape=[2, 12, 2]) /* ty=Tensor[(2, 12, 2), uint16] */;
  %16 = @func_441(%15) /* ty=(Tensor[(2, 12, 2), uint16],) */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %18 = cast(%var_2320, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %19 = reshape(%17, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
  %20 = reshape(%18, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %21 = @func_607(%19, %20) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %23 = cast(%var_2320, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %24 = reshape(%22, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
  %25 = reshape(%23, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %26 = @func_607(%24, %25) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
  %27 = add(%4, %5) /* ty=Tensor[(9, 3, 7), int8] */;
  %28 = @func_825(%7) /* ty=Tensor[(9, 14, 16), float32] */;
  %29 = bitwise_and(%12, %13) /* ty=Tensor[(9, 3, 7), int8] */;
  %30 = %16.0;
  %31 = %21.3;
  %32 = %26.1;
  (%27, %28, %var_2291, %29, %30, meta[relay.Constant][0] /* ty=Tensor[(48), uint16] */, %31, meta[relay.Constant][1] /* ty=Tensor[(12), bool] */, %var_2320, %32)
}

def @func_7694() -> (Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(600), int32]) {
  @func_7692() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(600), int32]) */
}

def @func_3643() -> (Tensor[(7, 16, 12), bool],) {
  %41 = fn () -> (Tensor[(7, 16, 12), bool],) {
    %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(1, 16, 12), bool] */;
    %34 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 16, 12), bool] */;
    %35 = greater_equal(%33, %34) /* ty=Tensor[(7, 16, 12), bool] */;
    %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 16, 12), uint64] */, dtype="bool") /* ty=Tensor[(7, 16, 12), bool] */;
    %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
    %38 = cast(%35, dtype="bool") /* ty=Tensor[(7, 16, 12), bool] */;
    %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %40 = less(%38, %39) /* ty=Tensor[(7, 16, 12), bool] */;
    (%40,)
  };
  %41() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_6293(%var_6291: Tensor[(14, 144), float32]) -> (Tensor[(14, 144), float32], Tensor[(7, 16, 12), bool]) {
  @func_6290(%var_6291) /* ty=(Tensor[(14, 144), float32], Tensor[(7, 16, 12), bool]) */
}

def @func_5293(%var_5279: Tensor[(2016, 1), float32]) -> (Tensor[(7, 16, 12), bool], Tensor[(2016), float32], float64, Tensor[(1470), float64], Tensor[(84), float64], Tensor[(2016, 1), float32], Tensor[(560), uint32], Tensor[(12, 36), float32]) {
  %42 = @func_5059() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(12), bool]) */;
  %43 = cast(-4.32064f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %44 = cast(meta[relay.Constant][4] /* ty=Tensor[(1470), float64] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %45 = cast(meta[relay.Constant][5] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %46 = cast(%var_5279, dtype="float32") /* ty=Tensor[(2016, 1), float32] */;
  %47 = cast(meta[relay.Constant][6] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %48 = cast(meta[relay.Constant][7] /* ty=Tensor[(12, 36), float32] */, dtype="float32") /* ty=Tensor[(12, 36), float32] */;
  %49 = reshape(%43, newshape=[]) /* ty=float64 */;
  %50 = reshape(%44, newshape=[7, 15, 14]) /* ty=Tensor[(7, 15, 14), float64] */;
  %51 = reshape(%45, newshape=[84]) /* ty=Tensor[(84), float64] */;
  %52 = reshape(%46, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %53 = reshape(%47, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %54 = reshape(%48, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %55 = @func_2664(%49, %50, %51, %52, %53, %54) /* ty=(Tensor[(7, 15, 14), float64], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(2016), float32], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(16, 1, 4), bool], Tensor[(64), float32], Tensor[(2016), float32], Tensor[(6, 9, 8), float32], Tensor[(432), float32], Tensor[(560), uint16]) */;
  %56 = %42.0;
  %57 = %55.3;
  (%56, %57, -4.32064f64 /* ty=float64 */, meta[relay.Constant][4] /* ty=Tensor[(1470), float64] */, meta[relay.Constant][5] /* ty=Tensor[(84), float64] */, %var_5279, meta[relay.Constant][6] /* ty=Tensor[(560), uint32] */, meta[relay.Constant][7] /* ty=Tensor[(12, 36), float32] */)
}

def @func_6444() -> (Tensor[(7, 16, 12), bool],) {
  %58 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %59 = %58.0;
  (%59,)
}

def @func_5615() -> (Tensor[(84), float64], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool], Tensor[(2704), uint8]) {
  @func_5613() /* ty=(Tensor[(84), float64], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool], Tensor[(2704), uint8]) */
}

def @func_3217(%var_3215: Tensor[(10, 15, 4), int32]) -> (Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) {
  @func_3214(%var_3215) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */
}

def @func_5038() -> (Tensor[(9, 13, 10), bool], Tensor[(6, 9, 8), float32], Tensor[(432), float32]) {
  @func_5036() /* ty=(Tensor[(9, 13, 10), bool], Tensor[(6, 9, 8), float32], Tensor[(432), float32]) */
}

def @func_3827() -> (Tensor[(7, 16, 12), bool],) {
  %60 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %61 = %60.0;
  (%61,)
}

def @func_1977(%var_1966: Tensor[(13, 13, 16), uint8]) -> (Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) {
  %62 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 1, 16), uint8] */, dtype="uint8") /* ty=Tensor[(13, 1, 16), uint8] */;
  %63 = cast(%var_1966, dtype="uint8") /* ty=Tensor[(13, 13, 16), uint8] */;
  %64 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 1, 16), uint8] */, dtype="float64") /* ty=Tensor[(13, 1, 16), float64] */;
  %65 = bitwise_xor(%62, %63) /* ty=Tensor[(13, 13, 16), uint8] */;
  %66 = atanh(%64) /* ty=Tensor[(13, 1, 16), float64] */;
  (%65, %66)
}

def @func_815(%var_813: Tensor[(16, 7, 16), int64], %var_814: Tensor[(12), bool]) -> (Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) {
  %80 = fn (%var_775: Tensor[(16, 7, 16), int64], %var_801: Tensor[(12), bool]) -> (Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) {
    %67 = cast(%var_775, dtype="int64") /* ty=Tensor[(16, 7, 16), int64] */;
    %68 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(16, 7, 16), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %69 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 7, 16), int64] */, dtype="int64") /* ty=Tensor[(16, 7, 16), int64] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %71 = cast(%var_775, dtype="float32") /* ty=Tensor[(16, 7, 16), float32] */;
    %72 = cast(%var_801, dtype="bool") /* ty=Tensor[(12), bool] */;
    %73 = cast(meta[relay.Constant][10] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
    %74 = reshape(%72, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
    %75 = reshape(%73, newshape=[560]) /* ty=Tensor[(560), uint32] */;
    %76 = @func_607(%74, %75) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
    %77 = bitwise_and(%69, %70) /* ty=Tensor[(16, 7, 16), int64] */;
    %78 = exp(%71) /* ty=Tensor[(16, 7, 16), float32] */;
    %79 = %76.1;
    (%77, %78, %79, %var_801, meta[relay.Constant][10] /* ty=Tensor[(560), uint32] */)
  };
  %80(%var_813, %var_814) /* ty=(Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) */
}

def @func_6221() -> Tensor[(84), float64] {
  %82 = fn () -> Tensor[(84), float64] {
    %81 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
    %81.2
  };
  %82() /* ty=Tensor[(84), float64] */
}

def @func_4571() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) {
  %83 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %84 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %85 = cast(meta[relay.Constant][11] /* ty=Tensor[(1792), int64] */, dtype="int64") /* ty=Tensor[(1792), int64] */;
  %86 = cast(meta[relay.Constant][12] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
  %87 = reshape(%85, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), int64] */;
  %88 = reshape(%86, newshape=[12]) /* ty=Tensor[(12), bool] */;
  %89 = @func_812(%87, %88) /* ty=(Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) */;
  %90 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 144), float32] */, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %91 = reshape(%90, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float32] */;
  %92 = %83.0;
  %93 = %84.0;
  %94 = %89.3;
  %95 = @func_825(%91) /* ty=Tensor[(9, 14, 16), float32] */;
  (%92, %93, %94, meta[relay.Constant][11] /* ty=Tensor[(1792), int64] */, meta[relay.Constant][12] /* ty=Tensor[(12), bool] */, %95, meta[relay.Constant][13] /* ty=Tensor[(14, 144), float32] */)
}

def @func_7232() -> (Tensor[(7, 16, 12), bool],) {
  %97 = fn () -> (Tensor[(7, 16, 12), bool],) {
    %96 = @func_6059() /* ty=Tensor[(7, 16, 12), bool] */;
    (%96,)
  };
  %97() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_314(%var_313: Tensor[(16, 1, 4), float32]) -> (Tensor[(16, 1, 4), bool],) {
  %101 = fn (%var_291: Tensor[(16, 1, 4), float32]) -> (Tensor[(16, 1, 4), bool],) {
    %98 = cast(-3.65269f /* ty=float32 */, dtype="bool") /* ty=bool */;
    %99 = cast(%var_291, dtype="bool") /* ty=Tensor[(16, 1, 4), bool] */;
    %100 = less_equal(%98, %99) /* ty=Tensor[(16, 1, 4), bool] */;
    (%100,)
  };
  %101(%var_313) /* ty=(Tensor[(16, 1, 4), bool],) */
}

def @func_8206(%var_8203: Tensor[(12, 4), uint16], %var_8204: Tensor[(2016), float32], %var_8205: Tensor[(560), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(7, 16, 12), float32], Tensor[(12, 4), uint16], Tensor[(288), float64], Tensor[(2016), bool], Tensor[(7, 16, 12), bool], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool]) {
  @func_8201(%var_8203, %var_8204, %var_8205) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(7, 16, 12), float32], Tensor[(12, 4), uint16], Tensor[(288), float64], Tensor[(2016), bool], Tensor[(7, 16, 12), bool], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool]) */
}

def @func_5296(%var_5294: Tensor[(2016, 1), float32]) -> (Tensor[(7, 16, 12), bool], Tensor[(2016), float32], float64, Tensor[(1470), float64], Tensor[(84), float64], Tensor[(2016, 1), float32], Tensor[(560), uint32], Tensor[(12, 36), float32]) {
  @func_5293(%var_5294) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2016), float32], float64, Tensor[(1470), float64], Tensor[(84), float64], Tensor[(2016, 1), float32], Tensor[(560), uint32], Tensor[(12, 36), float32]) */
}

def @func_5858() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  @func_5856() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */
}

def @func_4281(%var_4280: Tensor[(84), float64]) -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) {
  %106 = fn (%var_4274: Tensor[(84), float64]) -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) {
    %102 = cast(%var_4274, dtype="float64") /* ty=Tensor[(84), float64] */;
    %103 = reshape(%102, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
    %104 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
    %105 = @func_1205(%103) /* ty=Tensor[(2, 3, 14), float64] */;
    (%104, %105, %var_4274)
  };
  %106(%var_4280) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */
}

def @func_1026(%var_1024: Tensor[(7, 11, 3), uint64]) -> (Tensor[(7, 11, 3), bool], Tensor[(8, 5, 14), uint32], Tensor[(4, 140), uint32]) {
  @func_1023(%var_1024) /* ty=(Tensor[(7, 11, 3), bool], Tensor[(8, 5, 14), uint32], Tensor[(4, 140), uint32]) */
}

def @func_607(%var_537: Tensor[(6, 2, 1), bool], %var_564: Tensor[(560), uint32]) -> (Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) {
  %107 = cast(%var_564, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %108 = cast(%var_564, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %109 = reshape(%107, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %110 = reshape(%108, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %111 = cast(%var_537, dtype="float64") /* ty=Tensor[(6, 2, 1), float64] */;
  %112 = sigmoid(%111) /* ty=Tensor[(6, 2, 1), float64] */;
  %113 = cast(%112, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %114 = rsqrt(%113) /* ty=Tensor[(6, 2, 1), float32] */;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %116 = erf(%115) /* ty=Tensor[(6, 2, 1), float32] */;
  %117 = cast(%var_537, dtype="bool") /* ty=Tensor[(6, 2, 1), bool] */;
  %118 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 2, 9), bool] */, dtype="bool") /* ty=Tensor[(6, 2, 9), bool] */;
  %119 = logical_or(%117, %118) /* ty=Tensor[(6, 2, 9), bool] */;
  %120 = cast(%116, dtype="int32") /* ty=Tensor[(6, 2, 1), int32] */;
  %121 = cast(%119, dtype="int32") /* ty=Tensor[(6, 2, 9), int32] */;
  %122 = cast(%116, dtype="float32") /* ty=Tensor[(6, 2, 1), float32] */;
  %123 = cast(%var_564, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %124 = cast(%var_564, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %125 = reshape(%123, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %126 = reshape(%124, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %127 = @func_147(%109, %110) /* ty=Tensor[(8, 5, 14), uint32] */;
  %128 = logical_xor(%120, %121) /* ty=Tensor[(6, 2, 9), int32] */;
  %129 = acos(%122) /* ty=Tensor[(6, 2, 1), float32] */;
  %130 = @func_147(%125, %126) /* ty=Tensor[(8, 5, 14), uint32] */;
  (%127, %var_564, %128, %129, %130)
}

def @func_6053() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %136 = fn () -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
    %131 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %132 = @func_3827() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %133 = %131.0;
    %134 = @func_5832() /* ty=Tensor[(7, 16, 12), bool] */;
    %135 = %132.0;
    (%133, %134, %135)
  };
  %136() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */
}

def @func_6021() -> (Tensor[(7, 16, 12), bool],) {
  %139 = fn () -> (Tensor[(7, 16, 12), bool],) {
    %137 = @func_5698() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
    %138 = %137.0;
    (%138,)
  };
  %139() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_2124(%var_2078: Tensor[(6, 9, 8), float32]) -> Tensor[(6, 9, 8), float32] {
  %140 = cast(%var_2078, dtype="float32") /* ty=Tensor[(6, 9, 8), float32] */;
  %141 = asin(%140) /* ty=Tensor[(6, 9, 8), float32] */;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(6, 9, 8), float32] */;
  %143 = log10(%142) /* ty=Tensor[(6, 9, 8), float32] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(6, 9, 8), float32] */;
  log2(%144) /* ty=Tensor[(6, 9, 8), float32] */
}

def @func_8526(%var_8521: Tensor[(260), int64], %var_8522: Tensor[(1792), int64], %var_8523: Tensor[(12), bool]) -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(2704), uint8], Tensor[(4, 28), float32], Tensor[(260), int64], Tensor[(1792), int64], Tensor[(12), bool]) {
  %145 = cast(meta[relay.Constant][15] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %146 = cast(meta[relay.Constant][16] /* ty=Tensor[(2704), uint8] */, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
  %147 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 28), float32] */, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %148 = cast(%var_8521, dtype="int64") /* ty=Tensor[(260), int64] */;
  %149 = cast(%var_8522, dtype="int64") /* ty=Tensor[(1792), int64] */;
  %150 = cast(%var_8523, dtype="bool") /* ty=Tensor[(12), bool] */;
  %151 = reshape(%145, newshape=[4, 140]) /* ty=Tensor[(4, 140), uint32] */;
  %152 = reshape(%146, newshape=[2704]) /* ty=Tensor[(2704), uint8] */;
  %153 = reshape(%147, newshape=[112]) /* ty=Tensor[(112), float32] */;
  %154 = reshape(%148, newshape=[260]) /* ty=Tensor[(260), int64] */;
  %155 = reshape(%149, newshape=[2, 896]) /* ty=Tensor[(2, 896), int64] */;
  %156 = reshape(%150, newshape=[12]) /* ty=Tensor[(12), bool] */;
  %157 = @func_6814(%151, %152, %153, %154, %155, %156) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(4, 140), uint32], Tensor[(7, 16, 12), bool], Tensor[(1, 2704), uint8], Tensor[(112), float32], Tensor[(2, 10, 13), float32], Tensor[(260), int64], Tensor[(2, 896), int64], Tensor[(12), bool], Tensor[(84), float64], Tensor[(2704), float32]) */;
  %158 = @func_7385() /* ty=Tensor[(7, 16, 12), bool] */;
  %159 = %157.0;
  (%158, %159, meta[relay.Constant][15] /* ty=Tensor[(560), uint32] */, meta[relay.Constant][16] /* ty=Tensor[(2704), uint8] */, meta[relay.Constant][17] /* ty=Tensor[(4, 28), float32] */, %var_8521, %var_8522, %var_8523)
}

def @func_1023(%var_986: Tensor[(7, 11, 3), uint64]) -> (Tensor[(7, 11, 3), bool], Tensor[(8, 5, 14), uint32], Tensor[(4, 140), uint32]) {
  %160 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 11, 3), uint64] */, dtype="bool") /* ty=Tensor[(7, 11, 3), bool] */;
  %161 = shape_of(%var_986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_986, dtype="bool") /* ty=Tensor[(7, 11, 3), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 140), uint32] */, dtype="uint32") /* ty=Tensor[(4, 140), uint32] */;
  %165 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 140), uint32] */, dtype="uint32") /* ty=Tensor[(4, 140), uint32] */;
  %166 = reshape(%164, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %167 = reshape(%165, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %168 = less(%162, %163) /* ty=Tensor[(7, 11, 3), bool] */;
  %169 = @func_147(%166, %167) /* ty=Tensor[(8, 5, 14), uint32] */;
  (%168, %169, meta[relay.Constant][19] /* ty=Tensor[(4, 140), uint32] */)
}

def @func_6814(%var_6726: Tensor[(4, 140), uint32], %var_6760: Tensor[(2704), uint8], %var_6761: Tensor[(112), float32], %var_6764: Tensor[(260), int64], %var_6765: Tensor[(2, 896), int64], %var_6766: Tensor[(12), bool]) -> (Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(4, 140), uint32], Tensor[(7, 16, 12), bool], Tensor[(1, 2704), uint8], Tensor[(112), float32], Tensor[(2, 10, 13), float32], Tensor[(260), int64], Tensor[(2, 896), int64], Tensor[(12), bool], Tensor[(84), float64], Tensor[(2704), float32]) {
  %170 = cast(%var_6726, dtype="uint32") /* ty=Tensor[(4, 140), uint32] */;
  %171 = reshape(%170, newshape=[280, 2]) /* ty=Tensor[(280, 2), uint32] */;
  %172 = @func_4308(%171) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(280, 2), uint32]) */;
  %173 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %174 = cast(%var_6760, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
  %175 = cast(%var_6761, dtype="float32") /* ty=Tensor[(112), float32] */;
  %176 = reshape(%174, newshape=[1, 2704]) /* ty=Tensor[(1, 2704), uint8] */;
  %177 = reshape(%175, newshape=[4, 28]) /* ty=Tensor[(4, 28), float32] */;
  %178 = @func_4388(%176, %177) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(1, 2704), uint8], Tensor[(7, 8, 2), float64], Tensor[(4, 28), float32], Tensor[(4, 140), uint32], Tensor[(231), float64]) */;
  %179 = cast(%var_6764, dtype="int64") /* ty=Tensor[(260), int64] */;
  %180 = cast(%var_6765, dtype="int64") /* ty=Tensor[(2, 896), int64] */;
  %181 = cast(%var_6766, dtype="bool") /* ty=Tensor[(12), bool] */;
  %182 = reshape(%179, newshape=[2, 10, 13]) /* ty=Tensor[(2, 10, 13), int64] */;
  %183 = reshape(%180, newshape=[1, 1792]) /* ty=Tensor[(1, 1792), int64] */;
  %184 = reshape(%181, newshape=[12, 1]) /* ty=Tensor[(12, 1), bool] */;
  %185 = @func_3156(%182, %183, %184) /* ty=(Tensor[(12), bool], Tensor[(1, 1792), int64], Tensor[(12, 1), bool], Tensor[(2, 10, 13), float32]) */;
  %186 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
  %187 = cast(%var_6760, dtype="float32") /* ty=Tensor[(2704), float32] */;
  %188 = @func_6492() /* ty=Tensor[(7, 16, 12), bool] */;
  %189 = %172.1;
  %190 = %173.0;
  %191 = %178.2;
  %192 = %185.3;
  %193 = %186.2;
  %194 = sqrt(%187) /* ty=Tensor[(2704), float32] */;
  (%188, %189, %var_6726, %190, %191, %var_6761, %192, %var_6764, %var_6765, %var_6766, %193, %194)
}

def @func_3214(%var_3193: Tensor[(10, 15, 4), int32]) -> (Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) {
  %195 = cast(%var_3193, dtype="int32") /* ty=Tensor[(10, 15, 4), int32] */;
  %196 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(10, 15, 4), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 15, 4), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 4), int32] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %199 = cast(meta[relay.Constant][21] /* ty=Tensor[(245), uint64] */, dtype="uint64") /* ty=Tensor[(245), uint64] */;
  %200 = reshape(%199, newshape=[7, 5, 7]) /* ty=Tensor[(7, 5, 7), uint64] */;
  %201 = bitwise_or(%197, %198) /* ty=Tensor[(10, 15, 4), int32] */;
  %202 = @func_3008(%200) /* ty=Tensor[(7, 5, 7), uint64] */;
  (%201, %202, meta[relay.Constant][21] /* ty=Tensor[(245), uint64] */)
}

def @func_5325() -> Tensor[(7, 16, 12), bool] {
  @func_5323() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_8531(%var_8528: Tensor[(260), int64], %var_8529: Tensor[(1792), int64], %var_8530: Tensor[(12), bool]) -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(2704), uint8], Tensor[(4, 28), float32], Tensor[(260), int64], Tensor[(1792), int64], Tensor[(12), bool]) {
  @func_8526(%var_8528, %var_8529, %var_8530) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(2704), uint8], Tensor[(4, 28), float32], Tensor[(260), int64], Tensor[(1792), int64], Tensor[(12), bool]) */
}

def @func_3156(%var_3140: Tensor[(2, 10, 13), int64], %var_3149: Tensor[(1, 1792), int64], %var_3150: Tensor[(12, 1), bool]) -> (Tensor[(12), bool], Tensor[(1, 1792), int64], Tensor[(12, 1), bool], Tensor[(2, 10, 13), float32]) {
  %203 = cast(%var_3149, dtype="int64") /* ty=Tensor[(1, 1792), int64] */;
  %204 = cast(%var_3150, dtype="bool") /* ty=Tensor[(12, 1), bool] */;
  %205 = reshape(%203, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), int64] */;
  %206 = reshape(%204, newshape=[12]) /* ty=Tensor[(12), bool] */;
  %207 = @func_812(%205, %206) /* ty=(Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) */;
  %208 = cast(%var_3140, dtype="int64") /* ty=Tensor[(2, 10, 13), int64] */;
  %209 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(2, 10, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 10, 13), int64] */, dtype="int64") /* ty=Tensor[(2, 10, 13), int64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %212 = multiply(%210, %211) /* ty=Tensor[(2, 10, 13), int64] */;
  %213 = cast(%212, dtype="float32") /* ty=Tensor[(2, 10, 13), float32] */;
  %214 = %207.3;
  %215 = erf(%213) /* ty=Tensor[(2, 10, 13), float32] */;
  (%214, %var_3149, %var_3150, %215)
}

def @func_6386(%var_6384: Tensor[(11, 4, 4), float32]) -> Tensor[(11, 4, 4), float32] {
  @func_6383(%var_6384) /* ty=Tensor[(11, 4, 4), float32] */
}

def @func_7849(%var_7835: Tensor[(2, 3, 14), float32]) -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float32], Tensor[(2, 3, 14), bool]) {
  %216 = @func_5372() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
  %217 = @func_5259() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
  %218 = %217.1;
  %219 = cast(%218, dtype="float32") /* ty=Tensor[(2, 3, 14), float32] */;
  %220 = log2(%219) /* ty=Tensor[(2, 3, 14), float32] */;
  %221 = cast(%218, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
  %226 = @func_4584() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %227 = cast(%220, dtype="float32") /* ty=Tensor[(2, 3, 14), float32] */;
  %228 = cast(%var_7835, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %229 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%220, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %232 = %216.0;
  %233 = logical_and(%223, %224) /* ty=Tensor[(2, 3, 14), bool] */;
  %234 = %225.0;
  %235 = %226.0;
  %236 = atanh(%227) /* ty=Tensor[(2, 3, 14), float32] */;
  %237 = greater_equal(%230, %231) /* ty=Tensor[(2, 3, 14), bool] */;
  (%232, %233, %234, %235, %236, %237)
}

def @func_444(%var_442: Tensor[(2, 12, 2), uint16]) -> (Tensor[(2, 12, 2), uint16],) {
  @func_441(%var_442) /* ty=(Tensor[(2, 12, 2), uint16],) */
}

def @func_2672(%var_2666: float64, %var_2667: Tensor[(7, 15, 14), float64], %var_2668: Tensor[(84), float64], %var_2669: Tensor[(2016), float32], %var_2670: Tensor[(560), uint32], %var_2671: Tensor[(432), float32]) -> (Tensor[(7, 15, 14), float64], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(2016), float32], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(16, 1, 4), bool], Tensor[(64), float32], Tensor[(2016), float32], Tensor[(6, 9, 8), float32], Tensor[(432), float32], Tensor[(560), uint16]) {
  @func_2664(%var_2666, %var_2667, %var_2668, %var_2669, %var_2670, %var_2671) /* ty=(Tensor[(7, 15, 14), float64], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(2016), float32], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(16, 1, 4), bool], Tensor[(64), float32], Tensor[(2016), float32], Tensor[(6, 9, 8), float32], Tensor[(432), float32], Tensor[(560), uint16]) */
}

def @func_3923() -> (Tensor[(7, 16, 12), bool],) {
  %240 = fn () -> (Tensor[(7, 16, 12), bool],) {
    %238 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %239 = %238.0;
    (%239,)
  };
  %240() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_6976(%var_6963: Tensor[(2, 3, 14), float64]) -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool]) {
  %241 = @func_6938() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(112), float32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %242 = @func_5259() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
  %243 = %242.1;
  %244 = cast(%var_6963, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="bool") /* ty=Tensor[(2, 3, 14), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = %241.0;
  %249 = logical_or(%246, %247) /* ty=Tensor[(2, 3, 14), bool] */;
  (%248, %249)
}

def @func_2127(%var_2125: Tensor[(6, 9, 8), float32]) -> Tensor[(6, 9, 8), float32] {
  @func_2124(%var_2125) /* ty=Tensor[(6, 9, 8), float32] */
}

def @func_7386() -> Tensor[(7, 16, 12), bool] {
  %250 = fn () -> Tensor[(7, 16, 12), bool] {
    @func_6492() /* ty=Tensor[(7, 16, 12), bool] */
  };
  %250() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_6546(%var_6544: Tensor[(13, 13, 5), int8], %var_6545: Tensor[(2, 300), int32]) -> (Tensor[(13, 13, 5), int8], Tensor[(7, 5, 7), uint64], Tensor[(2, 300), int32]) {
  %260 = fn (%var_6523: Tensor[(13, 13, 5), int8], %var_6533: Tensor[(2, 300), int32]) -> (Tensor[(13, 13, 5), int8], Tensor[(7, 5, 7), uint64], Tensor[(2, 300), int32]) {
    %251 = cast(%var_6523, dtype="int8") /* ty=Tensor[(13, 13, 5), int8] */;
    %252 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(13, 13, 5), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 13, 5), int8] */, dtype="int8") /* ty=Tensor[(13, 13, 5), int8] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %255 = cast(%var_6533, dtype="int32") /* ty=Tensor[(2, 300), int32] */;
    %256 = reshape(%255, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
    %257 = @func_3214(%256) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
    %258 = multiply(%253, %254) /* ty=Tensor[(13, 13, 5), int8] */;
    %259 = %257.1;
    (%258, %259, %var_6533)
  };
  %260(%var_6544, %var_6545) /* ty=(Tensor[(13, 13, 5), int8], Tensor[(7, 5, 7), uint64], Tensor[(2, 300), int32]) */
}

def @func_4573() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) {
  @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */
}

def @func_2910(%var_2895: Tensor[(7, 8, 2), float32]) -> Tensor[(7, 8, 2), float64] {
  %261 = cast(%var_2895, dtype="float32") /* ty=Tensor[(7, 8, 2), float32] */;
  %262 = cos(%261) /* ty=Tensor[(7, 8, 2), float32] */;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(7, 8, 2), float32] */;
  %264 = exp(%263) /* ty=Tensor[(7, 8, 2), float32] */;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(7, 8, 2), float64] */;
  sinh(%265) /* ty=Tensor[(7, 8, 2), float64] */
}

def @func_827(%var_826: Tensor[(9, 14, 16), float32]) -> Tensor[(9, 14, 16), float32] {
  %267 = fn (%var_822: Tensor[(9, 14, 16), float32]) -> Tensor[(9, 14, 16), float32] {
    %266 = cast(%var_822, dtype="float32") /* ty=Tensor[(9, 14, 16), float32] */;
    acos(%266) /* ty=Tensor[(9, 14, 16), float32] */
  };
  %267(%var_826) /* ty=Tensor[(9, 14, 16), float32] */
}

def @func_3010(%var_3009: Tensor[(7, 5, 7), uint64]) -> Tensor[(7, 5, 7), uint64] {
  %272 = fn (%var_3003: Tensor[(7, 5, 7), uint64]) -> Tensor[(7, 5, 7), uint64] {
    %268 = cast(%var_3003, dtype="uint64") /* ty=Tensor[(7, 5, 7), uint64] */;
    %269 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(7, 5, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %270 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 5, 7), uint64] */, dtype="uint64") /* ty=Tensor[(7, 5, 7), uint64] */;
    %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    logical_xor(%270, %271) /* ty=Tensor[(7, 5, 7), uint64] */
  };
  %272(%var_3009) /* ty=Tensor[(7, 5, 7), uint64] */
}

def @func_5698() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %273 = @func_5404() /* ty=Tensor[(7, 16, 12), bool] */;
  %274 = @func_5323() /* ty=Tensor[(7, 16, 12), bool] */;
  (%273, %274)
}

def @func_6367(%var_6366: Tensor[(2, 8, 10), float64]) -> (Tensor[(2, 8, 10), float64],) {
  %277 = fn (%var_6359: Tensor[(2, 8, 10), float64]) -> (Tensor[(2, 8, 10), float64],) {
    %275 = cast(%var_6359, dtype="float64") /* ty=Tensor[(2, 8, 10), float64] */;
    %276 = sigmoid(%275) /* ty=Tensor[(2, 8, 10), float64] */;
    (%276,)
  };
  %277(%var_6366) /* ty=(Tensor[(2, 8, 10), float64],) */
}

def @func_6128(%var_6127: Tensor[(12, 50), int32]) -> (Tensor[(7, 16, 12), bool], Tensor[(7, 5, 7), uint64], Tensor[(12, 50), float64]) {
  %286 = fn (%var_6107: Tensor[(12, 50), int32]) -> (Tensor[(7, 16, 12), bool], Tensor[(7, 5, 7), uint64], Tensor[(12, 50), float64]) {
    %278 = @func_4584() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %279 = cast(%var_6107, dtype="int32") /* ty=Tensor[(12, 50), int32] */;
    %280 = reshape(%279, newshape=[600]) /* ty=Tensor[(600), int32] */;
    %281 = @func_3753(%280) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(7, 5, 7), uint64], Tensor[(600), int32], Tensor[(?, 1792), int8]) */;
    %282 = cast(%var_6107, dtype="float64") /* ty=Tensor[(12, 50), float64] */;
    %283 = %278.0;
    %284 = %281.2;
    %285 = exp(%282) /* ty=Tensor[(12, 50), float64] */;
    (%283, %284, %285)
  };
  %286(%var_6127) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 5, 7), uint64], Tensor[(12, 50), float64]) */
}

def @func_5504(%var_5467: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), uint32], Tensor[(7, 16, 12), bool]) {
  %287 = cast(%var_5467, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
  %288 = cosh(%287) /* ty=Tensor[(7, 8, 12), float64] */;
  %289 = cast(%288, dtype="uint32") /* ty=Tensor[(7, 8, 12), uint32] */;
  %290 = shape_of(%var_5467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_5467, dtype="uint32") /* ty=Tensor[(7, 8, 12), uint32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %293 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %294 = logical_xor(%291, %292) /* ty=Tensor[(7, 8, 12), uint32] */;
  %295 = %293.0;
  (%294, %295)
}

def @func_2822(%var_2792: Tensor[(84), float64], %var_2815: Tensor[(1170), int32]) -> (Tensor[(16, 3, 16), float32], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32], Tensor[(9, 14, 16), float32], Tensor[(2016), float32]) {
  %296 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 3, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 3, 16), float32] */;
  %297 = cast(%var_2792, dtype="float64") /* ty=Tensor[(84), float64] */;
  %298 = reshape(%297, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
  %299 = cast(%var_2815, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %300 = cast(%var_2815, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %301 = reshape(%299, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), int32] */;
  %302 = reshape(%300, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), int32] */;
  %303 = @func_2458(%301, %302) /* ty=(Tensor[(9, 13, 10), bool],) */;
  %304 = cast(meta[relay.Constant][26] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %305 = reshape(%304, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float32] */;
  %306 = tan(%296) /* ty=Tensor[(16, 3, 16), float32] */;
  %307 = @func_1205(%298) /* ty=Tensor[(2, 3, 14), float64] */;
  %308 = %303.0;
  %309 = @func_825(%305) /* ty=Tensor[(9, 14, 16), float32] */;
  (%306, %307, %var_2792, %308, %var_2815, %309, meta[relay.Constant][26] /* ty=Tensor[(2016), float32] */)
}

def @func_1390(%var_1388: float32, %var_1389: Tensor[(11, 8, 8), float32]) -> Tensor[(11, 8, 8), float32] {
  @func_1386(%var_1388, %var_1389) /* ty=Tensor[(11, 8, 8), float32] */
}

def @func_4310(%var_4309: Tensor[(280, 2), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(280, 2), uint32]) {
  %317 = fn (%var_4292: Tensor[(280, 2), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(280, 2), uint32]) {
    %310 = cast(meta[relay.Constant][27] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
    %311 = cast(%var_4292, dtype="uint32") /* ty=Tensor[(280, 2), uint32] */;
    %312 = reshape(%310, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
    %313 = reshape(%311, newshape=[560]) /* ty=Tensor[(560), uint32] */;
    %314 = @func_607(%312, %313) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
    %315 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
    %316 = %314.1;
    (%315, %316, meta[relay.Constant][27] /* ty=Tensor[(12), bool] */, %var_4292)
  };
  %317(%var_4309) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(280, 2), uint32]) */
}

def @func_7061() -> Tensor[(7, 16, 12), float64] {
  %321 = fn () -> Tensor[(7, 16, 12), float64] {
    %318 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %319 = %318.0;
    %320 = cast(%319, dtype="float64") /* ty=Tensor[(7, 16, 12), float64] */;
    rsqrt(%320) /* ty=Tensor[(7, 16, 12), float64] */
  };
  %321() /* ty=Tensor[(7, 16, 12), float64] */
}

def @func_3810() -> (Tensor[(7, 16, 12), bool],) {
  %324 = fn () -> (Tensor[(7, 16, 12), bool],) {
    %322 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %323 = %322.0;
    (%323,)
  };
  %324() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_2335(%var_2331: Tensor[(9, 3, 7), int8], %var_2332: Tensor[(9, 3, 7), int8], %var_2333: Tensor[(2016), float32], %var_2334: Tensor[(560), uint32]) -> (Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) {
  @func_2329(%var_2331, %var_2332, %var_2333, %var_2334) /* ty=(Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) */
}

def @func_151(%var_149: Tensor[(8, 5, 14), uint32], %var_150: Tensor[(8, 5, 14), uint32]) -> Tensor[(8, 5, 14), uint32] {
  @func_147(%var_149, %var_150) /* ty=Tensor[(8, 5, 14), uint32] */
}

def @func_5832() -> Tensor[(7, 16, 12), bool] {
  %325 = @func_5461() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %325.0
}

def @func_3991(%var_3988: Tensor[(13, 12, 4), int64], %var_3989: Tensor[(13, 12, 4), int64], %var_3990: Tensor[(150), float64]) -> (Tensor[(13, 12, 4), uint64], Tensor[(15, 10, 1), float32], Tensor[(150), float64]) {
  @func_3986(%var_3988, %var_3989, %var_3990) /* ty=(Tensor[(13, 12, 4), uint64], Tensor[(15, 10, 1), float32], Tensor[(150), float64]) */
}

def @func_5700() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  @func_5698() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */
}

def @func_5815(%var_5813: Tensor[(14, 144), float32]) -> (Tensor[(14, 144), int32], Tensor[(14, 144), float32]) {
  @func_5812(%var_5813) /* ty=(Tensor[(14, 144), int32], Tensor[(14, 144), float32]) */
}

def @func_4931(%var_4929: int16, %var_4930: Tensor[(1, 7, 12), int16]) -> (Tensor[(?, 7, 12), uint16],) {
  %334 = fn (%var_4895: int16, %var_4896: Tensor[(1, 7, 12), int16]) -> (Tensor[(?, 7, 12), uint16],) {
    %326 = cast(%var_4895, dtype="bool") /* ty=bool */;
    %327 = cast(%var_4896, dtype="bool") /* ty=Tensor[(1, 7, 12), bool] */;
    %328 = less(%326, %327) /* ty=Tensor[(1, 7, 12), bool] */;
    %329 = cast(%var_4896, dtype="uint16") /* ty=Tensor[(1, 7, 12), uint16] */;
    %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
    %331 = cast(%328, dtype="uint16") /* ty=Tensor[(1, 7, 12), uint16] */;
    %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %333 = subtract(%331, %332) /* ty=Tensor[(?, 7, 12), uint16] */;
    (%333,)
  };
  %334(%var_4929, %var_4930) /* ty=(Tensor[(?, 7, 12), uint16],) */
}

def @func_5613() -> (Tensor[(84), float64], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool], Tensor[(2704), uint8]) {
  %335 = @func_5259() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
  %336 = cast(meta[relay.Constant][28] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %337 = cast(meta[relay.Constant][28] /* ty=Tensor[(560), uint32] */, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %338 = reshape(%336, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %339 = reshape(%337, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %340 = cast(meta[relay.Constant][29] /* ty=Tensor[(2704), uint8] */, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
  %341 = reshape(%340, newshape=[2704]) /* ty=Tensor[(2704), uint8] */;
  %342 = @func_4654(%341) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(2704), uint8], Tensor[(7, 16, 12), bool]) */;
  %343 = %335.2;
  %344 = @func_147(%338, %339) /* ty=Tensor[(8, 5, 14), uint32] */;
  %345 = %342.3;
  (%343, %344, meta[relay.Constant][28] /* ty=Tensor[(560), uint32] */, %345, meta[relay.Constant][29] /* ty=Tensor[(2704), uint8] */)
}

def @func_4585() -> (Tensor[(7, 16, 12), bool],) {
  %348 = fn () -> (Tensor[(7, 16, 12), bool],) {
    %346 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %347 = %346.0;
    (%347,)
  };
  %348() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_8241() -> Tensor[(7, 16, 12), bool] {
  %350 = fn () -> Tensor[(7, 16, 12), bool] {
    %349 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
    %349.0
  };
  %350() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_5185(%var_5172: Tensor[(1792), int64], %var_5173: Tensor[(12), bool]) -> (Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(10, 15, 4), int32], Tensor[(600), int32]) {
  %351 = @func_4883() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) */;
  %352 = cast(%var_5172, dtype="int64") /* ty=Tensor[(1792), int64] */;
  %353 = cast(%var_5173, dtype="bool") /* ty=Tensor[(12), bool] */;
  %354 = reshape(%352, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), int64] */;
  %355 = reshape(%353, newshape=[12]) /* ty=Tensor[(12), bool] */;
  %356 = @func_812(%354, %355) /* ty=(Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) */;
  %357 = cast(meta[relay.Constant][30] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %358 = reshape(%357, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
  %359 = @func_3214(%358) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %360 = %351.0;
  %361 = %356.2;
  %362 = %359.0;
  (%360, %361, %var_5172, %var_5173, %362, meta[relay.Constant][30] /* ty=Tensor[(600), int32] */)
}

def @func_5260() -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) {
  %369 = fn () -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) {
    %363 = cast(meta[relay.Constant][31] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
    %364 = reshape(%363, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
    %365 = cast(meta[relay.Constant][31] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
    %366 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
    %367 = @func_1205(%364) /* ty=Tensor[(2, 3, 14), float64] */;
    %368 = sigmoid(%365) /* ty=Tensor[(84), float64] */;
    (%366, %367, %368)
  };
  %369() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */
}

def @func_7305(%var_7260: float64, %var_7261: Tensor[(11, 14, 8), float64]) -> (Tensor[(11, 14, 8), float64], Tensor[(7, 16, 12), bool]) {
  %370 = cast(%var_7260, dtype="float64") /* ty=float64 */;
  %371 = cast(%var_7261, dtype="float64") /* ty=Tensor[(11, 14, 8), float64] */;
  %372 = divide(%370, %371) /* ty=Tensor[(11, 14, 8), float64] */;
  %373 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
  (%372, %373)
}

def @func_441(%var_435: Tensor[(2, 12, 2), uint16]) -> (Tensor[(2, 12, 2), uint16],) {
  %374 = cast(%var_435, dtype="uint16") /* ty=Tensor[(2, 12, 2), uint16] */;
  %375 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(2, 12, 2), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 12, 2), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12, 2), uint16] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %378 = right_shift(%376, %377) /* ty=Tensor[(2, 12, 2), uint16] */;
  (%378,)
}

def @func_4059() -> Tensor[(7, 16, 12), bool] {
  %379 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %379.0
}

def @func_5059() -> (Tensor[(7, 16, 12), bool], Tensor[(12), bool]) {
  %380 = @func_4584() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %381 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %382 = %380.0;
  %383 = %381.2;
  (%382, %383)
}

def @func_6944() -> (Tensor[(7, 16, 12), bool],) {
  %385 = fn () -> (Tensor[(7, 16, 12), bool],) {
    %384 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
    (%384,)
  };
  %385() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_7543() -> (Tensor[(7, 16, 12), bool],) {
  %388 = fn () -> (Tensor[(7, 16, 12), bool],) {
    %386 = @func_6943() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %387 = %386.0;
    (%387,)
  };
  %388() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_8075(%var_8000: Tensor[(1, 7, 8), int32], %var_8001: Tensor[(7, 7, 8), int32], %var_8037: Tensor[(560), uint32]) -> (Tensor[(7, 7, 8), int32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(7, 13, 4), float32], Tensor[(364), float32], Tensor[(8, 5, 14), uint32], Tensor[(13, 13, 5), int8], Tensor[(65, 13), int8], Tensor[(600), int32]) {
  %389 = cast(%var_8000, dtype="int32") /* ty=Tensor[(1, 7, 8), int32] */;
  %390 = cast(%var_8001, dtype="int32") /* ty=Tensor[(7, 7, 8), int32] */;
  %391 = cast(%var_8037, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %392 = reshape(%391, newshape=[280, 2]) /* ty=Tensor[(280, 2), uint32] */;
  %393 = @func_4308(%392) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(280, 2), uint32]) */;
  %394 = cast(meta[relay.Constant][33] /* ty=Tensor[(364), float32] */, dtype="float32") /* ty=Tensor[(364), float32] */;
  %395 = reshape(%394, newshape=[7, 13, 4]) /* ty=Tensor[(7, 13, 4), float32] */;
  %396 = cast(%var_8037, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %397 = cast(%var_8037, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %398 = reshape(%396, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %399 = reshape(%397, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %400 = cast(meta[relay.Constant][34] /* ty=Tensor[(65, 13), int8] */, dtype="int8") /* ty=Tensor[(65, 13), int8] */;
  %401 = cast(meta[relay.Constant][35] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %402 = reshape(%400, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), int8] */;
  %403 = reshape(%401, newshape=[2, 300]) /* ty=Tensor[(2, 300), int32] */;
  %404 = @func_6543(%402, %403) /* ty=(Tensor[(13, 13, 5), int8], Tensor[(7, 5, 7), uint64], Tensor[(2, 300), int32]) */;
  %405 = add(%389, %390) /* ty=Tensor[(7, 7, 8), int32] */;
  %406 = %393.2;
  %407 = @func_7167(%395) /* ty=Tensor[(7, 13, 4), float32] */;
  %408 = @func_147(%398, %399) /* ty=Tensor[(8, 5, 14), uint32] */;
  %409 = %404.0;
  (%405, %406, %var_8037, %407, meta[relay.Constant][33] /* ty=Tensor[(364), float32] */, %408, %409, meta[relay.Constant][34] /* ty=Tensor[(65, 13), int8] */, meta[relay.Constant][35] /* ty=Tensor[(600), int32] */)
}

def @func_8361() -> Tensor[(7, 16, 12), bool] {
  %411 = fn () -> Tensor[(7, 16, 12), bool] {
    %410 = @func_7542() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %410.0
  };
  %411() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_6446() -> (Tensor[(7, 16, 12), bool],) {
  @func_6444() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_2664(%var_2591: float64, %var_2592: Tensor[(7, 15, 14), float64], %var_2600: Tensor[(84), float64], %var_2615: Tensor[(2016), float32], %var_2616: Tensor[(560), uint32], %var_2650: Tensor[(432), float32]) -> (Tensor[(7, 15, 14), float64], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(2016), float32], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(16, 1, 4), bool], Tensor[(64), float32], Tensor[(2016), float32], Tensor[(6, 9, 8), float32], Tensor[(432), float32], Tensor[(560), uint16]) {
  %412 = cast(%var_2591, dtype="float64") /* ty=float64 */;
  %413 = cast(%var_2592, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %414 = cast(%var_2600, dtype="float64") /* ty=Tensor[(84), float64] */;
  %415 = reshape(%414, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
  %416 = cast(meta[relay.Constant][36] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %417 = cast(meta[relay.Constant][36] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %418 = cast(%var_2615, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %419 = cast(%var_2616, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %420 = reshape(%416, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %421 = reshape(%417, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %422 = reshape(%418, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %423 = reshape(%419, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %424 = @func_2329(%420, %421, %422, %423) /* ty=(Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) */;
  %425 = cast(meta[relay.Constant][36] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %426 = cast(meta[relay.Constant][36] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %427 = cast(%var_2615, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %428 = cast(%var_2616, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %429 = reshape(%425, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %430 = reshape(%426, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %431 = reshape(%427, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %432 = reshape(%428, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %433 = @func_2329(%429, %430, %431, %432) /* ty=(Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) */;
  %434 = cast(meta[relay.Constant][37] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %435 = reshape(%434, newshape=[16, 1, 4]) /* ty=Tensor[(16, 1, 4), float32] */;
  %436 = @func_312(%435) /* ty=(Tensor[(16, 1, 4), bool],) */;
  %437 = %433.3;
  %438 = cast(%437, dtype="int8") /* ty=Tensor[(9, 3, 7), int8] */;
  %439 = cast(meta[relay.Constant][36] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %440 = %424.2;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %442 = cast(%var_2616, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %443 = reshape(%438, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %444 = reshape(%439, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %445 = reshape(%441, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %446 = reshape(%442, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %447 = @func_2329(%443, %444, %445, %446) /* ty=(Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) */;
  %448 = cast(%var_2650, dtype="float32") /* ty=Tensor[(432), float32] */;
  %449 = reshape(%448, newshape=[6, 9, 8]) /* ty=Tensor[(6, 9, 8), float32] */;
  %450 = cast(%var_2616, dtype="float64") /* ty=Tensor[(560), float64] */;
  %451 = log2(%450) /* ty=Tensor[(560), float64] */;
  %452 = cast(meta[relay.Constant][38] /* ty=Tensor[(560), float64] */, dtype="uint16") /* ty=Tensor[(560), uint16] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
  %454 = cast(%451, dtype="uint16") /* ty=Tensor[(560), uint16] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %456 = power(%412, %413) /* ty=Tensor[(7, 15, 14), float64] */;
  %457 = @func_1205(%415) /* ty=Tensor[(2, 3, 14), float64] */;
  %458 = %436.0;
  %459 = %447.2;
  %460 = @func_2124(%449) /* ty=Tensor[(6, 9, 8), float32] */;
  %461 = logical_xor(%454, %455) /* ty=Tensor[(560), uint16] */;
  (%456, %457, %var_2600, %440, meta[relay.Constant][36] /* ty=Tensor[(189), int8] */, %var_2615, %437, %458, meta[relay.Constant][37] /* ty=Tensor[(64), float32] */, %459, %460, %var_2650, %461)
}

def @func_5921() -> Tensor[(7, 16, 12), bool] {
  %462 = @func_5856() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
  %462.0
}

def @func_7309(%var_7307: float64, %var_7308: Tensor[(11, 14, 8), float64]) -> (Tensor[(11, 14, 8), float64], Tensor[(7, 16, 12), bool]) {
  @func_7305(%var_7307, %var_7308) /* ty=(Tensor[(11, 14, 8), float64], Tensor[(7, 16, 12), bool]) */
}

def @func_2826(%var_2824: Tensor[(84), float64], %var_2825: Tensor[(1170), int32]) -> (Tensor[(16, 3, 16), float32], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32], Tensor[(9, 14, 16), float32], Tensor[(2016), float32]) {
  @func_2822(%var_2824, %var_2825) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32], Tensor[(9, 14, 16), float32], Tensor[(2016), float32]) */
}

def @func_6492() -> Tensor[(7, 16, 12), bool] {
  %463 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %463.0
}

def @func_5372() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %464 = @func_4620() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(6, 12, 4), float64], Tensor[(288), float64]) */;
  %465 = @func_5259() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
  %466 = %464.1;
  %467 = %465.0;
  (%466, %467)
}

def @func_426(%var_423: Tensor[(6, 12, 4), float64]) -> Tensor[(6, 12, 4), float64] {
  %468 = cast(%var_423, dtype="float64") /* ty=Tensor[(6, 12, 4), float64] */;
  acos(%468) /* ty=Tensor[(6, 12, 4), float64] */
}

def @func_7903(%var_7901: Tensor[(2016), float32], %var_7902: Tensor[(4, 600), float64]) -> (Tensor[(7, 16, 12), bool], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(4, 600), float64]) {
  %481 = fn (%var_7892: Tensor[(2016), float32], %var_7895: Tensor[(4, 600), float64]) -> (Tensor[(7, 16, 12), bool], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(4, 600), float64]) {
    %469 = @func_6052() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
    %470 = cast(%var_7892, dtype="float32") /* ty=Tensor[(2016), float32] */;
    %471 = reshape(%470, newshape=[9, 14, 16]) /* ty=Tensor[(9, 14, 16), float32] */;
    %472 = @func_4883() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) */;
    %473 = %472.2;
    %474 = cast(%473, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
    %475 = asinh(%474) /* ty=Tensor[(1, 600), float64] */;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
    %477 = cast(%var_7895, dtype="float64") /* ty=Tensor[(4, 600), float64] */;
    %478 = %469.2;
    %479 = @func_825(%471) /* ty=Tensor[(9, 14, 16), float32] */;
    %480 = minimum(%476, %477) /* ty=Tensor[(4, 600), float64] */;
    (%478, %479, %var_7892, %480)
  };
  %481(%var_7901, %var_7902) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(4, 600), float64]) */
}

def @func_8201(%var_8144: Tensor[(12, 4), uint16], %var_8164: Tensor[(2016), float32], %var_8195: Tensor[(560), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(7, 16, 12), float32], Tensor[(12, 4), uint16], Tensor[(288), float64], Tensor[(2016), bool], Tensor[(7, 16, 12), bool], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool]) {
  %482 = cast(meta[relay.Constant][39] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %483 = reshape(%482, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float32] */;
  %484 = @func_5293(%483) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2016), float32], float64, Tensor[(1470), float64], Tensor[(84), float64], Tensor[(2016, 1), float32], Tensor[(560), uint32], Tensor[(12, 36), float32]) */;
  %485 = cast(%var_8144, dtype="uint16") /* ty=Tensor[(12, 4), uint16] */;
  %486 = @func_5904() /* ty=Tensor[(7, 16, 12), bool] */;
  %487 = cast(%486, dtype="bool") /* ty=Tensor[(7, 16, 12), bool] */;
  %488 = cast(meta[relay.Constant][40] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
  %489 = reshape(%485, newshape=[48]) /* ty=Tensor[(48), uint16] */;
  %490 = reshape(%487, newshape=[7, 16, 12]) /* ty=Tensor[(7, 16, 12), bool] */;
  %491 = reshape(%488, newshape=[288]) /* ty=Tensor[(288), float64] */;
  %492 = @func_5136(%489, %490, %491) /* ty=(Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(7, 16, 12), float32]) */;
  %493 = cast(%var_8164, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %494 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(2016), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %495 = cast(meta[relay.Constant][39] /* ty=Tensor[(2016), float32] */, dtype="uint32") /* ty=Tensor[(2016), uint32] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %497 = right_shift(%495, %496) /* ty=Tensor[(2016), uint32] */;
  %498 = cast(meta[relay.Constant][39] /* ty=Tensor[(2016), float32] */, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(1), int32] */;
  %500 = cast(%497, dtype="bool") /* ty=Tensor[(2016), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?), bool] */;
  %502 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %503 = cast(%var_8195, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %504 = cast(%var_8195, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %505 = reshape(%503, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %506 = reshape(%504, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), uint32] */;
  %507 = @func_5698() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */;
  %508 = %484.4;
  %509 = %492.4;
  %510 = logical_or(%500, %501) /* ty=Tensor[(2016), bool] */;
  %511 = %502.0;
  %512 = @func_147(%505, %506) /* ty=Tensor[(8, 5, 14), uint32] */;
  %513 = %507.0;
  (%486, %508, %509, %var_8144, meta[relay.Constant][40] /* ty=Tensor[(288), float64] */, %510, %511, %512, %var_8195, %513)
}

def @func_6383(%var_6380: Tensor[(11, 4, 4), float32]) -> Tensor[(11, 4, 4), float32] {
  %514 = cast(%var_6380, dtype="float32") /* ty=Tensor[(11, 4, 4), float32] */;
  tan(%514) /* ty=Tensor[(11, 4, 4), float32] */
}

def @func_8432(%var_8414: Tensor[(624), int64]) -> (Tensor[(7, 16, 12), bool], Tensor[(150), float64], Tensor[(15, 10, 624), bool]) {
  %515 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %516 = cast(%var_8414, dtype="int64") /* ty=Tensor[(624), int64] */;
  %517 = cast(%var_8414, dtype="int64") /* ty=Tensor[(624), int64] */;
  %518 = cast(meta[relay.Constant][41] /* ty=Tensor[(150), float64] */, dtype="float64") /* ty=Tensor[(150), float64] */;
  %519 = reshape(%516, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), int64] */;
  %520 = reshape(%517, newshape=[13, 12, 4]) /* ty=Tensor[(13, 12, 4), int64] */;
  %521 = reshape(%518, newshape=[150]) /* ty=Tensor[(150), float64] */;
  %522 = @func_3986(%519, %520, %521) /* ty=(Tensor[(13, 12, 4), uint64], Tensor[(15, 10, 1), float32], Tensor[(150), float64]) */;
  %523 = %522.1;
  %524 = cast(%var_8414, dtype="bool") /* ty=Tensor[(624), bool] */;
  %525 = cast(%523, dtype="bool") /* ty=Tensor[(15, 10, 1), bool] */;
  %526 = %515.0;
  %527 = logical_and(%524, %525) /* ty=Tensor[(15, 10, 624), bool] */;
  (%526, meta[relay.Constant][41] /* ty=Tensor[(150), float64] */, %527)
}

def @func_8322(%var_8320: Tensor[(11, 1, 8), float64]) -> Tensor[(11, 1, 8), float64] {
  @func_8319(%var_8320) /* ty=Tensor[(11, 1, 8), float64] */
}

def @func_4767() -> (Tensor[(1792), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32]) {
  @func_4765() /* ty=(Tensor[(1792), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32]) */
}

def @func_7257() -> (Tensor[(7, 16, 12), bool],) {
  %528 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
  (%528,)
}

def @func_5438(%var_5436: Tensor[(8, 3, 16), float32]) -> Tensor[(8, 3, 16), float32] {
  @func_5435(%var_5436) /* ty=Tensor[(8, 3, 16), float32] */
}

def @func_5404() -> Tensor[(7, 16, 12), bool] {
  %529 = @func_4584() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %529.0
}

def @func_6642() -> (Tensor[(1, 600), float64], Tensor[(7, 8, 2), float64], Tensor[(112), float32], Tensor[(1, 600), float32]) {
  @func_6640() /* ty=(Tensor[(1, 600), float64], Tensor[(7, 8, 2), float64], Tensor[(112), float32], Tensor[(1, 600), float32]) */
}

def @func_6822(%var_6816: Tensor[(4, 140), uint32], %var_6817: Tensor[(2704), uint8], %var_6818: Tensor[(112), float32], %var_6819: Tensor[(260), int64], %var_6820: Tensor[(2, 896), int64], %var_6821: Tensor[(12), bool]) -> (Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(4, 140), uint32], Tensor[(7, 16, 12), bool], Tensor[(1, 2704), uint8], Tensor[(112), float32], Tensor[(2, 10, 13), float32], Tensor[(260), int64], Tensor[(2, 896), int64], Tensor[(12), bool], Tensor[(84), float64], Tensor[(2704), float32]) {
  @func_6814(%var_6816, %var_6817, %var_6818, %var_6819, %var_6820, %var_6821) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(4, 140), uint32], Tensor[(7, 16, 12), bool], Tensor[(1, 2704), uint8], Tensor[(112), float32], Tensor[(2, 10, 13), float32], Tensor[(260), int64], Tensor[(2, 896), int64], Tensor[(12), bool], Tensor[(84), float64], Tensor[(2704), float32]) */
}

def @func_4388(%var_4334: Tensor[(1, 2704), uint8], %var_4358: Tensor[(4, 28), float32]) -> (Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(1, 2704), uint8], Tensor[(7, 8, 2), float64], Tensor[(4, 28), float32], Tensor[(4, 140), uint32], Tensor[(231), float64]) {
  %530 = cast(%var_4334, dtype="uint8") /* ty=Tensor[(1, 2704), uint8] */;
  %531 = reshape(%530, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint8] */;
  %532 = @func_1977(%531) /* ty=(Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) */;
  %533 = cast(%var_4358, dtype="float32") /* ty=Tensor[(4, 28), float32] */;
  %534 = reshape(%533, newshape=[7, 8, 2]) /* ty=Tensor[(7, 8, 2), float32] */;
  %535 = cast(meta[relay.Constant][42] /* ty=Tensor[(231), uint64] */, dtype="uint64") /* ty=Tensor[(231), uint64] */;
  %536 = reshape(%535, newshape=[7, 11, 3]) /* ty=Tensor[(7, 11, 3), uint64] */;
  %537 = @func_1023(%536) /* ty=(Tensor[(7, 11, 3), bool], Tensor[(8, 5, 14), uint32], Tensor[(4, 140), uint32]) */;
  %538 = cast(meta[relay.Constant][42] /* ty=Tensor[(231), uint64] */, dtype="float64") /* ty=Tensor[(231), float64] */;
  %539 = erf(%538) /* ty=Tensor[(231), float64] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(231), float64] */;
  %541 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
  %542 = %532.0;
  %543 = @func_2910(%534) /* ty=Tensor[(7, 8, 2), float64] */;
  %544 = %537.2;
  %545 = log10(%540) /* ty=Tensor[(231), float64] */;
  (%541, %542, %var_4334, %543, %var_4358, %544, %545)
}

def @func_8506(%var_8504: Tensor[(176), float32], %var_8505: Tensor[(704), float32]) -> (Tensor[(84), float64], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(11, 4, 4), float32], Tensor[(176), float32], Tensor[(11, 8, 8), float32], float32, Tensor[(704), float32]) {
  %561 = fn (%var_8482: Tensor[(176), float32], %var_8487: Tensor[(704), float32]) -> (Tensor[(84), float64], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(11, 4, 4), float32], Tensor[(176), float32], Tensor[(11, 8, 8), float32], float32, Tensor[(704), float32]) {
    %546 = @func_6180() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */;
    %547 = %546.2;
    %548 = cast(%547, dtype="float64") /* ty=Tensor[(84), float64] */;
    %549 = reshape(%548, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
    %550 = @func_6976(%549) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool]) */;
    %551 = cast(%var_8482, dtype="float32") /* ty=Tensor[(176), float32] */;
    %552 = reshape(%551, newshape=[11, 4, 4]) /* ty=Tensor[(11, 4, 4), float32] */;
    %553 = cast(-9.58957f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %554 = cast(%var_8487, dtype="float32") /* ty=Tensor[(704), float32] */;
    %555 = reshape(%553, newshape=[]) /* ty=float32 */;
    %556 = reshape(%554, newshape=[11, 8, 8]) /* ty=Tensor[(11, 8, 8), float32] */;
    %557 = %550.0;
    %558 = @func_7385() /* ty=Tensor[(7, 16, 12), bool] */;
    %559 = @func_6383(%552) /* ty=Tensor[(11, 4, 4), float32] */;
    %560 = @func_1386(%555, %556) /* ty=Tensor[(11, 8, 8), float32] */;
    (%547, %557, %558, %559, %var_8482, %560, -9.58957f /* ty=float32 */, %var_8487)
  };
  %561(%var_8504, %var_8505) /* ty=(Tensor[(84), float64], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(11, 4, 4), float32], Tensor[(176), float32], Tensor[(11, 8, 8), float32], float32, Tensor[(704), float32]) */
}

def @func_6698(%var_6697: Tensor[(16, 1, 15), float32]) -> (Tensor[(16, ?, 15), bool], Tensor[(16, 1, 15), float64]) {
  %572 = fn (%var_6681: Tensor[(16, 1, 15), float32]) -> (Tensor[(16, ?, 15), bool], Tensor[(16, 1, 15), float64]) {
    %562 = cast(-2.72908f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %563 = cast(%var_6681, dtype="float32") /* ty=Tensor[(16, 1, 15), float32] */;
    %564 = power(%562, %563) /* ty=Tensor[(16, 1, 15), float32] */;
    %565 = cast(%564, dtype="bool") /* ty=Tensor[(16, 1, 15), bool] */;
    %566 = shape_of(%var_6681, dtype="int32") /* ty=Tensor[(3), int32] */;
    %567 = cast(%var_6681, dtype="bool") /* ty=Tensor[(16, 1, 15), bool] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %569 = cast(%564, dtype="float64") /* ty=Tensor[(16, 1, 15), float64] */;
    %570 = logical_or(%567, %568) /* ty=Tensor[(16, ?, 15), bool] */;
    %571 = sigmoid(%569) /* ty=Tensor[(16, 1, 15), float64] */;
    (%570, %571)
  };
  %572(%var_6697) /* ty=(Tensor[(16, ?, 15), bool], Tensor[(16, 1, 15), float64]) */
}

def @func_5812(%var_5788: Tensor[(14, 144), float32]) -> (Tensor[(14, 144), int32], Tensor[(14, 144), float32]) {
  %573 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %574 = %573.6;
  %575 = cast(%var_5788, dtype="int32") /* ty=Tensor[(14, 144), int32] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(2), int32] */;
  %577 = cast(%574, dtype="int32") /* ty=Tensor[(14, 144), int32] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %579 = cast(%var_5788, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %580 = bitwise_xor(%577, %578) /* ty=Tensor[(14, 144), int32] */;
  %581 = acosh(%579) /* ty=Tensor[(14, 144), float32] */;
  (%580, %581)
}

def @func_3755(%var_3754: Tensor[(600), int32]) -> (Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(7, 5, 7), uint64], Tensor[(600), int32], Tensor[(?, 1792), int8]) {
  %599 = fn (%var_3740: Tensor[(600), int32]) -> (Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(7, 5, 7), uint64], Tensor[(600), int32], Tensor[(?, 1792), int8]) {
    %582 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %583 = cast(%var_3740, dtype="int32") /* ty=Tensor[(600), int32] */;
    %584 = reshape(%583, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
    %585 = @func_3214(%584) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
    %586 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 1792), int64] */, dtype="int64") /* ty=Tensor[(1, 1792), int64] */;
    %587 = cast(meta[relay.Constant][43] /* ty=Tensor[(12), bool] */, dtype="bool") /* ty=Tensor[(12), bool] */;
    %588 = reshape(%586, newshape=[16, 7, 16]) /* ty=Tensor[(16, 7, 16), int64] */;
    %589 = reshape(%587, newshape=[12]) /* ty=Tensor[(12), bool] */;
    %590 = @func_812(%588, %589) /* ty=(Tensor[(16, 7, 16), int64], Tensor[(16, 7, 16), float32], Tensor[(560), uint32], Tensor[(12), bool], Tensor[(560), uint32]) */;
    %591 = %590.0;
    %592 = cast(%591, dtype="int8") /* ty=Tensor[(16, 7, 16), int8] */;
    %593 = shape_of(meta[relay.Constant][44] /* ty=Tensor[(1, 1792), int64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %594 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 1792), int64] */, dtype="int8") /* ty=Tensor[(1, 1792), int8] */;
    %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %596 = %582.0;
    %597 = %585.1;
    %598 = maximum(%594, %595) /* ty=Tensor[(?, 1792), int8] */;
    (%596, meta[relay.Constant][43] /* ty=Tensor[(12), bool] */, %597, %var_3740, %598)
  };
  %599(%var_3754) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(7, 5, 7), uint64], Tensor[(600), int32], Tensor[(?, 1792), int8]) */
}

def @func_6852() -> Tensor[(7, 16, 12), bool] {
  %601 = fn () -> Tensor[(7, 16, 12), bool] {
    %600 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %600.0
  };
  %601() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_429(%var_427: Tensor[(6, 12, 4), float64]) -> Tensor[(6, 12, 4), float64] {
  @func_426(%var_427) /* ty=Tensor[(6, 12, 4), float64] */
}

def @func_5856() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  %602 = @func_5461() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %603 = %602.0;
  %604 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
  (%603, %604)
}

def @func_7259() -> (Tensor[(7, 16, 12), bool],) {
  @func_7257() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_4656(%var_4655: Tensor[(2704), uint8]) -> (Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(2704), uint8], Tensor[(7, 16, 12), bool]) {
  %613 = fn (%var_4642: Tensor[(2704), uint8]) -> (Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(2704), uint8], Tensor[(7, 16, 12), bool]) {
    %605 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %606 = cast(%var_4642, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
    %607 = reshape(%606, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint8] */;
    %608 = @func_1977(%607) /* ty=(Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) */;
    %609 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %610 = %605.0;
    %611 = %608.0;
    %612 = %609.0;
    (%610, %611, %var_4642, %612)
  };
  %613(%var_4655) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(2704), uint8], Tensor[(7, 16, 12), bool]) */
}

def @func_4883() -> (Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) {
  %614 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %615 = cast(meta[relay.Constant][45] /* ty=Tensor[(1, 600), int32] */, dtype="int32") /* ty=Tensor[(1, 600), int32] */;
  %616 = reshape(%615, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
  %617 = @func_3214(%616) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %618 = %614.0;
  %619 = %617.2;
  (%618, %619, meta[relay.Constant][45] /* ty=Tensor[(1, 600), int32] */)
}

def @func_6181() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) {
  %627 = fn () -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) {
    %620 = @func_3827() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %621 = cast(meta[relay.Constant][46] /* ty=Tensor[(42, 2), float64] */, dtype="float64") /* ty=Tensor[(42, 2), float64] */;
    %622 = reshape(%621, newshape=[84]) /* ty=Tensor[(84), float64] */;
    %623 = @func_4279(%622) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float64], Tensor[(84), float64]) */;
    %624 = %620.0;
    %625 = @func_5618() /* ty=Tensor[(7, 16, 12), bool] */;
    %626 = %623.2;
    (%624, %625, %626, meta[relay.Constant][46] /* ty=Tensor[(42, 2), float64] */)
  };
  %627() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(84), float64], Tensor[(42, 2), float64]) */
}

def @func_7979() -> Tensor[(7, 16, 12), bool] {
  @func_7977() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_8080(%var_8077: Tensor[(1, 7, 8), int32], %var_8078: Tensor[(7, 7, 8), int32], %var_8079: Tensor[(560), uint32]) -> (Tensor[(7, 7, 8), int32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(7, 13, 4), float32], Tensor[(364), float32], Tensor[(8, 5, 14), uint32], Tensor[(13, 13, 5), int8], Tensor[(65, 13), int8], Tensor[(600), int32]) {
  @func_8075(%var_8077, %var_8078, %var_8079) /* ty=(Tensor[(7, 7, 8), int32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(7, 13, 4), float32], Tensor[(364), float32], Tensor[(8, 5, 14), uint32], Tensor[(13, 13, 5), int8], Tensor[(65, 13), int8], Tensor[(600), int32]) */
}

def @func_4240() -> Tensor[(7, 16, 12), bool] {
  @func_4238() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_5323() -> Tensor[(7, 16, 12), bool] {
  %628 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %628.0
}

def @func_6290(%var_6263: Tensor[(14, 144), float32]) -> (Tensor[(14, 144), float32], Tensor[(7, 16, 12), bool]) {
  %629 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %630 = %629.6;
  %631 = cast(%630, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %632 = acos(%631) /* ty=Tensor[(14, 144), float32] */;
  %633 = cast(%var_6263, dtype="uint16") /* ty=Tensor[(14, 144), uint16] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(2), int32] */;
  %635 = cast(%632, dtype="uint16") /* ty=Tensor[(14, 144), uint16] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %637 = bitwise_or(%635, %636) /* ty=Tensor[(14, 144), uint16] */;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %639 = exp(%638) /* ty=Tensor[(14, 144), float32] */;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(14, 144), float32] */;
  %641 = reshape(%640, newshape=[2016, 1]) /* ty=Tensor[(2016, 1), float32] */;
  %642 = @func_5293(%641) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2016), float32], float64, Tensor[(1470), float64], Tensor[(84), float64], Tensor[(2016, 1), float32], Tensor[(560), uint32], Tensor[(12, 36), float32]) */;
  %643 = %642.0;
  (%639, %643)
}

def @func_4110() -> Tensor[(7, 16, 12), bool] {
  @func_4108() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_4392(%var_4390: Tensor[(1, 2704), uint8], %var_4391: Tensor[(4, 28), float32]) -> (Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(1, 2704), uint8], Tensor[(7, 8, 2), float64], Tensor[(4, 28), float32], Tensor[(4, 140), uint32], Tensor[(231), float64]) {
  @func_4388(%var_4390, %var_4391) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(13, 13, 16), uint8], Tensor[(1, 2704), uint8], Tensor[(7, 8, 2), float64], Tensor[(4, 28), float32], Tensor[(4, 140), uint32], Tensor[(231), float64]) */
}

def @func_7169(%var_7168: Tensor[(7, 13, 4), float32]) -> Tensor[(7, 13, 4), float32] {
  %645 = fn (%var_7163: Tensor[(7, 13, 4), float32]) -> Tensor[(7, 13, 4), float32] {
    %644 = cast(%var_7163, dtype="float32") /* ty=Tensor[(7, 13, 4), float32] */;
    sqrt(%644) /* ty=Tensor[(7, 13, 4), float32] */
  };
  %645(%var_7168) /* ty=Tensor[(7, 13, 4), float32] */
}

def @func_5942(%var_5941: Tensor[(5, 7, 6), uint8]) -> (Tensor[(5, 7, 6), uint8],) {
  %651 = fn (%var_5928: Tensor[(5, 7, 6), uint8]) -> (Tensor[(5, 7, 6), uint8],) {
    %646 = cast(%var_5928, dtype="uint8") /* ty=Tensor[(5, 7, 6), uint8] */;
    %647 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(5, 7, 6), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %648 = cast(meta[relay.Constant][47] /* ty=Tensor[(5, 7, 6), uint8] */, dtype="uint8") /* ty=Tensor[(5, 7, 6), uint8] */;
    %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %650 = bitwise_or(%648, %649) /* ty=Tensor[(5, 7, 6), uint8] */;
    (%650,)
  };
  %651(%var_5941) /* ty=(Tensor[(5, 7, 6), uint8],) */
}

def @func_5140(%var_5137: Tensor[(48), uint16], %var_5138: Tensor[(7, 16, 12), bool], %var_5139: Tensor[(288), float64]) -> (Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(7, 16, 12), float32]) {
  %670 = fn (%var_5095: Tensor[(48), uint16], %var_5107: Tensor[(7, 16, 12), bool], %var_5122: Tensor[(288), float64]) -> (Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(7, 16, 12), float32]) {
    %652 = cast(%var_5095, dtype="uint16") /* ty=Tensor[(48), uint16] */;
    %653 = reshape(%652, newshape=[2, 12, 2]) /* ty=Tensor[(2, 12, 2), uint16] */;
    %654 = @func_441(%653) /* ty=(Tensor[(2, 12, 2), uint16],) */;
    %655 = cast(%var_5122, dtype="float64") /* ty=Tensor[(288), float64] */;
    %656 = reshape(%655, newshape=[6, 12, 4]) /* ty=Tensor[(6, 12, 4), float64] */;
    %657 = @func_4059() /* ty=Tensor[(7, 16, 12), bool] */;
    %658 = cast(%var_5107, dtype="uint8") /* ty=Tensor[(7, 16, 12), uint8] */;
    %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%657, dtype="uint8") /* ty=Tensor[(7, 16, 12), uint8] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %662 = maximum(%660, %661) /* ty=Tensor[(7, 16, 12), uint8] */;
    %663 = cast(%662, dtype="float32") /* ty=Tensor[(7, 16, 12), float32] */;
    %664 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%657, dtype="float32") /* ty=Tensor[(7, 16, 12), float32] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %667 = %654.0;
    %668 = @func_426(%656) /* ty=Tensor[(6, 12, 4), float64] */;
    %669 = divide(%665, %666) /* ty=Tensor[(7, 16, 12), float32] */;
    (%667, %var_5095, %668, %var_5122, %669)
  };
  %670(%var_5137, %var_5138, %var_5139) /* ty=(Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(7, 16, 12), float32]) */
}

def @func_5845(%var_5843: uint16, %var_5844: Tensor[(3, 5, 1), uint16]) -> (Tensor[(3, 5, 1), uint16],) {
  %674 = fn (%var_5835: uint16, %var_5836: Tensor[(3, 5, 1), uint16]) -> (Tensor[(3, 5, 1), uint16],) {
    %671 = cast(%var_5835, dtype="uint16") /* ty=uint16 */;
    %672 = cast(%var_5836, dtype="uint16") /* ty=Tensor[(3, 5, 1), uint16] */;
    %673 = bitwise_and(%671, %672) /* ty=Tensor[(3, 5, 1), uint16] */;
    (%673,)
  };
  %674(%var_5843, %var_5844) /* ty=(Tensor[(3, 5, 1), uint16],) */
}

def @func_7653(%var_7650: Tensor[(288), float64], %var_7651: Tensor[(12), bool], %var_7652: Tensor[(560), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(13, 1, 16), float64], Tensor[(2704), uint8], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(8, 5, 14), uint32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(7, 16, 12), bool]) {
  @func_7648(%var_7650, %var_7651, %var_7652) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(13, 1, 16), float64], Tensor[(2704), uint8], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(8, 5, 14), uint32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(7, 16, 12), bool]) */
}

def @func_2913(%var_2911: Tensor[(7, 8, 2), float32]) -> Tensor[(7, 8, 2), float64] {
  @func_2910(%var_2911) /* ty=Tensor[(7, 8, 2), float64] */
}

def @func_5462() -> (Tensor[(7, 16, 12), bool],) {
  %676 = fn () -> (Tensor[(7, 16, 12), bool],) {
    %675 = @func_5323() /* ty=Tensor[(7, 16, 12), bool] */;
    (%675,)
  };
  %676() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_7852(%var_7850: Tensor[(2, 3, 14), float32]) -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float32], Tensor[(2, 3, 14), bool]) {
  @func_7849(%var_7850) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool], Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), float32], Tensor[(2, 3, 14), bool]) */
}

def @func_2461(%var_2459: Tensor[(9, 13, 10), int32], %var_2460: Tensor[(9, 13, 10), int32]) -> (Tensor[(9, 13, 10), bool],) {
  %682 = fn (%var_2447: Tensor[(9, 13, 10), int32], %var_2448: Tensor[(9, 13, 10), int32]) -> (Tensor[(9, 13, 10), bool],) {
    %677 = cast(%var_2448, dtype="bool") /* ty=Tensor[(9, 13, 10), bool] */;
    %678 = shape_of(%var_2447, dtype="int32") /* ty=Tensor[(3), int32] */;
    %679 = cast(%var_2447, dtype="bool") /* ty=Tensor[(9, 13, 10), bool] */;
    %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %681 = equal(%679, %680) /* ty=Tensor[(9, 13, 10), bool] */;
    (%681,)
  };
  %682(%var_2459, %var_2460) /* ty=(Tensor[(9, 13, 10), bool],) */
}

def @func_1386(%var_1371: float32, %var_1372: Tensor[(11, 8, 8), float32]) -> Tensor[(11, 8, 8), float32] {
  %683 = cast(%var_1371, dtype="float32") /* ty=float32 */;
  %684 = cast(%var_1372, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  %685 = floor_mod(%683, %684) /* ty=Tensor[(11, 8, 8), float32] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(11, 8, 8), float32] */;
  sin(%686) /* ty=Tensor[(11, 8, 8), float32] */
}

def @func_6494() -> Tensor[(7, 16, 12), bool] {
  @func_6492() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_5189(%var_5187: Tensor[(1792), int64], %var_5188: Tensor[(12), bool]) -> (Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(10, 15, 4), int32], Tensor[(600), int32]) {
  @func_5185(%var_5187, %var_5188) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(560), uint32], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(10, 15, 4), int32], Tensor[(600), int32]) */
}

def @func_3907(%var_3905: Tensor[(15, 10, 1), float64]) -> (Tensor[(15, 10, 1), float32], Tensor[(15, 10, ?), float64]) {
  @func_3904(%var_3905) /* ty=(Tensor[(15, 10, 1), float32], Tensor[(15, 10, ?), float64]) */
}

def @func_7692() -> (Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(600), int32]) {
  %687 = @func_3827() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %688 = cast(meta[relay.Constant][48] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
  %689 = reshape(%688, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int32] */;
  %690 = @func_3214(%689) /* ty=(Tensor[(10, 15, 4), int32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */;
  %691 = %687.0;
  %692 = %690.2;
  (%691, %692, meta[relay.Constant][48] /* ty=Tensor[(600), int32] */)
}

def @func_4472(%var_4470: Tensor[(560), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(9, 3, 7), int8], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(560), uint32]) {
  @func_4469(%var_4470) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(9, 3, 7), int8], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(560), uint32]) */
}

def @func_5036() -> (Tensor[(9, 13, 10), bool], Tensor[(6, 9, 8), float32], Tensor[(432), float32]) {
  %693 = @func_4765() /* ty=(Tensor[(1792), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32]) */;
  %694 = cast(meta[relay.Constant][49] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %695 = reshape(%694, newshape=[6, 9, 8]) /* ty=Tensor[(6, 9, 8), float32] */;
  %696 = %693.1;
  %697 = @func_2124(%695) /* ty=Tensor[(6, 9, 8), float32] */;
  (%696, %697, meta[relay.Constant][49] /* ty=Tensor[(432), float32] */)
}

def @func_5904() -> Tensor[(7, 16, 12), bool] {
  @func_5832() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_8092() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  @func_8090() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */
}

def @func_7482() -> (Tensor[(7, 16, 12), bool], Tensor[(245), uint64]) {
  @func_7480() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64]) */
}

def @func_1207(%var_1206: Tensor[(2, 3, 14), float64]) -> Tensor[(2, 3, 14), float64] {
  %699 = fn (%var_1196: Tensor[(2, 3, 14), float64]) -> Tensor[(2, 3, 14), float64] {
    %698 = cast(%var_1196, dtype="float64") /* ty=Tensor[(2, 3, 14), float64] */;
    erf(%698) /* ty=Tensor[(2, 3, 14), float64] */
  };
  %699(%var_1206) /* ty=Tensor[(2, 3, 14), float64] */
}

def @func_4621() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(6, 12, 4), float64], Tensor[(288), float64]) {
  %706 = fn () -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(6, 12, 4), float64], Tensor[(288), float64]) {
    %700 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %701 = cast(meta[relay.Constant][50] /* ty=Tensor[(288), float64] */, dtype="float64") /* ty=Tensor[(288), float64] */;
    %702 = reshape(%701, newshape=[6, 12, 4]) /* ty=Tensor[(6, 12, 4), float64] */;
    %703 = %700.0;
    %704 = @func_4108() /* ty=Tensor[(7, 16, 12), bool] */;
    %705 = @func_426(%702) /* ty=Tensor[(6, 12, 4), float64] */;
    (%703, %704, %705, meta[relay.Constant][50] /* ty=Tensor[(288), float64] */)
  };
  %706() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(6, 12, 4), float64], Tensor[(288), float64]) */
}

def @func_6979(%var_6977: Tensor[(2, 3, 14), float64]) -> (Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool]) {
  @func_6976(%var_6977) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(2, 3, 14), bool]) */
}

def @func_4765() -> (Tensor[(1792), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32]) {
  %707 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
  %708 = %707.3;
  %709 = cast(%708, dtype="float64") /* ty=Tensor[(1792), float64] */;
  %710 = cast(meta[relay.Constant][51] /* ty=Tensor[(1170), int32] */, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %711 = cast(meta[relay.Constant][51] /* ty=Tensor[(1170), int32] */, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %712 = reshape(%710, newshape=[10, 117]) /* ty=Tensor[(10, 117), int32] */;
  %713 = reshape(%711, newshape=[10, 117]) /* ty=Tensor[(10, 117), int32] */;
  %714 = @func_3679(%712, %713) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(9, 13, 10), bool], Tensor[(10, 117), uint64]) */;
  %715 = exp(%709) /* ty=Tensor[(1792), float64] */;
  %716 = %714.1;
  (%715, %716, meta[relay.Constant][51] /* ty=Tensor[(1170), int32] */)
}

def @func_6640() -> (Tensor[(1, 600), float64], Tensor[(7, 8, 2), float64], Tensor[(112), float32], Tensor[(1, 600), float32]) {
  %717 = @func_4883() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) */;
  %718 = %717.2;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %720 = sinh(%719) /* ty=Tensor[(1, 600), float64] */;
  %721 = cast(%720, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %722 = acos(%721) /* ty=Tensor[(1, 600), float64] */;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %724 = cast(meta[relay.Constant][52] /* ty=Tensor[(112), float32] */, dtype="float32") /* ty=Tensor[(112), float32] */;
  %725 = reshape(%724, newshape=[7, 8, 2]) /* ty=Tensor[(7, 8, 2), float32] */;
  %726 = cast(%722, dtype="float64") /* ty=Tensor[(1, 600), float64] */;
  %727 = erf(%726) /* ty=Tensor[(1, 600), float64] */;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(1, 600), float32] */;
  %729 = sin(%723) /* ty=Tensor[(1, 600), float64] */;
  %730 = @func_2910(%725) /* ty=Tensor[(7, 8, 2), float64] */;
  %731 = exp(%728) /* ty=Tensor[(1, 600), float32] */;
  (%729, %730, meta[relay.Constant][52] /* ty=Tensor[(112), float32] */, %731)
}

def @func_5923() -> Tensor[(7, 16, 12), bool] {
  @func_5921() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_8435(%var_8433: Tensor[(624), int64]) -> (Tensor[(7, 16, 12), bool], Tensor[(150), float64], Tensor[(15, 10, 624), bool]) {
  @func_8432(%var_8433) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(150), float64], Tensor[(15, 10, 624), bool]) */
}

def @func_7977() -> Tensor[(7, 16, 12), bool] {
  %732 = @func_3809() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %732.0
}

def @main(%var_8598: Tensor[(12, 16, 14), float32], %var_8599: Tensor[(12, 16, 14), float32]) -> (Tensor[(12, 16, 14), float32], Tensor[(12, 16, 14), float32]) {
  %733 = cast(%var_8599, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %734 = shape_of(%var_8598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%var_8598, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %737 = cast(%var_8599, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %738 = asinh(%737) /* ty=Tensor[(12, 16, 14), float32] */;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(12, 16, 14), float32] */;
  %740 = floor_mod(%735, %736) /* ty=Tensor[(12, 16, 14), float32] */;
  %741 = asin(%739) /* ty=Tensor[(12, 16, 14), float32] */;
  (%740, %741)
}

def @func_3161(%var_3158: Tensor[(2, 10, 13), int64], %var_3159: Tensor[(1, 1792), int64], %var_3160: Tensor[(12, 1), bool]) -> (Tensor[(12), bool], Tensor[(1, 1792), int64], Tensor[(12, 1), bool], Tensor[(2, 10, 13), float32]) {
  @func_3156(%var_3158, %var_3159, %var_3160) /* ty=(Tensor[(12), bool], Tensor[(1, 1792), int64], Tensor[(12, 1), bool], Tensor[(2, 10, 13), float32]) */
}

def @func_6939() -> (Tensor[(7, 16, 12), bool], Tensor[(112), float32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) {
  %748 = fn () -> (Tensor[(7, 16, 12), bool], Tensor[(112), float32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) {
    %742 = @func_6640() /* ty=(Tensor[(1, 600), float64], Tensor[(7, 8, 2), float64], Tensor[(112), float32], Tensor[(1, 600), float32]) */;
    %743 = cast(meta[relay.Constant][53] /* ty=Tensor[(245), uint64] */, dtype="uint64") /* ty=Tensor[(245), uint64] */;
    %744 = reshape(%743, newshape=[7, 5, 7]) /* ty=Tensor[(7, 5, 7), uint64] */;
    %745 = @func_5618() /* ty=Tensor[(7, 16, 12), bool] */;
    %746 = %742.2;
    %747 = @func_3008(%744) /* ty=Tensor[(7, 5, 7), uint64] */;
    (%745, %746, %747, meta[relay.Constant][53] /* ty=Tensor[(245), uint64] */)
  };
  %748() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(112), float32], Tensor[(7, 5, 7), uint64], Tensor[(245), uint64]) */
}

def @func_5507(%var_5505: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), uint32], Tensor[(7, 16, 12), bool]) {
  @func_5504(%var_5505) /* ty=(Tensor[(7, 8, 12), uint32], Tensor[(7, 16, 12), bool]) */
}

def @func_1777(%var_1775: Tensor[(4, 5, 13), int32], %var_1776: Tensor[(4, 5, 13), int32]) -> (Tensor[(4, 5, 13), bool],) {
  %754 = fn (%var_1768: Tensor[(4, 5, 13), int32], %var_1769: Tensor[(4, 5, 13), int32]) -> (Tensor[(4, 5, 13), bool],) {
    %749 = cast(%var_1769, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
    %750 = shape_of(%var_1768, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%var_1768, dtype="bool") /* ty=Tensor[(4, 5, 13), bool] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %753 = not_equal(%751, %752) /* ty=Tensor[(4, 5, 13), bool] */;
    (%753,)
  };
  %754(%var_1775, %var_1776) /* ty=(Tensor[(4, 5, 13), bool],) */
}

def @func_3904(%var_3865: Tensor[(15, 10, 1), float64]) -> (Tensor[(15, 10, 1), float32], Tensor[(15, 10, ?), float64]) {
  %755 = cast(%var_3865, dtype="float32") /* ty=Tensor[(15, 10, 1), float32] */;
  %756 = cast(%var_3865, dtype="float32") /* ty=Tensor[(15, 10, 1), float32] */;
  %757 = rsqrt(%756) /* ty=Tensor[(15, 10, 1), float32] */;
  %758 = cast(%var_3865, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %759 = sin(%758) /* ty=Tensor[(15, 10, 1), float64] */;
  %760 = cast(%759, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %761 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%757, dtype="float64") /* ty=Tensor[(15, 10, 1), float64] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %764 = atanh(%755) /* ty=Tensor[(15, 10, 1), float32] */;
  %765 = add(%762, %763) /* ty=Tensor[(15, 10, ?), float64] */;
  (%764, %765)
}

def @func_8319(%var_8295: Tensor[(11, 1, 8), float64]) -> Tensor[(11, 1, 8), float64] {
  %766 = cast(%var_8295, dtype="float64") /* ty=Tensor[(11, 1, 8), float64] */;
  %767 = atan(%766) /* ty=Tensor[(11, 1, 8), float64] */;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(11, 1, 8), float64] */;
  asinh(%768) /* ty=Tensor[(11, 1, 8), float64] */
}

def @func_4885() -> (Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) {
  @func_4883() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) */
}

def @func_4469(%var_4465: Tensor[(560), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(9, 3, 7), int8], Tensor[(189), int8], Tensor[(2016), float32], Tensor[(560), uint32]) {
  %769 = cast(meta[relay.Constant][54] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %770 = cast(meta[relay.Constant][54] /* ty=Tensor[(189), int8] */, dtype="int8") /* ty=Tensor[(189), int8] */;
  %771 = cast(meta[relay.Constant][55] /* ty=Tensor[(2016), float32] */, dtype="float32") /* ty=Tensor[(2016), float32] */;
  %772 = cast(%var_4465, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %773 = reshape(%769, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %774 = reshape(%770, newshape=[9, 3, 7]) /* ty=Tensor[(9, 3, 7), int8] */;
  %775 = reshape(%771, newshape=[2016]) /* ty=Tensor[(2016), float32] */;
  %776 = reshape(%772, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %777 = @func_2329(%773, %774, %775, %776) /* ty=(Tensor[(9, 3, 7), int8], Tensor[(9, 14, 16), float32], Tensor[(2016), float32], Tensor[(9, 3, 7), int8], Tensor[(2, 12, 2), uint16], Tensor[(48), uint16], Tensor[(6, 2, 1), float32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(560), uint32]) */;
  %778 = @func_4238() /* ty=Tensor[(7, 16, 12), bool] */;
  %779 = %777.0;
  (%778, %779, meta[relay.Constant][54] /* ty=Tensor[(189), int8] */, meta[relay.Constant][55] /* ty=Tensor[(2016), float32] */, %var_4465)
}

def @func_5435(%var_5431: Tensor[(8, 3, 16), float32]) -> Tensor[(8, 3, 16), float32] {
  %780 = cast(%var_5431, dtype="float32") /* ty=Tensor[(8, 3, 16), float32] */;
  asin(%780) /* ty=Tensor[(8, 3, 16), float32] */
}

def @func_6061() -> Tensor[(7, 16, 12), bool] {
  @func_6059() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_4238() -> Tensor[(7, 16, 12), bool] {
  @func_4108() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_7648(%var_7616: Tensor[(288), float64], %var_7633: Tensor[(12), bool], %var_7634: Tensor[(560), uint32]) -> (Tensor[(7, 16, 12), bool], Tensor[(13, 1, 16), float64], Tensor[(2704), uint8], Tensor[(6, 12, 4), float64], Tensor[(288), float64], Tensor[(8, 5, 14), uint32], Tensor[(12), bool], Tensor[(560), uint32], Tensor[(7, 16, 12), bool]) {
  %781 = cast(meta[relay.Constant][56] /* ty=Tensor[(2704), uint8] */, dtype="uint8") /* ty=Tensor[(2704), uint8] */;
  %782 = reshape(%781, newshape=[13, 13, 16]) /* ty=Tensor[(13, 13, 16), uint8] */;
  %783 = @func_1977(%782) /* ty=(Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) */;
  %784 = cast(%var_7616, dtype="float64") /* ty=Tensor[(288), float64] */;
  %785 = reshape(%784, newshape=[6, 12, 4]) /* ty=Tensor[(6, 12, 4), float64] */;
  %786 = cast(%var_7633, dtype="bool") /* ty=Tensor[(12), bool] */;
  %787 = cast(%var_7634, dtype="uint32") /* ty=Tensor[(560), uint32] */;
  %788 = reshape(%786, newshape=[6, 2, 1]) /* ty=Tensor[(6, 2, 1), bool] */;
  %789 = reshape(%787, newshape=[560]) /* ty=Tensor[(560), uint32] */;
  %790 = @func_607(%788, %789) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */;
  %791 = @func_6444() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %792 = @func_6851() /* ty=Tensor[(7, 16, 12), bool] */;
  %793 = %783.1;
  %794 = @func_426(%785) /* ty=Tensor[(6, 12, 4), float64] */;
  %795 = %790.4;
  %796 = %791.0;
  (%792, %793, meta[relay.Constant][56] /* ty=Tensor[(2704), uint8] */, %794, %var_7616, %795, %var_7633, %var_7634, %796)
}

def @func_5973() -> Tensor[(84), float64] {
  %798 = fn () -> Tensor[(84), float64] {
    %797 = @func_5613() /* ty=(Tensor[(84), float64], Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(7, 16, 12), bool], Tensor[(2704), uint8]) */;
    %797.0
  };
  %798() /* ty=Tensor[(84), float64] */
}

def @func_3682(%var_3680: Tensor[(10, 117), int32], %var_3681: Tensor[(10, 117), int32]) -> (Tensor[(7, 16, 12), bool], Tensor[(9, 13, 10), bool], Tensor[(10, 117), uint64]) {
  %812 = fn (%var_3659: Tensor[(10, 117), int32], %var_3665: Tensor[(10, 117), int32]) -> (Tensor[(7, 16, 12), bool], Tensor[(9, 13, 10), bool], Tensor[(10, 117), uint64]) {
    %799 = @func_3642() /* ty=(Tensor[(7, 16, 12), bool],) */;
    %800 = cast(%var_3659, dtype="int32") /* ty=Tensor[(10, 117), int32] */;
    %801 = cast(%var_3659, dtype="int32") /* ty=Tensor[(10, 117), int32] */;
    %802 = reshape(%800, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), int32] */;
    %803 = reshape(%801, newshape=[9, 13, 10]) /* ty=Tensor[(9, 13, 10), int32] */;
    %804 = @func_2458(%802, %803) /* ty=(Tensor[(9, 13, 10), bool],) */;
    %805 = cast(%var_3665, dtype="uint64") /* ty=Tensor[(10, 117), uint64] */;
    %806 = shape_of(%var_3659, dtype="int32") /* ty=Tensor[(2), int32] */;
    %807 = cast(%var_3659, dtype="uint64") /* ty=Tensor[(10, 117), uint64] */;
    %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %809 = %799.0;
    %810 = %804.0;
    %811 = right_shift(%807, %808) /* ty=Tensor[(10, 117), uint64] */;
    (%809, %810, %811)
  };
  %812(%var_3680, %var_3681) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(9, 13, 10), bool], Tensor[(10, 117), uint64]) */
}

def @func_6059() -> Tensor[(7, 16, 12), bool] {
  @func_5323() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_4955() -> (Tensor[(1170), int32], Tensor[(7, 5, 7), uint64], Tensor[(600), int32]) {
  %819 = fn () -> (Tensor[(1170), int32], Tensor[(7, 5, 7), uint64], Tensor[(600), int32]) {
    %813 = @func_4765() /* ty=(Tensor[(1792), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32]) */;
    %814 = cast(meta[relay.Constant][57] /* ty=Tensor[(600), int32] */, dtype="int32") /* ty=Tensor[(600), int32] */;
    %815 = reshape(%814, newshape=[600]) /* ty=Tensor[(600), int32] */;
    %816 = @func_3753(%815) /* ty=(Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(7, 5, 7), uint64], Tensor[(600), int32], Tensor[(?, 1792), int8]) */;
    %817 = %813.2;
    %818 = %816.2;
    (%817, %818, meta[relay.Constant][57] /* ty=Tensor[(600), int32] */)
  };
  %819() /* ty=(Tensor[(1170), int32], Tensor[(7, 5, 7), uint64], Tensor[(600), int32]) */
}

def @func_5619() -> Tensor[(7, 16, 12), bool] {
  %821 = fn () -> Tensor[(7, 16, 12), bool] {
    %820 = @func_4571() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool], Tensor[(12), bool], Tensor[(1792), int64], Tensor[(12), bool], Tensor[(9, 14, 16), float32], Tensor[(14, 144), float32]) */;
    %820.0
  };
  %821() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_3829() -> (Tensor[(7, 16, 12), bool],) {
  @func_3827() /* ty=(Tensor[(7, 16, 12), bool],) */
}

def @func_3702(%var_3689: Tensor[(6, 15, 2), int16], %var_3690: Tensor[(6, 15, 2), int16], %var_3697: Tensor[(84, 1), float64]) -> (Tensor[(6, 15, 2), float32], Tensor[(16, 3, 16), float32], Tensor[(84, 1), float64], Tensor[(1170), int32]) {
  %822 = cast(%var_3690, dtype="int16") /* ty=Tensor[(6, 15, 2), int16] */;
  %823 = shape_of(%var_3689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%var_3689, dtype="int16") /* ty=Tensor[(6, 15, 2), int16] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %826 = right_shift(%824, %825) /* ty=Tensor[(6, 15, 2), int16] */;
  %827 = cast(%826, dtype="float32") /* ty=Tensor[(6, 15, 2), float32] */;
  %828 = cast(%var_3697, dtype="float64") /* ty=Tensor[(84, 1), float64] */;
  %829 = cast(meta[relay.Constant][58] /* ty=Tensor[(1170), int32] */, dtype="int32") /* ty=Tensor[(1170), int32] */;
  %830 = reshape(%828, newshape=[84]) /* ty=Tensor[(84), float64] */;
  %831 = reshape(%829, newshape=[1170]) /* ty=Tensor[(1170), int32] */;
  %832 = @func_2822(%830, %831) /* ty=(Tensor[(16, 3, 16), float32], Tensor[(2, 3, 14), float64], Tensor[(84), float64], Tensor[(9, 13, 10), bool], Tensor[(1170), int32], Tensor[(9, 14, 16), float32], Tensor[(2016), float32]) */;
  %833 = acos(%827) /* ty=Tensor[(6, 15, 2), float32] */;
  %834 = %832.0;
  (%833, %834, %var_3697, meta[relay.Constant][58] /* ty=Tensor[(1170), int32] */)
}

def @func_7480() -> (Tensor[(7, 16, 12), bool], Tensor[(245), uint64]) {
  %835 = @func_7257() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %836 = @func_4883() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(245), uint64], Tensor[(1, 600), int32]) */;
  %837 = %835.0;
  %838 = %836.1;
  (%837, %838)
}

def @func_611(%var_609: Tensor[(6, 2, 1), bool], %var_610: Tensor[(560), uint32]) -> (Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) {
  @func_607(%var_609, %var_610) /* ty=(Tensor[(8, 5, 14), uint32], Tensor[(560), uint32], Tensor[(6, 2, 9), int32], Tensor[(6, 2, 1), float32], Tensor[(8, 5, 14), uint32]) */
}

def @func_3986(%var_3938: Tensor[(13, 12, 4), int64], %var_3957: Tensor[(13, 12, 4), int64], %var_3974: Tensor[(150), float64]) -> (Tensor[(13, 12, 4), uint64], Tensor[(15, 10, 1), float32], Tensor[(150), float64]) {
  %839 = cast(meta[relay.Constant][59] /* ty=Tensor[(13, 12, 4), int64] */, dtype="int64") /* ty=Tensor[(13, 12, 4), int64] */;
  %840 = shape_of(%var_3938, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%var_3938, dtype="int64") /* ty=Tensor[(13, 12, 4), int64] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %843 = add(%841, %842) /* ty=Tensor[(13, 12, 4), int64] */;
  %844 = cast(%var_3957, dtype="uint64") /* ty=Tensor[(13, 12, 4), uint64] */;
  %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%843, dtype="uint64") /* ty=Tensor[(13, 12, 4), uint64] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %848 = cast(%var_3974, dtype="float64") /* ty=Tensor[(150), float64] */;
  %849 = reshape(%848, newshape=[15, 10, 1]) /* ty=Tensor[(15, 10, 1), float64] */;
  %850 = @func_3904(%849) /* ty=(Tensor[(15, 10, 1), float32], Tensor[(15, 10, ?), float64]) */;
  %851 = multiply(%846, %847) /* ty=Tensor[(13, 12, 4), uint64] */;
  %852 = %850.0;
  (%851, %852, %var_3974)
}

def @func_5834() -> Tensor[(7, 16, 12), bool] {
  @func_5832() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_3707(%var_3704: Tensor[(6, 15, 2), int16], %var_3705: Tensor[(6, 15, 2), int16], %var_3706: Tensor[(84, 1), float64]) -> (Tensor[(6, 15, 2), float32], Tensor[(16, 3, 16), float32], Tensor[(84, 1), float64], Tensor[(1170), int32]) {
  @func_3702(%var_3704, %var_3705, %var_3706) /* ty=(Tensor[(6, 15, 2), float32], Tensor[(16, 3, 16), float32], Tensor[(84, 1), float64], Tensor[(1170), int32]) */
}

def @func_5906() -> Tensor[(7, 16, 12), bool] {
  @func_5904() /* ty=Tensor[(7, 16, 12), bool] */
}

def @func_4108() -> Tensor[(7, 16, 12), bool] {
  %853 = @func_3922() /* ty=(Tensor[(7, 16, 12), bool],) */;
  %853.0
}

def @func_5374() -> (Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) {
  @func_5372() /* ty=(Tensor[(7, 16, 12), bool], Tensor[(7, 16, 12), bool]) */
}

def @func_1980(%var_1978: Tensor[(13, 13, 16), uint8]) -> (Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) {
  @func_1977(%var_1978) /* ty=(Tensor[(13, 13, 16), uint8], Tensor[(13, 1, 16), float64]) */
}

def @func_147(%var_138: Tensor[(8, 5, 14), uint32], %var_139: Tensor[(8, 5, 14), uint32]) -> Tensor[(8, 5, 14), uint32] {
  %854 = cast(%var_139, dtype="uint32") /* ty=Tensor[(8, 5, 14), uint32] */;
  %855 = shape_of(%var_138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%var_138, dtype="uint32") /* ty=Tensor[(8, 5, 14), uint32] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  logical_xor(%856, %857) /* ty=Tensor[(8, 5, 14), uint32] */
}

def @func_4061() -> Tensor[(7, 16, 12), bool] {
  @func_4059() /* ty=Tensor[(7, 16, 12), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen55/build/output.py:2327: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen55/build/output.py", line 2332, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_reshape_floor_mod_kernel0(float* __restrict__ T_floor_mod, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 2688) {
    T_floor_mod[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] - (floorf((placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] / placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))])) * placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]));
  }
}

extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_asinh_asin_kernel0(float* __restrict__ T_asin, float* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 2688) {
    T_asin[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = asinf(asinhf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]));
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

