==========mod==========
#[version = "0.0.5"]
def @func_11514() -> Tensor[(14, 15, 9), float64] {
  %0 = @func_5489() /* ty=(Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
  %0.1
}

def @func_6898() -> (Tensor[(14, 15, 9), float64],) {
  %1 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
  (%1,)
}

def @func_12037() -> (Tensor[(96), float64], Tensor[(14, 15, 9), float64]) {
  %2 = @func_7272() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) */;
  %3 = @func_8611() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %4 = %2.2;
  %5 = %3.0;
  (%4, %5)
}

def @func_12936() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(6, 14, 10), bool]) {
  %6 = @func_8633() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) */;
  %7 = @func_9272() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) */;
  %8 = @func_9357() /* ty=Tensor[(14, 15, 9), float64] */;
  %9 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
  %10 = %6.0;
  %11 = %7.1;
  (%8, %9, %10, %11)
}

def @func_13227() -> Tensor[(14, 15, 9), float64] {
  %12 = @func_8714() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) */;
  %12.1
}

def @func_4949() -> Tensor[(14, 15, 9), float64] {
  %13 = @func_3913() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %13.0
}

def @func_9467() -> Tensor[(14, 15, 9), float32] {
  %14 = @func_8052() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %14.0
}

def @func_7272() -> (Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) {
  %15 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %17 = reshape(%16, newshape=[48, 2]) /* ty=Tensor[(48, 2), float64] */;
  %18 = @func_5597(%17) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) */;
  %19 = %15.0;
  %20 = %18.2;
  (%19, %20, meta[relay.Constant][0] /* ty=Tensor[(96), float64] */)
}

def @func_10272() -> (Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) {
  %21 = @func_9101() /* ty=(Tensor[(1, 11, 4), float32],) */;
  %22 = %21.0;
  %23 = @func_6777() /* ty=Tensor[(16, 8, 5), float32] */;
  (%22, %23)
}

def @func_8714() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) {
  %24 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %25 = %24.0;
  %26 = cast(%25, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %27 = reshape(%26, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float64] */;
  %28 = @func_5048(%27) /* ty=Tensor[(14, 15, 9), float64] */;
  (%25, %28)
}

def @func_12257(%var_12220: Tensor[(495), float32], %var_12232: Tensor[(1890, 16), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(495), float32], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(1890, 16), float64], Tensor[(14, 15, 9), uint16], Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), float32]) {
  %29 = @func_8052() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %30 = @func_9335() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %31 = cast(%var_12220, dtype="float32") /* ty=Tensor[(495), float32] */;
  %32 = cast(%var_12220, dtype="float32") /* ty=Tensor[(495), float32] */;
  %33 = %29.0;
  %34 = cast(%33, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %35 = reshape(%31, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float32] */;
  %36 = reshape(%32, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float32] */;
  %37 = reshape(%34, newshape=[1890, 1]) /* ty=Tensor[(1890, 1), float32] */;
  %38 = @func_7945(%35, %36, %37) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(1890, 1), float32], Tensor[(5, 9, 11), bool]) */;
  %39 = %38.1;
  %40 = cast(%39, dtype="float64") /* ty=Tensor[(1890, 1), float64] */;
  %41 = cast(%var_12232, dtype="float64") /* ty=Tensor[(1890, 16), float64] */;
  %42 = @func_10103() /* ty=(Tensor[(16, 8, 5), float32],) */;
  %43 = %30.0;
  %44 = @func_11293() /* ty=Tensor[(14, 15, 9), float32] */;
  %45 = minimum(%40, %41) /* ty=Tensor[(1890, 16), float64] */;
  %46 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
  %47 = %42.0;
  %48 = @func_9467() /* ty=Tensor[(14, 15, 9), float32] */;
  (%33, %var_12220, %43, %44, %45, %46, %47, %48)
}

def @func_8633() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) {
  %49 = @func_7013() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %50 = %49.0;
  %51 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
  (%50, %51)
}

def @func_12338() -> Tensor[(14, 15, 9), float64] {
  @func_5941() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_14141(%var_14061: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
  %52 = @func_8179() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %53 = cast(%var_14061, dtype="float32") /* ty=Tensor[(840), float32] */;
  %54 = reshape(%53, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %55 = @func_8537(%54) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64]) */;
  %56 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %57 = %52.0;
  %58 = %55.2;
  %59 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
  %60 = @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */;
  %61 = %56.0;
  (%57, %58, %var_14061, %59, %60, %61)
}

def @func_8138() -> (Tensor[(14, 15, 9), uint16],) {
  %62 = @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */;
  (%62,)
}

def @func_13156() -> (Tensor[(14, 15, 9), float64],) {
  %63 = @func_11187() /* ty=Tensor[(14, 15, 9), float64] */;
  (%63,)
}

def @func_7013() -> (Tensor[(14, 15, 9), uint16],) {
  %64 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
  (%64,)
}

def @func_14247() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) {
  %65 = @func_13947() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(?, 11, 4), int64]) */;
  %66 = @func_9774() /* ty=Tensor[(14, 15, 9), uint16] */;
  %67 = %65.1;
  %68 = @func_9774() /* ty=Tensor[(14, 15, 9), uint16] */;
  (%66, %67, %68)
}

def @func_15262(%var_15258: float32, %var_15259: Tensor[(3120), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32]) {
  %69 = @func_9579() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */;
  %70 = @func_7013() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %71 = cast(%var_15258, dtype="float32") /* ty=float32 */;
  %72 = cast(%var_15259, dtype="float32") /* ty=Tensor[(3120), float32] */;
  %73 = reshape(%71, newshape=[]) /* ty=float32 */;
  %74 = reshape(%72, newshape=[13, 16, 15]) /* ty=Tensor[(13, 16, 15), float32] */;
  %75 = @func_2216(%73, %74) /* ty=(Tensor[(13, 16, 15), float32],) */;
  %76 = %69.0;
  %77 = %70.0;
  %78 = %75.0;
  (%76, %77, %78, %var_15258, %var_15259)
}

def @func_4689() -> (Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) {
  %79 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %80 = cast(meta[relay.Constant][1] /* ty=Tensor[(44), float32] */, dtype="float32") /* ty=Tensor[(44), float32] */;
  %81 = reshape(%80, newshape=[1, 11, 4]) /* ty=Tensor[(1, 11, 4), float32] */;
  %82 = @func_2615(%81) /* ty=(Tensor[(1, 11, 4), float32], Tensor[(8, 13, 12), bool], Tensor[(104, 12), bool]) */;
  %83 = %79.0;
  %84 = %82.0;
  (%83, %84, meta[relay.Constant][1] /* ty=Tensor[(44), float32] */)
}

def @func_11637(%var_11620: Tensor[(2, 1456), int16]) -> (Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(2, 1456), int16]) {
  %85 = @func_5660() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %86 = cast(%var_11620, dtype="int16") /* ty=Tensor[(2, 1456), int16] */;
  %87 = reshape(%86, newshape=[2912]) /* ty=Tensor[(2912), int16] */;
  %88 = @func_5294(%87) /* ty=(Tensor[(14, 15, 9), int64], int16, Tensor[(2912), int16], Tensor[(13, 14, 16), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
  %89 = %85.0;
  %90 = %88.2;
  (%89, %90, %var_11620)
}

def @func_5489() -> (Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) {
  %91 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %92 = cast(meta[relay.Constant][2] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %93 = reshape(%92, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %94 = %91.2;
  %95 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
  %96 = @func_1202(%93) /* ty=Tensor[(8, 13, 12), bool] */;
  (%94, %95, %96, meta[relay.Constant][2] /* ty=Tensor[(1248), bool] */)
}

def @func_14802() -> (Tensor[(14, 15, 9), float64],) {
  %97 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %98 = %97.0;
  (%98,)
}

def @func_11995(%var_11915: Tensor[(48, 2), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(48, 2), bool], Tensor[(14, 15, 9), float64], int32, Tensor[(48, 2), float64], Tensor[(14, 15, 9), float64]) {
  %99 = @func_8407() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) */;
  %100 = %99.0;
  %101 = cast(%var_11915, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(2), int32] */;
  %103 = cast(%100, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %105 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %106 = reshape(%105, newshape=[]) /* ty=int32 */;
  %107 = @func_4301(%106) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) */;
  %108 = cast(%100, dtype="int32") /* ty=Tensor[(48, 2), int32] */;
  %109 = shape_of(%var_11915, dtype="int32") /* ty=Tensor[(2), int32] */;
  %110 = cast(%var_11915, dtype="int32") /* ty=Tensor[(48, 2), int32] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %112 = right_shift(%110, %111) /* ty=Tensor[(48, 2), int32] */;
  %113 = cast(%112, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %114 = @func_11696() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
  %115 = @func_9357() /* ty=Tensor[(14, 15, 9), float64] */;
  %116 = less_equal(%103, %104) /* ty=Tensor[(48, 2), bool] */;
  %117 = %107.0;
  %118 = log(%113) /* ty=Tensor[(48, 2), float64] */;
  %119 = %114.1;
  (%115, %116, %117, 3 /* ty=int32 */, %118, %119)
}

def @func_14557(%var_14489: Tensor[(7, 11, 9), float32], %var_14497: Tensor[(2, 1560), float32]) -> (Tensor[(2, 1560), float32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(288), float32], Tensor[(14, 15, 9), int16], Tensor[(7, 11, 9), bool]) {
  %120 = @func_8696() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(156, 20), float32]) */;
  %121 = cast(1.16843f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %122 = cast(%var_14497, dtype="float32") /* ty=Tensor[(2, 1560), float32] */;
  %123 = reshape(%121, newshape=[]) /* ty=float32 */;
  %124 = reshape(%122, newshape=[13, 16, 15]) /* ty=Tensor[(13, 16, 15), float32] */;
  %125 = @func_2216(%123, %124) /* ty=(Tensor[(13, 16, 15), float32],) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="uint64") /* ty=Tensor[(13, 16, 15), uint64] */;
  %128 = cast(1.16843f /* ty=float32 */, dtype="uint64") /* ty=uint64 */;
  %129 = bitwise_xor(%127, %128) /* ty=Tensor[(13, 16, 15), uint64] */;
  %130 = cast(%129, dtype="float32") /* ty=Tensor[(13, 16, 15), float32] */;
  %131 = @func_6208() /* ty=(float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) */;
  %132 = @func_12502() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) */;
  %133 = cast(1.16843f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %134 = cast(%var_14489, dtype="bool") /* ty=Tensor[(7, 11, 9), bool] */;
  %135 = less_equal(%133, %134) /* ty=Tensor[(7, 11, 9), bool] */;
  %136 = cast(%135, dtype="float64") /* ty=Tensor[(7, 11, 9), float64] */;
  %137 = atanh(%136) /* ty=Tensor[(7, 11, 9), float64] */;
  %138 = cast(%var_14489, dtype="bool") /* ty=Tensor[(7, 11, 9), bool] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%137, dtype="bool") /* ty=Tensor[(7, 11, 9), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = %120.0;
  %143 = cosh(%130) /* ty=Tensor[(13, 16, 15), float32] */;
  %144 = %131.2;
  %145 = %132.1;
  %146 = greater(%140, %141) /* ty=Tensor[(7, 11, 9), bool] */;
  (%var_14497, %142, %143, %144, %145, %146)
}

def @func_12812() -> Tensor[(16, 8, 5), float32] {
  @func_8319() /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_10898() -> Tensor[(14, 15, 9), float64] {
  @func_7823() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_4941(%var_4891: float32, %var_4900: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32], Tensor[(?, 12, 14), uint32], Tensor[(1248), bool], Tensor[(1512), uint8], Tensor[(1, 1, 15), uint32], Tensor[(15, 168), float64]) {
  %147 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %148 = %147.0;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %150 = cast(%var_4891, dtype="float32") /* ty=float32 */;
  %151 = cast(meta[relay.Constant][3] /* ty=Tensor[(3120), float32] */, dtype="float32") /* ty=Tensor[(3120), float32] */;
  %152 = reshape(%150, newshape=[]) /* ty=float32 */;
  %153 = reshape(%151, newshape=[13, 16, 15]) /* ty=Tensor[(13, 16, 15), float32] */;
  %154 = @func_2216(%152, %153) /* ty=(Tensor[(13, 16, 15), float32],) */;
  %155 = cast(%var_4900, dtype="float32") /* ty=Tensor[(168), float32] */;
  %156 = reshape(%155, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
  %157 = @func_2044(%156) /* ty=(Tensor[(?, 12, 14), uint32],) */;
  %158 = cast(meta[relay.Constant][4] /* ty=Tensor[(1512), uint8] */, dtype="uint8") /* ty=Tensor[(1512), uint8] */;
  %159 = cast(meta[relay.Constant][4] /* ty=Tensor[(1512), uint8] */, dtype="uint8") /* ty=Tensor[(1512), uint8] */;
  %160 = reshape(%158, newshape=[14, 12, 9]) /* ty=Tensor[(14, 12, 9), uint8] */;
  %161 = reshape(%159, newshape=[14, 12, 9]) /* ty=Tensor[(14, 12, 9), uint8] */;
  %162 = @func_1962(%160, %161) /* ty=(Tensor[(14, 12, 9), bool], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
  %163 = cast(%var_4891, dtype="uint32") /* ty=uint32 */;
  %164 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 1), uint32] */, dtype="uint32") /* ty=Tensor[(15, 1), uint32] */;
  %165 = reshape(%163, newshape=[]) /* ty=uint32 */;
  %166 = reshape(%164, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %167 = cast(%var_4900, dtype="float64") /* ty=Tensor[(168), float64] */;
  %168 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 1), uint32] */, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
  %169 = sqrt(%149) /* ty=Tensor[(14, 15, 9), float32] */;
  %170 = %154.0;
  %171 = %157.0;
  %172 = %162.2;
  %173 = @func_2337(%165, %166) /* ty=Tensor[(1, 1, 15), uint32] */;
  %174 = power(%167, %168) /* ty=Tensor[(15, 168), float64] */;
  (%169, %170, %var_4891, meta[relay.Constant][3] /* ty=Tensor[(3120), float32] */, %171, %172, meta[relay.Constant][4] /* ty=Tensor[(1512), uint8] */, %173, %174)
}

def @func_14958() -> (Tensor[(14, 15, 9), float64],) {
  %175 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
  %176 = %175.1;
  (%176,)
}

def @func_11211() -> (Tensor[(1, 11, 4), float32],) {
  %177 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %178 = %177.1;
  (%178,)
}

def @func_8537(%var_8531: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64]) {
  %179 = @func_6296() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %180 = @func_8372() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */;
  %181 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %182 = cast(%var_8531, dtype="float32") /* ty=Tensor[(840), float32] */;
  %183 = reshape(%182, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
  %184 = @func_4726() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %185 = %179.1;
  %186 = %180.0;
  %187 = %181.0;
  %188 = @func_5426(%183) /* ty=Tensor[(6, 14, 10), bool] */;
  %189 = %184.0;
  (%185, %186, %187, %188, %var_8531, %189)
}

def @func_7391() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  %190 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %191 = %190.0;
  %192 = cast(%191, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %193 = asinh(%192) /* ty=Tensor[(14, 15, 9), float32] */;
  %194 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
  (%193, %194)
}

def @func_13498(%var_13494: Tensor[(11, 6, 9), float64]) -> Tensor[(11, 6, 9), float64] {
  %195 = cast(%var_13494, dtype="float64") /* ty=Tensor[(11, 6, 9), float64] */;
  log(%195) /* ty=Tensor[(11, 6, 9), float64] */
}

def @func_8619() -> Tensor[(14, 15, 9), float64] {
  @func_6664() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_6001(%var_5984: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), float32]) {
  %196 = @func_5319() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %197 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
  %198 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %199 = cast(%var_5984, dtype="float32") /* ty=Tensor[(840), float32] */;
  %200 = reshape(%199, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
  %201 = @func_5426(%200) /* ty=Tensor[(6, 14, 10), bool] */;
  %202 = cast(%var_5984, dtype="float32") /* ty=Tensor[(840), float32] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="float32") /* ty=Tensor[(6, 14, 10), float32] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %206 = %196.0;
  %207 = %197.1;
  %208 = %198.0;
  %209 = power(%204, %205) /* ty=Tensor[(6, 14, 10), float32] */;
  (%206, %207, %208, %209)
}

def @func_6870() -> (Tensor[(14, 15, 9), float32],) {
  %210 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %213 = sinh(%212) /* ty=Tensor[(14, 15, 9), float32] */;
  (%213,)
}

def @func_6208() -> (float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) {
  %214 = @func_6053() /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) */;
  %215 = cast(meta[relay.Constant][6] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %216 = reshape(%215, newshape=[4, 8, 9]) /* ty=Tensor[(4, 8, 9), float32] */;
  %217 = @func_1733(%216) /* ty=(Tensor[(4, 8, 9), float32], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
  %218 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %219 = %214.1;
  %220 = %217.2;
  %221 = %218.0;
  (%219, %220, meta[relay.Constant][6] /* ty=Tensor[(288), float32] */, %221)
}

def @func_2337(%var_2332: uint32, %var_2333: Tensor[(1, 1, 15), uint32]) -> Tensor[(1, 1, 15), uint32] {
  %222 = cast(%var_2332, dtype="uint32") /* ty=uint32 */;
  %223 = cast(%var_2333, dtype="uint32") /* ty=Tensor[(1, 1, 15), uint32] */;
  add(%222, %223) /* ty=Tensor[(1, 1, 15), uint32] */
}

def @func_8407() -> (Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) {
  %224 = @func_7322() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) */;
  %225 = %224.0;
  %226 = cast(meta[relay.Constant][7] /* ty=Tensor[(48, 2), float64] */, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(2), int32] */;
  %228 = cast(%225, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %230 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %231 = mod(%228, %229) /* ty=Tensor[(48, 2), float64] */;
  %232 = %230.0;
  (%231, %232)
}

def @func_10983() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16], Tensor[(96), float64], float32) {
  %233 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %234 = @func_8138() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %235 = cast(meta[relay.Constant][8] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %236 = reshape(%235, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %237 = @func_9101() /* ty=(Tensor[(1, 11, 4), float32],) */;
  %238 = cast(meta[relay.Constant][9] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %239 = reshape(%238, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %240 = @func_4011(%239) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(280), int32], Tensor[(96), float64], int32) */;
  %241 = @func_6208() /* ty=(float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) */;
  %242 = %233.0;
  %243 = %234.0;
  %244 = @func_7823() /* ty=Tensor[(14, 15, 9), float64] */;
  %245 = @func_1202(%236) /* ty=Tensor[(8, 13, 12), bool] */;
  %246 = %237.0;
  %247 = %240.0;
  %248 = %241.0;
  (%242, %243, %244, %245, meta[relay.Constant][8] /* ty=Tensor[(1248), bool] */, %246, %247, meta[relay.Constant][9] /* ty=Tensor[(96), float64] */, %248)
}

def @func_2044(%var_2012: Tensor[(1, 12, 14), float32]) -> (Tensor[(?, 12, 14), uint32],) {
  %249 = cast(%var_2012, dtype="float32") /* ty=Tensor[(1, 12, 14), float32] */;
  %250 = acos(%249) /* ty=Tensor[(1, 12, 14), float32] */;
  %251 = cast(%var_2012, dtype="bool") /* ty=Tensor[(1, 12, 14), bool] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%250, dtype="bool") /* ty=Tensor[(1, 12, 14), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %255 = greater_equal(%253, %254) /* ty=Tensor[(?, 12, 14), bool] */;
  %256 = cast(%var_2012, dtype="uint32") /* ty=Tensor[(1, 12, 14), uint32] */;
  %257 = shape_of(%255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%255, dtype="uint32") /* ty=Tensor[(?, 12, 14), uint32] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %260 = right_shift(%258, %259) /* ty=Tensor[(?, 12, 14), uint32] */;
  (%260,)
}

def @func_12189(%var_12183: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(2912), int16], Tensor[(2912), int16]) {
  %261 = @func_9760() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %262 = cast(%var_12183, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %263 = reshape(%262, newshape=[2912]) /* ty=Tensor[(2912), int16] */;
  %264 = @func_4593(%263) /* ty=(Tensor[(14, 15, 9), bool], Tensor[(2912), int16], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], Tensor[(13, 14, 16), bool], Tensor[(14, 15, 9), float64]) */;
  %265 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
  %266 = %261.0;
  %267 = %264.1;
  (%265, %266, %267, %var_12183)
}

def @func_14595(%var_14574: Tensor[(1, 7, 7), bool]) -> Tensor[(?, 7, 7), bool] {
  %268 = cast(%var_14574, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
  %269 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(1, 7, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 7, 7), bool] */, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%270, %271) /* ty=Tensor[(?, 7, 7), bool] */
}

def @func_4011(%var_3969: Tensor[(96), float64]) -> (Tensor[(14, 15, 9), uint16], Tensor[(280), int32], Tensor[(96), float64], int32) {
  %272 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %273 = cast(%var_3969, dtype="float64") /* ty=Tensor[(96), float64] */;
  %274 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %275 = reshape(%273, newshape=[96, 1]) /* ty=Tensor[(96, 1), float64] */;
  %276 = reshape(%274, newshape=[]) /* ty=int32 */;
  %277 = @func_2401(%275, %276) /* ty=(Tensor[(16, 4, 7), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], int32) */;
  %278 = %272.0;
  %279 = %277.1;
  (%278, %279, %var_3969, -3 /* ty=int32 */)
}

def @func_6777() -> Tensor[(16, 8, 5), float32] {
  %280 = cast(meta[relay.Constant][11] /* ty=Tensor[(16, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 8, 5), float32] */;
  atan(%280) /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_11229() -> Tensor[(14, 15, 9), int64] {
  %281 = @func_6950() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) */;
  %281.1
}

def @func_4806(%var_4795: float32, %var_4796: Tensor[(13, 14, 3), float32]) -> (Tensor[(13, 14, 3), float32],) {
  %282 = cast(%var_4795, dtype="float32") /* ty=float32 */;
  %283 = cast(%var_4796, dtype="float32") /* ty=Tensor[(13, 14, 3), float32] */;
  %284 = mod(%282, %283) /* ty=Tensor[(13, 14, 3), float32] */;
  (%284,)
}

def @func_11439() -> (Tensor[(14, 15, 9), float64],) {
  %285 = @func_9919() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %286 = %285.0;
  (%286,)
}

def @func_13705(%var_13644: Tensor[(594, 1), float64], %var_13677: Tensor[(1248), bool]) -> (Tensor[(14, 15, 9), float64], Tensor[(11, 6, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32], Tensor[(594, 1248), bool], Tensor[(8, 13, 12), float64]) {
  %287 = cast(%var_13644, dtype="float64") /* ty=Tensor[(594, 1), float64] */;
  %288 = reshape(%287, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), float64] */;
  %289 = @func_8179() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %290 = @func_11867() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), uint16]) */;
  %291 = cast(%var_13677, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %292 = cast(%var_13644, dtype="bool") /* ty=Tensor[(594, 1), bool] */;
  %293 = cast(%var_13677, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %294 = reshape(%293, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %295 = @func_1202(%294) /* ty=Tensor[(8, 13, 12), bool] */;
  %296 = cast(%var_13677, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %297 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%295, dtype="float64") /* ty=Tensor[(8, 13, 12), float64] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %300 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
  %301 = @func_13498(%288) /* ty=Tensor[(11, 6, 9), float64] */;
  %302 = %289.0;
  %303 = %290.0;
  %304 = equal(%291, %292) /* ty=Tensor[(594, 1248), bool] */;
  %305 = floor_mod(%298, %299) /* ty=Tensor[(8, 13, 12), float64] */;
  (%300, %301, %302, %303, %304, %305)
}

def @func_2998(%var_2987: int16, %var_2988: Tensor[(13, 14, 16), int16]) -> (Tensor[(13, 14, 16), int16],) {
  %306 = cast(%var_2987, dtype="int16") /* ty=int16 */;
  %307 = cast(%var_2988, dtype="int16") /* ty=Tensor[(13, 14, 16), int16] */;
  %308 = left_shift(%306, %307) /* ty=Tensor[(13, 14, 16), int16] */;
  (%308,)
}

def @func_9335() -> (Tensor[(14, 15, 9), uint16],) {
  %309 = @func_6649() /* ty=(Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) */;
  %310 = %309.1;
  (%310,)
}

def @func_7796(%var_7762: float32, %var_7775: Tensor[(13, 14, 3), float32]) -> (Tensor[(14, 15, 9), float64], float32, Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 3), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32]) {
  %311 = @func_5088() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %312 = cast(%var_7762, dtype="float32") /* ty=float32 */;
  %313 = reshape(%312, newshape=[]) /* ty=float32 */;
  %314 = @func_5012(%313) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) */;
  %315 = %314.1;
  %316 = cast(%315, dtype="float32") /* ty=Tensor[(13, 14, 3), float32] */;
  %317 = asin(%316) /* ty=Tensor[(13, 14, 3), float32] */;
  %318 = cast(%var_7775, dtype="float64") /* ty=Tensor[(13, 14, 3), float64] */;
  %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%317, dtype="float64") /* ty=Tensor[(13, 14, 3), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = cast(meta[relay.Constant][12] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %323 = reshape(%322, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %324 = @func_6001(%323) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), float32]) */;
  %325 = @func_5941() /* ty=Tensor[(14, 15, 9), float64] */;
  %326 = %311.1;
  %327 = minimum(%320, %321) /* ty=Tensor[(13, 14, 3), float64] */;
  %328 = %324.1;
  (%325, %var_7762, %326, %327, %328, meta[relay.Constant][12] /* ty=Tensor[(840), float32] */)
}

def @func_4053() -> (Tensor[(14, 15, 9), uint16],) {
  %329 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %330 = %329.0;
  (%330,)
}

def @func_12833() -> Tensor[(14, 15, 9), int64] {
  %331 = @func_10568() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %331.1
}

def @func_7440(%var_7430: uint64, %var_7437: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), float64], Tensor[(15, 6, 14), uint64], uint64, Tensor[(1260), uint64], Tensor[(13, 14, 16), int16], Tensor[(2912), int16]) {
  %332 = cast(%var_7430, dtype="uint64") /* ty=uint64 */;
  %333 = cast(meta[relay.Constant][13] /* ty=Tensor[(1260), uint64] */, dtype="uint64") /* ty=Tensor[(1260), uint64] */;
  %334 = reshape(%332, newshape=[]) /* ty=uint64 */;
  %335 = reshape(%333, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), uint64] */;
  %336 = @func_6846(%334, %335) /* ty=(Tensor[(15, 6, 14), uint64],) */;
  %337 = cast(%var_7430, dtype="int16") /* ty=int16 */;
  %338 = cast(%var_7437, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %339 = reshape(%337, newshape=[]) /* ty=int16 */;
  %340 = reshape(%338, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), int16] */;
  %341 = @func_2998(%339, %340) /* ty=(Tensor[(13, 14, 16), int16],) */;
  %342 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  %343 = %336.0;
  %344 = %341.0;
  (%342, %343, %var_7430, meta[relay.Constant][13] /* ty=Tensor[(1260), uint64] */, %344, %var_7437)
}

def @func_8173() -> (Tensor[(14, 15, 9), int16],) {
  %345 = @func_6359() /* ty=(Tensor[(14, 15, 9), int16],) */;
  %346 = %345.0;
  (%346,)
}

def @func_6950() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) {
  %347 = @func_5941() /* ty=Tensor[(14, 15, 9), float64] */;
  %348 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %349 = %348.0;
  %350 = cast(%349, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
  %351 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%347, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %354 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %355 = bitwise_and(%352, %353) /* ty=Tensor[(14, 15, 9), int64] */;
  %356 = %354.0;
  (%355, %356)
}

def @main() -> (Tensor[(14, 15, 9), float64], Tensor[(6, 10, 8), int64]) {
  %357 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %358 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 10, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 8), float64] */;
  %359 = asinh(%358) /* ty=Tensor[(6, 10, 8), float64] */;
  %360 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 10, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 8), float64] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="float64") /* ty=Tensor[(6, 10, 8), float64] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %364 = floor_mod(%362, %363) /* ty=Tensor[(6, 10, 8), float64] */;
  %365 = cast(%364, dtype="int64") /* ty=Tensor[(6, 10, 8), int64] */;
  %366 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%359, dtype="int64") /* ty=Tensor[(6, 10, 8), int64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %369 = %357.0;
  %370 = right_shift(%367, %368) /* ty=Tensor[(6, 10, 8), int64] */;
  (%369, %370)
}

def @func_8857() -> Tensor[(14, 15, 9), float32] {
  %371 = @func_7391() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %371.0
}

def @func_5660() -> (Tensor[(14, 15, 9), float64],) {
  %372 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
  (%372,)
}

def @func_7823() -> Tensor[(14, 15, 9), float64] {
  %373 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %373.0
}

def @func_7042() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16]) {
  %374 = @func_6870() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %375 = @func_6359() /* ty=(Tensor[(14, 15, 9), int16],) */;
  %376 = %374.0;
  %377 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  %378 = %375.0;
  (%376, %377, %378)
}

def @func_8891() -> Tensor[(14, 15, 9), float64] {
  %379 = @func_8714() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) */;
  %379.0
}

def @func_6053() -> (Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) {
  %380 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %382 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 1560), float32] */, dtype="float32") /* ty=Tensor[(2, 1560), float32] */;
  %383 = reshape(%382, newshape=[3120]) /* ty=Tensor[(3120), float32] */;
  %384 = @func_4784(%383) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float64]) */;
  %385 = tan(%381) /* ty=Tensor[(14, 15, 9), float64] */;
  %386 = %384.2;
  (%385, %386, meta[relay.Constant][15] /* ty=Tensor[(2, 1560), float32] */)
}

def @func_10527() -> (Tensor[(14, 15, 9), float64],) {
  %387 = @func_6898() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %388 = %387.0;
  (%388,)
}

def @func_9884() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(546), float32], float32, Tensor[(14, 15, 9), uint16]) {
  %389 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %390 = @func_9123() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %391 = @func_9123() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %392 = cast(-5.81495f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %393 = reshape(%392, newshape=[]) /* ty=float32 */;
  %394 = @func_5012(%393) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) */;
  %395 = %389.0;
  %396 = %390.0;
  %397 = %391.0;
  %398 = %394.3;
  %399 = @func_8740() /* ty=Tensor[(14, 15, 9), uint16] */;
  (%395, %396, %397, %398, -5.81495f /* ty=float32 */, %399)
}

def @func_12166() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32]) {
  %400 = @func_8138() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %401 = @func_8052() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %402 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  %403 = %400.0;
  %404 = %401.0;
  (%402, %403, %404)
}

def @func_9579() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) {
  %405 = @func_7322() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) */;
  %406 = @func_7823() /* ty=Tensor[(14, 15, 9), float64] */;
  %407 = %405.1;
  (%406, %407)
}

def @func_13053() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  %408 = @func_6950() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) */;
  %409 = %408.1;
  %410 = @func_8891() /* ty=Tensor[(14, 15, 9), float64] */;
  (%409, %410)
}

def @func_11073(%var_11000: Tensor[(8, 4, 6), float32], %var_11001: Tensor[(8, 4, 6), float32], %var_11017: Tensor[(840), float32]) -> (Tensor[(8, 4, 6), float32], Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) {
  %411 = cast(%var_11001, dtype="float32") /* ty=Tensor[(8, 4, 6), float32] */;
  %412 = shape_of(%var_11000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_11000, dtype="float32") /* ty=Tensor[(8, 4, 6), float32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %415 = cast(meta[relay.Constant][16] /* ty=Tensor[(2912), int16] */, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %416 = cast(%var_11017, dtype="float32") /* ty=Tensor[(840), float32] */;
  %417 = reshape(%415, newshape=[1456, 2]) /* ty=Tensor[(1456, 2), int16] */;
  %418 = reshape(%416, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %419 = @func_5790(%417, %418) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(1456, 2), float64]) */;
  %420 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %421 = floor_divide(%413, %414) /* ty=Tensor[(8, 4, 6), float32] */;
  %422 = %419.1;
  %423 = %420.0;
  %424 = @func_9357() /* ty=Tensor[(14, 15, 9), float64] */;
  (%421, %422, meta[relay.Constant][16] /* ty=Tensor[(2912), int16] */, %var_11017, %423, %424)
}

def @func_11867() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), uint16]) {
  %425 = @func_9272() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) */;
  %426 = @func_9335() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %427 = @func_8857() /* ty=Tensor[(14, 15, 9), float32] */;
  %428 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
  %429 = %425.2;
  %430 = %426.0;
  (%427, %428, %429, %430)
}

def @func_13388() -> (Tensor[(1, 11, 4), float32], float32) {
  %431 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %432 = @func_6208() /* ty=(float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) */;
  %433 = %431.1;
  %434 = %432.0;
  (%433, %434)
}

def @func_7739(%var_7736: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(168), float32]) {
  %435 = @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */;
  %436 = cast(%435, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %437 = cast(%var_7736, dtype="float32") /* ty=Tensor[(168), float32] */;
  %438 = reshape(%437, newshape=[84, 2]) /* ty=Tensor[(84, 2), float32] */;
  %439 = @func_7133(%438) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(3120), float32], float32, Tensor[(84, 2), float32], Tensor[(8, 5, 7), bool], Tensor[(10, 28), int32], Tensor[(?, 12, 14), uint32], Tensor[(2, 1560), float32]) */;
  %440 = @func_6435() /* ty=Tensor[(14, 15, 9), uint16] */;
  %441 = acosh(%436) /* ty=Tensor[(14, 15, 9), float64] */;
  %442 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
  %443 = %439.0;
  (%440, %441, %442, %443, %var_7736)
}

def @func_13433() -> (Tensor[(14, 15, 9), int64], float32) {
  %444 = @func_6950() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) */;
  %445 = @func_9884() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(546), float32], float32, Tensor[(14, 15, 9), uint16]) */;
  %446 = %444.0;
  %447 = %445.4;
  (%446, %447)
}

def @func_6729() -> Tensor[(2, 1560), float32] {
  %448 = @func_6053() /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) */;
  %448.2
}

def @func_7945(%var_7921: Tensor[(5, 9, 11), float32], %var_7922: Tensor[(5, 9, 11), float32], %var_7933: Tensor[(1890, 1), float32]) -> (Tensor[(14, 15, 9), int64], Tensor[(1890, 1), float32], Tensor[(5, 9, 11), bool]) {
  %449 = cast(%var_7933, dtype="float32") /* ty=Tensor[(1890, 1), float32] */;
  %450 = reshape(%449, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float32] */;
  %451 = @func_5860(%450) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(156, 20), float32]) */;
  %452 = cast(%var_7922, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
  %453 = shape_of(%var_7921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_7921, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %456 = maximum(%454, %455) /* ty=Tensor[(5, 9, 11), float32] */;
  %457 = cast(%456, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
  %458 = cosh(%457) /* ty=Tensor[(5, 9, 11), float32] */;
  %459 = cast(%456, dtype="bool") /* ty=Tensor[(5, 9, 11), bool] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="bool") /* ty=Tensor[(5, 9, 11), bool] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %463 = %451.1;
  %464 = greater(%461, %462) /* ty=Tensor[(5, 9, 11), bool] */;
  (%463, %var_7933, %464)
}

def @func_8179() -> (Tensor[(14, 15, 9), float64],) {
  %465 = @func_6053() /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) */;
  %466 = %465.0;
  (%466,)
}

def @func_13287() -> (Tensor[(14, 15, 9), int64], Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(1, 11, 4), float32]) {
  %467 = @func_9123() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %468 = @func_12502() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) */;
  %469 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %470 = %468.0;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(1, 11, 4), float32] */;
  %472 = reshape(%471, newshape=[1, 11, 4]) /* ty=Tensor[(1, 11, 4), float32] */;
  %473 = @func_2615(%472) /* ty=(Tensor[(1, 11, 4), float32], Tensor[(8, 13, 12), bool], Tensor[(104, 12), bool]) */;
  %474 = %467.0;
  %475 = %469.0;
  %476 = @func_11784() /* ty=Tensor[(14, 15, 9), float64] */;
  %477 = %473.0;
  (%474, %470, %475, %476, %477)
}

def @func_6649() -> (Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) {
  %478 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %479 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %480 = sin(%478) /* ty=Tensor[(4, 6, 16), float32] */;
  %481 = %479.0;
  (%480, %481)
}

def @func_9641() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) {
  %482 = @func_8611() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %483 = @func_7391() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %484 = %482.0;
  %485 = %483.1;
  (%484, %485)
}

def @func_4593(%var_4557: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), bool], Tensor[(2912), int16], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], Tensor[(13, 14, 16), bool], Tensor[(14, 15, 9), float64]) {
  %486 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %487 = %486.0;
  %488 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 15, 9), float64] */, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %492 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %493 = cast(meta[relay.Constant][19] /* ty=Tensor[(96, 1), float64] */, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %494 = cast(meta[relay.Constant][20] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %495 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="int32") /* ty=int32 */;
  %496 = reshape(%493, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
  %497 = reshape(%494, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %498 = reshape(%495, newshape=[]) /* ty=int32 */;
  %499 = @func_1505(%496, %497, %498) /* ty=(Tensor[(1, 8, 12), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(8, 13, 12), bool], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) */;
  %500 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %501 = cast(%var_4557, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %502 = reshape(%500, newshape=[]) /* ty=int16 */;
  %503 = reshape(%501, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), int16] */;
  %504 = @func_2998(%502, %503) /* ty=(Tensor[(13, 14, 16), int16],) */;
  %505 = %504.0;
  %506 = cast(%505, dtype="bool") /* ty=Tensor[(13, 14, 16), bool] */;
  %507 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %508 = cast(%487, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %509 = logical_and(%490, %491) /* ty=Tensor[(14, 15, 9), bool] */;
  %510 = %492.1;
  %511 = %499.6;
  %512 = less(%506, %507) /* ty=Tensor[(13, 14, 16), bool] */;
  %513 = sigmoid(%508) /* ty=Tensor[(14, 15, 9), float64] */;
  (%509, %var_4557, %510, %511, meta[relay.Constant][19] /* ty=Tensor[(96, 1), float64] */, meta[relay.Constant][20] /* ty=Tensor[(1248), bool] */, %512, %513)
}

def @func_11293() -> Tensor[(14, 15, 9), float32] {
  %514 = @func_8823() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %514.1
}

def @func_8295() -> (Tensor[(14, 15, 9), float64],) {
  %515 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  (%515,)
}

def @func_5548() -> (Tensor[(14, 15, 9), float32],) {
  %516 = @func_5088() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %517 = %516.0;
  (%517,)
}

def @func_9774() -> Tensor[(14, 15, 9), uint16] {
  %518 = @func_8372() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */;
  %518.1
}

def @func_14275(%var_14253: Tensor[(12, 9, 15), uint16], %var_14254: Tensor[(12, 9, 15), uint16]) -> (Tensor[(12, 9, 15), uint16], Tensor[(14, 15, 9), float64], Tensor[(135, 14), float64]) {
  %519 = cast(%var_14254, dtype="uint16") /* ty=Tensor[(12, 9, 15), uint16] */;
  %520 = shape_of(%var_14253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_14253, dtype="uint16") /* ty=Tensor[(12, 9, 15), uint16] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %523 = cast(meta[relay.Constant][22] /* ty=Tensor[(135, 14), float64] */, dtype="float64") /* ty=Tensor[(135, 14), float64] */;
  %524 = reshape(%523, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float64] */;
  %525 = bitwise_and(%521, %522) /* ty=Tensor[(12, 9, 15), uint16] */;
  %526 = @func_5048(%524) /* ty=Tensor[(14, 15, 9), float64] */;
  (%525, %526, meta[relay.Constant][22] /* ty=Tensor[(135, 14), float64] */)
}

def @func_6435() -> Tensor[(14, 15, 9), uint16] {
  @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_14046() -> Tensor[(14, 15, 9), int64] {
  %527 = @func_10636() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %527.1
}

def @func_7322() -> (Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) {
  %528 = @func_7272() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) */;
  %529 = %528.1;
  %530 = cast(meta[relay.Constant][23] /* ty=Tensor[(48, 2), float32] */, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(2), int32] */;
  %532 = cast(%529, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %534 = @func_6870() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %535 = power(%532, %533) /* ty=Tensor[(48, 2), float64] */;
  %536 = %534.0;
  (%535, %536)
}

def @func_3703() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  %537 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %538 = asin(%537) /* ty=Tensor[(14, 15, 9), float64] */;
  %539 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 15, 9), float64] */, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %543 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %544 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%538, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %547 = multiply(%541, %542) /* ty=Tensor[(14, 15, 9), int64] */;
  %548 = floor_divide(%545, %546) /* ty=Tensor[(14, 15, 9), float64] */;
  (%547, %548)
}

def @func_10103() -> (Tensor[(16, 8, 5), float32],) {
  %549 = @func_9401() /* ty=(Tensor[(16, 8, 5), float32],) */;
  %550 = %549.0;
  (%550,)
}

def @func_5926() -> Tensor[(14, 15, 9), uint16] {
  @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_8740() -> Tensor[(14, 15, 9), uint16] {
  @func_6435() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_15480() -> (Tensor[(16, 8, 5), float32],) {
  %551 = @func_10272() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) */;
  %552 = %551.1;
  (%552,)
}

def @func_13466() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(48, 2), float64]) {
  %553 = @func_7322() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) */;
  %554 = @func_9774() /* ty=Tensor[(14, 15, 9), uint16] */;
  %555 = @func_11784() /* ty=Tensor[(14, 15, 9), float64] */;
  %556 = %553.0;
  (%554, %555, %556)
}

def @func_7133(%var_7093: Tensor[(84, 2), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(3120), float32], float32, Tensor[(84, 2), float32], Tensor[(8, 5, 7), bool], Tensor[(10, 28), int32], Tensor[(?, 12, 14), uint32], Tensor[(2, 1560), float32]) {
  %557 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %558 = cast(3.66125f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %559 = cast(%var_7093, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
  %560 = reshape(%558, newshape=[]) /* ty=float32 */;
  %561 = reshape(%559, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %562 = @func_4941(%560, %561) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32], Tensor[(?, 12, 14), uint32], Tensor[(1248), bool], Tensor[(1512), uint8], Tensor[(1, 1, 15), uint32], Tensor[(15, 168), float64]) */;
  %563 = cast(3.66125f /* ty=float32 */, dtype="int32") /* ty=int32 */;
  %564 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 28), int32] */, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
  %565 = reshape(%563, newshape=[]) /* ty=int32 */;
  %566 = reshape(%564, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
  %567 = @func_342(%565, %566) /* ty=(Tensor[(8, 5, 7), bool],) */;
  %568 = cast(%var_7093, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
  %569 = reshape(%568, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
  %570 = @func_2044(%569) /* ty=(Tensor[(?, 12, 14), uint32],) */;
  %571 = %557.0;
  %572 = %562.3;
  %573 = %567.0;
  %574 = %570.0;
  %575 = @func_6729() /* ty=Tensor[(2, 1560), float32] */;
  (%571, %572, 3.66125f /* ty=float32 */, %var_7093, %573, meta[relay.Constant][25] /* ty=Tensor[(10, 28), int32] */, %574, %575)
}

def @func_5294(%var_5257: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), int64], int16, Tensor[(2912), int16], Tensor[(13, 14, 16), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) {
  %576 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %577 = cast(meta[relay.Constant][26] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %578 = cast(%var_5257, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %579 = reshape(%577, newshape=[]) /* ty=int16 */;
  %580 = reshape(%578, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), int16] */;
  %581 = @func_2998(%579, %580) /* ty=(Tensor[(13, 14, 16), int16],) */;
  %582 = %581.0;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(13, 14, 16), float64] */;
  %584 = cast(meta[relay.Constant][26] /* ty=int16 */, dtype="int32") /* ty=int32 */;
  %585 = reshape(%584, newshape=[]) /* ty=int32 */;
  %586 = @func_4301(%585) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) */;
  %587 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %588 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %589 = %576.0;
  %590 = atanh(%583) /* ty=Tensor[(13, 14, 16), float64] */;
  %591 = %586.0;
  %592 = %587.0;
  %593 = %588.0;
  (%589, meta[relay.Constant][26] /* ty=int16 */, %var_5257, %590, %591, %592, %593)
}

def @func_12994(%var_12987: Tensor[(15), uint32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32]) {
  %594 = @func_10568() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %595 = cast(meta[relay.Constant][27] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %596 = cast(%var_12987, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %597 = reshape(%595, newshape=[]) /* ty=uint32 */;
  %598 = reshape(%596, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %599 = %594.0;
  %600 = @func_11784() /* ty=Tensor[(14, 15, 9), float64] */;
  %601 = @func_2337(%597, %598) /* ty=Tensor[(1, 1, 15), uint32] */;
  (%599, %600, %601, meta[relay.Constant][27] /* ty=uint32 */, %var_12987)
}

def @func_10797() -> (Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32]) {
  %602 = @func_8173() /* ty=(Tensor[(14, 15, 9), int16],) */;
  %603 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %604 = %602.0;
  %605 = %603.0;
  (%604, %605)
}

def @func_10613() -> (Tensor[(14, 15, 9), uint16],) {
  %606 = @func_9335() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %607 = %606.0;
  (%607,)
}

def @func_10828() -> Tensor[(14, 15, 9), float64] {
  %608 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %608.0
}

def @func_9967(%var_9953: Tensor[(2912), int16], %var_9956: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(2912), int16], Tensor[(?, 12, 14), uint32], Tensor[(168), float32], Tensor[(14, 15, 9), float64]) {
  %609 = @func_5319() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %610 = cast(%var_9953, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %611 = reshape(%610, newshape=[2912]) /* ty=Tensor[(2912), int16] */;
  %612 = @func_5294(%611) /* ty=(Tensor[(14, 15, 9), int64], int16, Tensor[(2912), int16], Tensor[(13, 14, 16), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
  %613 = cast(%var_9956, dtype="float32") /* ty=Tensor[(168), float32] */;
  %614 = reshape(%613, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
  %615 = @func_2044(%614) /* ty=(Tensor[(?, 12, 14), uint32],) */;
  %616 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %617 = %609.0;
  %618 = %612.2;
  %619 = %615.0;
  %620 = %616.0;
  (%617, %618, %var_9953, %619, %var_9956, %620)
}

def @func_4167() -> (Tensor[(14, 15, 9), float64],) {
  %621 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %622 = %621.1;
  (%622,)
}

def @func_13200() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) {
  %623 = @func_9641() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
  %624 = @func_9774() /* ty=Tensor[(14, 15, 9), uint16] */;
  %625 = %623.0;
  (%624, %625)
}

def @func_5319() -> (Tensor[(14, 15, 9), float64],) {
  %626 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %627 = %626.0;
  (%627,)
}

def @func_5012(%var_5003: float32) -> (Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) {
  %628 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %629 = cast(%var_5003, dtype="float32") /* ty=float32 */;
  %630 = cast(meta[relay.Constant][28] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %631 = reshape(%629, newshape=[]) /* ty=float32 */;
  %632 = reshape(%630, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float32] */;
  %633 = @func_4806(%631, %632) /* ty=(Tensor[(13, 14, 3), float32],) */;
  %634 = %628.0;
  %635 = %633.0;
  (%634, %635, %var_5003, meta[relay.Constant][28] /* ty=Tensor[(546), float32] */)
}

def @func_14464() -> (Tensor[(14, 15, 9), float64], Tensor[(6, ?, 13), bool], Tensor[(6, ?, 13), float64]) {
  %636 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %637 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 1, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
  %638 = log(%637) /* ty=Tensor[(6, 1, 13), float32] */;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
  %640 = erf(%639) /* ty=Tensor[(6, 1, 13), float32] */;
  %641 = cast(%640, dtype="bool") /* ty=Tensor[(6, 1, 13), bool] */;
  %642 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %643 = cast(%638, dtype="bool") /* ty=Tensor[(6, 1, 13), bool] */;
  %644 = dyn.reshape(%641, %642, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %645 = cast(%640, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
  %646 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %647 = cast(%638, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
  %648 = dyn.reshape(%645, %646, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %649 = %636.1;
  %650 = not_equal(%643, %644) /* ty=Tensor[(6, ?, 13), bool] */;
  %651 = mod(%647, %648) /* ty=Tensor[(6, ?, 13), float64] */;
  (%649, %650, %651)
}

def @func_8276(%var_8266: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(4, 6, 16), float32], Tensor[(15), uint32], Tensor[(?, 12, 14), uint32], Tensor[(168), float32]) {
  %652 = @func_6649() /* ty=(Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) */;
  %653 = @func_6754() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(15), uint32], Tensor[(1, 1, 15), float64]) */;
  %654 = cast(%var_8266, dtype="float32") /* ty=Tensor[(168), float32] */;
  %655 = reshape(%654, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
  %656 = @func_2044(%655) /* ty=(Tensor[(?, 12, 14), uint32],) */;
  %657 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
  %658 = %652.0;
  %659 = %653.1;
  %660 = %656.0;
  (%657, %658, %659, %660, %var_8266)
}

def @func_5790(%var_5764: Tensor[(1456, 2), int16], %var_5772: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(1456, 2), float64]) {
  %661 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %662 = cast(%var_5764, dtype="int16") /* ty=Tensor[(1456, 2), int16] */;
  %663 = reshape(%662, newshape=[2912]) /* ty=Tensor[(2912), int16] */;
  %664 = @func_4593(%663) /* ty=(Tensor[(14, 15, 9), bool], Tensor[(2912), int16], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], Tensor[(13, 14, 16), bool], Tensor[(14, 15, 9), float64]) */;
  %665 = cast(%var_5772, dtype="float32") /* ty=Tensor[(840), float32] */;
  %666 = reshape(%665, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
  %667 = @func_5660() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %668 = cast(%var_5764, dtype="float64") /* ty=Tensor[(1456, 2), float64] */;
  %669 = %661.0;
  %670 = %664.2;
  %671 = @func_5426(%666) /* ty=Tensor[(6, 14, 10), bool] */;
  %672 = %667.0;
  %673 = sigmoid(%668) /* ty=Tensor[(1456, 2), float64] */;
  (%669, %670, %671, %var_5772, %672, %673)
}

def @func_9272() -> (Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) {
  %674 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %675 = reshape(%674, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
  %676 = cast(meta[relay.Constant][31] /* ty=Tensor[(624, 2), bool] */, dtype="bool") /* ty=Tensor[(624, 2), bool] */;
  %677 = reshape(%676, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %678 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
  %679 = @func_5426(%675) /* ty=Tensor[(6, 14, 10), bool] */;
  %680 = @func_1202(%677) /* ty=Tensor[(8, 13, 12), bool] */;
  (%678, %679, meta[relay.Constant][30] /* ty=Tensor[(840), float32] */, %680, meta[relay.Constant][31] /* ty=Tensor[(624, 2), bool] */)
}

def @func_5426(%var_5418: Tensor[(6, 14, 10), float32]) -> Tensor[(6, 14, 10), bool] {
  %681 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(1, 14, 10), bool] */;
  %682 = cast(%var_5418, dtype="bool") /* ty=Tensor[(6, 14, 10), bool] */;
  less_equal(%681, %682) /* ty=Tensor[(6, 14, 10), bool] */
}

def @func_1733(%var_1715: Tensor[(4, 8, 9), float32]) -> (Tensor[(4, 8, 9), float32], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) {
  %683 = cast(%var_1715, dtype="float32") /* ty=Tensor[(4, 8, 9), float32] */;
  %684 = cast(meta[relay.Constant][33] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %685 = reshape(%684, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %686 = acosh(%683) /* ty=Tensor[(4, 8, 9), float32] */;
  %687 = @func_1202(%685) /* ty=Tensor[(8, 13, 12), bool] */;
  (%686, %687, meta[relay.Constant][33] /* ty=Tensor[(1248), bool] */)
}

def @func_6296() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
  %688 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %689 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %690 = @func_6228() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %691 = %688.0;
  %692 = %689.0;
  %693 = %690.0;
  (%691, %692, %693)
}

def @func_2216(%var_2201: float32, %var_2202: Tensor[(13, 16, 15), float32]) -> (Tensor[(13, 16, 15), float32],) {
  %694 = cast(%var_2201, dtype="float32") /* ty=float32 */;
  %695 = cast(%var_2202, dtype="float32") /* ty=Tensor[(13, 16, 15), float32] */;
  %696 = power(%694, %695) /* ty=Tensor[(13, 16, 15), float32] */;
  (%696,)
}

def @func_9027(%var_9025: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32]) {
  %697 = @func_8179() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %698 = @func_7272() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) */;
  %699 = %698.0;
  %700 = cast(%699, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %701 = @func_5319() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %702 = @func_8173() /* ty=(Tensor[(14, 15, 9), int16],) */;
  %703 = cast(%var_9025, dtype="float32") /* ty=Tensor[(840), float32] */;
  %704 = reshape(%703, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
  %705 = %697.0;
  %706 = log(%700) /* ty=Tensor[(14, 15, 9), float32] */;
  %707 = %701.0;
  %708 = %702.0;
  %709 = @func_8857() /* ty=Tensor[(14, 15, 9), float32] */;
  %710 = @func_5426(%704) /* ty=Tensor[(6, 14, 10), bool] */;
  (%705, %706, %707, %708, %709, %710, %var_9025)
}

def @func_4139() -> (Tensor[(14, 15, 9), float64],) {
  %711 = @func_3913() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %712 = %711.0;
  (%712,)
}

def @func_5048(%var_5040: Tensor[(14, 15, 9), float64]) -> Tensor[(14, 15, 9), float64] {
  %713 = @func_3913() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %714 = %713.0;
  %715 = cast(%var_5040, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %716 = shape_of(%714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %717 = cast(%714, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%717, %718) /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_15360() -> (Tensor[(14, 15, 9), float64],) {
  %719 = @func_10898() /* ty=Tensor[(14, 15, 9), float64] */;
  (%719,)
}

def @func_15504() -> (Tensor[(14, 15, 9), float64],) {
  %720 = @func_10898() /* ty=Tensor[(14, 15, 9), float64] */;
  (%720,)
}

def @func_11892(%var_11880: Tensor[(11, 16, 8), uint16], %var_11881: Tensor[(11, 16, 8), uint16]) -> (Tensor[(11, 16, 8), bool], Tensor[(11, 16, 8), float64]) {
  %721 = cast(%var_11881, dtype="bool") /* ty=Tensor[(11, 16, 8), bool] */;
  %722 = shape_of(%var_11880, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%var_11880, dtype="bool") /* ty=Tensor[(11, 16, 8), bool] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %725 = cast(%var_11880, dtype="float64") /* ty=Tensor[(11, 16, 8), float64] */;
  %726 = equal(%723, %724) /* ty=Tensor[(11, 16, 8), bool] */;
  %727 = sqrt(%725) /* ty=Tensor[(11, 16, 8), float64] */;
  (%726, %727)
}

def @func_4620() -> Tensor[(14, 15, 9), uint16] {
  %728 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %728.0
}

def @func_5088() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  %729 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %730 = %729.0;
  %731 = cast(%730, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %732 = sin(%731) /* ty=Tensor[(14, 15, 9), float32] */;
  %733 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
  (%732, %733)
}

def @func_9760() -> (Tensor[(14, 15, 9), float32],) {
  %734 = @func_8952() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %735 = %734.0;
  (%735,)
}

def @func_7657(%var_7644: Tensor[(15, 1, 15), float64]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(15, 1, 15), float32], Tensor[(4, 6, 16), float32], Tensor[(15, 1, 15), float32]) {
  %736 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %737 = @func_6870() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %738 = @func_6754() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(15), uint32], Tensor[(1, 1, 15), float64]) */;
  %739 = %738.2;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(1, 1, 15), float32] */;
  %741 = cast(%var_7644, dtype="float32") /* ty=Tensor[(15, 1, 15), float32] */;
  %742 = @func_6649() /* ty=(Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) */;
  %743 = cast(%var_7644, dtype="float32") /* ty=Tensor[(15, 1, 15), float32] */;
  %744 = %736.0;
  %745 = %737.0;
  %746 = multiply(%740, %741) /* ty=Tensor[(15, 1, 15), float32] */;
  %747 = %742.0;
  %748 = log2(%743) /* ty=Tensor[(15, 1, 15), float32] */;
  (%744, %745, %746, %747, %748)
}

def @func_8611() -> (Tensor[(14, 15, 9), float64],) {
  %749 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %750 = %749.0;
  (%750,)
}

def @func_14992() -> (Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16]) {
  %751 = @func_13388() /* ty=(Tensor[(1, 11, 4), float32], float32) */;
  %752 = @func_6296() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %753 = %751.0;
  %754 = %752.0;
  (%753, %754)
}

def @func_12016() -> (Tensor[(44), float32],) {
  %755 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %756 = %755.2;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(44), float32] */;
  %758 = acos(%757) /* ty=Tensor[(44), float32] */;
  (%758,)
}

def @func_14378(%var_14335: Tensor[(96), float64], %var_14353: Tensor[(15), uint32]) -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(96), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(13, 14, 3), float32], Tensor[(48, 2), float32]) {
  %759 = @func_5088() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %760 = @func_13466() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(48, 2), float64]) */;
  %761 = cast(meta[relay.Constant][34] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %762 = cast(%var_14353, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %763 = reshape(%761, newshape=[]) /* ty=uint32 */;
  %764 = reshape(%762, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %765 = cast(meta[relay.Constant][34] /* ty=uint32 */, dtype="float32") /* ty=float32 */;
  %766 = reshape(%765, newshape=[]) /* ty=float32 */;
  %767 = @func_5012(%766) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) */;
  %768 = cast(%var_14335, dtype="float64") /* ty=Tensor[(96), float64] */;
  %769 = reshape(%768, newshape=[48, 2]) /* ty=Tensor[(48, 2), float64] */;
  %770 = @func_5597(%769) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) */;
  %771 = %770.2;
  %772 = cast(%771, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
  %773 = %759.0;
  %774 = %760.1;
  %775 = @func_2337(%763, %764) /* ty=Tensor[(1, 1, 15), uint32] */;
  %776 = %767.1;
  %777 = atan(%772) /* ty=Tensor[(48, 2), float32] */;
  (%773, %774, %var_14335, %775, meta[relay.Constant][34] /* ty=uint32 */, %var_14353, %776, %777)
}

def @func_8696() -> (Tensor[(14, 15, 9), uint16], Tensor[(156, 20), float32]) {
  %778 = @func_8372() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */;
  %779 = %778.0;
  %780 = cast(%779, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %781 = reshape(%780, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float32] */;
  %782 = @func_5860(%781) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(156, 20), float32]) */;
  %783 = %782.2;
  (%779, %783)
}

def @func_8784(%var_8762: Tensor[(12, 70), float32]) -> (Tensor[(6, 14, 10), bool], Tensor[(12, 70), float32], Tensor[(14, 15, 9), bool]) {
  %784 = cast(%var_8762, dtype="float32") /* ty=Tensor[(12, 70), float32] */;
  %785 = reshape(%784, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
  %786 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
  %787 = cast(%786, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %788 = exp(%787) /* ty=Tensor[(14, 15, 9), float64] */;
  %789 = cast(%786, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %790 = reshape(%789, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float64] */;
  %791 = @func_5048(%790) /* ty=Tensor[(14, 15, 9), float64] */;
  %792 = cast(%791, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %793 = shape_of(%788, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%788, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %796 = @func_5426(%785) /* ty=Tensor[(6, 14, 10), bool] */;
  %797 = greater(%794, %795) /* ty=Tensor[(14, 15, 9), bool] */;
  (%796, %var_8762, %797)
}

def @func_5860(%var_5843: Tensor[(14, 15, 9), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(156, 20), float32]) {
  %798 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %799 = %798.0;
  %800 = cast(%var_5843, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%799, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %804 = cast(meta[relay.Constant][35] /* ty=Tensor[(156, 20), float32] */, dtype="float32") /* ty=Tensor[(156, 20), float32] */;
  %805 = reshape(%804, newshape=[3120]) /* ty=Tensor[(3120), float32] */;
  %806 = @func_4784(%805) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float64]) */;
  %807 = power(%802, %803) /* ty=Tensor[(14, 15, 9), float32] */;
  %808 = %806.0;
  (%807, %808, meta[relay.Constant][35] /* ty=Tensor[(156, 20), float32] */)
}

def @func_6754() -> (Tensor[(14, 15, 9), uint16], Tensor[(15), uint32], Tensor[(1, 1, 15), float64]) {
  %809 = cast(meta[relay.Constant][37] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %810 = cast(meta[relay.Constant][36] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %811 = reshape(%809, newshape=[]) /* ty=uint32 */;
  %812 = reshape(%810, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %813 = @func_2337(%811, %812) /* ty=Tensor[(1, 1, 15), uint32] */;
  %814 = cast(meta[relay.Constant][37] /* ty=uint32 */, dtype="float64") /* ty=float64 */;
  %815 = cast(%813, dtype="float64") /* ty=Tensor[(1, 1, 15), float64] */;
  %816 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
  %817 = power(%814, %815) /* ty=Tensor[(1, 1, 15), float64] */;
  (%816, meta[relay.Constant][36] /* ty=Tensor[(15), uint32] */, %817)
}

def @func_10011(%var_10000: int32) -> (Tensor[(44), float32], Tensor[(14, 15, 9), float64], int32) {
  %818 = @func_5489() /* ty=(Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
  %819 = cast(%var_10000, dtype="int32") /* ty=int32 */;
  %820 = reshape(%819, newshape=[]) /* ty=int32 */;
  %821 = @func_4301(%820) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) */;
  %822 = %818.0;
  %823 = %821.0;
  (%822, %823, %var_10000)
}

def @func_7894(%var_7887: Tensor[(280), int32]) -> (Tensor[(1, 11, 4), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) {
  %824 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %825 = cast(meta[relay.Constant][38] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %826 = reshape(%825, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
  %827 = @func_4726() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %828 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %829 = cast(%var_7887, dtype="int32") /* ty=Tensor[(280), int32] */;
  %830 = reshape(%828, newshape=[]) /* ty=int32 */;
  %831 = reshape(%829, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
  %832 = @func_342(%830, %831) /* ty=(Tensor[(8, 5, 7), bool],) */;
  %833 = %824.1;
  %834 = @func_5426(%826) /* ty=Tensor[(6, 14, 10), bool] */;
  %835 = %827.0;
  %836 = %832.0;
  (%833, %834, meta[relay.Constant][38] /* ty=Tensor[(840), float32] */, %835, %836, 1 /* ty=int32 */, %var_7887)
}

def @func_342(%var_337: int32, %var_338: Tensor[(8, 5, 7), int32]) -> (Tensor[(8, 5, 7), bool],) {
  %837 = cast(%var_337, dtype="bool") /* ty=bool */;
  %838 = cast(%var_338, dtype="bool") /* ty=Tensor[(8, 5, 7), bool] */;
  %839 = less_equal(%837, %838) /* ty=Tensor[(8, 5, 7), bool] */;
  (%839,)
}

def @func_9919() -> (Tensor[(14, 15, 9), float64],) {
  %840 = @func_9272() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) */;
  %841 = %840.0;
  (%841,)
}

def @func_7529() -> Tensor[(14, 15, 9), float64] {
  %842 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %842.0
}

def @func_8052() -> (Tensor[(14, 15, 9), float32],) {
  %843 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
  %844 = %843.0;
  (%844,)
}

def @func_2401(%var_2394: Tensor[(96, 1), float64], %var_2396: int32) -> (Tensor[(16, 4, 7), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], int32) {
  %845 = cast(meta[relay.Constant][39] /* ty=Tensor[(16, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 7), float64] */;
  %846 = cast(%var_2394, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %847 = cast(meta[relay.Constant][40] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %848 = cast(%var_2396, dtype="int32") /* ty=int32 */;
  %849 = reshape(%846, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
  %850 = reshape(%847, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %851 = reshape(%848, newshape=[]) /* ty=int32 */;
  %852 = @func_1505(%849, %850, %851) /* ty=(Tensor[(1, 8, 12), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(8, 13, 12), bool], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) */;
  %853 = sqrt(%845) /* ty=Tensor[(16, 4, 7), float64] */;
  %854 = %852.6;
  (%853, %854, %var_2394, meta[relay.Constant][40] /* ty=Tensor[(1248), bool] */, %var_2396)
}

def @func_5641() -> Tensor[(14, 15, 9), float64] {
  %855 = @func_3913() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %855.0
}

def @func_14892() -> Tensor[(14, 15, 9), int64] {
  %856 = @func_13053() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %856.0
}

def @func_15317() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], float32, Tensor[(546), float32]) {
  %857 = @func_6228() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %858 = cast(8.04285f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %859 = cast(meta[relay.Constant][41] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %860 = reshape(%858, newshape=[]) /* ty=float32 */;
  %861 = reshape(%859, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float32] */;
  %862 = @func_7796(%860, %861) /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 3), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32]) */;
  %863 = %857.0;
  %864 = %862.2;
  (%863, %864, 8.04285f /* ty=float32 */, meta[relay.Constant][41] /* ty=Tensor[(546), float32] */)
}

def @func_5941() -> Tensor[(14, 15, 9), float64] {
  @func_5641() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_1962(%var_1946: Tensor[(14, 12, 9), uint8], %var_1947: Tensor[(14, 12, 9), uint8]) -> (Tensor[(14, 12, 9), bool], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) {
  %865 = cast(%var_1947, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %866 = shape_of(%var_1946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %867 = cast(%var_1946, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %868 = dyn.reshape(%865, %866, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %869 = cast(meta[relay.Constant][42] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %870 = reshape(%869, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %871 = greater_equal(%867, %868) /* ty=Tensor[(14, 12, 9), bool] */;
  %872 = @func_1202(%870) /* ty=Tensor[(8, 13, 12), bool] */;
  (%871, %872, meta[relay.Constant][42] /* ty=Tensor[(1248), bool] */)
}

def @func_11386() -> Tensor[(14, 15, 9), float32] {
  @func_11293() /* ty=Tensor[(14, 15, 9), float32] */
}

def @func_12103(%var_12088: Tensor[(280), int32]) -> (Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(280), int32]) {
  %873 = @func_12016() /* ty=(Tensor[(44), float32],) */;
  %874 = cast(%var_12088, dtype="int32") /* ty=Tensor[(280), int32] */;
  %875 = reshape(%874, newshape=[280]) /* ty=Tensor[(280), int32] */;
  %876 = @func_7894(%875) /* ty=(Tensor[(1, 11, 4), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) */;
  %877 = %873.0;
  %878 = @func_11784() /* ty=Tensor[(14, 15, 9), float64] */;
  %879 = %876.6;
  (%877, %878, %879, %var_12088)
}

def @func_4784(%var_4762: Tensor[(3120), float32]) -> (Tensor[(14, 15, 9), int64], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float64]) {
  %880 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %881 = cast(-3.03211f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %882 = cast(%var_4762, dtype="float32") /* ty=Tensor[(3120), float32] */;
  %883 = reshape(%881, newshape=[]) /* ty=float32 */;
  %884 = reshape(%882, newshape=[13, 16, 15]) /* ty=Tensor[(13, 16, 15), float32] */;
  %885 = @func_2216(%883, %884) /* ty=(Tensor[(13, 16, 15), float32],) */;
  %886 = cast(%var_4762, dtype="float64") /* ty=Tensor[(3120), float64] */;
  %887 = %880.0;
  %888 = %885.0;
  %889 = log2(%886) /* ty=Tensor[(3120), float64] */;
  (%887, %888, -3.03211f /* ty=float32 */, %889)
}

def @func_8465() -> (Tensor[(14, 15, 9), float64],) {
  %890 = @func_7823() /* ty=Tensor[(14, 15, 9), float64] */;
  (%890,)
}

def @func_9401() -> (Tensor[(16, 8, 5), float32],) {
  %891 = @func_6777() /* ty=Tensor[(16, 8, 5), float32] */;
  (%891,)
}

def @func_8823() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  %892 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
  %893 = @func_8138() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %894 = @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */;
  %895 = %892.0;
  %896 = %893.0;
  (%894, %895, %896)
}

def @func_9357() -> Tensor[(14, 15, 9), float64] {
  @func_5641() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_10746(%var_10736: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32], Tensor[(13, 16, 15), float32], Tensor[(168), float32], Tensor[(44), float32]) {
  %897 = @func_10636() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %898 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %899 = cast(meta[relay.Constant][43] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
  %900 = reshape(%898, newshape=[]) /* ty=int32 */;
  %901 = reshape(%899, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
  %902 = @func_342(%900, %901) /* ty=(Tensor[(8, 5, 7), bool],) */;
  %903 = cast(-7 /* ty=int32 */, dtype="float32") /* ty=float32 */;
  %904 = cast(%var_10736, dtype="float32") /* ty=Tensor[(168), float32] */;
  %905 = reshape(%903, newshape=[]) /* ty=float32 */;
  %906 = reshape(%904, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %907 = @func_4941(%905, %906) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32], Tensor[(?, 12, 14), uint32], Tensor[(1248), bool], Tensor[(1512), uint8], Tensor[(1, 1, 15), uint32], Tensor[(15, 168), float64]) */;
  %908 = @func_5489() /* ty=(Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
  %909 = %897.0;
  %910 = %902.0;
  %911 = %907.1;
  %912 = %908.0;
  (%909, %910, -7 /* ty=int32 */, meta[relay.Constant][43] /* ty=Tensor[(280), int32] */, %911, %var_10736, %912)
}

def @func_3776() -> (Tensor[(14, 15, 9), uint16],) {
  %913 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %914 = %913.0;
  %915 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 15, 9), int64] */, dtype="uint16") /* ty=Tensor[(14, 15, 9), uint16] */;
  %916 = shape_of(%914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(%914, dtype="uint16") /* ty=Tensor[(14, 15, 9), uint16] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %919 = right_shift(%917, %918) /* ty=Tensor[(14, 15, 9), uint16] */;
  (%919,)
}

def @func_2615(%var_2580: Tensor[(1, 11, 4), float32]) -> (Tensor[(1, 11, 4), float32], Tensor[(8, 13, 12), bool], Tensor[(104, 12), bool]) {
  %920 = cast(%var_2580, dtype="float32") /* ty=Tensor[(1, 11, 4), float32] */;
  %921 = cast(meta[relay.Constant][45] /* ty=Tensor[(104, 12), bool] */, dtype="bool") /* ty=Tensor[(104, 12), bool] */;
  %922 = reshape(%921, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %923 = sqrt(%920) /* ty=Tensor[(1, 11, 4), float32] */;
  %924 = @func_1202(%922) /* ty=Tensor[(8, 13, 12), bool] */;
  (%923, %924, meta[relay.Constant][45] /* ty=Tensor[(104, 12), bool] */)
}

def @func_6228() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  %925 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %926 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %927 = %925.0;
  %928 = %926.0;
  (%927, %928)
}

def @func_9101() -> (Tensor[(1, 11, 4), float32],) {
  %929 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %930 = %929.1;
  (%930,)
}

def @func_11784() -> Tensor[(14, 15, 9), float64] {
  %931 = @func_6228() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %931.1
}

def @func_14750(%var_14726: uint32, %var_14742: Tensor[(3120), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(231, 3), float32], Tensor[(3120), float32]) {
  %932 = @func_13347() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) */;
  %933 = @func_5319() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %934 = cast(%var_14726, dtype="uint32") /* ty=uint32 */;
  %935 = cast(meta[relay.Constant][46] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %936 = reshape(%934, newshape=[]) /* ty=uint32 */;
  %937 = reshape(%935, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %938 = @func_11696() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
  %939 = cast(meta[relay.Constant][47] /* ty=Tensor[(231, 3), float32] */, dtype="float32") /* ty=Tensor[(231, 3), float32] */;
  %940 = cast(%var_14742, dtype="float32") /* ty=Tensor[(3120), float32] */;
  %941 = reshape(%939, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float32] */;
  %942 = reshape(%940, newshape=[2, 1560]) /* ty=Tensor[(2, 1560), float32] */;
  %943 = @func_14557(%941, %942) /* ty=(Tensor[(2, 1560), float32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(288), float32], Tensor[(14, 15, 9), int16], Tensor[(7, 11, 9), bool]) */;
  %944 = %932.1;
  %945 = %933.0;
  %946 = @func_2337(%936, %937) /* ty=Tensor[(1, 1, 15), uint32] */;
  %947 = %938.2;
  %948 = %943.2;
  (%944, %945, %946, %var_14726, meta[relay.Constant][46] /* ty=Tensor[(15), uint32] */, %947, %948, meta[relay.Constant][47] /* ty=Tensor[(231, 3), float32] */, %var_14742)
}

def @func_5597(%var_5569: Tensor[(48, 2), float64]) -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) {
  %949 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %950 = cast(%var_5569, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %951 = reshape(%950, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %952 = @func_4011(%951) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(280), int32], Tensor[(96), float64], int32) */;
  %953 = cast(%var_5569, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %954 = tan(%953) /* ty=Tensor[(48, 2), float64] */;
  %955 = cast(%954, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
  %956 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %957 = %949.0;
  %958 = %952.0;
  %959 = erf(%955) /* ty=Tensor[(48, 2), float32] */;
  %960 = %956.0;
  (%957, %958, %959, %960)
}

def @func_6664() -> Tensor[(14, 15, 9), float64] {
  %961 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
  %961.1
}

def @func_12665(%var_12595: Tensor[(225), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(168), float32], Tensor[(14, 15, 9), float32], Tensor[(225), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int64], Tensor[(1, 11, 4), float32]) {
  %962 = @func_11439() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %963 = cast(meta[relay.Constant][48] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %964 = reshape(%963, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %965 = @func_7739(%964) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(168), float32]) */;
  %966 = cast(%var_12595, dtype="float64") /* ty=Tensor[(225), float64] */;
  %967 = reshape(%966, newshape=[15, 1, 15]) /* ty=Tensor[(15, 1, 15), float64] */;
  %968 = @func_7657(%967) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(15, 1, 15), float32], Tensor[(4, 6, 16), float32], Tensor[(15, 1, 15), float32]) */;
  %969 = @func_10206() /* ty=(Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */;
  %970 = @func_6898() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %971 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %972 = @func_10272() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) */;
  %973 = %972.0;
  %974 = cast(%973, dtype="float32") /* ty=Tensor[(1, 11, 4), float32] */;
  %975 = %962.0;
  %976 = %965.2;
  %977 = %968.1;
  %978 = %969.2;
  %979 = %970.0;
  %980 = %971.0;
  %981 = acos(%974) /* ty=Tensor[(1, 11, 4), float32] */;
  (%975, %976, meta[relay.Constant][48] /* ty=Tensor[(168), float32] */, %977, %var_12595, %978, %979, %980, %981)
}

def @func_4429(%var_4420: int16, %var_4421: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 16), int16], int16, Tensor[(2912), int16]) {
  %982 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %983 = cast(%var_4420, dtype="int16") /* ty=int16 */;
  %984 = cast(%var_4421, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %985 = reshape(%983, newshape=[]) /* ty=int16 */;
  %986 = reshape(%984, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), int16] */;
  %987 = @func_2998(%985, %986) /* ty=(Tensor[(13, 14, 16), int16],) */;
  %988 = %982.0;
  %989 = %987.0;
  (%988, %989, %var_4420, %var_4421)
}

def @func_13804(%var_13785: Tensor[(48, 2), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(48, 2), bool], Tensor[(14, 15, 9), float64]) {
  %990 = @func_8407() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) */;
  %991 = %990.0;
  %992 = cast(%var_13785, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
  %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(2), int32] */;
  %994 = cast(%991, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %996 = @func_10828() /* ty=Tensor[(14, 15, 9), float64] */;
  %997 = logical_or(%994, %995) /* ty=Tensor[(48, 2), bool] */;
  %998 = @func_5941() /* ty=Tensor[(14, 15, 9), float64] */;
  (%996, %997, %998)
}

def @func_13875() -> Tensor[(16, 8, 5), float32] {
  %999 = @func_8319() /* ty=Tensor[(16, 8, 5), float32] */;
  %1000 = cast(%999, dtype="float32") /* ty=Tensor[(16, 8, 5), float32] */;
  rsqrt(%1000) /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_10482(%var_10425: Tensor[(13, 10, 6), float32], %var_10426: Tensor[(13, 10, 6), float32]) -> (Tensor[(13, 10, 6), bool], Tensor[(16, 8, 5), float32], Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), float32], Tensor[(13, 10, 6), int32]) {
  %1001 = cast(%var_10426, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
  %1002 = shape_of(%var_10425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1003 = cast(%var_10425, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
  %1004 = dyn.reshape(%1001, %1002, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1005 = @func_9401() /* ty=(Tensor[(16, 8, 5), float32],) */;
  %1006 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %1007 = cast(%var_10426, dtype="float32") /* ty=Tensor[(13, 10, 6), float32] */;
  %1008 = exp(%1007) /* ty=Tensor[(13, 10, 6), float32] */;
  %1009 = cast(%var_10426, dtype="int32") /* ty=Tensor[(13, 10, 6), int32] */;
  %1010 = shape_of(%1008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1011 = cast(%1008, dtype="int32") /* ty=Tensor[(13, 10, 6), int32] */;
  %1012 = dyn.reshape(%1009, %1010, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1013 = less_equal(%1003, %1004) /* ty=Tensor[(13, 10, 6), bool] */;
  %1014 = %1005.0;
  %1015 = @func_8319() /* ty=Tensor[(16, 8, 5), float32] */;
  %1016 = %1006.0;
  %1017 = bitwise_and(%1011, %1012) /* ty=Tensor[(13, 10, 6), int32] */;
  (%1013, %1014, %1015, %1016, %1017)
}

def @func_3880() -> (Tensor[(14, 15, 9), int64],) {
  %1018 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %1019 = %1018.0;
  (%1019,)
}

def @func_4301(%var_4297: int32) -> (Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) {
  %1020 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1021 = cast(meta[relay.Constant][49] /* ty=Tensor[(1, 96), float64] */, dtype="float64") /* ty=Tensor[(1, 96), float64] */;
  %1022 = cast(%var_4297, dtype="int32") /* ty=int32 */;
  %1023 = reshape(%1021, newshape=[96, 1]) /* ty=Tensor[(96, 1), float64] */;
  %1024 = reshape(%1022, newshape=[]) /* ty=int32 */;
  %1025 = @func_2401(%1023, %1024) /* ty=(Tensor[(16, 4, 7), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], int32) */;
  %1026 = %1020.0;
  %1027 = %1025.2;
  (%1026, %1027, meta[relay.Constant][49] /* ty=Tensor[(1, 96), float64] */, %var_4297)
}

def @func_9123() -> (Tensor[(14, 15, 9), int64],) {
  %1028 = @func_8407() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) */;
  %1029 = %1028.1;
  (%1029,)
}

def @func_13947() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(?, 11, 4), int64]) {
  %1030 = @func_9641() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
  %1031 = @func_6296() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %1032 = @func_12502() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) */;
  %1033 = %1032.0;
  %1034 = cast(%1033, dtype="float64") /* ty=Tensor[(1, 11, 4), float64] */;
  %1035 = asinh(%1034) /* ty=Tensor[(1, 11, 4), float64] */;
  %1036 = cast(%1033, dtype="int64") /* ty=Tensor[(1, 11, 4), int64] */;
  %1037 = shape_of(%1035, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1038 = cast(%1035, dtype="int64") /* ty=Tensor[(1, 11, 4), int64] */;
  %1039 = dyn.reshape(%1036, %1037, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1040 = %1030.0;
  %1041 = %1031.0;
  %1042 = logical_xor(%1038, %1039) /* ty=Tensor[(?, 11, 4), int64] */;
  (%1040, %1041, %1042)
}

def @func_14866() -> (Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32]) {
  %1043 = @func_10613() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1044 = @func_7272() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) */;
  %1045 = %1043.0;
  %1046 = %1044.1;
  (%1045, %1046)
}

def @func_3913() -> (Tensor[(14, 15, 9), float64],) {
  %1047 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %1048 = %1047.0;
  %1049 = cast(%1048, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %1050 = cos(%1049) /* ty=Tensor[(14, 15, 9), float64] */;
  (%1050,)
}

def @func_10206() -> (Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) {
  %1051 = @func_8407() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) */;
  %1052 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1053 = @func_8052() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %1054 = @func_6777() /* ty=Tensor[(16, 8, 5), float32] */;
  %1055 = %1051.1;
  %1056 = %1052.0;
  %1057 = %1053.0;
  (%1054, %1055, %1056, %1057)
}

def @func_13347() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) {
  %1058 = @func_9919() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1059 = %1058.0;
  %1060 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
  (%1059, %1060)
}

def @func_13985() -> (Tensor[(2, 1560), float64],) {
  %1061 = @func_6729() /* ty=Tensor[(2, 1560), float32] */;
  %1062 = cast(%1061, dtype="float64") /* ty=Tensor[(2, 1560), float64] */;
  %1063 = exp(%1062) /* ty=Tensor[(2, 1560), float64] */;
  (%1063,)
}

def @func_6359() -> (Tensor[(14, 15, 9), int16],) {
  %1064 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %1065 = %1064.0;
  %1066 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1067 = %1066.0;
  %1068 = cast(%1067, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %1069 = log10(%1068) /* ty=Tensor[(14, 15, 9), float64] */;
  %1070 = cast(%1069, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %1071 = shape_of(%1067, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1072 = cast(%1067, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %1073 = dyn.reshape(%1070, %1071, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1074 = not_equal(%1072, %1073) /* ty=Tensor[(14, 15, 9), bool] */;
  %1075 = cast(%1074, dtype="int16") /* ty=Tensor[(14, 15, 9), int16] */;
  %1076 = shape_of(%1065, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1077 = cast(%1065, dtype="int16") /* ty=Tensor[(14, 15, 9), int16] */;
  %1078 = dyn.reshape(%1075, %1076, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1079 = bitwise_or(%1077, %1078) /* ty=Tensor[(14, 15, 9), int16] */;
  (%1079,)
}

def @func_1202(%var_1194: Tensor[(8, 13, 12), bool]) -> Tensor[(8, 13, 12), bool] {
  %1080 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 13, 12), bool] */, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
  %1081 = shape_of(%var_1194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1082 = cast(%var_1194, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
  %1083 = dyn.reshape(%1080, %1081, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%1082, %1083) /* ty=Tensor[(8, 13, 12), bool] */
}

def @func_12530() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int16]) {
  %1084 = @func_12502() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) */;
  %1085 = @func_11293() /* ty=Tensor[(14, 15, 9), float32] */;
  %1086 = %1084.1;
  (%1085, %1086)
}

def @func_10056() -> (Tensor[(14, 15, 9), float64],) {
  %1087 = @func_6228() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %1088 = %1087.1;
  (%1088,)
}

def @func_15199() -> (Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  %1089 = @func_14992() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16]) */;
  %1090 = @func_10318() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1091 = %1089.0;
  %1092 = @func_11293() /* ty=Tensor[(14, 15, 9), float32] */;
  %1093 = @func_14046() /* ty=Tensor[(14, 15, 9), int64] */;
  %1094 = %1090.0;
  (%1091, %1092, %1093, %1094)
}

def @func_4726() -> (Tensor[(14, 15, 9), float64],) {
  %1095 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1096 = %1095.0;
  (%1096,)
}

def @func_14948() -> (Tensor[(2, 1560), float32], Tensor[(14, 15, 9), float64]) {
  %1097 = @func_11867() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), uint16]) */;
  %1098 = @func_6729() /* ty=Tensor[(2, 1560), float32] */;
  %1099 = %1097.1;
  (%1098, %1099)
}

def @func_15017() -> (Tensor[(14, 15, 9), float64],) {
  %1100 = @func_7529() /* ty=Tensor[(14, 15, 9), float64] */;
  (%1100,)
}

def @func_11187() -> Tensor[(14, 15, 9), float64] {
  %1101 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1101.0
}

def @func_10868(%var_10858: int32, %var_10859: Tensor[(280), int32]) -> (Tensor[(14, 15, 9), float32], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) {
  %1102 = @func_9579() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */;
  %1103 = cast(%var_10858, dtype="int32") /* ty=int32 */;
  %1104 = cast(%var_10859, dtype="int32") /* ty=Tensor[(280), int32] */;
  %1105 = reshape(%1103, newshape=[]) /* ty=int32 */;
  %1106 = reshape(%1104, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
  %1107 = @func_342(%1105, %1106) /* ty=(Tensor[(8, 5, 7), bool],) */;
  %1108 = %1102.1;
  %1109 = %1107.0;
  (%1108, %1109, %var_10858, %var_10859)
}

def @func_10592() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float32]) {
  %1110 = @func_9760() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %1111 = @func_8823() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %1112 = %1110.0;
  %1113 = %1111.1;
  (%1112, %1113)
}

def @func_10568() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
  %1114 = @func_8372() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */;
  %1115 = @func_6950() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) */;
  %1116 = %1114.0;
  %1117 = %1115.1;
  (%1116, %1117)
}

def @func_5689() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) {
  %1118 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %1119 = %1118.0;
  %1120 = cast(%1119, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %1121 = @func_4726() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1122 = erf(%1120) /* ty=Tensor[(14, 15, 9), float32] */;
  %1123 = %1121.0;
  (%1122, %1123)
}

def @func_12502() -> (Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) {
  %1124 = @func_10272() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) */;
  %1125 = @func_10797() /* ty=(Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32]) */;
  %1126 = %1124.0;
  %1127 = %1125.0;
  (%1126, %1127)
}

def @func_12736(%var_12730: Tensor[(14, 16, 12), float32]) -> Tensor[(14, 16, 12), float32] {
  %1128 = cast(%var_12730, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %1129 = sinh(%1128) /* ty=Tensor[(14, 16, 12), float32] */;
  %1130 = cast(%var_12730, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %1131 = shape_of(%1129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1132 = cast(%1129, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %1133 = dyn.reshape(%1130, %1131, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%1132, %1133) /* ty=Tensor[(14, 16, 12), float32] */
}

def @func_5618() -> Tensor[(14, 15, 9), uint16] {
  %1134 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %1134.0
}

def @func_8952() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  %1135 = @func_7042() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16]) */;
  %1136 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %1137 = %1135.0;
  %1138 = %1136.0;
  (%1137, %1138)
}

def @func_10318() -> (Tensor[(14, 15, 9), float64],) {
  %1139 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1140 = %1139.0;
  (%1140,)
}

def @func_15281() -> Tensor[(14, 15, 9), uint16] {
  %1141 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %1141.0
}

def @func_10636() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
  %1142 = @func_10613() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1143 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %1144 = %1142.0;
  %1145 = %1143.0;
  (%1144, %1145)
}

def @func_15352() -> Tensor[(14, 15, 9), uint16] {
  %1146 = @func_6296() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %1146.0
}

def @func_10929() -> Tensor[(14, 15, 9), float64] {
  %1147 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1147.0
}

def @func_15436(%var_15382: Tensor[(49), bool], %var_15430: Tensor[(96), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(49), uint16], Tensor[(48, 2), float32], Tensor[(96), float64], Tensor[(14, 15, 9), float64]) {
  %1148 = @func_9579() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */;
  %1149 = cast(%var_15382, dtype="bool") /* ty=Tensor[(49), bool] */;
  %1150 = reshape(%1149, newshape=[1, 7, 7]) /* ty=Tensor[(1, 7, 7), bool] */;
  %1151 = @func_14595(%1150) /* ty=Tensor[(?, 7, 7), bool] */;
  %1152 = cast(%1151, dtype="uint16") /* ty=Tensor[(?, 7, 7), uint16] */;
  %1153 = shape_of(%var_15382, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1154 = cast(%var_15382, dtype="uint16") /* ty=Tensor[(49), uint16] */;
  %1155 = dyn.reshape(%1152, %1153, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %1156 = cast(%var_15430, dtype="float64") /* ty=Tensor[(96), float64] */;
  %1157 = reshape(%1156, newshape=[48, 2]) /* ty=Tensor[(48, 2), float64] */;
  %1158 = @func_5597(%1157) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) */;
  %1159 = @func_11187() /* ty=Tensor[(14, 15, 9), float64] */;
  %1160 = %1148.0;
  %1161 = add(%1154, %1155) /* ty=Tensor[(49), uint16] */;
  %1162 = %1158.2;
  %1163 = @func_11514() /* ty=Tensor[(14, 15, 9), float64] */;
  (%1159, %1160, %1161, %1162, %var_15430, %1163)
}

def @func_8319() -> Tensor[(16, 8, 5), float32] {
  @func_6777() /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_11696() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) {
  %1164 = @func_6898() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1165 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1166 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1167 = %1164.0;
  %1168 = %1165.0;
  %1169 = %1166.0;
  (%1167, %1168, %1169)
}

def @func_6601(%var_6556: Tensor[(9, 10, 2), int32], %var_6563: Tensor[(15), uint32]) -> (Tensor[(9, 10, 2), int32], uint32, Tensor[(14, 15, 9), float64], Tensor[(?, ?, 15), int64], Tensor[(1, 1, 15), float64], Tensor[(14, 15, 9), float64]) {
  %1170 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 10, 2), int32] */, dtype="int32") /* ty=Tensor[(9, 10, 2), int32] */;
  %1171 = shape_of(%var_6556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1172 = cast(%var_6556, dtype="int32") /* ty=Tensor[(9, 10, 2), int32] */;
  %1173 = dyn.reshape(%1170, %1171, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1174 = cast(meta[relay.Constant][52] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1175 = cast(%var_6563, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %1176 = reshape(%1174, newshape=[]) /* ty=uint32 */;
  %1177 = reshape(%1175, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %1178 = @func_2337(%1176, %1177) /* ty=Tensor[(1, 1, 15), uint32] */;
  %1179 = cast(%var_6563, dtype="int64") /* ty=Tensor[(15), int64] */;
  %1180 = shape_of(%1178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1181 = cast(%1178, dtype="int64") /* ty=Tensor[(1, 1, 15), int64] */;
  %1182 = dyn.reshape(%1179, %1180, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1183 = cast(%1178, dtype="float64") /* ty=Tensor[(1, 1, 15), float64] */;
  %1184 = left_shift(%1172, %1173) /* ty=Tensor[(9, 10, 2), int32] */;
  %1185 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  %1186 = maximum(%1181, %1182) /* ty=Tensor[(?, ?, 15), int64] */;
  %1187 = atanh(%1183) /* ty=Tensor[(1, 1, 15), float64] */;
  %1188 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  (%1184, meta[relay.Constant][52] /* ty=uint32 */, %1185, %1186, %1187, %1188)
}

def @func_10358() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) {
  %1189 = @func_9335() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1190 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1191 = %1189.0;
  %1192 = %1190.0;
  (%1191, %1192)
}

def @func_8372() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) {
  %1193 = @func_7013() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1194 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
  %1195 = %1193.0;
  (%1194, %1195)
}

def @func_12380() -> Tensor[(14, 15, 9), uint16] {
  %1196 = @func_10358() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) */;
  %1196.0
}

def @func_1505(%var_1464: Tensor[(1, 8, 12), float64], %var_1476: Tensor[(1248), bool], %var_1491: int32) -> (Tensor[(1, 8, 12), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(8, 13, 12), bool], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) {
  %1197 = cast(%var_1464, dtype="float64") /* ty=Tensor[(1, 8, 12), float64] */;
  %1198 = cast(%var_1476, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %1199 = reshape(%1198, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %1200 = @func_1202(%1199) /* ty=Tensor[(8, 13, 12), bool] */;
  %1201 = cast(%1200, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
  %1202 = reshape(%1201, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %1203 = cast(%var_1491, dtype="int32") /* ty=int32 */;
  %1204 = cast(meta[relay.Constant][53] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
  %1205 = reshape(%1203, newshape=[]) /* ty=int32 */;
  %1206 = reshape(%1204, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
  %1207 = @func_342(%1205, %1206) /* ty=(Tensor[(8, 5, 7), bool],) */;
  %1208 = sigmoid(%1197) /* ty=Tensor[(1, 8, 12), float64] */;
  %1209 = @func_1202(%1202) /* ty=Tensor[(8, 13, 12), bool] */;
  %1210 = %1207.0;
  (%1208, %1200, %var_1476, %1209, %1210, %var_1491, meta[relay.Constant][53] /* ty=Tensor[(280), int32] */)
}

def @func_6846(%var_6835: uint64, %var_6836: Tensor[(15, 6, 14), uint64]) -> (Tensor[(15, 6, 14), uint64],) {
  %1211 = cast(%var_6835, dtype="uint64") /* ty=uint64 */;
  %1212 = cast(%var_6836, dtype="uint64") /* ty=Tensor[(15, 6, 14), uint64] */;
  %1213 = subtract(%1211, %1212) /* ty=Tensor[(15, 6, 14), uint64] */;
  (%1213,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_11188() -> Tensor[(14, 15, 9), float64] {
  %1 = fn () -> Tensor[(14, 15, 9), float64] {
    %0 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %0.0
  };
  %1() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_10615() -> (Tensor[(14, 15, 9), uint16],) {
  @func_10613() /* ty=(Tensor[(14, 15, 9), uint16],) */
}

def @func_10272() -> (Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) {
  %2 = @func_9101() /* ty=(Tensor[(1, 11, 4), float32],) */;
  %3 = %2.0;
  %4 = @func_6777() /* ty=Tensor[(16, 8, 5), float32] */;
  (%3, %4)
}

def @func_4951() -> Tensor[(14, 15, 9), float64] {
  @func_4949() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_1505(%var_1464: Tensor[(1, 8, 12), float64], %var_1476: Tensor[(1248), bool], %var_1491: int32) -> (Tensor[(1, 8, 12), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(8, 13, 12), bool], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) {
  %5 = cast(%var_1464, dtype="float64") /* ty=Tensor[(1, 8, 12), float64] */;
  %6 = cast(%var_1476, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %7 = reshape(%6, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %8 = @func_1202(%7) /* ty=Tensor[(8, 13, 12), bool] */;
  %9 = cast(%8, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
  %10 = reshape(%9, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %11 = cast(%var_1491, dtype="int32") /* ty=int32 */;
  %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
  %13 = reshape(%11, newshape=[]) /* ty=int32 */;
  %14 = reshape(%12, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
  %15 = @func_342(%13, %14) /* ty=(Tensor[(8, 5, 7), bool],) */;
  %16 = sigmoid(%5) /* ty=Tensor[(1, 8, 12), float64] */;
  %17 = @func_1202(%10) /* ty=Tensor[(8, 13, 12), bool] */;
  %18 = %15.0;
  (%16, %8, %var_1476, %17, %18, %var_1491, meta[relay.Constant][0] /* ty=Tensor[(280), int32] */)
}

def @func_6053() -> (Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) {
  %19 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  %20 = cast(%19, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 1560), float32] */, dtype="float32") /* ty=Tensor[(2, 1560), float32] */;
  %22 = reshape(%21, newshape=[3120]) /* ty=Tensor[(3120), float32] */;
  %23 = @func_4784(%22) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float64]) */;
  %24 = tan(%20) /* ty=Tensor[(14, 15, 9), float64] */;
  %25 = %23.2;
  (%24, %25, meta[relay.Constant][1] /* ty=Tensor[(2, 1560), float32] */)
}

def @func_12189(%var_12183: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(2912), int16], Tensor[(2912), int16]) {
  %26 = @func_9760() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %27 = cast(%var_12183, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %28 = reshape(%27, newshape=[2912]) /* ty=Tensor[(2912), int16] */;
  %29 = @func_4593(%28) /* ty=(Tensor[(14, 15, 9), bool], Tensor[(2912), int16], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], Tensor[(13, 14, 16), bool], Tensor[(14, 15, 9), float64]) */;
  %30 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
  %31 = %26.0;
  %32 = %29.1;
  (%30, %31, %32, %var_12183)
}

def @func_7324() -> (Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) {
  @func_7322() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) */
}

def @func_13055() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  @func_13053() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */
}

def @func_8296() -> (Tensor[(14, 15, 9), float64],) {
  %34 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %33 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
    (%33,)
  };
  %34() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_8139() -> (Tensor[(14, 15, 9), uint16],) {
  %36 = fn () -> (Tensor[(14, 15, 9), uint16],) {
    %35 = @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */;
    (%35,)
  };
  %36() /* ty=(Tensor[(14, 15, 9), uint16],) */
}

def @func_8786(%var_8785: Tensor[(12, 70), float32]) -> (Tensor[(6, 14, 10), bool], Tensor[(12, 70), float32], Tensor[(14, 15, 9), bool]) {
  %51 = fn (%var_8762: Tensor[(12, 70), float32]) -> (Tensor[(6, 14, 10), bool], Tensor[(12, 70), float32], Tensor[(14, 15, 9), bool]) {
    %37 = cast(%var_8762, dtype="float32") /* ty=Tensor[(12, 70), float32] */;
    %38 = reshape(%37, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
    %39 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
    %40 = cast(%39, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
    %41 = exp(%40) /* ty=Tensor[(14, 15, 9), float64] */;
    %42 = cast(%39, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
    %43 = reshape(%42, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float64] */;
    %44 = @func_5048(%43) /* ty=Tensor[(14, 15, 9), float64] */;
    %45 = cast(%44, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
    %46 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
    %47 = cast(%41, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %49 = @func_5426(%38) /* ty=Tensor[(6, 14, 10), bool] */;
    %50 = greater(%47, %48) /* ty=Tensor[(14, 15, 9), bool] */;
    (%49, %var_8762, %50)
  };
  %51(%var_8785) /* ty=(Tensor[(6, 14, 10), bool], Tensor[(12, 70), float32], Tensor[(14, 15, 9), bool]) */
}

def @func_1204(%var_1203: Tensor[(8, 13, 12), bool]) -> Tensor[(8, 13, 12), bool] {
  %56 = fn (%var_1194: Tensor[(8, 13, 12), bool]) -> Tensor[(8, 13, 12), bool] {
    %52 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 13, 12), bool] */, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
    %53 = shape_of(%var_1194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %54 = cast(%var_1194, dtype="bool") /* ty=Tensor[(8, 13, 12), bool] */;
    %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%54, %55) /* ty=Tensor[(8, 13, 12), bool] */
  };
  %56(%var_1203) /* ty=Tensor[(8, 13, 12), bool] */
}

def @func_8954() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  @func_8952() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */
}

def @func_11895(%var_11893: Tensor[(11, 16, 8), uint16], %var_11894: Tensor[(11, 16, 8), uint16]) -> (Tensor[(11, 16, 8), bool], Tensor[(11, 16, 8), float64]) {
  %64 = fn (%var_11880: Tensor[(11, 16, 8), uint16], %var_11881: Tensor[(11, 16, 8), uint16]) -> (Tensor[(11, 16, 8), bool], Tensor[(11, 16, 8), float64]) {
    %57 = cast(%var_11881, dtype="bool") /* ty=Tensor[(11, 16, 8), bool] */;
    %58 = shape_of(%var_11880, dtype="int32") /* ty=Tensor[(3), int32] */;
    %59 = cast(%var_11880, dtype="bool") /* ty=Tensor[(11, 16, 8), bool] */;
    %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %61 = cast(%var_11880, dtype="float64") /* ty=Tensor[(11, 16, 8), float64] */;
    %62 = equal(%59, %60) /* ty=Tensor[(11, 16, 8), bool] */;
    %63 = sqrt(%61) /* ty=Tensor[(11, 16, 8), float64] */;
    (%62, %63)
  };
  %64(%var_11893, %var_11894) /* ty=(Tensor[(11, 16, 8), bool], Tensor[(11, 16, 8), float64]) */
}

def @func_5088() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  %65 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %66 = %65.0;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %68 = sin(%67) /* ty=Tensor[(14, 15, 9), float32] */;
  %69 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
  (%68, %69)
}

def @func_11211() -> (Tensor[(1, 11, 4), float32],) {
  %70 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %71 = %70.1;
  (%71,)
}

def @func_6230() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  @func_6228() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */
}

def @func_10613() -> (Tensor[(14, 15, 9), uint16],) {
  %72 = @func_9335() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %73 = %72.0;
  (%73,)
}

def @func_13948() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(?, 11, 4), int64]) {
  %87 = fn () -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(?, 11, 4), int64]) {
    %74 = @func_9641() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
    %75 = @func_6296() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
    %76 = @func_12502() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) */;
    %77 = %76.0;
    %78 = cast(%77, dtype="float64") /* ty=Tensor[(1, 11, 4), float64] */;
    %79 = asinh(%78) /* ty=Tensor[(1, 11, 4), float64] */;
    %80 = cast(%77, dtype="int64") /* ty=Tensor[(1, 11, 4), int64] */;
    %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
    %82 = cast(%79, dtype="int64") /* ty=Tensor[(1, 11, 4), int64] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %84 = %74.0;
    %85 = %75.0;
    %86 = logical_xor(%82, %83) /* ty=Tensor[(?, 11, 4), int64] */;
    (%84, %85, %86)
  };
  %87() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(?, 11, 4), int64]) */
}

def @func_6849(%var_6847: uint64, %var_6848: Tensor[(15, 6, 14), uint64]) -> (Tensor[(15, 6, 14), uint64],) {
  %91 = fn (%var_6835: uint64, %var_6836: Tensor[(15, 6, 14), uint64]) -> (Tensor[(15, 6, 14), uint64],) {
    %88 = cast(%var_6835, dtype="uint64") /* ty=uint64 */;
    %89 = cast(%var_6836, dtype="uint64") /* ty=Tensor[(15, 6, 14), uint64] */;
    %90 = subtract(%88, %89) /* ty=Tensor[(15, 6, 14), uint64] */;
    (%90,)
  };
  %91(%var_6847, %var_6848) /* ty=(Tensor[(15, 6, 14), uint64],) */
}

def @func_6900() -> (Tensor[(14, 15, 9), float64],) {
  @func_6898() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_7014() -> (Tensor[(14, 15, 9), uint16],) {
  %93 = fn () -> (Tensor[(14, 15, 9), uint16],) {
    %92 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
    (%92,)
  };
  %93() /* ty=(Tensor[(14, 15, 9), uint16],) */
}

def @func_12192(%var_12190: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(2912), int16], Tensor[(2912), int16]) {
  @func_12189(%var_12190) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(2912), int16], Tensor[(2912), int16]) */
}

def @func_7531() -> Tensor[(14, 15, 9), float64] {
  @func_7529() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_14802() -> (Tensor[(14, 15, 9), float64],) {
  %94 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %95 = %94.0;
  (%95,)
}

def @func_14561(%var_14559: Tensor[(7, 11, 9), float32], %var_14560: Tensor[(2, 1560), float32]) -> (Tensor[(2, 1560), float32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(288), float32], Tensor[(14, 15, 9), int16], Tensor[(7, 11, 9), bool]) {
  @func_14557(%var_14559, %var_14560) /* ty=(Tensor[(2, 1560), float32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(288), float32], Tensor[(14, 15, 9), int16], Tensor[(7, 11, 9), bool]) */
}

def @func_5618() -> Tensor[(14, 15, 9), uint16] {
  %96 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %96.0
}

def @func_4810(%var_4808: float32, %var_4809: Tensor[(13, 14, 3), float32]) -> (Tensor[(13, 14, 3), float32],) {
  @func_4806(%var_4808, %var_4809) /* ty=(Tensor[(13, 14, 3), float32],) */
}

def @func_12381() -> Tensor[(14, 15, 9), uint16] {
  %98 = fn () -> Tensor[(14, 15, 9), uint16] {
    %97 = @func_10358() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) */;
    %97.0
  };
  %98() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_9469() -> Tensor[(14, 15, 9), float32] {
  @func_9467() /* ty=Tensor[(14, 15, 9), float32] */
}

def @func_10983() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16], Tensor[(96), float64], float32) {
  %99 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %100 = @func_8138() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %101 = cast(meta[relay.Constant][3] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %102 = reshape(%101, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %103 = @func_9101() /* ty=(Tensor[(1, 11, 4), float32],) */;
  %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %105 = reshape(%104, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %106 = @func_4011(%105) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(280), int32], Tensor[(96), float64], int32) */;
  %107 = @func_6208() /* ty=(float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) */;
  %108 = %99.0;
  %109 = %100.0;
  %110 = @func_7823() /* ty=Tensor[(14, 15, 9), float64] */;
  %111 = @func_1202(%102) /* ty=Tensor[(8, 13, 12), bool] */;
  %112 = %103.0;
  %113 = %106.0;
  %114 = %107.0;
  (%108, %109, %110, %111, meta[relay.Constant][3] /* ty=Tensor[(1248), bool] */, %112, %113, meta[relay.Constant][4] /* ty=Tensor[(96), float64] */, %114)
}

def @func_5428(%var_5427: Tensor[(6, 14, 10), float32]) -> Tensor[(6, 14, 10), bool] {
  %117 = fn (%var_5418: Tensor[(6, 14, 10), float32]) -> Tensor[(6, 14, 10), bool] {
    %115 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 14, 10), float32] */, dtype="bool") /* ty=Tensor[(1, 14, 10), bool] */;
    %116 = cast(%var_5418, dtype="bool") /* ty=Tensor[(6, 14, 10), bool] */;
    less_equal(%115, %116) /* ty=Tensor[(6, 14, 10), bool] */
  };
  %117(%var_5427) /* ty=Tensor[(6, 14, 10), bool] */
}

def @func_8611() -> (Tensor[(14, 15, 9), float64],) {
  %118 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %119 = %118.0;
  (%119,)
}

def @func_12812() -> Tensor[(16, 8, 5), float32] {
  @func_8319() /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_6649() -> (Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) {
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 6, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 6, 16), float32] */;
  %121 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %122 = sin(%120) /* ty=Tensor[(4, 6, 16), float32] */;
  %123 = %121.0;
  (%122, %123)
}

def @func_7659(%var_7658: Tensor[(15, 1, 15), float64]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(15, 1, 15), float32], Tensor[(4, 6, 16), float32], Tensor[(15, 1, 15), float32]) {
  %137 = fn (%var_7644: Tensor[(15, 1, 15), float64]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(15, 1, 15), float32], Tensor[(4, 6, 16), float32], Tensor[(15, 1, 15), float32]) {
    %124 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %125 = @func_6870() /* ty=(Tensor[(14, 15, 9), float32],) */;
    %126 = @func_6754() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(15), uint32], Tensor[(1, 1, 15), float64]) */;
    %127 = %126.2;
    %128 = cast(%127, dtype="float32") /* ty=Tensor[(1, 1, 15), float32] */;
    %129 = cast(%var_7644, dtype="float32") /* ty=Tensor[(15, 1, 15), float32] */;
    %130 = @func_6649() /* ty=(Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) */;
    %131 = cast(%var_7644, dtype="float32") /* ty=Tensor[(15, 1, 15), float32] */;
    %132 = %124.0;
    %133 = %125.0;
    %134 = multiply(%128, %129) /* ty=Tensor[(15, 1, 15), float32] */;
    %135 = %130.0;
    %136 = log2(%131) /* ty=Tensor[(15, 1, 15), float32] */;
    (%132, %133, %134, %135, %136)
  };
  %137(%var_7658) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(15, 1, 15), float32], Tensor[(4, 6, 16), float32], Tensor[(15, 1, 15), float32]) */
}

def @func_10829() -> Tensor[(14, 15, 9), float64] {
  %139 = fn () -> Tensor[(14, 15, 9), float64] {
    %138 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %138.0
  };
  %139() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_5643() -> Tensor[(14, 15, 9), float64] {
  @func_5641() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_8180() -> (Tensor[(14, 15, 9), float64],) {
  %142 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %140 = @func_6053() /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) */;
    %141 = %140.0;
    (%141,)
  };
  %142() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_10105() -> (Tensor[(16, 8, 5), float32],) {
  @func_10103() /* ty=(Tensor[(16, 8, 5), float32],) */
}

def @func_9335() -> (Tensor[(14, 15, 9), uint16],) {
  %143 = @func_6649() /* ty=(Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) */;
  %144 = %143.1;
  (%144,)
}

def @func_12739(%var_12737: Tensor[(14, 16, 12), float32]) -> Tensor[(14, 16, 12), float32] {
  @func_12736(%var_12737) /* ty=Tensor[(14, 16, 12), float32] */
}

def @func_8716() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) {
  @func_8714() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) */
}

def @func_14867() -> (Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32]) {
  %149 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32]) {
    %145 = @func_10613() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %146 = @func_7272() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) */;
    %147 = %145.0;
    %148 = %146.1;
    (%147, %148)
  };
  %149() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32]) */
}

def @func_11078(%var_11075: Tensor[(8, 4, 6), float32], %var_11076: Tensor[(8, 4, 6), float32], %var_11077: Tensor[(840), float32]) -> (Tensor[(8, 4, 6), float32], Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) {
  @func_11073(%var_11075, %var_11076, %var_11077) /* ty=(Tensor[(8, 4, 6), float32], Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) */
}

def @func_9402() -> (Tensor[(16, 8, 5), float32],) {
  %151 = fn () -> (Tensor[(16, 8, 5), float32],) {
    %150 = @func_6777() /* ty=Tensor[(16, 8, 5), float32] */;
    (%150,)
  };
  %151() /* ty=(Tensor[(16, 8, 5), float32],) */
}

def @func_10208() -> (Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) {
  @func_10206() /* ty=(Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */
}

def @func_7894(%var_7887: Tensor[(280), int32]) -> (Tensor[(1, 11, 4), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) {
  %152 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %153 = cast(meta[relay.Constant][7] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
  %154 = reshape(%153, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
  %155 = @func_4726() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %156 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %157 = cast(%var_7887, dtype="int32") /* ty=Tensor[(280), int32] */;
  %158 = reshape(%156, newshape=[]) /* ty=int32 */;
  %159 = reshape(%157, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
  %160 = @func_342(%158, %159) /* ty=(Tensor[(8, 5, 7), bool],) */;
  %161 = %152.1;
  %162 = @func_5426(%154) /* ty=Tensor[(6, 14, 10), bool] */;
  %163 = %155.0;
  %164 = %160.0;
  (%161, %162, meta[relay.Constant][7] /* ty=Tensor[(840), float32] */, %163, %164, 1 /* ty=int32 */, %var_7887)
}

def @func_5550() -> (Tensor[(14, 15, 9), float32],) {
  @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */
}

def @func_8373() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) {
  %168 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) {
    %165 = @func_7013() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %166 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
    %167 = %165.0;
    (%166, %167)
  };
  %168() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */
}

def @func_15361() -> (Tensor[(14, 15, 9), float64],) {
  %170 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %169 = @func_10898() /* ty=Tensor[(14, 15, 9), float64] */;
    (%169,)
  };
  %170() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_8409() -> (Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) {
  @func_8407() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) */
}

def @func_12339() -> Tensor[(14, 15, 9), float64] {
  %171 = fn () -> Tensor[(14, 15, 9), float64] {
    @func_5941() /* ty=Tensor[(14, 15, 9), float64] */
  };
  %171() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_14279(%var_14277: Tensor[(12, 9, 15), uint16], %var_14278: Tensor[(12, 9, 15), uint16]) -> (Tensor[(12, 9, 15), uint16], Tensor[(14, 15, 9), float64], Tensor[(135, 14), float64]) {
  @func_14275(%var_14277, %var_14278) /* ty=(Tensor[(12, 9, 15), uint16], Tensor[(14, 15, 9), float64], Tensor[(135, 14), float64]) */
}

def @func_10358() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) {
  %172 = @func_9335() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %173 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %174 = %172.0;
  %175 = %173.0;
  (%174, %175)
}

def @func_12103(%var_12088: Tensor[(280), int32]) -> (Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(280), int32]) {
  %176 = @func_12016() /* ty=(Tensor[(44), float32],) */;
  %177 = cast(%var_12088, dtype="int32") /* ty=Tensor[(280), int32] */;
  %178 = reshape(%177, newshape=[280]) /* ty=Tensor[(280), int32] */;
  %179 = @func_7894(%178) /* ty=(Tensor[(1, 11, 4), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) */;
  %180 = %176.0;
  %181 = @func_11784() /* ty=Tensor[(14, 15, 9), float64] */;
  %182 = %179.6;
  (%180, %181, %182, %var_12088)
}

def @func_11295() -> Tensor[(14, 15, 9), float32] {
  @func_11293() /* ty=Tensor[(14, 15, 9), float32] */
}

def @func_14993() -> (Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16]) {
  %187 = fn () -> (Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16]) {
    %183 = @func_13388() /* ty=(Tensor[(1, 11, 4), float32], float32) */;
    %184 = @func_6296() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
    %185 = %183.0;
    %186 = %184.0;
    (%185, %186)
  };
  %187() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16]) */
}

def @func_14959() -> (Tensor[(14, 15, 9), float64],) {
  %190 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %188 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
    %189 = %188.1;
    (%189,)
  };
  %190() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_12016() -> (Tensor[(44), float32],) {
  %191 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %192 = %191.2;
  %193 = cast(%192, dtype="float32") /* ty=Tensor[(44), float32] */;
  %194 = acos(%193) /* ty=Tensor[(44), float32] */;
  (%194,)
}

def @func_5863(%var_5861: Tensor[(14, 15, 9), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(156, 20), float32]) {
  @func_5860(%var_5861) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(156, 20), float32]) */
}

def @func_13876() -> Tensor[(16, 8, 5), float32] {
  %197 = fn () -> Tensor[(16, 8, 5), float32] {
    %195 = @func_8319() /* ty=Tensor[(16, 8, 5), float32] */;
    %196 = cast(%195, dtype="float32") /* ty=Tensor[(16, 8, 5), float32] */;
    rsqrt(%196) /* ty=Tensor[(16, 8, 5), float32] */
  };
  %197() /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_15319() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], float32, Tensor[(546), float32]) {
  @func_15317() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], float32, Tensor[(546), float32]) */
}

def @func_13201() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) {
  %201 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) {
    %198 = @func_9641() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
    %199 = @func_9774() /* ty=Tensor[(14, 15, 9), uint16] */;
    %200 = %198.0;
    (%199, %200)
  };
  %201() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) */
}

def @func_6361() -> (Tensor[(14, 15, 9), int16],) {
  @func_6359() /* ty=(Tensor[(14, 15, 9), int16],) */
}

def @func_8634() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) {
  %205 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) {
    %202 = @func_7013() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %203 = %202.0;
    %204 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
    (%203, %204)
  };
  %205() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) */
}

def @func_8320() -> Tensor[(16, 8, 5), float32] {
  %206 = fn () -> Tensor[(16, 8, 5), float32] {
    @func_6777() /* ty=Tensor[(16, 8, 5), float32] */
  };
  %206() /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_10931() -> Tensor[(14, 15, 9), float64] {
  @func_10929() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_4727() -> (Tensor[(14, 15, 9), float64],) {
  %209 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %207 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %208 = %207.0;
    (%208,)
  };
  %209() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_9761() -> (Tensor[(14, 15, 9), float32],) {
  %212 = fn () -> (Tensor[(14, 15, 9), float32],) {
    %210 = @func_8952() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
    %211 = %210.0;
    (%211,)
  };
  %212() /* ty=(Tensor[(14, 15, 9), float32],) */
}

def @func_9970(%var_9968: Tensor[(2912), int16], %var_9969: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(2912), int16], Tensor[(?, 12, 14), uint32], Tensor[(168), float32], Tensor[(14, 15, 9), float64]) {
  %225 = fn (%var_9953: Tensor[(2912), int16], %var_9956: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(2912), int16], Tensor[(?, 12, 14), uint32], Tensor[(168), float32], Tensor[(14, 15, 9), float64]) {
    %213 = @func_5319() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %214 = cast(%var_9953, dtype="int16") /* ty=Tensor[(2912), int16] */;
    %215 = reshape(%214, newshape=[2912]) /* ty=Tensor[(2912), int16] */;
    %216 = @func_5294(%215) /* ty=(Tensor[(14, 15, 9), int64], int16, Tensor[(2912), int16], Tensor[(13, 14, 16), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
    %217 = cast(%var_9956, dtype="float32") /* ty=Tensor[(168), float32] */;
    %218 = reshape(%217, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
    %219 = @func_2044(%218) /* ty=(Tensor[(?, 12, 14), uint32],) */;
    %220 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %221 = %213.0;
    %222 = %216.2;
    %223 = %219.0;
    %224 = %220.0;
    (%221, %222, %var_9953, %223, %var_9956, %224)
  };
  %225(%var_9968, %var_9969) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(2912), int16], Tensor[(?, 12, 14), uint32], Tensor[(168), float32], Tensor[(14, 15, 9), float64]) */
}

def @func_11514() -> Tensor[(14, 15, 9), float64] {
  %226 = @func_5489() /* ty=(Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
  %226.1
}

def @func_11997(%var_11996: Tensor[(48, 2), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(48, 2), bool], Tensor[(14, 15, 9), float64], int32, Tensor[(48, 2), float64], Tensor[(14, 15, 9), float64]) {
  %248 = fn (%var_11915: Tensor[(48, 2), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(48, 2), bool], Tensor[(14, 15, 9), float64], int32, Tensor[(48, 2), float64], Tensor[(14, 15, 9), float64]) {
    %227 = @func_8407() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) */;
    %228 = %227.0;
    %229 = cast(%var_11915, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
    %230 = shape_of(%228, dtype="int32") /* ty=Tensor[(2), int32] */;
    %231 = cast(%228, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %233 = cast(3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %234 = reshape(%233, newshape=[]) /* ty=int32 */;
    %235 = @func_4301(%234) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) */;
    %236 = cast(%228, dtype="int32") /* ty=Tensor[(48, 2), int32] */;
    %237 = shape_of(%var_11915, dtype="int32") /* ty=Tensor[(2), int32] */;
    %238 = cast(%var_11915, dtype="int32") /* ty=Tensor[(48, 2), int32] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %240 = right_shift(%238, %239) /* ty=Tensor[(48, 2), int32] */;
    %241 = cast(%240, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
    %242 = @func_11696() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
    %243 = @func_9357() /* ty=Tensor[(14, 15, 9), float64] */;
    %244 = less_equal(%231, %232) /* ty=Tensor[(48, 2), bool] */;
    %245 = %235.0;
    %246 = log(%241) /* ty=Tensor[(48, 2), float64] */;
    %247 = %242.1;
    (%243, %244, %245, 3 /* ty=int32 */, %246, %247)
  };
  %248(%var_11996) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(48, 2), bool], Tensor[(14, 15, 9), float64], int32, Tensor[(48, 2), float64], Tensor[(14, 15, 9), float64]) */
}

def @func_13156() -> (Tensor[(14, 15, 9), float64],) {
  %249 = @func_11187() /* ty=Tensor[(14, 15, 9), float64] */;
  (%249,)
}

def @func_11386() -> Tensor[(14, 15, 9), float32] {
  @func_11293() /* ty=Tensor[(14, 15, 9), float32] */
}

def @func_12736(%var_12730: Tensor[(14, 16, 12), float32]) -> Tensor[(14, 16, 12), float32] {
  %250 = cast(%var_12730, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %251 = sinh(%250) /* ty=Tensor[(14, 16, 12), float32] */;
  %252 = cast(%var_12730, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="float32") /* ty=Tensor[(14, 16, 12), float32] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%254, %255) /* ty=Tensor[(14, 16, 12), float32] */
}

def @func_10014(%var_10012: int32) -> (Tensor[(44), float32], Tensor[(14, 15, 9), float64], int32) {
  @func_10011(%var_10012) /* ty=(Tensor[(44), float32], Tensor[(14, 15, 9), float64], int32) */
}

def @func_6730() -> Tensor[(2, 1560), float32] {
  %257 = fn () -> Tensor[(2, 1560), float32] {
    %256 = @func_6053() /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) */;
    %256.2
  };
  %257() /* ty=Tensor[(2, 1560), float32] */
}

def @func_13986() -> (Tensor[(2, 1560), float64],) {
  %261 = fn () -> (Tensor[(2, 1560), float64],) {
    %258 = @func_6729() /* ty=Tensor[(2, 1560), float32] */;
    %259 = cast(%258, dtype="float64") /* ty=Tensor[(2, 1560), float64] */;
    %260 = exp(%259) /* ty=Tensor[(2, 1560), float64] */;
    (%260,)
  };
  %261() /* ty=(Tensor[(2, 1560), float64],) */
}

def @func_6601(%var_6556: Tensor[(9, 10, 2), int32], %var_6563: Tensor[(15), uint32]) -> (Tensor[(9, 10, 2), int32], uint32, Tensor[(14, 15, 9), float64], Tensor[(?, ?, 15), int64], Tensor[(1, 1, 15), float64], Tensor[(14, 15, 9), float64]) {
  %262 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 10, 2), int32] */, dtype="int32") /* ty=Tensor[(9, 10, 2), int32] */;
  %263 = shape_of(%var_6556, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%var_6556, dtype="int32") /* ty=Tensor[(9, 10, 2), int32] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %266 = cast(meta[relay.Constant][9] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %267 = cast(%var_6563, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %268 = reshape(%266, newshape=[]) /* ty=uint32 */;
  %269 = reshape(%267, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %270 = @func_2337(%268, %269) /* ty=Tensor[(1, 1, 15), uint32] */;
  %271 = cast(%var_6563, dtype="int64") /* ty=Tensor[(15), int64] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(%270, dtype="int64") /* ty=Tensor[(1, 1, 15), int64] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %275 = cast(%270, dtype="float64") /* ty=Tensor[(1, 1, 15), float64] */;
  %276 = left_shift(%264, %265) /* ty=Tensor[(9, 10, 2), int32] */;
  %277 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  %278 = maximum(%273, %274) /* ty=Tensor[(?, ?, 15), int64] */;
  %279 = atanh(%275) /* ty=Tensor[(1, 1, 15), float64] */;
  %280 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  (%276, meta[relay.Constant][9] /* ty=uint32 */, %277, %278, %279, %280)
}

def @func_1966(%var_1964: Tensor[(14, 12, 9), uint8], %var_1965: Tensor[(14, 12, 9), uint8]) -> (Tensor[(14, 12, 9), bool], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) {
  @func_1962(%var_1964, %var_1965) /* ty=(Tensor[(14, 12, 9), bool], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */
}

def @func_10103() -> (Tensor[(16, 8, 5), float32],) {
  %281 = @func_9401() /* ty=(Tensor[(16, 8, 5), float32],) */;
  %282 = %281.0;
  (%282,)
}

def @func_3778() -> (Tensor[(14, 15, 9), uint16],) {
  @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */
}

def @func_5297(%var_5295: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), int64], int16, Tensor[(2912), int16], Tensor[(13, 14, 16), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) {
  @func_5294(%var_5295) /* ty=(Tensor[(14, 15, 9), int64], int16, Tensor[(2912), int16], Tensor[(13, 14, 16), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */
}

def @func_15481() -> (Tensor[(16, 8, 5), float32],) {
  %285 = fn () -> (Tensor[(16, 8, 5), float32],) {
    %283 = @func_10272() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) */;
    %284 = %283.1;
    (%284,)
  };
  %285() /* ty=(Tensor[(16, 8, 5), float32],) */
}

def @func_14557(%var_14489: Tensor[(7, 11, 9), float32], %var_14497: Tensor[(2, 1560), float32]) -> (Tensor[(2, 1560), float32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(288), float32], Tensor[(14, 15, 9), int16], Tensor[(7, 11, 9), bool]) {
  %286 = @func_8696() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(156, 20), float32]) */;
  %287 = cast(1.16843f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %288 = cast(%var_14497, dtype="float32") /* ty=Tensor[(2, 1560), float32] */;
  %289 = reshape(%287, newshape=[]) /* ty=float32 */;
  %290 = reshape(%288, newshape=[13, 16, 15]) /* ty=Tensor[(13, 16, 15), float32] */;
  %291 = @func_2216(%289, %290) /* ty=(Tensor[(13, 16, 15), float32],) */;
  %292 = %291.0;
  %293 = cast(%292, dtype="uint64") /* ty=Tensor[(13, 16, 15), uint64] */;
  %294 = cast(1.16843f /* ty=float32 */, dtype="uint64") /* ty=uint64 */;
  %295 = bitwise_xor(%293, %294) /* ty=Tensor[(13, 16, 15), uint64] */;
  %296 = cast(%295, dtype="float32") /* ty=Tensor[(13, 16, 15), float32] */;
  %297 = @func_6208() /* ty=(float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) */;
  %298 = @func_12502() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) */;
  %299 = cast(1.16843f /* ty=float32 */, dtype="bool") /* ty=bool */;
  %300 = cast(%var_14489, dtype="bool") /* ty=Tensor[(7, 11, 9), bool] */;
  %301 = less_equal(%299, %300) /* ty=Tensor[(7, 11, 9), bool] */;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(7, 11, 9), float64] */;
  %303 = atanh(%302) /* ty=Tensor[(7, 11, 9), float64] */;
  %304 = cast(%var_14489, dtype="bool") /* ty=Tensor[(7, 11, 9), bool] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="bool") /* ty=Tensor[(7, 11, 9), bool] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %308 = %286.0;
  %309 = cosh(%296) /* ty=Tensor[(13, 16, 15), float32] */;
  %310 = %297.2;
  %311 = %298.1;
  %312 = greater(%306, %307) /* ty=Tensor[(7, 11, 9), bool] */;
  (%var_14497, %308, %309, %310, %311, %312)
}

def @func_5793(%var_5791: Tensor[(1456, 2), int16], %var_5792: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(1456, 2), float64]) {
  %326 = fn (%var_5764: Tensor[(1456, 2), int16], %var_5772: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(1456, 2), float64]) {
    %313 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
    %314 = cast(%var_5764, dtype="int16") /* ty=Tensor[(1456, 2), int16] */;
    %315 = reshape(%314, newshape=[2912]) /* ty=Tensor[(2912), int16] */;
    %316 = @func_4593(%315) /* ty=(Tensor[(14, 15, 9), bool], Tensor[(2912), int16], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], Tensor[(13, 14, 16), bool], Tensor[(14, 15, 9), float64]) */;
    %317 = cast(%var_5772, dtype="float32") /* ty=Tensor[(840), float32] */;
    %318 = reshape(%317, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
    %319 = @func_5660() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %320 = cast(%var_5764, dtype="float64") /* ty=Tensor[(1456, 2), float64] */;
    %321 = %313.0;
    %322 = %316.2;
    %323 = @func_5426(%318) /* ty=Tensor[(6, 14, 10), bool] */;
    %324 = %319.0;
    %325 = sigmoid(%320) /* ty=Tensor[(1456, 2), float64] */;
    (%321, %322, %323, %var_5772, %324, %325)
  };
  %326(%var_5791, %var_5792) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(1456, 2), float64]) */
}

def @func_12665(%var_12595: Tensor[(225), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(168), float32], Tensor[(14, 15, 9), float32], Tensor[(225), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int64], Tensor[(1, 11, 4), float32]) {
  %327 = @func_11439() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %328 = cast(meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, dtype="float32") /* ty=Tensor[(168), float32] */;
  %329 = reshape(%328, newshape=[168]) /* ty=Tensor[(168), float32] */;
  %330 = @func_7739(%329) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(168), float32]) */;
  %331 = cast(%var_12595, dtype="float64") /* ty=Tensor[(225), float64] */;
  %332 = reshape(%331, newshape=[15, 1, 15]) /* ty=Tensor[(15, 1, 15), float64] */;
  %333 = @func_7657(%332) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(15, 1, 15), float32], Tensor[(4, 6, 16), float32], Tensor[(15, 1, 15), float32]) */;
  %334 = @func_10206() /* ty=(Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */;
  %335 = @func_6898() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %336 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %337 = @func_10272() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) */;
  %338 = %337.0;
  %339 = cast(%338, dtype="float32") /* ty=Tensor[(1, 11, 4), float32] */;
  %340 = %327.0;
  %341 = %330.2;
  %342 = %333.1;
  %343 = %334.2;
  %344 = %335.0;
  %345 = %336.0;
  %346 = acos(%339) /* ty=Tensor[(1, 11, 4), float32] */;
  (%340, %341, meta[relay.Constant][10] /* ty=Tensor[(168), float32] */, %342, %var_12595, %343, %344, %345, %346)
}

def @func_5599(%var_5598: Tensor[(48, 2), float64]) -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) {
  %359 = fn (%var_5569: Tensor[(48, 2), float64]) -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) {
    %347 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %348 = cast(%var_5569, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
    %349 = reshape(%348, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %350 = @func_4011(%349) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(280), int32], Tensor[(96), float64], int32) */;
    %351 = cast(%var_5569, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
    %352 = tan(%351) /* ty=Tensor[(48, 2), float64] */;
    %353 = cast(%352, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
    %354 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %355 = %347.0;
    %356 = %350.0;
    %357 = erf(%353) /* ty=Tensor[(48, 2), float32] */;
    %358 = %354.0;
    (%355, %356, %357, %358)
  };
  %359(%var_5598) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) */
}

def @func_6951() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) {
  %370 = fn () -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) {
    %360 = @func_5941() /* ty=Tensor[(14, 15, 9), float64] */;
    %361 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
    %362 = %361.0;
    %363 = cast(%362, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
    %364 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
    %365 = cast(%360, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
    %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %367 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %368 = bitwise_and(%365, %366) /* ty=Tensor[(14, 15, 9), int64] */;
    %369 = %367.0;
    (%368, %369)
  };
  %370() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) */
}

def @func_14381(%var_14379: Tensor[(96), float64], %var_14380: Tensor[(15), uint32]) -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(96), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(13, 14, 3), float32], Tensor[(48, 2), float32]) {
  %390 = fn (%var_14335: Tensor[(96), float64], %var_14353: Tensor[(15), uint32]) -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(96), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(13, 14, 3), float32], Tensor[(48, 2), float32]) {
    %371 = @func_5088() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
    %372 = @func_13466() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(48, 2), float64]) */;
    %373 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %374 = cast(%var_14353, dtype="uint32") /* ty=Tensor[(15), uint32] */;
    %375 = reshape(%373, newshape=[]) /* ty=uint32 */;
    %376 = reshape(%374, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
    %377 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="float32") /* ty=float32 */;
    %378 = reshape(%377, newshape=[]) /* ty=float32 */;
    %379 = @func_5012(%378) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) */;
    %380 = cast(%var_14335, dtype="float64") /* ty=Tensor[(96), float64] */;
    %381 = reshape(%380, newshape=[48, 2]) /* ty=Tensor[(48, 2), float64] */;
    %382 = @func_5597(%381) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) */;
    %383 = %382.2;
    %384 = cast(%383, dtype="float32") /* ty=Tensor[(48, 2), float32] */;
    %385 = %371.0;
    %386 = %372.1;
    %387 = @func_2337(%375, %376) /* ty=Tensor[(1, 1, 15), uint32] */;
    %388 = %379.1;
    %389 = atan(%384) /* ty=Tensor[(48, 2), float32] */;
    (%385, %386, %var_14335, %387, meta[relay.Constant][11] /* ty=uint32 */, %var_14353, %388, %389)
  };
  %390(%var_14379, %var_14380) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(96), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(13, 14, 3), float32], Tensor[(48, 2), float32]) */
}

def @func_5090() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  @func_5088() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */
}

def @func_4139() -> (Tensor[(14, 15, 9), float64],) {
  %391 = @func_3913() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %392 = %391.0;
  (%392,)
}

def @func_2340(%var_2338: uint32, %var_2339: Tensor[(1, 1, 15), uint32]) -> Tensor[(1, 1, 15), uint32] {
  %395 = fn (%var_2332: uint32, %var_2333: Tensor[(1, 1, 15), uint32]) -> Tensor[(1, 1, 15), uint32] {
    %393 = cast(%var_2332, dtype="uint32") /* ty=uint32 */;
    %394 = cast(%var_2333, dtype="uint32") /* ty=Tensor[(1, 1, 15), uint32] */;
    add(%393, %394) /* ty=Tensor[(1, 1, 15), uint32] */
  };
  %395(%var_2338, %var_2339) /* ty=Tensor[(1, 1, 15), uint32] */
}

def @func_14465() -> (Tensor[(14, 15, 9), float64], Tensor[(6, ?, 13), bool], Tensor[(6, ?, 13), float64]) {
  %412 = fn () -> (Tensor[(14, 15, 9), float64], Tensor[(6, ?, 13), bool], Tensor[(6, ?, 13), float64]) {
    %396 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
    %397 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 1, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
    %398 = log(%397) /* ty=Tensor[(6, 1, 13), float32] */;
    %399 = cast(%398, dtype="float32") /* ty=Tensor[(6, 1, 13), float32] */;
    %400 = erf(%399) /* ty=Tensor[(6, 1, 13), float32] */;
    %401 = cast(%400, dtype="bool") /* ty=Tensor[(6, 1, 13), bool] */;
    %402 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
    %403 = cast(%398, dtype="bool") /* ty=Tensor[(6, 1, 13), bool] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %405 = cast(%400, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
    %406 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%398, dtype="float64") /* ty=Tensor[(6, 1, 13), float64] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %409 = %396.1;
    %410 = not_equal(%403, %404) /* ty=Tensor[(6, ?, 13), bool] */;
    %411 = mod(%407, %408) /* ty=Tensor[(6, ?, 13), float64] */;
    (%409, %410, %411)
  };
  %412() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(6, ?, 13), bool], Tensor[(6, ?, 13), float64]) */
}

def @func_9273() -> (Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) {
  %420 = fn () -> (Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) {
    %413 = cast(meta[relay.Constant][13] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %414 = reshape(%413, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
    %415 = cast(meta[relay.Constant][14] /* ty=Tensor[(624, 2), bool] */, dtype="bool") /* ty=Tensor[(624, 2), bool] */;
    %416 = reshape(%415, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
    %417 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
    %418 = @func_5426(%414) /* ty=Tensor[(6, 14, 10), bool] */;
    %419 = @func_1202(%416) /* ty=Tensor[(8, 13, 12), bool] */;
    (%417, %418, meta[relay.Constant][13] /* ty=Tensor[(840), float32] */, %419, meta[relay.Constant][14] /* ty=Tensor[(624, 2), bool] */)
  };
  %420() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) */
}

def @func_10872(%var_10870: int32, %var_10871: Tensor[(280), int32]) -> (Tensor[(14, 15, 9), float32], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) {
  @func_10868(%var_10870, %var_10871) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) */
}

def @main() -> (Tensor[(14, 15, 9), float64], Tensor[(6, 10, 8), int64]) {
  %421 = @func_8296() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %422 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 10, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 8), float64] */;
  %423 = asinh(%422) /* ty=Tensor[(6, 10, 8), float64] */;
  %424 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 10, 8), float64] */, dtype="float64") /* ty=Tensor[(6, 10, 8), float64] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="float64") /* ty=Tensor[(6, 10, 8), float64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %428 = floor_mod(%426, %427) /* ty=Tensor[(6, 10, 8), float64] */;
  %429 = cast(%428, dtype="int64") /* ty=Tensor[(6, 10, 8), int64] */;
  %430 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%423, dtype="int64") /* ty=Tensor[(6, 10, 8), int64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %433 = %421.0;
  %434 = right_shift(%431, %432) /* ty=Tensor[(6, 10, 8), int64] */;
  (%433, %434)
}

def @func_4432(%var_4430: int16, %var_4431: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 16), int16], int16, Tensor[(2912), int16]) {
  %443 = fn (%var_4420: int16, %var_4421: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 16), int16], int16, Tensor[(2912), int16]) {
    %435 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %436 = cast(%var_4420, dtype="int16") /* ty=int16 */;
    %437 = cast(%var_4421, dtype="int16") /* ty=Tensor[(2912), int16] */;
    %438 = reshape(%436, newshape=[]) /* ty=int16 */;
    %439 = reshape(%437, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), int16] */;
    %440 = @func_2998(%438, %439) /* ty=(Tensor[(13, 14, 16), int16],) */;
    %441 = %435.0;
    %442 = %440.0;
    (%441, %442, %var_4420, %var_4421)
  };
  %443(%var_4430, %var_4431) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 16), int16], int16, Tensor[(2912), int16]) */
}

def @func_5690() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) {
  %450 = fn () -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) {
    %444 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
    %445 = %444.0;
    %446 = cast(%445, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
    %447 = @func_4726() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %448 = erf(%446) /* ty=Tensor[(14, 15, 9), float32] */;
    %449 = %447.0;
    (%448, %449)
  };
  %450() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */
}

def @func_6055() -> (Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) {
  @func_6053() /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) */
}

def @func_15266(%var_15264: float32, %var_15265: Tensor[(3120), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32]) {
  @func_15262(%var_15264, %var_15265) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32]) */
}

def @func_5641() -> Tensor[(14, 15, 9), float64] {
  %451 = @func_3913() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %451.0
}

def @func_7897(%var_7895: Tensor[(280), int32]) -> (Tensor[(1, 11, 4), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) {
  @func_7894(%var_7895) /* ty=(Tensor[(1, 11, 4), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) */
}

def @func_15505() -> (Tensor[(14, 15, 9), float64],) {
  %453 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %452 = @func_10898() /* ty=Tensor[(14, 15, 9), float64] */;
    (%452,)
  };
  %453() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_5927() -> Tensor[(14, 15, 9), uint16] {
  %454 = fn () -> Tensor[(14, 15, 9), uint16] {
    @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */
  };
  %454() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_8742() -> Tensor[(14, 15, 9), uint16] {
  @func_8740() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_7742(%var_7740: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(168), float32]) {
  @func_7739(%var_7740) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(168), float32]) */
}

def @func_9581() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) {
  @func_9579() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */
}

def @func_10748(%var_10747: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32], Tensor[(13, 16, 15), float32], Tensor[(168), float32], Tensor[(44), float32]) {
  %471 = fn (%var_10736: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32], Tensor[(13, 16, 15), float32], Tensor[(168), float32], Tensor[(44), float32]) {
    %455 = @func_10636() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
    %456 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %457 = cast(meta[relay.Constant][16] /* ty=Tensor[(280), int32] */, dtype="int32") /* ty=Tensor[(280), int32] */;
    %458 = reshape(%456, newshape=[]) /* ty=int32 */;
    %459 = reshape(%457, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
    %460 = @func_342(%458, %459) /* ty=(Tensor[(8, 5, 7), bool],) */;
    %461 = cast(-7 /* ty=int32 */, dtype="float32") /* ty=float32 */;
    %462 = cast(%var_10736, dtype="float32") /* ty=Tensor[(168), float32] */;
    %463 = reshape(%461, newshape=[]) /* ty=float32 */;
    %464 = reshape(%462, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %465 = @func_4941(%463, %464) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32], Tensor[(?, 12, 14), uint32], Tensor[(1248), bool], Tensor[(1512), uint8], Tensor[(1, 1, 15), uint32], Tensor[(15, 168), float64]) */;
    %466 = @func_5489() /* ty=(Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
    %467 = %455.0;
    %468 = %460.0;
    %469 = %465.1;
    %470 = %466.0;
    (%467, %468, -7 /* ty=int32 */, meta[relay.Constant][16] /* ty=Tensor[(280), int32] */, %469, %var_10736, %470)
  };
  %471(%var_10747) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32], Tensor[(13, 16, 15), float32], Tensor[(168), float32], Tensor[(44), float32]) */
}

def @func_4054() -> (Tensor[(14, 15, 9), uint16],) {
  %474 = fn () -> (Tensor[(14, 15, 9), uint16],) {
    %472 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %473 = %472.0;
    (%473,)
  };
  %474() /* ty=(Tensor[(14, 15, 9), uint16],) */
}

def @func_7443(%var_7441: uint64, %var_7442: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), float64], Tensor[(15, 6, 14), uint64], uint64, Tensor[(1260), uint64], Tensor[(13, 14, 16), int16], Tensor[(2912), int16]) {
  %488 = fn (%var_7430: uint64, %var_7437: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), float64], Tensor[(15, 6, 14), uint64], uint64, Tensor[(1260), uint64], Tensor[(13, 14, 16), int16], Tensor[(2912), int16]) {
    %475 = cast(%var_7430, dtype="uint64") /* ty=uint64 */;
    %476 = cast(meta[relay.Constant][17] /* ty=Tensor[(1260), uint64] */, dtype="uint64") /* ty=Tensor[(1260), uint64] */;
    %477 = reshape(%475, newshape=[]) /* ty=uint64 */;
    %478 = reshape(%476, newshape=[15, 6, 14]) /* ty=Tensor[(15, 6, 14), uint64] */;
    %479 = @func_6846(%477, %478) /* ty=(Tensor[(15, 6, 14), uint64],) */;
    %480 = cast(%var_7430, dtype="int16") /* ty=int16 */;
    %481 = cast(%var_7437, dtype="int16") /* ty=Tensor[(2912), int16] */;
    %482 = reshape(%480, newshape=[]) /* ty=int16 */;
    %483 = reshape(%481, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), int16] */;
    %484 = @func_2998(%482, %483) /* ty=(Tensor[(13, 14, 16), int16],) */;
    %485 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
    %486 = %479.0;
    %487 = %484.0;
    (%485, %486, %var_7430, meta[relay.Constant][17] /* ty=Tensor[(1260), uint64] */, %487, %var_7437)
  };
  %488(%var_7441, %var_7442) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(15, 6, 14), uint64], uint64, Tensor[(1260), uint64], Tensor[(13, 14, 16), int16], Tensor[(2912), int16]) */
}

def @func_7044() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16]) {
  @func_7042() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16]) */
}

def @func_8620() -> Tensor[(14, 15, 9), float64] {
  %489 = fn () -> Tensor[(14, 15, 9), float64] {
    @func_6664() /* ty=Tensor[(14, 15, 9), float64] */
  };
  %489() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_13389() -> (Tensor[(1, 11, 4), float32], float32) {
  %494 = fn () -> (Tensor[(1, 11, 4), float32], float32) {
    %490 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
    %491 = @func_6208() /* ty=(float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) */;
    %492 = %490.1;
    %493 = %491.0;
    (%492, %493)
  };
  %494() /* ty=(Tensor[(1, 11, 4), float32], float32) */
}

def @func_6871() -> (Tensor[(14, 15, 9), float32],) {
  %499 = fn () -> (Tensor[(14, 15, 9), float32],) {
    %495 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %496 = %495.0;
    %497 = cast(%496, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
    %498 = sinh(%497) /* ty=Tensor[(14, 15, 9), float32] */;
    (%498,)
  };
  %499() /* ty=(Tensor[(14, 15, 9), float32],) */
}

def @func_4593(%var_4557: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), bool], Tensor[(2912), int16], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], Tensor[(13, 14, 16), bool], Tensor[(14, 15, 9), float64]) {
  %500 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %501 = %500.0;
  %502 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 15, 9), float64] */, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %503 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%501, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %507 = cast(meta[relay.Constant][19] /* ty=Tensor[(96, 1), float64] */, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
  %508 = cast(meta[relay.Constant][20] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %509 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="int32") /* ty=int32 */;
  %510 = reshape(%507, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
  %511 = reshape(%508, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
  %512 = reshape(%509, newshape=[]) /* ty=int32 */;
  %513 = @func_1505(%510, %511, %512) /* ty=(Tensor[(1, 8, 12), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(8, 13, 12), bool], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) */;
  %514 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %515 = cast(%var_4557, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %516 = reshape(%514, newshape=[]) /* ty=int16 */;
  %517 = reshape(%515, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), int16] */;
  %518 = @func_2998(%516, %517) /* ty=(Tensor[(13, 14, 16), int16],) */;
  %519 = %518.0;
  %520 = cast(%519, dtype="bool") /* ty=Tensor[(13, 14, 16), bool] */;
  %521 = cast(meta[relay.Constant][21] /* ty=int16 */, dtype="bool") /* ty=bool */;
  %522 = cast(%501, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %523 = logical_and(%504, %505) /* ty=Tensor[(14, 15, 9), bool] */;
  %524 = %506.1;
  %525 = %513.6;
  %526 = less(%520, %521) /* ty=Tensor[(13, 14, 16), bool] */;
  %527 = sigmoid(%522) /* ty=Tensor[(14, 15, 9), float64] */;
  (%523, %var_4557, %524, %525, meta[relay.Constant][19] /* ty=Tensor[(96, 1), float64] */, meta[relay.Constant][20] /* ty=Tensor[(1248), bool] */, %526, %527)
}

def @func_8740() -> Tensor[(14, 15, 9), uint16] {
  @func_6435() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_13288() -> (Tensor[(14, 15, 9), int64], Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(1, 11, 4), float32]) {
  %539 = fn () -> (Tensor[(14, 15, 9), int64], Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(1, 11, 4), float32]) {
    %528 = @func_9123() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %529 = @func_12502() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) */;
    %530 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %531 = %529.0;
    %532 = cast(%531, dtype="float32") /* ty=Tensor[(1, 11, 4), float32] */;
    %533 = reshape(%532, newshape=[1, 11, 4]) /* ty=Tensor[(1, 11, 4), float32] */;
    %534 = @func_2615(%533) /* ty=(Tensor[(1, 11, 4), float32], Tensor[(8, 13, 12), bool], Tensor[(104, 12), bool]) */;
    %535 = %528.0;
    %536 = %530.0;
    %537 = @func_11784() /* ty=Tensor[(14, 15, 9), float64] */;
    %538 = %534.0;
    (%535, %531, %536, %537, %538)
  };
  %539() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(1, 11, 4), float32]) */
}

def @func_8465() -> (Tensor[(14, 15, 9), float64],) {
  %540 = @func_7823() /* ty=Tensor[(14, 15, 9), float64] */;
  (%540,)
}

def @func_12038() -> (Tensor[(96), float64], Tensor[(14, 15, 9), float64]) {
  %545 = fn () -> (Tensor[(96), float64], Tensor[(14, 15, 9), float64]) {
    %541 = @func_7272() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) */;
    %542 = @func_8611() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %543 = %541.2;
    %544 = %542.0;
    (%543, %544)
  };
  %545() /* ty=(Tensor[(96), float64], Tensor[(14, 15, 9), float64]) */
}

def @func_9920() -> (Tensor[(14, 15, 9), float64],) {
  %548 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %546 = @func_9272() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) */;
    %547 = %546.0;
    (%547,)
  };
  %548() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_10485(%var_10483: Tensor[(13, 10, 6), float32], %var_10484: Tensor[(13, 10, 6), float32]) -> (Tensor[(13, 10, 6), bool], Tensor[(16, 8, 5), float32], Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), float32], Tensor[(13, 10, 6), int32]) {
  %566 = fn (%var_10425: Tensor[(13, 10, 6), float32], %var_10426: Tensor[(13, 10, 6), float32]) -> (Tensor[(13, 10, 6), bool], Tensor[(16, 8, 5), float32], Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), float32], Tensor[(13, 10, 6), int32]) {
    %549 = cast(%var_10426, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
    %550 = shape_of(%var_10425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%var_10425, dtype="bool") /* ty=Tensor[(13, 10, 6), bool] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %553 = @func_9401() /* ty=(Tensor[(16, 8, 5), float32],) */;
    %554 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
    %555 = cast(%var_10426, dtype="float32") /* ty=Tensor[(13, 10, 6), float32] */;
    %556 = exp(%555) /* ty=Tensor[(13, 10, 6), float32] */;
    %557 = cast(%var_10426, dtype="int32") /* ty=Tensor[(13, 10, 6), int32] */;
    %558 = shape_of(%556, dtype="int32") /* ty=Tensor[(3), int32] */;
    %559 = cast(%556, dtype="int32") /* ty=Tensor[(13, 10, 6), int32] */;
    %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %561 = less_equal(%551, %552) /* ty=Tensor[(13, 10, 6), bool] */;
    %562 = %553.0;
    %563 = @func_8319() /* ty=Tensor[(16, 8, 5), float32] */;
    %564 = %554.0;
    %565 = bitwise_and(%559, %560) /* ty=Tensor[(13, 10, 6), int32] */;
    (%561, %562, %563, %564, %565)
  };
  %566(%var_10483, %var_10484) /* ty=(Tensor[(13, 10, 6), bool], Tensor[(16, 8, 5), float32], Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), float32], Tensor[(13, 10, 6), int32]) */
}

def @func_5941() -> Tensor[(14, 15, 9), float64] {
  @func_5641() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_15439(%var_15437: Tensor[(49), bool], %var_15438: Tensor[(96), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(49), uint16], Tensor[(48, 2), float32], Tensor[(96), float64], Tensor[(14, 15, 9), float64]) {
  %583 = fn (%var_15382: Tensor[(49), bool], %var_15430: Tensor[(96), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(49), uint16], Tensor[(48, 2), float32], Tensor[(96), float64], Tensor[(14, 15, 9), float64]) {
    %567 = @func_9579() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */;
    %568 = cast(%var_15382, dtype="bool") /* ty=Tensor[(49), bool] */;
    %569 = reshape(%568, newshape=[1, 7, 7]) /* ty=Tensor[(1, 7, 7), bool] */;
    %570 = @func_14595(%569) /* ty=Tensor[(?, 7, 7), bool] */;
    %571 = cast(%570, dtype="uint16") /* ty=Tensor[(?, 7, 7), uint16] */;
    %572 = shape_of(%var_15382, dtype="int32") /* ty=Tensor[(1), int32] */;
    %573 = cast(%var_15382, dtype="uint16") /* ty=Tensor[(49), uint16] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %575 = cast(%var_15430, dtype="float64") /* ty=Tensor[(96), float64] */;
    %576 = reshape(%575, newshape=[48, 2]) /* ty=Tensor[(48, 2), float64] */;
    %577 = @func_5597(%576) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) */;
    %578 = @func_11187() /* ty=Tensor[(14, 15, 9), float64] */;
    %579 = %567.0;
    %580 = add(%573, %574) /* ty=Tensor[(49), uint16] */;
    %581 = %577.2;
    %582 = @func_11514() /* ty=Tensor[(14, 15, 9), float64] */;
    (%578, %579, %580, %581, %var_15430, %582)
  };
  %583(%var_15437, %var_15438) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(49), uint16], Tensor[(48, 2), float32], Tensor[(96), float64], Tensor[(14, 15, 9), float64]) */
}

def @func_9357() -> Tensor[(14, 15, 9), float64] {
  @func_5641() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_6898() -> (Tensor[(14, 15, 9), float64],) {
  %584 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
  (%584,)
}

def @func_11213() -> (Tensor[(1, 11, 4), float32],) {
  @func_11211() /* ty=(Tensor[(1, 11, 4), float32],) */
}

def @func_6651() -> (Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) {
  @func_6649() /* ty=(Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) */
}

def @func_1962(%var_1946: Tensor[(14, 12, 9), uint8], %var_1947: Tensor[(14, 12, 9), uint8]) -> (Tensor[(14, 12, 9), bool], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) {
  %585 = cast(%var_1947, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %586 = shape_of(%var_1946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%var_1946, dtype="bool") /* ty=Tensor[(14, 12, 9), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = cast(meta[relay.Constant][22] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %590 = reshape(%589, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %591 = greater_equal(%587, %588) /* ty=Tensor[(14, 12, 9), bool] */;
  %592 = @func_1202(%590) /* ty=Tensor[(8, 13, 12), bool] */;
  (%591, %592, meta[relay.Constant][22] /* ty=Tensor[(1248), bool] */)
}

def @func_7322() -> (Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) {
  %593 = @func_7272() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) */;
  %594 = %593.1;
  %595 = cast(meta[relay.Constant][23] /* ty=Tensor[(48, 2), float32] */, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(2), int32] */;
  %597 = cast(%594, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %599 = @func_6870() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %600 = power(%597, %598) /* ty=Tensor[(48, 2), float64] */;
  %601 = %599.0;
  (%600, %601)
}

def @func_2046(%var_2045: Tensor[(1, 12, 14), float32]) -> (Tensor[(?, 12, 14), uint32],) {
  %614 = fn (%var_2012: Tensor[(1, 12, 14), float32]) -> (Tensor[(?, 12, 14), uint32],) {
    %602 = cast(%var_2012, dtype="float32") /* ty=Tensor[(1, 12, 14), float32] */;
    %603 = acos(%602) /* ty=Tensor[(1, 12, 14), float32] */;
    %604 = cast(%var_2012, dtype="bool") /* ty=Tensor[(1, 12, 14), bool] */;
    %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%603, dtype="bool") /* ty=Tensor[(1, 12, 14), bool] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %608 = greater_equal(%606, %607) /* ty=Tensor[(?, 12, 14), bool] */;
    %609 = cast(%var_2012, dtype="uint32") /* ty=Tensor[(1, 12, 14), uint32] */;
    %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
    %611 = cast(%608, dtype="uint32") /* ty=Tensor[(?, 12, 14), uint32] */;
    %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %613 = right_shift(%611, %612) /* ty=Tensor[(?, 12, 14), uint32] */;
    (%613,)
  };
  %614(%var_2045) /* ty=(Tensor[(?, 12, 14), uint32],) */
}

def @func_10899() -> Tensor[(14, 15, 9), float64] {
  %615 = fn () -> Tensor[(14, 15, 9), float64] {
    @func_7823() /* ty=Tensor[(14, 15, 9), float64] */
  };
  %615() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_8697() -> (Tensor[(14, 15, 9), uint16], Tensor[(156, 20), float32]) {
  %622 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(156, 20), float32]) {
    %616 = @func_8372() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */;
    %617 = %616.0;
    %618 = cast(%617, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
    %619 = reshape(%618, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float32] */;
    %620 = @func_5860(%619) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(156, 20), float32]) */;
    %621 = %620.2;
    (%617, %621)
  };
  %622() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(156, 20), float32]) */
}

def @func_9776() -> Tensor[(14, 15, 9), uint16] {
  @func_9774() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_4596(%var_4594: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), bool], Tensor[(2912), int16], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], Tensor[(13, 14, 16), bool], Tensor[(14, 15, 9), float64]) {
  @func_4593(%var_4594) /* ty=(Tensor[(14, 15, 9), bool], Tensor[(2912), int16], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], Tensor[(13, 14, 16), bool], Tensor[(14, 15, 9), float64]) */
}

def @func_5319() -> (Tensor[(14, 15, 9), float64],) {
  %623 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %624 = %623.0;
  (%624,)
}

def @func_5860(%var_5843: Tensor[(14, 15, 9), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(156, 20), float32]) {
  %625 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %626 = %625.0;
  %627 = cast(%var_5843, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %631 = cast(meta[relay.Constant][24] /* ty=Tensor[(156, 20), float32] */, dtype="float32") /* ty=Tensor[(156, 20), float32] */;
  %632 = reshape(%631, newshape=[3120]) /* ty=Tensor[(3120), float32] */;
  %633 = @func_4784(%632) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float64]) */;
  %634 = power(%629, %630) /* ty=Tensor[(14, 15, 9), float32] */;
  %635 = %633.0;
  (%634, %635, meta[relay.Constant][24] /* ty=Tensor[(156, 20), float32] */)
}

def @func_10868(%var_10858: int32, %var_10859: Tensor[(280), int32]) -> (Tensor[(14, 15, 9), float32], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) {
  %636 = @func_9579() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */;
  %637 = cast(%var_10858, dtype="int32") /* ty=int32 */;
  %638 = cast(%var_10859, dtype="int32") /* ty=Tensor[(280), int32] */;
  %639 = reshape(%637, newshape=[]) /* ty=int32 */;
  %640 = reshape(%638, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
  %641 = @func_342(%639, %640) /* ty=(Tensor[(8, 5, 7), bool],) */;
  %642 = %636.1;
  %643 = %641.0;
  (%642, %643, %var_10858, %var_10859)
}

def @func_8892() -> Tensor[(14, 15, 9), float64] {
  %645 = fn () -> Tensor[(14, 15, 9), float64] {
    %644 = @func_8714() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) */;
    %644.0
  };
  %645() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_11230() -> Tensor[(14, 15, 9), int64] {
  %647 = fn () -> Tensor[(14, 15, 9), int64] {
    %646 = @func_6950() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) */;
    %646.1
  };
  %647() /* ty=Tensor[(14, 15, 9), int64] */
}

def @func_12260(%var_12258: Tensor[(495), float32], %var_12259: Tensor[(1890, 16), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(495), float32], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(1890, 16), float64], Tensor[(14, 15, 9), uint16], Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), float32]) {
  %668 = fn (%var_12220: Tensor[(495), float32], %var_12232: Tensor[(1890, 16), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(495), float32], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(1890, 16), float64], Tensor[(14, 15, 9), uint16], Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), float32]) {
    %648 = @func_8052() /* ty=(Tensor[(14, 15, 9), float32],) */;
    %649 = @func_9335() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %650 = cast(%var_12220, dtype="float32") /* ty=Tensor[(495), float32] */;
    %651 = cast(%var_12220, dtype="float32") /* ty=Tensor[(495), float32] */;
    %652 = %648.0;
    %653 = cast(%652, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
    %654 = reshape(%650, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float32] */;
    %655 = reshape(%651, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float32] */;
    %656 = reshape(%653, newshape=[1890, 1]) /* ty=Tensor[(1890, 1), float32] */;
    %657 = @func_7945(%654, %655, %656) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(1890, 1), float32], Tensor[(5, 9, 11), bool]) */;
    %658 = %657.1;
    %659 = cast(%658, dtype="float64") /* ty=Tensor[(1890, 1), float64] */;
    %660 = cast(%var_12232, dtype="float64") /* ty=Tensor[(1890, 16), float64] */;
    %661 = @func_10103() /* ty=(Tensor[(16, 8, 5), float32],) */;
    %662 = %649.0;
    %663 = @func_11293() /* ty=Tensor[(14, 15, 9), float32] */;
    %664 = minimum(%659, %660) /* ty=Tensor[(1890, 16), float64] */;
    %665 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
    %666 = %661.0;
    %667 = @func_9467() /* ty=Tensor[(14, 15, 9), float32] */;
    (%652, %var_12220, %662, %663, %664, %665, %666, %667)
  };
  %668(%var_12258, %var_12259) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(495), float32], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(1890, 16), float64], Tensor[(14, 15, 9), uint16], Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), float32]) */
}

def @func_15019() -> (Tensor[(14, 15, 9), float64],) {
  @func_15017() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_12814() -> Tensor[(16, 8, 5), float32] {
  @func_12812() /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_9101() -> (Tensor[(1, 11, 4), float32],) {
  %669 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %670 = %669.1;
  (%670,)
}

def @func_7949(%var_7946: Tensor[(5, 9, 11), float32], %var_7947: Tensor[(5, 9, 11), float32], %var_7948: Tensor[(1890, 1), float32]) -> (Tensor[(14, 15, 9), int64], Tensor[(1890, 1), float32], Tensor[(5, 9, 11), bool]) {
  %687 = fn (%var_7921: Tensor[(5, 9, 11), float32], %var_7922: Tensor[(5, 9, 11), float32], %var_7933: Tensor[(1890, 1), float32]) -> (Tensor[(14, 15, 9), int64], Tensor[(1890, 1), float32], Tensor[(5, 9, 11), bool]) {
    %671 = cast(%var_7933, dtype="float32") /* ty=Tensor[(1890, 1), float32] */;
    %672 = reshape(%671, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float32] */;
    %673 = @func_5860(%672) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(156, 20), float32]) */;
    %674 = cast(%var_7922, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
    %675 = shape_of(%var_7921, dtype="int32") /* ty=Tensor[(3), int32] */;
    %676 = cast(%var_7921, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %678 = maximum(%676, %677) /* ty=Tensor[(5, 9, 11), float32] */;
    %679 = cast(%678, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
    %680 = cosh(%679) /* ty=Tensor[(5, 9, 11), float32] */;
    %681 = cast(%678, dtype="bool") /* ty=Tensor[(5, 9, 11), bool] */;
    %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(3), int32] */;
    %683 = cast(%680, dtype="bool") /* ty=Tensor[(5, 9, 11), bool] */;
    %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %685 = %673.1;
    %686 = greater(%683, %684) /* ty=Tensor[(5, 9, 11), bool] */;
    (%685, %var_7933, %686)
  };
  %687(%var_7946, %var_7947, %var_7948) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(1890, 1), float32], Tensor[(5, 9, 11), bool]) */
}

def @func_7135(%var_7134: Tensor[(84, 2), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(3120), float32], float32, Tensor[(84, 2), float32], Tensor[(8, 5, 7), bool], Tensor[(10, 28), int32], Tensor[(?, 12, 14), uint32], Tensor[(2, 1560), float32]) {
  %707 = fn (%var_7093: Tensor[(84, 2), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(3120), float32], float32, Tensor[(84, 2), float32], Tensor[(8, 5, 7), bool], Tensor[(10, 28), int32], Tensor[(?, 12, 14), uint32], Tensor[(2, 1560), float32]) {
    %688 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %689 = cast(3.66125f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %690 = cast(%var_7093, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
    %691 = reshape(%689, newshape=[]) /* ty=float32 */;
    %692 = reshape(%690, newshape=[168]) /* ty=Tensor[(168), float32] */;
    %693 = @func_4941(%691, %692) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32], Tensor[(?, 12, 14), uint32], Tensor[(1248), bool], Tensor[(1512), uint8], Tensor[(1, 1, 15), uint32], Tensor[(15, 168), float64]) */;
    %694 = cast(3.66125f /* ty=float32 */, dtype="int32") /* ty=int32 */;
    %695 = cast(meta[relay.Constant][25] /* ty=Tensor[(10, 28), int32] */, dtype="int32") /* ty=Tensor[(10, 28), int32] */;
    %696 = reshape(%694, newshape=[]) /* ty=int32 */;
    %697 = reshape(%695, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), int32] */;
    %698 = @func_342(%696, %697) /* ty=(Tensor[(8, 5, 7), bool],) */;
    %699 = cast(%var_7093, dtype="float32") /* ty=Tensor[(84, 2), float32] */;
    %700 = reshape(%699, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
    %701 = @func_2044(%700) /* ty=(Tensor[(?, 12, 14), uint32],) */;
    %702 = %688.0;
    %703 = %693.3;
    %704 = %698.0;
    %705 = %701.0;
    %706 = @func_6729() /* ty=Tensor[(2, 1560), float32] */;
    (%702, %703, 3.66125f /* ty=float32 */, %var_7093, %704, meta[relay.Constant][25] /* ty=Tensor[(10, 28), int32] */, %705, %706)
  };
  %707(%var_7134) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(3120), float32], float32, Tensor[(84, 2), float32], Tensor[(8, 5, 7), bool], Tensor[(10, 28), int32], Tensor[(?, 12, 14), uint32], Tensor[(2, 1560), float32]) */
}

def @func_14804() -> (Tensor[(14, 15, 9), float64],) {
  @func_14802() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_6778() -> Tensor[(16, 8, 5), float32] {
  %709 = fn () -> Tensor[(16, 8, 5), float32] {
    %708 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 8, 5), float32] */, dtype="float32") /* ty=Tensor[(16, 8, 5), float32] */;
    atan(%708) /* ty=Tensor[(16, 8, 5), float32] */
  };
  %709() /* ty=Tensor[(16, 8, 5), float32] */
}

def @func_6436() -> Tensor[(14, 15, 9), uint16] {
  %710 = fn () -> Tensor[(14, 15, 9), uint16] {
    @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */
  };
  %710() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_10320() -> (Tensor[(14, 15, 9), float64],) {
  @func_10318() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_3704() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  %723 = fn () -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
    %711 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
    %712 = asin(%711) /* ty=Tensor[(14, 15, 9), float64] */;
    %713 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 15, 9), float64] */, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
    %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
    %715 = cast(%712, dtype="int64") /* ty=Tensor[(14, 15, 9), int64] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %717 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 15, 9), float64] */, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
    %718 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(%712, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %721 = multiply(%715, %716) /* ty=Tensor[(14, 15, 9), int64] */;
    %722 = floor_divide(%719, %720) /* ty=Tensor[(14, 15, 9), float64] */;
    (%721, %722)
  };
  %723() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */
}

def @func_15353() -> Tensor[(14, 15, 9), uint16] {
  %725 = fn () -> Tensor[(14, 15, 9), uint16] {
    %724 = @func_6296() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
    %724.0
  };
  %725() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_3776() -> (Tensor[(14, 15, 9), uint16],) {
  %726 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %727 = %726.0;
  %728 = cast(meta[relay.Constant][28] /* ty=Tensor[(14, 15, 9), int64] */, dtype="uint16") /* ty=Tensor[(14, 15, 9), uint16] */;
  %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%727, dtype="uint16") /* ty=Tensor[(14, 15, 9), uint16] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %732 = right_shift(%730, %731) /* ty=Tensor[(14, 15, 9), uint16] */;
  (%732,)
}

def @func_12503() -> (Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) {
  %737 = fn () -> (Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) {
    %733 = @func_10272() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) */;
    %734 = @func_10797() /* ty=(Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32]) */;
    %735 = %733.0;
    %736 = %734.0;
    (%735, %736)
  };
  %737() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) */
}

def @func_10274() -> (Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) {
  @func_10272() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(16, 8, 5), float32]) */
}

def @func_11388() -> Tensor[(14, 15, 9), float32] {
  @func_11386() /* ty=Tensor[(14, 15, 9), float32] */
}

def @func_8053() -> (Tensor[(14, 15, 9), float32],) {
  %740 = fn () -> (Tensor[(14, 15, 9), float32],) {
    %738 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
    %739 = %738.0;
    (%739,)
  };
  %740() /* ty=(Tensor[(14, 15, 9), float32],) */
}

def @func_14597(%var_14596: Tensor[(1, 7, 7), bool]) -> Tensor[(?, 7, 7), bool] {
  %745 = fn (%var_14574: Tensor[(1, 7, 7), bool]) -> Tensor[(?, 7, 7), bool] {
    %741 = cast(%var_14574, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
    %742 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(1, 7, 7), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %743 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 7, 7), bool] */, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
    %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%743, %744) /* ty=Tensor[(?, 7, 7), bool] */
  };
  %745(%var_14596) /* ty=Tensor[(?, 7, 7), bool] */
}

def @func_5321() -> (Tensor[(14, 15, 9), float64],) {
  @func_5319() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_12530() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int16]) {
  %746 = @func_12502() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), int16]) */;
  %747 = @func_11293() /* ty=Tensor[(14, 15, 9), float32] */;
  %748 = %746.1;
  (%747, %748)
}

def @func_7799(%var_7797: float32, %var_7798: Tensor[(13, 14, 3), float32]) -> (Tensor[(14, 15, 9), float64], float32, Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 3), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32]) {
  %767 = fn (%var_7762: float32, %var_7775: Tensor[(13, 14, 3), float32]) -> (Tensor[(14, 15, 9), float64], float32, Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 3), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32]) {
    %749 = @func_5088() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
    %750 = cast(%var_7762, dtype="float32") /* ty=float32 */;
    %751 = reshape(%750, newshape=[]) /* ty=float32 */;
    %752 = @func_5012(%751) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) */;
    %753 = %752.1;
    %754 = cast(%753, dtype="float32") /* ty=Tensor[(13, 14, 3), float32] */;
    %755 = asin(%754) /* ty=Tensor[(13, 14, 3), float32] */;
    %756 = cast(%var_7775, dtype="float64") /* ty=Tensor[(13, 14, 3), float64] */;
    %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(3), int32] */;
    %758 = cast(%755, dtype="float64") /* ty=Tensor[(13, 14, 3), float64] */;
    %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %760 = cast(meta[relay.Constant][30] /* ty=Tensor[(840), float32] */, dtype="float32") /* ty=Tensor[(840), float32] */;
    %761 = reshape(%760, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %762 = @func_6001(%761) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), float32]) */;
    %763 = @func_5941() /* ty=Tensor[(14, 15, 9), float64] */;
    %764 = %749.1;
    %765 = minimum(%758, %759) /* ty=Tensor[(13, 14, 3), float64] */;
    %766 = %762.1;
    (%763, %var_7762, %764, %765, %766, meta[relay.Constant][30] /* ty=Tensor[(840), float32] */)
  };
  %767(%var_7797, %var_7798) /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 3), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32]) */
}

def @func_11867() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), uint16]) {
  %768 = @func_9272() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) */;
  %769 = @func_9335() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %770 = @func_8857() /* ty=Tensor[(14, 15, 9), float32] */;
  %771 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
  %772 = %768.2;
  %773 = %769.0;
  (%770, %771, %772, %773)
}

def @func_4011(%var_3969: Tensor[(96), float64]) -> (Tensor[(14, 15, 9), uint16], Tensor[(280), int32], Tensor[(96), float64], int32) {
  %774 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %775 = cast(%var_3969, dtype="float64") /* ty=Tensor[(96), float64] */;
  %776 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %777 = reshape(%775, newshape=[96, 1]) /* ty=Tensor[(96, 1), float64] */;
  %778 = reshape(%776, newshape=[]) /* ty=int32 */;
  %779 = @func_2401(%777, %778) /* ty=(Tensor[(16, 4, 7), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], int32) */;
  %780 = %774.0;
  %781 = %779.1;
  (%780, %781, %var_3969, -3 /* ty=int32 */)
}

def @func_10011(%var_10000: int32) -> (Tensor[(44), float32], Tensor[(14, 15, 9), float64], int32) {
  %782 = @func_5489() /* ty=(Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
  %783 = cast(%var_10000, dtype="int32") /* ty=int32 */;
  %784 = reshape(%783, newshape=[]) /* ty=int32 */;
  %785 = @func_4301(%784) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) */;
  %786 = %782.0;
  %787 = %785.0;
  (%786, %787, %var_10000)
}

def @func_14143(%var_14142: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
  %798 = fn (%var_14061: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
    %788 = @func_8179() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %789 = cast(%var_14061, dtype="float32") /* ty=Tensor[(840), float32] */;
    %790 = reshape(%789, newshape=[840]) /* ty=Tensor[(840), float32] */;
    %791 = @func_8537(%790) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64]) */;
    %792 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %793 = %788.0;
    %794 = %791.2;
    %795 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
    %796 = @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */;
    %797 = %792.0;
    (%793, %794, %var_14061, %795, %796, %797)
  };
  %798(%var_14142) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */
}

def @func_11073(%var_11000: Tensor[(8, 4, 6), float32], %var_11001: Tensor[(8, 4, 6), float32], %var_11017: Tensor[(840), float32]) -> (Tensor[(8, 4, 6), float32], Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) {
  %799 = cast(%var_11001, dtype="float32") /* ty=Tensor[(8, 4, 6), float32] */;
  %800 = shape_of(%var_11000, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%var_11000, dtype="float32") /* ty=Tensor[(8, 4, 6), float32] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %803 = cast(meta[relay.Constant][31] /* ty=Tensor[(2912), int16] */, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %804 = cast(%var_11017, dtype="float32") /* ty=Tensor[(840), float32] */;
  %805 = reshape(%803, newshape=[1456, 2]) /* ty=Tensor[(1456, 2), int16] */;
  %806 = reshape(%804, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %807 = @func_5790(%805, %806) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64], Tensor[(1456, 2), float64]) */;
  %808 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %809 = floor_divide(%801, %802) /* ty=Tensor[(8, 4, 6), float32] */;
  %810 = %807.1;
  %811 = %808.0;
  %812 = @func_9357() /* ty=Tensor[(14, 15, 9), float64] */;
  (%809, %810, meta[relay.Constant][31] /* ty=Tensor[(2912), int16] */, %var_11017, %811, %812)
}

def @func_5048(%var_5040: Tensor[(14, 15, 9), float64]) -> Tensor[(14, 15, 9), float64] {
  %813 = @func_3913() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %814 = %813.0;
  %815 = cast(%var_5040, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %817 = cast(%814, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%817, %818) /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_14047() -> Tensor[(14, 15, 9), int64] {
  %820 = fn () -> Tensor[(14, 15, 9), int64] {
    %819 = @func_10636() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
    %819.1
  };
  %820() /* ty=Tensor[(14, 15, 9), int64] */
}

def @func_9774() -> Tensor[(14, 15, 9), uint16] {
  %821 = @func_8372() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */;
  %821.1
}

def @func_10570() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
  @func_10568() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */
}

def @func_7273() -> (Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) {
  %828 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) {
    %822 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %823 = cast(meta[relay.Constant][32] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %824 = reshape(%823, newshape=[48, 2]) /* ty=Tensor[(48, 2), float64] */;
    %825 = @func_5597(%824) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(14, 15, 9), uint16]) */;
    %826 = %822.0;
    %827 = %825.2;
    (%826, %827, meta[relay.Constant][32] /* ty=Tensor[(96), float64] */)
  };
  %828() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) */
}

def @func_11698() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) {
  @func_11696() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */
}

def @func_13709(%var_13707: Tensor[(594, 1), float64], %var_13708: Tensor[(1248), bool]) -> (Tensor[(14, 15, 9), float64], Tensor[(11, 6, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32], Tensor[(594, 1248), bool], Tensor[(8, 13, 12), float64]) {
  @func_13705(%var_13707, %var_13708) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(11, 6, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32], Tensor[(594, 1248), bool], Tensor[(8, 13, 12), float64]) */
}

def @func_9885() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(546), float32], float32, Tensor[(14, 15, 9), uint16]) {
  %840 = fn () -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(546), float32], float32, Tensor[(14, 15, 9), uint16]) {
    %829 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %830 = @func_9123() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %831 = @func_9123() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %832 = cast(-5.81495f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %833 = reshape(%832, newshape=[]) /* ty=float32 */;
    %834 = @func_5012(%833) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) */;
    %835 = %829.0;
    %836 = %830.0;
    %837 = %831.0;
    %838 = %834.3;
    %839 = @func_8740() /* ty=Tensor[(14, 15, 9), uint16] */;
    (%835, %836, %837, %838, -5.81495f /* ty=float32 */, %839)
  };
  %840() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(546), float32], float32, Tensor[(14, 15, 9), uint16]) */
}

def @func_4169() -> (Tensor[(14, 15, 9), float64],) {
  @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_4690() -> (Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) {
  %847 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) {
    %841 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %842 = cast(meta[relay.Constant][33] /* ty=Tensor[(44), float32] */, dtype="float32") /* ty=Tensor[(44), float32] */;
    %843 = reshape(%842, newshape=[1, 11, 4]) /* ty=Tensor[(1, 11, 4), float32] */;
    %844 = @func_2615(%843) /* ty=(Tensor[(1, 11, 4), float32], Tensor[(8, 13, 12), bool], Tensor[(104, 12), bool]) */;
    %845 = %841.0;
    %846 = %844.0;
    (%845, %846, meta[relay.Constant][33] /* ty=Tensor[(44), float32] */)
  };
  %847() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */
}

def @func_13705(%var_13644: Tensor[(594, 1), float64], %var_13677: Tensor[(1248), bool]) -> (Tensor[(14, 15, 9), float64], Tensor[(11, 6, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32], Tensor[(594, 1248), bool], Tensor[(8, 13, 12), float64]) {
  %848 = cast(%var_13644, dtype="float64") /* ty=Tensor[(594, 1), float64] */;
  %849 = reshape(%848, newshape=[11, 6, 9]) /* ty=Tensor[(11, 6, 9), float64] */;
  %850 = @func_8179() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %851 = @func_11867() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), uint16]) */;
  %852 = cast(%var_13677, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %853 = cast(%var_13644, dtype="bool") /* ty=Tensor[(594, 1), bool] */;
  %854 = cast(%var_13677, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %855 = reshape(%854, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %856 = @func_1202(%855) /* ty=Tensor[(8, 13, 12), bool] */;
  %857 = cast(%var_13677, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %858 = shape_of(%856, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%856, dtype="float64") /* ty=Tensor[(8, 13, 12), float64] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %861 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
  %862 = @func_13498(%849) /* ty=Tensor[(11, 6, 9), float64] */;
  %863 = %850.0;
  %864 = %851.0;
  %865 = equal(%852, %853) /* ty=Tensor[(594, 1248), bool] */;
  %866 = floor_mod(%859, %860) /* ty=Tensor[(8, 13, 12), float64] */;
  (%861, %862, %863, %864, %865, %866)
}

def @func_7739(%var_7736: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(168), float32]) {
  %867 = @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */;
  %868 = cast(%867, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %869 = cast(%var_7736, dtype="float32") /* ty=Tensor[(168), float32] */;
  %870 = reshape(%869, newshape=[84, 2]) /* ty=Tensor[(84, 2), float32] */;
  %871 = @func_7133(%870) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(3120), float32], float32, Tensor[(84, 2), float32], Tensor[(8, 5, 7), bool], Tensor[(10, 28), int32], Tensor[(?, 12, 14), uint32], Tensor[(2, 1560), float32]) */;
  %872 = @func_6435() /* ty=Tensor[(14, 15, 9), uint16] */;
  %873 = acosh(%868) /* ty=Tensor[(14, 15, 9), float64] */;
  %874 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
  %875 = %871.0;
  (%872, %873, %874, %875, %var_7736)
}

def @func_5015(%var_5013: float32) -> (Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) {
  @func_5012(%var_5013) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) */
}

def @func_10593() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float32]) {
  %880 = fn () -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float32]) {
    %876 = @func_9760() /* ty=(Tensor[(14, 15, 9), float32],) */;
    %877 = @func_8823() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
    %878 = %876.0;
    %879 = %877.1;
    (%878, %879)
  };
  %880() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float32]) */
}

def @func_10929() -> Tensor[(14, 15, 9), float64] {
  %881 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %881.0
}

def @func_4301(%var_4297: int32) -> (Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) {
  %882 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %883 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 96), float64] */, dtype="float64") /* ty=Tensor[(1, 96), float64] */;
  %884 = cast(%var_4297, dtype="int32") /* ty=int32 */;
  %885 = reshape(%883, newshape=[96, 1]) /* ty=Tensor[(96, 1), float64] */;
  %886 = reshape(%884, newshape=[]) /* ty=int32 */;
  %887 = @func_2401(%885, %886) /* ty=(Tensor[(16, 4, 7), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], int32) */;
  %888 = %882.0;
  %889 = %887.2;
  (%888, %889, meta[relay.Constant][34] /* ty=Tensor[(1, 96), float64] */, %var_4297)
}

def @func_9467() -> Tensor[(14, 15, 9), float32] {
  %890 = @func_8052() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %890.0
}

def @func_11639(%var_11638: Tensor[(2, 1456), int16]) -> (Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(2, 1456), int16]) {
  %897 = fn (%var_11620: Tensor[(2, 1456), int16]) -> (Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(2, 1456), int16]) {
    %891 = @func_5660() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %892 = cast(%var_11620, dtype="int16") /* ty=Tensor[(2, 1456), int16] */;
    %893 = reshape(%892, newshape=[2912]) /* ty=Tensor[(2912), int16] */;
    %894 = @func_5294(%893) /* ty=(Tensor[(14, 15, 9), int64], int16, Tensor[(2912), int16], Tensor[(13, 14, 16), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
    %895 = %891.0;
    %896 = %894.2;
    (%895, %896, %var_11620)
  };
  %897(%var_11638) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(2912), int16], Tensor[(2, 1456), int16]) */
}

def @func_14249() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) {
  @func_14247() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */
}

def @func_14893() -> Tensor[(14, 15, 9), int64] {
  %899 = fn () -> Tensor[(14, 15, 9), int64] {
    %898 = @func_13053() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
    %898.0
  };
  %899() /* ty=Tensor[(14, 15, 9), int64] */
}

def @func_9579() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) {
  %900 = @func_7322() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) */;
  %901 = @func_7823() /* ty=Tensor[(14, 15, 9), float64] */;
  %902 = %900.1;
  (%901, %902)
}

def @func_12106(%var_12104: Tensor[(280), int32]) -> (Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(280), int32]) {
  @func_12103(%var_12104) /* ty=(Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(280), int32], Tensor[(280), int32]) */
}

def @func_12532() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int16]) {
  @func_12530() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int16]) */
}

def @func_13158() -> (Tensor[(14, 15, 9), float64],) {
  @func_13156() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_3914() -> (Tensor[(14, 15, 9), float64],) {
  %907 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %903 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %904 = %903.0;
    %905 = cast(%904, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
    %906 = cos(%905) /* ty=Tensor[(14, 15, 9), float64] */;
    (%906,)
  };
  %907() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_4787(%var_4785: Tensor[(3120), float32]) -> (Tensor[(14, 15, 9), int64], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float64]) {
  @func_4784(%var_4785) /* ty=(Tensor[(14, 15, 9), int64], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float64]) */
}

def @func_4944(%var_4942: float32, %var_4943: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32], Tensor[(?, 12, 14), uint32], Tensor[(1248), bool], Tensor[(1512), uint8], Tensor[(1, 1, 15), uint32], Tensor[(15, 168), float64]) {
  %936 = fn (%var_4891: float32, %var_4900: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), float32], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32], Tensor[(?, 12, 14), uint32], Tensor[(1248), bool], Tensor[(1512), uint8], Tensor[(1, 1, 15), uint32], Tensor[(15, 168), float64]) {
    %908 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %909 = %908.0;
    %910 = cast(%909, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
    %911 = cast(%var_4891, dtype="float32") /* ty=float32 */;
    %912 = cast(meta[relay.Constant][35] /* ty=Tensor[(3120), float32] */, dtype="float32") /* ty=Tensor[(3120), float32] */;
    %913 = reshape(%911, newshape=[]) /* ty=float32 */;
    %914 = reshape(%912, newshape=[13, 16, 15]) /* ty=Tensor[(13, 16, 15), float32] */;
    %915 = @func_2216(%913, %914) /* ty=(Tensor[(13, 16, 15), float32],) */;
    %916 = cast(%var_4900, dtype="float32") /* ty=Tensor[(168), float32] */;
    %917 = reshape(%916, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
    %918 = @func_2044(%917) /* ty=(Tensor[(?, 12, 14), uint32],) */;
    %919 = cast(meta[relay.Constant][36] /* ty=Tensor[(1512), uint8] */, dtype="uint8") /* ty=Tensor[(1512), uint8] */;
    %920 = cast(meta[relay.Constant][36] /* ty=Tensor[(1512), uint8] */, dtype="uint8") /* ty=Tensor[(1512), uint8] */;
    %921 = reshape(%919, newshape=[14, 12, 9]) /* ty=Tensor[(14, 12, 9), uint8] */;
    %922 = reshape(%920, newshape=[14, 12, 9]) /* ty=Tensor[(14, 12, 9), uint8] */;
    %923 = @func_1962(%921, %922) /* ty=(Tensor[(14, 12, 9), bool], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
    %924 = cast(%var_4891, dtype="uint32") /* ty=uint32 */;
    %925 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 1), uint32] */, dtype="uint32") /* ty=Tensor[(15, 1), uint32] */;
    %926 = reshape(%924, newshape=[]) /* ty=uint32 */;
    %927 = reshape(%925, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
    %928 = cast(%var_4900, dtype="float64") /* ty=Tensor[(168), float64] */;
    %929 = cast(meta[relay.Constant][37] /* ty=Tensor[(15, 1), uint32] */, dtype="float64") /* ty=Tensor[(15, 1), float64] */;
    %930 = sqrt(%910) /* ty=Tensor[(14, 15, 9), float32] */;
    %931 = %915.0;
    %932 = %918.0;
    %933 = %923.2;
    %934 = @func_2337(%926, %927) /* ty=Tensor[(1, 1, 15), uint32] */;
    %935 = power(%928, %929) /* ty=Tensor[(15, 168), float64] */;
    (%930, %931, %var_4891, meta[relay.Constant][35] /* ty=Tensor[(3120), float32] */, %932, %933, meta[relay.Constant][36] /* ty=Tensor[(1512), uint8] */, %934, %935)
  };
  %936(%var_4942, %var_4943) /* ty=(Tensor[(14, 15, 9), float32], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32], Tensor[(?, 12, 14), uint32], Tensor[(1248), bool], Tensor[(1512), uint8], Tensor[(1, 1, 15), uint32], Tensor[(15, 168), float64]) */
}

def @func_8537(%var_8531: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64]) {
  %937 = @func_6296() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %938 = @func_8372() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */;
  %939 = @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %940 = cast(%var_8531, dtype="float32") /* ty=Tensor[(840), float32] */;
  %941 = reshape(%940, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
  %942 = @func_4726() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %943 = %937.1;
  %944 = %938.0;
  %945 = %939.0;
  %946 = @func_5426(%941) /* ty=Tensor[(6, 14, 10), bool] */;
  %947 = %942.0;
  (%943, %944, %945, %946, %var_8531, %947)
}

def @func_5294(%var_5257: Tensor[(2912), int16]) -> (Tensor[(14, 15, 9), int64], int16, Tensor[(2912), int16], Tensor[(13, 14, 16), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) {
  %948 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %949 = cast(meta[relay.Constant][38] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %950 = cast(%var_5257, dtype="int16") /* ty=Tensor[(2912), int16] */;
  %951 = reshape(%949, newshape=[]) /* ty=int16 */;
  %952 = reshape(%950, newshape=[13, 14, 16]) /* ty=Tensor[(13, 14, 16), int16] */;
  %953 = @func_2998(%951, %952) /* ty=(Tensor[(13, 14, 16), int16],) */;
  %954 = %953.0;
  %955 = cast(%954, dtype="float64") /* ty=Tensor[(13, 14, 16), float64] */;
  %956 = cast(meta[relay.Constant][38] /* ty=int16 */, dtype="int32") /* ty=int32 */;
  %957 = reshape(%956, newshape=[]) /* ty=int32 */;
  %958 = @func_4301(%957) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) */;
  %959 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %960 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %961 = %948.0;
  %962 = atanh(%955) /* ty=Tensor[(13, 14, 16), float64] */;
  %963 = %958.0;
  %964 = %959.0;
  %965 = %960.0;
  (%961, meta[relay.Constant][38] /* ty=int16 */, %var_5257, %962, %963, %964, %965)
}

def @func_7529() -> Tensor[(14, 15, 9), float64] {
  %966 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %966.0
}

def @func_10528() -> (Tensor[(14, 15, 9), float64],) {
  %969 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %967 = @func_6898() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %968 = %967.0;
    (%968,)
  };
  %969() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_12994(%var_12987: Tensor[(15), uint32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32]) {
  %970 = @func_10568() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
  %971 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %972 = cast(%var_12987, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %973 = reshape(%971, newshape=[]) /* ty=uint32 */;
  %974 = reshape(%972, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %975 = %970.0;
  %976 = @func_11784() /* ty=Tensor[(14, 15, 9), float64] */;
  %977 = @func_2337(%973, %974) /* ty=Tensor[(1, 1, 15), uint32] */;
  (%975, %976, %977, meta[relay.Constant][39] /* ty=uint32 */, %var_12987)
}

def @func_10057() -> (Tensor[(14, 15, 9), float64],) {
  %980 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %978 = @func_6228() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
    %979 = %978.1;
    (%979,)
  };
  %980() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_14753(%var_14751: uint32, %var_14752: Tensor[(3120), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(231, 3), float32], Tensor[(3120), float32]) {
  %998 = fn (%var_14726: uint32, %var_14742: Tensor[(3120), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(231, 3), float32], Tensor[(3120), float32]) {
    %981 = @func_13347() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) */;
    %982 = @func_5319() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %983 = cast(%var_14726, dtype="uint32") /* ty=uint32 */;
    %984 = cast(meta[relay.Constant][40] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
    %985 = reshape(%983, newshape=[]) /* ty=uint32 */;
    %986 = reshape(%984, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
    %987 = @func_11696() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */;
    %988 = cast(meta[relay.Constant][41] /* ty=Tensor[(231, 3), float32] */, dtype="float32") /* ty=Tensor[(231, 3), float32] */;
    %989 = cast(%var_14742, dtype="float32") /* ty=Tensor[(3120), float32] */;
    %990 = reshape(%988, newshape=[7, 11, 9]) /* ty=Tensor[(7, 11, 9), float32] */;
    %991 = reshape(%989, newshape=[2, 1560]) /* ty=Tensor[(2, 1560), float32] */;
    %992 = @func_14557(%990, %991) /* ty=(Tensor[(2, 1560), float32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(288), float32], Tensor[(14, 15, 9), int16], Tensor[(7, 11, 9), bool]) */;
    %993 = %981.1;
    %994 = %982.0;
    %995 = @func_2337(%985, %986) /* ty=Tensor[(1, 1, 15), uint32] */;
    %996 = %987.2;
    %997 = %992.2;
    (%993, %994, %995, %var_14726, meta[relay.Constant][40] /* ty=Tensor[(15), uint32] */, %996, %997, meta[relay.Constant][41] /* ty=Tensor[(231, 3), float32] */, %var_14742)
  };
  %998(%var_14751, %var_14752) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], Tensor[(231, 3), float32], Tensor[(3120), float32]) */
}

def @func_10568() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
  %999 = @func_8372() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) */;
  %1000 = @func_6950() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) */;
  %1001 = %999.0;
  %1002 = %1000.1;
  (%1001, %1002)
}

def @func_11785() -> Tensor[(14, 15, 9), float64] {
  %1004 = fn () -> Tensor[(14, 15, 9), float64] {
    %1003 = @func_6228() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
    %1003.1
  };
  %1004() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_1510(%var_1507: Tensor[(1, 8, 12), float64], %var_1508: Tensor[(1248), bool], %var_1509: int32) -> (Tensor[(1, 8, 12), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(8, 13, 12), bool], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) {
  @func_1505(%var_1507, %var_1508, %var_1509) /* ty=(Tensor[(1, 8, 12), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(8, 13, 12), bool], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) */
}

def @func_13468() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(48, 2), float64]) {
  @func_13466() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(48, 2), float64]) */
}

def @func_6297() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
  %1011 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
    %1005 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %1006 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %1007 = @func_6228() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
    %1008 = %1005.0;
    %1009 = %1006.0;
    %1010 = %1007.0;
    (%1008, %1009, %1010)
  };
  %1011() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */
}

def @func_9642() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) {
  %1016 = fn () -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) {
    %1012 = @func_8611() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %1013 = @func_7391() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
    %1014 = %1012.0;
    %1015 = %1013.1;
    (%1014, %1015)
  };
  %1016() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) */
}

def @func_4784(%var_4762: Tensor[(3120), float32]) -> (Tensor[(14, 15, 9), int64], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float64]) {
  %1017 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %1018 = cast(-3.03211f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1019 = cast(%var_4762, dtype="float32") /* ty=Tensor[(3120), float32] */;
  %1020 = reshape(%1018, newshape=[]) /* ty=float32 */;
  %1021 = reshape(%1019, newshape=[13, 16, 15]) /* ty=Tensor[(13, 16, 15), float32] */;
  %1022 = @func_2216(%1020, %1021) /* ty=(Tensor[(13, 16, 15), float32],) */;
  %1023 = cast(%var_4762, dtype="float64") /* ty=Tensor[(3120), float64] */;
  %1024 = %1017.0;
  %1025 = %1022.0;
  %1026 = log2(%1023) /* ty=Tensor[(3120), float64] */;
  (%1024, %1025, -3.03211f /* ty=float32 */, %1026)
}

def @func_10637() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
  %1031 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) {
    %1027 = @func_10613() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %1028 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
    %1029 = %1027.0;
    %1030 = %1028.0;
    (%1029, %1030)
  };
  %1031() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */
}

def @func_5662() -> (Tensor[(14, 15, 9), float64],) {
  @func_5660() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_8540(%var_8538: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64]) {
  @func_8537(%var_8538) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(14, 15, 9), float64]) */
}

def @func_8952() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  %1032 = @func_7042() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16]) */;
  %1033 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %1034 = %1032.0;
  %1035 = %1033.0;
  (%1034, %1035)
}

def @func_15017() -> (Tensor[(14, 15, 9), float64],) {
  %1036 = @func_7529() /* ty=Tensor[(14, 15, 9), float64] */;
  (%1036,)
}

def @func_13227() -> Tensor[(14, 15, 9), float64] {
  %1037 = @func_8714() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) */;
  %1037.1
}

def @func_9103() -> (Tensor[(1, 11, 4), float32],) {
  @func_9101() /* ty=(Tensor[(1, 11, 4), float32],) */
}

def @func_10985() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16], Tensor[(96), float64], float32) {
  @func_10983() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16], Tensor[(96), float64], float32) */
}

def @func_4621() -> Tensor[(14, 15, 9), uint16] {
  %1039 = fn () -> Tensor[(14, 15, 9), uint16] {
    %1038 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %1038.0
  };
  %1039() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_5490() -> (Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) {
  %1046 = fn () -> (Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) {
    %1040 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
    %1041 = cast(meta[relay.Constant][42] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %1042 = reshape(%1041, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
    %1043 = %1040.2;
    %1044 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
    %1045 = @func_1202(%1042) /* ty=Tensor[(8, 13, 12), bool] */;
    (%1043, %1044, %1045, meta[relay.Constant][42] /* ty=Tensor[(1248), bool] */)
  };
  %1046() /* ty=(Tensor[(44), float32], Tensor[(14, 15, 9), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */
}

def @func_2404(%var_2402: Tensor[(96, 1), float64], %var_2403: int32) -> (Tensor[(16, 4, 7), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], int32) {
  %1057 = fn (%var_2394: Tensor[(96, 1), float64], %var_2396: int32) -> (Tensor[(16, 4, 7), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], int32) {
    %1047 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 4, 7), float64] */, dtype="float64") /* ty=Tensor[(16, 4, 7), float64] */;
    %1048 = cast(%var_2394, dtype="float64") /* ty=Tensor[(96, 1), float64] */;
    %1049 = cast(meta[relay.Constant][44] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
    %1050 = cast(%var_2396, dtype="int32") /* ty=int32 */;
    %1051 = reshape(%1048, newshape=[1, 8, 12]) /* ty=Tensor[(1, 8, 12), float64] */;
    %1052 = reshape(%1049, newshape=[1248]) /* ty=Tensor[(1248), bool] */;
    %1053 = reshape(%1050, newshape=[]) /* ty=int32 */;
    %1054 = @func_1505(%1051, %1052, %1053) /* ty=(Tensor[(1, 8, 12), float64], Tensor[(8, 13, 12), bool], Tensor[(1248), bool], Tensor[(8, 13, 12), bool], Tensor[(8, 5, 7), bool], int32, Tensor[(280), int32]) */;
    %1055 = sqrt(%1047) /* ty=Tensor[(16, 4, 7), float64] */;
    %1056 = %1054.6;
    (%1055, %1056, %var_2394, meta[relay.Constant][44] /* ty=Tensor[(1248), bool] */, %var_2396)
  };
  %1057(%var_2402, %var_2403) /* ty=(Tensor[(16, 4, 7), float64], Tensor[(280), int32], Tensor[(96, 1), float64], Tensor[(1248), bool], int32) */
}

def @func_2219(%var_2217: float32, %var_2218: Tensor[(13, 16, 15), float32]) -> (Tensor[(13, 16, 15), float32],) {
  %1061 = fn (%var_2201: float32, %var_2202: Tensor[(13, 16, 15), float32]) -> (Tensor[(13, 16, 15), float32],) {
    %1058 = cast(%var_2201, dtype="float32") /* ty=float32 */;
    %1059 = cast(%var_2202, dtype="float32") /* ty=Tensor[(13, 16, 15), float32] */;
    %1060 = power(%1058, %1059) /* ty=Tensor[(13, 16, 15), float32] */;
    (%1060,)
  };
  %1061(%var_2217, %var_2218) /* ty=(Tensor[(13, 16, 15), float32],) */
}

def @func_8858() -> Tensor[(14, 15, 9), float32] {
  %1063 = fn () -> Tensor[(14, 15, 9), float32] {
    %1062 = @func_7391() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
    %1062.0
  };
  %1063() /* ty=Tensor[(14, 15, 9), float32] */
}

def @func_8467() -> (Tensor[(14, 15, 9), float64],) {
  @func_8465() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_1736(%var_1734: Tensor[(4, 8, 9), float32]) -> (Tensor[(4, 8, 9), float32], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) {
  @func_1733(%var_1734) /* ty=(Tensor[(4, 8, 9), float32], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */
}

def @func_8278(%var_8277: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(4, 6, 16), float32], Tensor[(15), uint32], Tensor[(?, 12, 14), uint32], Tensor[(168), float32]) {
  %1073 = fn (%var_8266: Tensor[(168), float32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(4, 6, 16), float32], Tensor[(15), uint32], Tensor[(?, 12, 14), uint32], Tensor[(168), float32]) {
    %1064 = @func_6649() /* ty=(Tensor[(4, 6, 16), float32], Tensor[(14, 15, 9), uint16]) */;
    %1065 = @func_6754() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(15), uint32], Tensor[(1, 1, 15), float64]) */;
    %1066 = cast(%var_8266, dtype="float32") /* ty=Tensor[(168), float32] */;
    %1067 = reshape(%1066, newshape=[1, 12, 14]) /* ty=Tensor[(1, 12, 14), float32] */;
    %1068 = @func_2044(%1067) /* ty=(Tensor[(?, 12, 14), uint32],) */;
    %1069 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
    %1070 = %1064.0;
    %1071 = %1065.1;
    %1072 = %1068.0;
    (%1069, %1070, %1071, %1072, %var_8266)
  };
  %1073(%var_8277) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(4, 6, 16), float32], Tensor[(15), uint32], Tensor[(?, 12, 14), uint32], Tensor[(168), float32]) */
}

def @func_15283() -> Tensor[(14, 15, 9), uint16] {
  @func_15281() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_5548() -> (Tensor[(14, 15, 9), float32],) {
  %1074 = @func_5088() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %1075 = %1074.0;
  (%1075,)
}

def @func_4304(%var_4302: int32) -> (Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) {
  @func_4301(%var_4302) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(96, 1), float64], Tensor[(1, 96), float64], int32) */
}

def @func_12167() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32]) {
  %1081 = fn () -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32]) {
    %1076 = @func_8138() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %1077 = @func_8052() /* ty=(Tensor[(14, 15, 9), float32],) */;
    %1078 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
    %1079 = %1076.0;
    %1080 = %1077.0;
    (%1078, %1079, %1080)
  };
  %1081() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32]) */
}

def @func_3001(%var_2999: int16, %var_3000: Tensor[(13, 14, 16), int16]) -> (Tensor[(13, 14, 16), int16],) {
  %1085 = fn (%var_2987: int16, %var_2988: Tensor[(13, 14, 16), int16]) -> (Tensor[(13, 14, 16), int16],) {
    %1082 = cast(%var_2987, dtype="int16") /* ty=int16 */;
    %1083 = cast(%var_2988, dtype="int16") /* ty=Tensor[(13, 14, 16), int16] */;
    %1084 = left_shift(%1082, %1083) /* ty=Tensor[(13, 14, 16), int16] */;
    (%1084,)
  };
  %1085(%var_2999, %var_3000) /* ty=(Tensor[(13, 14, 16), int16],) */
}

def @func_8407() -> (Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) {
  %1086 = @func_7322() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) */;
  %1087 = %1086.0;
  %1088 = cast(meta[relay.Constant][45] /* ty=Tensor[(48, 2), float64] */, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %1089 = shape_of(%1087, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1090 = cast(%1087, dtype="float64") /* ty=Tensor[(48, 2), float64] */;
  %1091 = dyn.reshape(%1088, %1089, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1092 = @func_3880() /* ty=(Tensor[(14, 15, 9), int64],) */;
  %1093 = mod(%1090, %1091) /* ty=Tensor[(48, 2), float64] */;
  %1094 = %1092.0;
  (%1093, %1094)
}

def @func_8174() -> (Tensor[(14, 15, 9), int16],) {
  %1097 = fn () -> (Tensor[(14, 15, 9), int16],) {
    %1095 = @func_6359() /* ty=(Tensor[(14, 15, 9), int16],) */;
    %1096 = %1095.0;
    (%1096,)
  };
  %1097() /* ty=(Tensor[(14, 15, 9), int16],) */
}

def @func_11869() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), uint16]) {
  @func_11867() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), uint16]) */
}

def @func_8824() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  %1103 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
    %1098 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
    %1099 = @func_8138() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %1100 = @func_5926() /* ty=Tensor[(14, 15, 9), uint16] */;
    %1101 = %1098.0;
    %1102 = %1099.0;
    (%1100, %1101, %1102)
  };
  %1103() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */
}

def @func_10798() -> (Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32]) {
  %1108 = fn () -> (Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32]) {
    %1104 = @func_8173() /* ty=(Tensor[(14, 15, 9), int16],) */;
    %1105 = @func_5548() /* ty=(Tensor[(14, 15, 9), float32],) */;
    %1106 = %1104.0;
    %1107 = %1105.0;
    (%1106, %1107)
  };
  %1108() /* ty=(Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32]) */
}

def @func_15317() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), uint16], float32, Tensor[(546), float32]) {
  %1109 = @func_6228() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %1110 = cast(8.04285f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1111 = cast(meta[relay.Constant][46] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %1112 = reshape(%1110, newshape=[]) /* ty=float32 */;
  %1113 = reshape(%1111, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float32] */;
  %1114 = @func_7796(%1112, %1113) /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(14, 15, 9), uint16], Tensor[(13, 14, 3), float64], Tensor[(14, 15, 9), float64], Tensor[(840), float32]) */;
  %1115 = %1109.0;
  %1116 = %1114.2;
  (%1115, %1116, 8.04285f /* ty=float32 */, meta[relay.Constant][46] /* ty=Tensor[(546), float32] */)
}

def @func_5051(%var_5049: Tensor[(14, 15, 9), float64]) -> Tensor[(14, 15, 9), float64] {
  @func_5048(%var_5049) /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_4806(%var_4795: float32, %var_4796: Tensor[(13, 14, 3), float32]) -> (Tensor[(13, 14, 3), float32],) {
  %1117 = cast(%var_4795, dtype="float32") /* ty=float32 */;
  %1118 = cast(%var_4796, dtype="float32") /* ty=Tensor[(13, 14, 3), float32] */;
  %1119 = mod(%1117, %1118) /* ty=Tensor[(13, 14, 3), float32] */;
  (%1119,)
}

def @func_5660() -> (Tensor[(14, 15, 9), float64],) {
  %1120 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
  (%1120,)
}

def @func_4141() -> (Tensor[(14, 15, 9), float64],) {
  @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_10206() -> (Tensor[(16, 8, 5), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) {
  %1121 = @func_8407() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) */;
  %1122 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1123 = @func_8052() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %1124 = @func_6777() /* ty=Tensor[(16, 8, 5), float32] */;
  %1125 = %1121.1;
  %1126 = %1122.0;
  %1127 = %1123.0;
  (%1124, %1125, %1126, %1127)
}

def @func_12937() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(6, 14, 10), bool]) {
  %1134 = fn () -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(6, 14, 10), bool]) {
    %1128 = @func_8633() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) */;
    %1129 = @func_9272() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), bool], Tensor[(840), float32], Tensor[(8, 13, 12), bool], Tensor[(624, 2), bool]) */;
    %1130 = @func_9357() /* ty=Tensor[(14, 15, 9), float64] */;
    %1131 = @func_4949() /* ty=Tensor[(14, 15, 9), float64] */;
    %1132 = %1128.0;
    %1133 = %1129.1;
    (%1130, %1131, %1132, %1133)
  };
  %1134() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(6, 14, 10), bool]) */
}

def @func_5012(%var_5003: float32) -> (Tensor[(14, 15, 9), float64], Tensor[(13, 14, 3), float32], float32, Tensor[(546), float32]) {
  %1135 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1136 = cast(%var_5003, dtype="float32") /* ty=float32 */;
  %1137 = cast(meta[relay.Constant][47] /* ty=Tensor[(546), float32] */, dtype="float32") /* ty=Tensor[(546), float32] */;
  %1138 = reshape(%1136, newshape=[]) /* ty=float32 */;
  %1139 = reshape(%1137, newshape=[13, 14, 3]) /* ty=Tensor[(13, 14, 3), float32] */;
  %1140 = @func_4806(%1138, %1139) /* ty=(Tensor[(13, 14, 3), float32],) */;
  %1141 = %1135.0;
  %1142 = %1140.0;
  (%1141, %1142, %var_5003, meta[relay.Constant][47] /* ty=Tensor[(546), float32] */)
}

def @func_15200() -> (Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  %1149 = fn () -> (Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
    %1143 = @func_14992() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), uint16]) */;
    %1144 = @func_10318() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %1145 = %1143.0;
    %1146 = @func_11293() /* ty=Tensor[(14, 15, 9), float32] */;
    %1147 = @func_14046() /* ty=Tensor[(14, 15, 9), int64] */;
    %1148 = %1144.0;
    (%1145, %1146, %1147, %1148)
  };
  %1149() /* ty=(Tensor[(1, 11, 4), float32], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */
}

def @func_345(%var_343: int32, %var_344: Tensor[(8, 5, 7), int32]) -> (Tensor[(8, 5, 7), bool],) {
  %1153 = fn (%var_337: int32, %var_338: Tensor[(8, 5, 7), int32]) -> (Tensor[(8, 5, 7), bool],) {
    %1150 = cast(%var_337, dtype="bool") /* ty=bool */;
    %1151 = cast(%var_338, dtype="bool") /* ty=Tensor[(8, 5, 7), bool] */;
    %1152 = less_equal(%1150, %1151) /* ty=Tensor[(8, 5, 7), bool] */;
    (%1152,)
  };
  %1153(%var_343, %var_344) /* ty=(Tensor[(8, 5, 7), bool],) */
}

def @func_7824() -> Tensor[(14, 15, 9), float64] {
  %1155 = fn () -> Tensor[(14, 15, 9), float64] {
    %1154 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %1154.0
  };
  %1155() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_6228() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  %1156 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %1157 = @func_4139() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1158 = %1156.0;
  %1159 = %1157.0;
  (%1158, %1159)
}

def @func_3881() -> (Tensor[(14, 15, 9), int64],) {
  %1162 = fn () -> (Tensor[(14, 15, 9), int64],) {
    %1160 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
    %1161 = %1160.0;
    (%1161,)
  };
  %1162() /* ty=(Tensor[(14, 15, 9), int64],) */
}

def @func_5943() -> Tensor[(14, 15, 9), float64] {
  @func_5941() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_9337() -> (Tensor[(14, 15, 9), uint16],) {
  @func_9335() /* ty=(Tensor[(14, 15, 9), uint16],) */
}

def @func_13229() -> Tensor[(14, 15, 9), float64] {
  @func_13227() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_12997(%var_12995: Tensor[(15), uint32]) -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32]) {
  @func_12994(%var_12995) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32]) */
}

def @func_13500(%var_13499: Tensor[(11, 6, 9), float64]) -> Tensor[(11, 6, 9), float64] {
  %1164 = fn (%var_13494: Tensor[(11, 6, 9), float64]) -> Tensor[(11, 6, 9), float64] {
    %1163 = cast(%var_13494, dtype="float64") /* ty=Tensor[(11, 6, 9), float64] */;
    log(%1163) /* ty=Tensor[(11, 6, 9), float64] */
  };
  %1164(%var_13499) /* ty=Tensor[(11, 6, 9), float64] */
}

def @func_13806(%var_13805: Tensor[(48, 2), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(48, 2), bool], Tensor[(14, 15, 9), float64]) {
  %1174 = fn (%var_13785: Tensor[(48, 2), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(48, 2), bool], Tensor[(14, 15, 9), float64]) {
    %1165 = @func_8407() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) */;
    %1166 = %1165.0;
    %1167 = cast(%var_13785, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
    %1168 = shape_of(%1166, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1169 = cast(%1166, dtype="bool") /* ty=Tensor[(48, 2), bool] */;
    %1170 = dyn.reshape(%1167, %1168, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %1171 = @func_10828() /* ty=Tensor[(14, 15, 9), float64] */;
    %1172 = logical_or(%1169, %1170) /* ty=Tensor[(48, 2), bool] */;
    %1173 = @func_5941() /* ty=Tensor[(14, 15, 9), float64] */;
    (%1171, %1172, %1173)
  };
  %1174(%var_13805) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(48, 2), bool], Tensor[(14, 15, 9), float64]) */
}

def @func_14247() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), uint16]) {
  %1175 = @func_13947() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(?, 11, 4), int64]) */;
  %1176 = @func_9774() /* ty=Tensor[(14, 15, 9), uint16] */;
  %1177 = %1175.1;
  %1178 = @func_9774() /* ty=Tensor[(14, 15, 9), uint16] */;
  (%1176, %1177, %1178)
}

def @func_11293() -> Tensor[(14, 15, 9), float32] {
  %1179 = @func_8823() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */;
  %1179.1
}

def @func_6359() -> (Tensor[(14, 15, 9), int16],) {
  %1180 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %1181 = %1180.0;
  %1182 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1183 = %1182.0;
  %1184 = cast(%1183, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %1185 = log10(%1184) /* ty=Tensor[(14, 15, 9), float64] */;
  %1186 = cast(%1185, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %1187 = shape_of(%1183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1188 = cast(%1183, dtype="bool") /* ty=Tensor[(14, 15, 9), bool] */;
  %1189 = dyn.reshape(%1186, %1187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1190 = not_equal(%1188, %1189) /* ty=Tensor[(14, 15, 9), bool] */;
  %1191 = cast(%1190, dtype="int16") /* ty=Tensor[(14, 15, 9), int16] */;
  %1192 = shape_of(%1181, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1193 = cast(%1181, dtype="int16") /* ty=Tensor[(14, 15, 9), int16] */;
  %1194 = dyn.reshape(%1191, %1192, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1195 = bitwise_or(%1193, %1194) /* ty=Tensor[(14, 15, 9), int16] */;
  (%1195,)
}

def @func_6003(%var_6002: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), float32]) {
  %1210 = fn (%var_5984: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), float32]) {
    %1196 = @func_5319() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %1197 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
    %1198 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %1199 = cast(%var_5984, dtype="float32") /* ty=Tensor[(840), float32] */;
    %1200 = reshape(%1199, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
    %1201 = @func_5426(%1200) /* ty=Tensor[(6, 14, 10), bool] */;
    %1202 = cast(%var_5984, dtype="float32") /* ty=Tensor[(840), float32] */;
    %1203 = shape_of(%1201, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1204 = cast(%1201, dtype="float32") /* ty=Tensor[(6, 14, 10), float32] */;
    %1205 = dyn.reshape(%1202, %1203, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1206 = %1196.0;
    %1207 = %1197.1;
    %1208 = %1198.0;
    %1209 = power(%1204, %1205) /* ty=Tensor[(6, 14, 10), float32] */;
    (%1206, %1207, %1208, %1209)
  };
  %1210(%var_6002) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(6, 14, 10), float32]) */
}

def @func_6605(%var_6603: Tensor[(9, 10, 2), int32], %var_6604: Tensor[(15), uint32]) -> (Tensor[(9, 10, 2), int32], uint32, Tensor[(14, 15, 9), float64], Tensor[(?, ?, 15), int64], Tensor[(1, 1, 15), float64], Tensor[(14, 15, 9), float64]) {
  @func_6601(%var_6603, %var_6604) /* ty=(Tensor[(9, 10, 2), int32], uint32, Tensor[(14, 15, 9), float64], Tensor[(?, ?, 15), int64], Tensor[(1, 1, 15), float64], Tensor[(14, 15, 9), float64]) */
}

def @func_11440() -> (Tensor[(14, 15, 9), float64],) {
  %1213 = fn () -> (Tensor[(14, 15, 9), float64],) {
    %1211 = @func_9919() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %1212 = %1211.0;
    (%1212,)
  };
  %1213() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_12668(%var_12666: Tensor[(225), float64]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(168), float32], Tensor[(14, 15, 9), float32], Tensor[(225), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int64], Tensor[(1, 11, 4), float32]) {
  @func_12665(%var_12666) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(168), float32], Tensor[(14, 15, 9), float32], Tensor[(225), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int64], Tensor[(1, 11, 4), float32]) */
}

def @func_4014(%var_4012: Tensor[(96), float64]) -> (Tensor[(14, 15, 9), uint16], Tensor[(280), int32], Tensor[(96), float64], int32) {
  @func_4011(%var_4012) /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(280), int32], Tensor[(96), float64], int32) */
}

def @func_9359() -> Tensor[(14, 15, 9), float64] {
  @func_9357() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_7393() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  @func_7391() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) */
}

def @func_13348() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) {
  %1217 = fn () -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) {
    %1214 = @func_9919() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %1215 = %1214.0;
    %1216 = @func_6664() /* ty=Tensor[(14, 15, 9), float64] */;
    (%1215, %1216)
  };
  %1217() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) */
}

def @func_13434() -> (Tensor[(14, 15, 9), int64], float32) {
  %1222 = fn () -> (Tensor[(14, 15, 9), int64], float32) {
    %1218 = @func_6950() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) */;
    %1219 = @func_9884() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64], Tensor[(546), float32], float32, Tensor[(14, 15, 9), uint16]) */;
    %1220 = %1218.0;
    %1221 = %1219.4;
    (%1220, %1221)
  };
  %1222() /* ty=(Tensor[(14, 15, 9), int64], float32) */
}

def @func_11696() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16]) {
  %1223 = @func_6898() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1224 = @func_8295() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1225 = @func_3776() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1226 = %1223.0;
  %1227 = %1224.0;
  %1228 = %1225.0;
  (%1226, %1227, %1228)
}

def @func_4949() -> Tensor[(14, 15, 9), float64] {
  %1229 = @func_3913() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1229.0
}

def @func_10318() -> (Tensor[(14, 15, 9), float64],) {
  %1230 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1231 = %1230.0;
  (%1231,)
}

def @func_8613() -> (Tensor[(14, 15, 9), float64],) {
  @func_8611() /* ty=(Tensor[(14, 15, 9), float64],) */
}

def @func_12834() -> Tensor[(14, 15, 9), int64] {
  %1233 = fn () -> Tensor[(14, 15, 9), int64] {
    %1232 = @func_10568() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), int64]) */;
    %1232.1
  };
  %1233() /* ty=Tensor[(14, 15, 9), int64] */
}

def @func_9124() -> (Tensor[(14, 15, 9), int64],) {
  %1236 = fn () -> (Tensor[(14, 15, 9), int64],) {
    %1234 = @func_8407() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), int64]) */;
    %1235 = %1234.1;
    (%1235,)
  };
  %1236() /* ty=(Tensor[(14, 15, 9), int64],) */
}

def @func_6755() -> (Tensor[(14, 15, 9), uint16], Tensor[(15), uint32], Tensor[(1, 1, 15), float64]) {
  %1246 = fn () -> (Tensor[(14, 15, 9), uint16], Tensor[(15), uint32], Tensor[(1, 1, 15), float64]) {
    %1237 = cast(meta[relay.Constant][49] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %1238 = cast(meta[relay.Constant][48] /* ty=Tensor[(15), uint32] */, dtype="uint32") /* ty=Tensor[(15), uint32] */;
    %1239 = reshape(%1237, newshape=[]) /* ty=uint32 */;
    %1240 = reshape(%1238, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
    %1241 = @func_2337(%1239, %1240) /* ty=Tensor[(1, 1, 15), uint32] */;
    %1242 = cast(meta[relay.Constant][49] /* ty=uint32 */, dtype="float64") /* ty=float64 */;
    %1243 = cast(%1241, dtype="float64") /* ty=Tensor[(1, 1, 15), float64] */;
    %1244 = @func_4620() /* ty=Tensor[(14, 15, 9), uint16] */;
    %1245 = power(%1242, %1243) /* ty=Tensor[(1, 1, 15), float64] */;
    (%1244, meta[relay.Constant][48] /* ty=Tensor[(15), uint32] */, %1245)
  };
  %1246() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(15), uint32], Tensor[(1, 1, 15), float64]) */
}

def @func_8714() -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float64]) {
  %1247 = @func_4167() /* ty=(Tensor[(14, 15, 9), float64],) */;
  %1248 = %1247.0;
  %1249 = cast(%1248, dtype="float64") /* ty=Tensor[(14, 15, 9), float64] */;
  %1250 = reshape(%1249, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float64] */;
  %1251 = @func_5048(%1250) /* ty=Tensor[(14, 15, 9), float64] */;
  (%1248, %1251)
}

def @func_12018() -> (Tensor[(44), float32],) {
  @func_12016() /* ty=(Tensor[(44), float32],) */
}

def @func_13466() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64], Tensor[(48, 2), float64]) {
  %1252 = @func_7322() /* ty=(Tensor[(48, 2), float64], Tensor[(14, 15, 9), float32]) */;
  %1253 = @func_9774() /* ty=Tensor[(14, 15, 9), uint16] */;
  %1254 = @func_11784() /* ty=Tensor[(14, 15, 9), float64] */;
  %1255 = %1252.0;
  (%1253, %1254, %1255)
}

def @func_7042() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16]) {
  %1256 = @func_6870() /* ty=(Tensor[(14, 15, 9), float32],) */;
  %1257 = @func_6359() /* ty=(Tensor[(14, 15, 9), int16],) */;
  %1258 = %1256.0;
  %1259 = @func_5641() /* ty=Tensor[(14, 15, 9), float64] */;
  %1260 = %1257.0;
  (%1258, %1259, %1260)
}

def @func_14275(%var_14253: Tensor[(12, 9, 15), uint16], %var_14254: Tensor[(12, 9, 15), uint16]) -> (Tensor[(12, 9, 15), uint16], Tensor[(14, 15, 9), float64], Tensor[(135, 14), float64]) {
  %1261 = cast(%var_14254, dtype="uint16") /* ty=Tensor[(12, 9, 15), uint16] */;
  %1262 = shape_of(%var_14253, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1263 = cast(%var_14253, dtype="uint16") /* ty=Tensor[(12, 9, 15), uint16] */;
  %1264 = dyn.reshape(%1261, %1262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1265 = cast(meta[relay.Constant][50] /* ty=Tensor[(135, 14), float64] */, dtype="float64") /* ty=Tensor[(135, 14), float64] */;
  %1266 = reshape(%1265, newshape=[14, 15, 9]) /* ty=Tensor[(14, 15, 9), float64] */;
  %1267 = bitwise_and(%1263, %1264) /* ty=Tensor[(12, 9, 15), uint16] */;
  %1268 = @func_5048(%1266) /* ty=Tensor[(14, 15, 9), float64] */;
  (%1267, %1268, meta[relay.Constant][50] /* ty=Tensor[(135, 14), float64] */)
}

def @func_15281() -> Tensor[(14, 15, 9), uint16] {
  %1269 = @func_4689() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(1, 11, 4), float32], Tensor[(44), float32]) */;
  %1269.0
}

def @func_5620() -> Tensor[(14, 15, 9), uint16] {
  @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */
}

def @func_14949() -> (Tensor[(2, 1560), float32], Tensor[(14, 15, 9), float64]) {
  %1273 = fn () -> (Tensor[(2, 1560), float32], Tensor[(14, 15, 9), float64]) {
    %1270 = @func_11867() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(840), float32], Tensor[(14, 15, 9), uint16]) */;
    %1271 = @func_6729() /* ty=Tensor[(2, 1560), float32] */;
    %1272 = %1270.1;
    (%1271, %1272)
  };
  %1273() /* ty=(Tensor[(2, 1560), float32], Tensor[(14, 15, 9), float64]) */
}

def @func_11516() -> Tensor[(14, 15, 9), float64] {
  @func_11514() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_2617(%var_2616: Tensor[(1, 11, 4), float32]) -> (Tensor[(1, 11, 4), float32], Tensor[(8, 13, 12), bool], Tensor[(104, 12), bool]) {
  %1279 = fn (%var_2580: Tensor[(1, 11, 4), float32]) -> (Tensor[(1, 11, 4), float32], Tensor[(8, 13, 12), bool], Tensor[(104, 12), bool]) {
    %1274 = cast(%var_2580, dtype="float32") /* ty=Tensor[(1, 11, 4), float32] */;
    %1275 = cast(meta[relay.Constant][51] /* ty=Tensor[(104, 12), bool] */, dtype="bool") /* ty=Tensor[(104, 12), bool] */;
    %1276 = reshape(%1275, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
    %1277 = sqrt(%1274) /* ty=Tensor[(1, 11, 4), float32] */;
    %1278 = @func_1202(%1276) /* ty=Tensor[(8, 13, 12), bool] */;
    (%1277, %1278, meta[relay.Constant][51] /* ty=Tensor[(104, 12), bool] */)
  };
  %1279(%var_2616) /* ty=(Tensor[(1, 11, 4), float32], Tensor[(8, 13, 12), bool], Tensor[(104, 12), bool]) */
}

def @func_10360() -> (Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) {
  @func_10358() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(14, 15, 9), float64]) */
}

def @func_6665() -> Tensor[(14, 15, 9), float64] {
  %1281 = fn () -> Tensor[(14, 15, 9), float64] {
    %1280 = @func_5689() /* ty=(Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64]) */;
    %1280.1
  };
  %1281() /* ty=Tensor[(14, 15, 9), float64] */
}

def @func_9029(%var_9028: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32]) {
  %1296 = fn (%var_9025: Tensor[(840), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32]) {
    %1282 = @func_8179() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %1283 = @func_7272() /* ty=(Tensor[(14, 15, 9), uint16], Tensor[(48, 2), float32], Tensor[(96), float64]) */;
    %1284 = %1283.0;
    %1285 = cast(%1284, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
    %1286 = @func_5319() /* ty=(Tensor[(14, 15, 9), float64],) */;
    %1287 = @func_8173() /* ty=(Tensor[(14, 15, 9), int16],) */;
    %1288 = cast(%var_9025, dtype="float32") /* ty=Tensor[(840), float32] */;
    %1289 = reshape(%1288, newshape=[6, 14, 10]) /* ty=Tensor[(6, 14, 10), float32] */;
    %1290 = %1282.0;
    %1291 = log(%1285) /* ty=Tensor[(14, 15, 9), float32] */;
    %1292 = %1286.0;
    %1293 = %1287.0;
    %1294 = @func_8857() /* ty=Tensor[(14, 15, 9), float32] */;
    %1295 = @func_5426(%1289) /* ty=Tensor[(6, 14, 10), bool] */;
    (%1290, %1291, %1292, %1293, %1294, %1295, %var_9025)
  };
  %1296(%var_9028) /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), int16], Tensor[(14, 15, 9), float32], Tensor[(6, 14, 10), bool], Tensor[(840), float32]) */
}

def @func_4167() -> (Tensor[(14, 15, 9), float64],) {
  %1297 = @func_3703() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) */;
  %1298 = %1297.1;
  (%1298,)
}

def @func_6209() -> (float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) {
  %1307 = fn () -> (float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) {
    %1299 = @func_6053() /* ty=(Tensor[(14, 15, 9), float64], float32, Tensor[(2, 1560), float32]) */;
    %1300 = cast(meta[relay.Constant][52] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %1301 = reshape(%1300, newshape=[4, 8, 9]) /* ty=Tensor[(4, 8, 9), float32] */;
    %1302 = @func_1733(%1301) /* ty=(Tensor[(4, 8, 9), float32], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) */;
    %1303 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
    %1304 = %1299.1;
    %1305 = %1302.2;
    %1306 = %1303.0;
    (%1304, %1305, meta[relay.Constant][52] /* ty=Tensor[(288), float32] */, %1306)
  };
  %1307() /* ty=(float32, Tensor[(1248), bool], Tensor[(288), float32], Tensor[(14, 15, 9), uint16]) */
}

def @func_1733(%var_1715: Tensor[(4, 8, 9), float32]) -> (Tensor[(4, 8, 9), float32], Tensor[(8, 13, 12), bool], Tensor[(1248), bool]) {
  %1308 = cast(%var_1715, dtype="float32") /* ty=Tensor[(4, 8, 9), float32] */;
  %1309 = cast(meta[relay.Constant][53] /* ty=Tensor[(1248), bool] */, dtype="bool") /* ty=Tensor[(1248), bool] */;
  %1310 = reshape(%1309, newshape=[8, 13, 12]) /* ty=Tensor[(8, 13, 12), bool] */;
  %1311 = acosh(%1308) /* ty=Tensor[(4, 8, 9), float32] */;
  %1312 = @func_1202(%1310) /* ty=Tensor[(8, 13, 12), bool] */;
  (%1311, %1312, meta[relay.Constant][53] /* ty=Tensor[(1248), bool] */)
}

def @func_13053() -> (Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), float64]) {
  %1313 = @func_6950() /* ty=(Tensor[(14, 15, 9), int64], Tensor[(14, 15, 9), int64]) */;
  %1314 = %1313.1;
  %1315 = @func_8891() /* ty=Tensor[(14, 15, 9), float64] */;
  (%1314, %1315)
}

def @func_7391() -> (Tensor[(14, 15, 9), float32], Tensor[(14, 15, 9), uint16]) {
  %1316 = @func_4053() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1317 = %1316.0;
  %1318 = cast(%1317, dtype="float32") /* ty=Tensor[(14, 15, 9), float32] */;
  %1319 = asinh(%1318) /* ty=Tensor[(14, 15, 9), float32] */;
  %1320 = @func_5618() /* ty=Tensor[(14, 15, 9), uint16] */;
  (%1319, %1320)
}

def @func_15262(%var_15258: float32, %var_15259: Tensor[(3120), float32]) -> (Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), uint16], Tensor[(13, 16, 15), float32], float32, Tensor[(3120), float32]) {
  %1321 = @func_9579() /* ty=(Tensor[(14, 15, 9), float64], Tensor[(14, 15, 9), float32]) */;
  %1322 = @func_7013() /* ty=(Tensor[(14, 15, 9), uint16],) */;
  %1323 = cast(%var_15258, dtype="float32") /* ty=float32 */;
  %1324 = cast(%var_15259, dtype="float32") /* ty=Tensor[(3120), float32] */;
  %1325 = reshape(%1323, newshape=[]) /* ty=float32 */;
  %1326 = reshape(%1324, newshape=[13, 16, 15]) /* ty=Tensor[(13, 16, 15), float32] */;
  %1327 = @func_2216(%1325, %1326) /* ty=(Tensor[(13, 16, 15), float32],) */;
  %1328 = %1321.0;
  %1329 = %1322.0;
  %1330 = %1327.0;
  (%1328, %1329, %1330, %var_15258, %var_15259)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen627/build/output.py", line 4202, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:41:53] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

