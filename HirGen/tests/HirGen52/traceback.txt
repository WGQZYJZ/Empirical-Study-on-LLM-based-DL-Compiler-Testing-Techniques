==========mod==========
#[version = "0.0.5"]
def @func_622(%var_542: Tensor[(14, 8, 5), float32], %var_543: Tensor[(14, 8, 5), float32]) -> (Tensor[(48), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(6, 8, 4), uint8], Tensor[(3, 7, 15), float64], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %1 = cast(meta[relay.Constant][1] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %2 = reshape(%0, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %3 = reshape(%1, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %4 = @func_493(%2, %3) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %5 = cast(%var_543, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %6 = shape_of(%var_542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_542, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %9 = floor_divide(%7, %8) /* ty=Tensor[(14, 8, 5), float32] */;
  %10 = cast(%9, dtype="bool") /* ty=Tensor[(14, 8, 5), bool] */;
  %11 = shape_of(%var_542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%var_542, dtype="bool") /* ty=Tensor[(14, 8, 5), bool] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %14 = %4.2;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(48), float64] */;
  %16 = reshape(%15, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %17 = @func_389(%16) /* ty=Tensor[(6, 8, 4), bool] */;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(6, 8, 4), float32] */;
  %19 = sigmoid(%18) /* ty=Tensor[(6, 8, 4), float32] */;
  %20 = cast(%19, dtype="uint8") /* ty=Tensor[(6, 8, 4), uint8] */;
  %21 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%17, dtype="uint8") /* ty=Tensor[(6, 8, 4), uint8] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %25 = cast(%14, dtype="float64") /* ty=Tensor[(48), float64] */;
  %26 = reshape(%24, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %27 = reshape(%25, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %28 = @func_493(%26, %27) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %30 = reshape(%29, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
  %31 = @func_528(%30) /* ty=(Tensor[(3, 16, 16), float64],) */;
  %32 = cast(%19, dtype="float32") /* ty=Tensor[(6, 8, 4), float32] */;
  %33 = sin(%32) /* ty=Tensor[(6, 8, 4), float32] */;
  %34 = cast(%33, dtype="float32") /* ty=Tensor[(6, 8, 4), float32] */;
  %35 = less_equal(%12, %13) /* ty=Tensor[(14, 8, 5), bool] */;
  %36 = logical_xor(%22, %23) /* ty=Tensor[(6, 8, 4), uint8] */;
  %37 = %28.0;
  %38 = %31.0;
  %39 = asinh(%34) /* ty=Tensor[(6, 8, 4), float32] */;
  (%14, meta[relay.Constant][0] /* ty=Tensor[(315), float64] */, meta[relay.Constant][1] /* ty=Tensor[(48), float64] */, %35, %36, %37, %38, meta[relay.Constant][2] /* ty=Tensor[(768), float64] */, %39)
}

def @func_1899() -> Tensor[(3, 13, 7), float32] {
  %40 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %41 = %40.0;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %43 = asin(%42) /* ty=Tensor[(3, 13, 7), float64] */;
  %44 = cast(%41, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%46, %47) /* ty=Tensor[(3, 13, 7), float32] */
}

def @func_3808() -> (Tensor[(11, 4, 11), float32],) {
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 11), float32] */;
  %49 = log(%48) /* ty=Tensor[(11, 4, 11), float32] */;
  (%49,)
}

def @func_3258(%var_3237: Tensor[(30), uint16]) -> (Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(10, 13, 4), uint64]) {
  %50 = cast(%var_3237, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %51 = reshape(%50, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint16] */;
  %52 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
  %53 = %52.0;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %55 = exp(%54) /* ty=Tensor[(10, 13, 4), float32] */;
  %56 = cast(%53, dtype="uint64") /* ty=Tensor[(10, 13, 4), uint64] */;
  %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%55, dtype="uint64") /* ty=Tensor[(10, 13, 4), uint64] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %60 = @func_726(%51) /* ty=Tensor[(5, 6, 11), uint16] */;
  %61 = add(%58, %59) /* ty=Tensor[(10, 13, 4), uint64] */;
  (%60, %var_3237, %61)
}

def @func_4483(%var_4462: Tensor[(16, 16, 15), int64]) -> (Tensor[(16, 16, 15), bool],) {
  %62 = cast(%var_4462, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %63 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(16, 16, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 16, 15), int64] */, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = not_equal(%64, %65) /* ty=Tensor[(16, 16, 15), bool] */;
  %67 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 16, 15), int64] */, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = less(%69, %70) /* ty=Tensor[(16, 16, 15), bool] */;
  (%71,)
}

def @func_4931(%var_4914: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), uint64], Tensor[(3, 13, 7), uint64]) {
  %72 = @func_3642() /* ty=Tensor[(3, 13, 7), float32] */;
  %73 = cast(%var_4914, dtype="uint64") /* ty=Tensor[(3, 13, 7), uint64] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="uint64") /* ty=Tensor[(3, 13, 7), uint64] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %77 = cast(%var_4914, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %78 = cos(%77) /* ty=Tensor[(3, 13, 7), float64] */;
  %79 = cast(%var_4914, dtype="uint64") /* ty=Tensor[(3, 13, 7), uint64] */;
  %80 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%78, dtype="uint64") /* ty=Tensor[(3, 13, 7), uint64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %83 = subtract(%75, %76) /* ty=Tensor[(3, 13, 7), uint64] */;
  %84 = minimum(%81, %82) /* ty=Tensor[(3, 13, 7), uint64] */;
  (%83, %84)
}

def @func_3517(%var_3493: Tensor[(15, 14, 14), uint64], %var_3504: Tensor[(48), float64]) -> (Tensor[(15, 14, 14), uint64], Tensor[(6, 8, 4), bool], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(520), int16]) {
  %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 14, 14), uint64] */, dtype="uint64") /* ty=Tensor[(15, 14, 14), uint64] */;
  %86 = shape_of(%var_3493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_3493, dtype="uint64") /* ty=Tensor[(15, 14, 14), uint64] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %91 = cast(%var_3504, dtype="float64") /* ty=Tensor[(48), float64] */;
  %92 = reshape(%89, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %93 = reshape(%90, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %94 = reshape(%91, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %95 = @func_879(%92, %93, %94) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
  %96 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %97 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %98 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %99 = cast(meta[relay.Constant][7] /* ty=Tensor[(520), int16] */, dtype="int16") /* ty=Tensor[(520), int16] */;
  %100 = reshape(%99, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), int16] */;
  %101 = @func_2465(%100) /* ty=(Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), uint64]) */;
  %102 = bitwise_and(%87, %88) /* ty=Tensor[(15, 14, 14), uint64] */;
  %103 = %95.11;
  %104 = %96.0;
  %105 = %97.0;
  %106 = %98.0;
  %107 = %101.0;
  (%102, %103, meta[relay.Constant][6] /* ty=Tensor[(36), float32] */, %var_3504, %104, %105, %106, %107, meta[relay.Constant][7] /* ty=Tensor[(520), int16] */)
}

def @func_3226() -> (Tensor[(3, 13, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) {
  %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %109 = reshape(%108, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %110 = @func_1647(%109) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %111 = cast(meta[relay.Constant][8] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
  %112 = @func_1899() /* ty=Tensor[(3, 13, 7), float32] */;
  %113 = %110.0;
  %114 = atan(%111) /* ty=Tensor[(182), float64] */;
  (%112, %113, %114)
}

def @func_3358(%var_3356: Tensor[(48), float64]) -> (Tensor[(10, 13, 4), bool], Tensor[(560), float32], Tensor[(48), float64]) {
  %115 = cast(%var_3356, dtype="float64") /* ty=Tensor[(48), float64] */;
  %116 = reshape(%115, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %117 = @func_2348(%116) /* ty=(Tensor[(48), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32], Tensor[(3, 13, 7), bool]) */;
  %118 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %119 = %117.3;
  (%118, %119, %var_3356)
}

def @func_3185(%var_3168: Tensor[(48), float64]) -> (Tensor[(3, 13, 7), float64], Tensor[(2, 24), bool], Tensor[(315), float64], Tensor[(48), float64], Tensor[(768), float64], Tensor[(91, 14), float32]) {
  %120 = @func_3083() /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) */;
  %121 = cast(meta[relay.Constant][9] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %122 = cast(%var_3168, dtype="float64") /* ty=Tensor[(48), float64] */;
  %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %124 = cast(meta[relay.Constant][11] /* ty=Tensor[(91, 14), float32] */, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %125 = reshape(%121, newshape=[315]) /* ty=Tensor[(315), float64] */;
  %126 = reshape(%122, newshape=[2, 24]) /* ty=Tensor[(2, 24), float64] */;
  %127 = reshape(%123, newshape=[768]) /* ty=Tensor[(768), float64] */;
  %128 = reshape(%124, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
  %129 = @func_2722(%125, %126, %127, %128) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(3, 13, 7), float32], Tensor[(273), float32], Tensor[(768), float64], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(2, 24), bool]) */;
  %130 = cast(meta[relay.Constant][11] /* ty=Tensor[(91, 14), float32] */, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %131 = %120.0;
  %132 = %129.8;
  %133 = erf(%130) /* ty=Tensor[(91, 14), float32] */;
  (%131, %132, meta[relay.Constant][9] /* ty=Tensor[(315), float64] */, %var_3168, meta[relay.Constant][10] /* ty=Tensor[(768), float64] */, %133)
}

def @func_5015() -> Tensor[(12, 4), float64] {
  %134 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %134.4
}

def @func_5106() -> (Tensor[(10, 13, 4), float32], Tensor[(3, 13, 7), float32], Tensor[(11, 4, 11), float32], Tensor[(12, 4), float64]) {
  %135 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %136 = @func_3808() /* ty=(Tensor[(11, 4, 11), float32],) */;
  %137 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %138 = @func_4878() /* ty=Tensor[(10, 13, 4), float32] */;
  %139 = %135.0;
  %140 = %136.0;
  %141 = %137.4;
  (%138, %139, %140, %141)
}

def @func_3611() -> (Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) {
  %142 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
  %143 = cast(meta[relay.Constant][12] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %144 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %145 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
  %146 = reshape(%143, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
  %147 = reshape(%144, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %148 = reshape(%145, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %149 = @func_1389(%146, %147, %148) /* ty=(Tensor[(8, 12, 8), bool], Tensor[(14, 7, 13), float64], Tensor[(36), float32], Tensor[(48), float64]) */;
  %150 = %142.0;
  %151 = %149.0;
  (%150, %151, meta[relay.Constant][12] /* ty=Tensor[(768), float32] */, meta[relay.Constant][13] /* ty=Tensor[(3, 12), float32] */, meta[relay.Constant][14] /* ty=Tensor[(12, 4), float64] */)
}

def @func_2807(%var_2802: Tensor[(10, 13, 4), bool]) -> (Tensor[(10, 13, 4), float64],) {
  %152 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %153 = cast(%var_2802, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %157 = floor_mod(%155, %156) /* ty=Tensor[(10, 13, 4), float64] */;
  (%157,)
}

def @func_1850() -> (Tensor[(3, 13, 7), float32],) {
  %158 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %159 = %158.0;
  %160 = cast(%159, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %161 = sqrt(%160) /* ty=Tensor[(3, 13, 7), float32] */;
  (%161,)
}

def @func_3145(%var_3097: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(26, 7), float64]) {
  %162 = @func_1899() /* ty=Tensor[(3, 13, 7), float32] */;
  %163 = cast(%var_3097, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %167 = cast(%var_3097, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %168 = cast(meta[relay.Constant][15] /* ty=Tensor[(26, 7), float64] */, dtype="float64") /* ty=Tensor[(26, 7), float64] */;
  %169 = reshape(%168, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %170 = @func_1647(%169) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %171 = floor_divide(%165, %166) /* ty=Tensor[(3, 13, 7), float64] */;
  %172 = sigmoid(%167) /* ty=Tensor[(3, 13, 7), float64] */;
  %173 = %170.0;
  (%171, %172, %173, meta[relay.Constant][15] /* ty=Tensor[(26, 7), float64] */)
}

def @func_4614(%var_4611: Tensor[(1260), bool]) -> (Tensor[(4, 12), float64], Tensor[(48), float64], Tensor[(26, 7), float64], Tensor[(3, 980), uint64], Tensor[(10, 13, 4), uint32], Tensor[(10, 13, 4), float64], Tensor[(15, 14, 6), bool], Tensor[(1260), bool]) {
  %174 = @func_4111() /* ty=(Tensor[(10, 13, 4), int16],) */;
  %175 = %174.0;
  %176 = cast(%175, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %177 = cast(meta[relay.Constant][16] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %178 = cast(meta[relay.Constant][17] /* ty=Tensor[(26, 7), float64] */, dtype="float64") /* ty=Tensor[(26, 7), float64] */;
  %179 = reshape(%176, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %180 = reshape(%177, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
  %181 = reshape(%178, newshape=[182]) /* ty=Tensor[(182), float64] */;
  %182 = @func_3045(%179, %180, %181) /* ty=(Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(4, 12), float64], Tensor[(10, 13, 4), float32], Tensor[(182), bool], Tensor[(?, 14, 13), float64]) */;
  %183 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 980), uint64] */, dtype="uint64") /* ty=Tensor[(3, 980), uint64] */;
  %184 = %182.5;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %186 = reshape(%183, newshape=[15, 14, 14]) /* ty=Tensor[(15, 14, 14), uint64] */;
  %187 = reshape(%185, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %188 = @func_3517(%186, %187) /* ty=(Tensor[(15, 14, 14), uint64], Tensor[(6, 8, 4), bool], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(520), int16]) */;
  %189 = %188.8;
  %190 = cast(%189, dtype="uint32") /* ty=Tensor[(520), uint32] */;
  %191 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%175, dtype="uint32") /* ty=Tensor[(10, 13, 4), uint32] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %194 = bitwise_xor(%192, %193) /* ty=Tensor[(10, 13, 4), uint32] */;
  %195 = cast(%194, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %196 = reshape(%195, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %197 = @func_2807(%196) /* ty=(Tensor[(10, 13, 4), float64],) */;
  %198 = cast(%var_4611, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %199 = cast(%var_4611, dtype="bool") /* ty=Tensor[(1260), bool] */;
  %200 = reshape(%198, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), bool] */;
  %201 = reshape(%199, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), bool] */;
  %202 = @func_2529(%200, %201) /* ty=(Tensor[(15, 14, 6), bool], Tensor[(10, 13, 4), bool]) */;
  %203 = %197.0;
  %204 = %202.0;
  (%184, meta[relay.Constant][16] /* ty=Tensor[(48), float64] */, meta[relay.Constant][17] /* ty=Tensor[(26, 7), float64] */, meta[relay.Constant][18] /* ty=Tensor[(3, 980), uint64] */, %194, %203, %204, %var_4611)
}

def @func_4721() -> (Tensor[(560), float32],) {
  %205 = @func_3942() /* ty=(Tensor[(3, 13, 7), float32], Tensor[(560), float32], Tensor[(48), float64]) */;
  %206 = %205.1;
  (%206,)
}

def @func_1647(%var_1642: Tensor[(1, 14, 13), float64]) -> (Tensor[(1, 14, 13), float64],) {
  %207 = cast(%var_1642, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %208 = asinh(%207) /* ty=Tensor[(1, 14, 13), float64] */;
  (%208,)
}

def @func_4807() -> (Tensor[(10, 13, 4), float64],) {
  %209 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
  %210 = %209.0;
  %211 = cast(%210, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
  %212 = sqrt(%211) /* ty=Tensor[(10, 13, 4), float64] */;
  (%212,)
}

def @func_5026() -> (Tensor[(11, 4, 11), float32],) {
  %213 = @func_3808() /* ty=(Tensor[(11, 4, 11), float32],) */;
  %214 = %213.0;
  (%214,)
}

def @func_4135() -> (Tensor[(3, 12), float32],) {
  %215 = @func_3751() /* ty=(Tensor[(3, 12), float32],) */;
  %216 = %215.0;
  (%216,)
}

def @func_5305(%var_5283: Tensor[(182), float64], %var_5291: Tensor[(3840), int64]) -> (Tensor[(10, 13, 4), float64], Tensor[(10, 13, 4), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(16, 16, 15), bool], Tensor[(3840), int64]) {
  %217 = @func_4878() /* ty=Tensor[(10, 13, 4), float32] */;
  %218 = cast(%217, dtype="int16") /* ty=Tensor[(10, 13, 4), int16] */;
  %219 = reshape(%218, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), int16] */;
  %220 = @func_2465(%219) /* ty=(Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), uint64]) */;
  %221 = %220.2;
  %222 = cast(%221, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
  %223 = cast(%217, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %224 = cast(%var_5283, dtype="float64") /* ty=Tensor[(182), float64] */;
  %225 = reshape(%224, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %226 = @func_1647(%225) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %227 = cast(%var_5291, dtype="int64") /* ty=Tensor[(3840), int64] */;
  %228 = reshape(%227, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int64] */;
  %229 = @func_4483(%228) /* ty=(Tensor[(16, 16, 15), bool],) */;
  %230 = sin(%222) /* ty=Tensor[(10, 13, 4), float64] */;
  %231 = log(%223) /* ty=Tensor[(10, 13, 4), float32] */;
  %232 = %226.0;
  %233 = %229.0;
  (%230, %231, %232, %var_5283, %233, %var_5291)
}

def @func_493(%var_472: Tensor[(3, 7, 15), float64], %var_491: Tensor[(48), float64]) -> (Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) {
  %234 = cast(%var_472, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %235 = sigmoid(%234) /* ty=Tensor[(3, 7, 15), float64] */;
  %236 = cast(%235, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %237 = cast(%var_491, dtype="float64") /* ty=Tensor[(48), float64] */;
  %238 = reshape(%237, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %239 = cosh(%236) /* ty=Tensor[(3, 7, 15), float64] */;
  %240 = @func_389(%238) /* ty=Tensor[(6, 8, 4), bool] */;
  (%239, %240, %var_491)
}

def @func_4308(%var_4301: int16) -> (Tensor[(560), float32], Tensor[(3, 13, 7), float32], int16, Tensor[(768), float32]) {
  %241 = @func_3942() /* ty=(Tensor[(3, 13, 7), float32], Tensor[(560), float32], Tensor[(48), float64]) */;
  %242 = cast(%var_4301, dtype="int16") /* ty=int16 */;
  %243 = reshape(%242, newshape=[]) /* ty=int16 */;
  %244 = @func_2585(%243) /* ty=(Tensor[(8, 8, 3), int16], Tensor[(3, 13, 7), float32]) */;
  %245 = @func_4259() /* ty=Tensor[(768), float32] */;
  %246 = cast(%245, dtype="float32") /* ty=Tensor[(768), float32] */;
  %247 = %241.1;
  %248 = %244.1;
  %249 = acos(%246) /* ty=Tensor[(768), float32] */;
  (%247, %248, %var_4301, %249)
}

def @func_389(%var_359: Tensor[(6, 8, 1), float64]) -> Tensor[(6, 8, 4), bool] {
  %250 = cast(%var_359, dtype="bool") /* ty=Tensor[(6, 8, 1), bool] */;
  %251 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 8, 4), float64] */, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
  less(%250, %251) /* ty=Tensor[(6, 8, 4), bool] */
}

def @func_3584(%var_3579: Tensor[(1, 14, 13), float64]) -> (Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), int16], Tensor[(?, 14, 13), bool]) {
  %252 = @func_3273() /* ty=Tensor[(3, 13, 7), float64] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %254 = reshape(%253, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %255 = @func_2005(%254) /* ty=(Tensor[(3, 13, 7), int64], Tensor[(3, 13, 7), float32]) */;
  %256 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
  %257 = cast(%252, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %258 = reshape(%257, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %259 = @func_3145(%258) /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(26, 7), float64]) */;
  %260 = %259.2;
  %261 = cast(%var_3579, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%260, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %265 = %255.1;
  %266 = %256.0;
  %267 = less_equal(%263, %264) /* ty=Tensor[(?, 14, 13), bool] */;
  (%252, %265, %266, %267)
}

def @func_3967(%var_3965: Tensor[(182), float64]) -> (Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) {
  %268 = cast(%var_3965, dtype="float64") /* ty=Tensor[(182), float64] */;
  %269 = reshape(%268, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %270 = @func_1647(%269) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %271 = @func_3273() /* ty=Tensor[(3, 13, 7), float64] */;
  %272 = %270.0;
  (%271, %272, %var_3965)
}

def @func_4397(%var_4371: Tensor[(10, 13, 4), int16], %var_4385: Tensor[(3, 13, 7), float64]) -> (Tensor[(8, 12, 8), bool], Tensor[(10, 13, 4), float64], Tensor[(3, 13, 7), int16]) {
  %273 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %274 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
  %275 = %274.0;
  %276 = cast(%var_4371, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %280 = @func_3083() /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) */;
  %281 = %280.0;
  %282 = cast(%var_4385, dtype="int16") /* ty=Tensor[(3, 13, 7), int16] */;
  %283 = shape_of(%281, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%281, dtype="int16") /* ty=Tensor[(3, 13, 7), int16] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %286 = %273.1;
  %287 = floor_divide(%278, %279) /* ty=Tensor[(10, 13, 4), float64] */;
  %288 = bitwise_or(%284, %285) /* ty=Tensor[(3, 13, 7), int16] */;
  (%286, %287, %288)
}

def @func_3700(%var_3671: Tensor[(273), float32], %var_3672: Tensor[(315), float64]) -> (Tensor[(768), float32], Tensor[(48), float64], Tensor[(48), float64], Tensor[(273), float32], Tensor[(315), float64], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16]) {
  %289 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %290 = cast(meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %291 = cast(%var_3671, dtype="float32") /* ty=Tensor[(273), float32] */;
  %292 = %289.2;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(768), float64] */;
  %294 = cast(%var_3672, dtype="float64") /* ty=Tensor[(315), float64] */;
  %295 = reshape(%290, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %296 = reshape(%291, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %297 = reshape(%293, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
  %298 = reshape(%294, newshape=[315]) /* ty=Tensor[(315), float64] */;
  %299 = @func_1960(%295, %296, %297, %298) /* ty=(Tensor[(48), float64], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(768), float64], Tensor[(3, 16, 16), bool], Tensor[(48), float64], Tensor[(315), float64], Tensor[(3, 13, 7), float64], Tensor[(48), float64], Tensor[(1680), float64], Tensor[(560), float32]) */;
  %300 = cast(meta[relay.Constant][21] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %301 = reshape(%300, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint16] */;
  %302 = %299.2;
  %303 = @func_726(%301) /* ty=Tensor[(5, 6, 11), uint16] */;
  (%292, %302, meta[relay.Constant][20] /* ty=Tensor[(48), float64] */, %var_3671, %var_3672, %303, meta[relay.Constant][21] /* ty=Tensor[(30), uint16] */)
}

def @func_1960(%var_1916: Tensor[(48), float64], %var_1932: Tensor[(3, 13, 7), float32], %var_1942: Tensor[(3, 16, 16), float64], %var_1950: Tensor[(315), float64]) -> (Tensor[(48), float64], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(768), float64], Tensor[(3, 16, 16), bool], Tensor[(48), float64], Tensor[(315), float64], Tensor[(3, 13, 7), float64], Tensor[(48), float64], Tensor[(1680), float64], Tensor[(560), float32]) {
  %304 = cast(meta[relay.Constant][22] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %305 = cast(meta[relay.Constant][22] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %306 = cast(%var_1916, dtype="float64") /* ty=Tensor[(48), float64] */;
  %307 = reshape(%304, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %308 = reshape(%305, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %309 = reshape(%306, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %310 = @func_879(%307, %308, %309) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
  %311 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %312 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %313 = cast(meta[relay.Constant][23] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %314 = reshape(%313, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
  %315 = @func_528(%314) /* ty=(Tensor[(3, 16, 16), float64],) */;
  %316 = %315.0;
  %317 = cast(%var_1942, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = cast(%var_1950, dtype="float64") /* ty=Tensor[(315), float64] */;
  %322 = %310.7;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(48), float64] */;
  %324 = reshape(%321, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %325 = reshape(%323, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %326 = @func_493(%324, %325) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %327 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %328 = %327.0;
  %329 = cast(%var_1932, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = less_equal(%331, %332) /* ty=Tensor[(3, 13, 7), bool] */;
  %334 = cast(%333, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %335 = cast(meta[relay.Constant][24] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %336 = %326.2;
  %337 = cast(%336, dtype="float64") /* ty=Tensor[(48), float64] */;
  %338 = cast(meta[relay.Constant][25] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %339 = reshape(%335, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float64] */;
  %340 = reshape(%337, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %341 = reshape(%338, newshape=[8, 70]) /* ty=Tensor[(8, 70), float32] */;
  %342 = @func_962(%339, %340, %341) /* ty=(Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) */;
  %343 = %311.0;
  %344 = %312.0;
  %345 = greater_equal(%319, %320) /* ty=Tensor[(3, 16, 16), bool] */;
  %346 = acosh(%334) /* ty=Tensor[(3, 13, 7), float64] */;
  %347 = %342.1;
  (%322, meta[relay.Constant][22] /* ty=Tensor[(36), float32] */, %var_1916, %343, %344, meta[relay.Constant][23] /* ty=Tensor[(768), float64] */, %345, %336, %var_1950, %346, %347, meta[relay.Constant][24] /* ty=Tensor[(1680), float64] */, meta[relay.Constant][25] /* ty=Tensor[(560), float32] */)
}

def @func_3751() -> (Tensor[(3, 12), float32],) {
  %348 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %349 = %348.3;
  (%349,)
}

def @func_1389(%var_1378: Tensor[(8, 12, 8), float32], %var_1386: Tensor[(36), float32], %var_1387: Tensor[(48), float64]) -> (Tensor[(8, 12, 8), bool], Tensor[(14, 7, 13), float64], Tensor[(36), float32], Tensor[(48), float64]) {
  %350 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(8, 12, 8), bool] */;
  %351 = shape_of(%var_1378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_1378, dtype="bool") /* ty=Tensor[(8, 12, 8), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = cast(%var_1386, dtype="float32") /* ty=Tensor[(36), float32] */;
  %355 = cast(%var_1386, dtype="float32") /* ty=Tensor[(36), float32] */;
  %356 = cast(%var_1387, dtype="float64") /* ty=Tensor[(48), float64] */;
  %357 = reshape(%354, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %358 = reshape(%355, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %359 = reshape(%356, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %360 = @func_879(%357, %358, %359) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
  %361 = less(%352, %353) /* ty=Tensor[(8, 12, 8), bool] */;
  %362 = %360.3;
  (%361, %362, %var_1386, %var_1387)
}

def @func_2465(%var_2452: Tensor[(10, 13, 4), int16]) -> (Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), uint64]) {
  %363 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %364 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
  %365 = %364.0;
  %366 = cast(%365, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %367 = cast(%var_2452, dtype="uint64") /* ty=Tensor[(10, 13, 4), uint64] */;
  %368 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%365, dtype="uint64") /* ty=Tensor[(10, 13, 4), uint64] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %371 = %363.0;
  %372 = rsqrt(%366) /* ty=Tensor[(10, 13, 4), float32] */;
  %373 = logical_xor(%369, %370) /* ty=Tensor[(10, 13, 4), uint64] */;
  (%371, %372, %373)
}

def @func_5495(%var_5445: Tensor[(3, 7, 15), float32], %var_5454: Tensor[(320, 2), float64]) -> (Tensor[(16, 10, 4), float64], Tensor[(320, 2), float64], Tensor[(3, 7, 15), float32], Tensor[(3, 7, 15), int8], Tensor[(3, 7, 15), float64]) {
  %374 = cast(%var_5454, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %375 = cast(%var_5454, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %376 = reshape(%374, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float64] */;
  %377 = reshape(%375, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float64] */;
  %378 = @func_4064(%376, %377) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) */;
  %379 = @func_5375() /* ty=(Tensor[(768), float32], Tensor[(3, 7, 15), float64], Tensor[(36), float32], Tensor[(24, 2), float64], Tensor[(3, 13, 7), float32]) */;
  %380 = %379.1;
  %381 = cast(%380, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %382 = erf(%381) /* ty=Tensor[(3, 7, 15), float32] */;
  %383 = cast(%var_5445, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%382, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %387 = greater_equal(%385, %386) /* ty=Tensor[(3, 7, 15), bool] */;
  %388 = cast(%387, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %389 = log10(%388) /* ty=Tensor[(3, 7, 15), float64] */;
  %390 = cast(%382, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %394 = cast(%380, dtype="int8") /* ty=Tensor[(3, 7, 15), int8] */;
  %395 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%389, dtype="int8") /* ty=Tensor[(3, 7, 15), int8] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %398 = cast(%382, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %399 = %378.0;
  %400 = floor_mod(%392, %393) /* ty=Tensor[(3, 7, 15), float32] */;
  %401 = subtract(%396, %397) /* ty=Tensor[(3, 7, 15), int8] */;
  %402 = acosh(%398) /* ty=Tensor[(3, 7, 15), float64] */;
  (%399, %var_5454, %400, %401, %402)
}

def @func_2100() -> (Tensor[(10, 13, 4), int16],) {
  %403 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %404 = asin(%403) /* ty=Tensor[(10, 13, 4), float32] */;
  %405 = cast(%404, dtype="int16") /* ty=Tensor[(10, 13, 4), int16] */;
  %406 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(10, 13, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 13, 4), float32] */, dtype="int16") /* ty=Tensor[(10, 13, 4), int16] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %409 = left_shift(%407, %408) /* ty=Tensor[(10, 13, 4), int16] */;
  (%409,)
}

def @func_4239(%var_4144: int16, %var_4152: Tensor[(768, 1), float32], %var_4153: Tensor[(36), float32]) -> (Tensor[(7, 10, 3), int16], Tensor[(8, 12, 8), bool], Tensor[(768, 1), float32], Tensor[(36), float32], Tensor[(48), float64], Tensor[(7, 10, 3), int64], Tensor[(48), float64]) {
  %410 = cast(%var_4144, dtype="int16") /* ty=int16 */;
  %411 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 10, 3), int16] */, dtype="int16") /* ty=Tensor[(7, 10, 3), int16] */;
  %412 = cast(%var_4152, dtype="float32") /* ty=Tensor[(768, 1), float32] */;
  %413 = cast(%var_4153, dtype="float32") /* ty=Tensor[(36), float32] */;
  %414 = cast(meta[relay.Constant][29] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %415 = reshape(%412, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
  %416 = reshape(%413, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %417 = reshape(%414, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %418 = @func_1389(%415, %416, %417) /* ty=(Tensor[(8, 12, 8), bool], Tensor[(14, 7, 13), float64], Tensor[(36), float32], Tensor[(48), float64]) */;
  %419 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 10, 3), int16] */, dtype="int64") /* ty=Tensor[(7, 10, 3), int64] */;
  %420 = cast(%var_4144, dtype="int64") /* ty=int64 */;
  %421 = cast(%var_4153, dtype="float32") /* ty=Tensor[(36), float32] */;
  %422 = cast(%var_4153, dtype="float32") /* ty=Tensor[(36), float32] */;
  %423 = cast(meta[relay.Constant][29] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %424 = reshape(%421, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %425 = reshape(%422, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %426 = reshape(%423, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %427 = @func_879(%424, %425, %426) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
  %428 = minimum(%410, %411) /* ty=Tensor[(7, 10, 3), int16] */;
  %429 = %418.0;
  %430 = left_shift(%419, %420) /* ty=Tensor[(7, 10, 3), int64] */;
  %431 = %427.7;
  (%428, %429, %var_4152, %var_4153, meta[relay.Constant][29] /* ty=Tensor[(48), float64] */, %430, %431)
}

def @func_2529(%var_2520: Tensor[(15, 14, 6), bool], %var_2521: Tensor[(15, 14, 6), bool]) -> (Tensor[(15, 14, 6), bool], Tensor[(10, 13, 4), bool]) {
  %432 = cast(%var_2521, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %433 = shape_of(%var_2520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%var_2520, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = logical_or(%434, %435) /* ty=Tensor[(15, 14, 6), bool] */;
  %437 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  (%436, %437)
}

def @func_3942() -> (Tensor[(3, 13, 7), float32], Tensor[(560), float32], Tensor[(48), float64]) {
  %438 = cast(meta[relay.Constant][30] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %439 = reshape(%438, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %440 = @func_2348(%439) /* ty=(Tensor[(48), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32], Tensor[(3, 13, 7), bool]) */;
  %441 = @func_1899() /* ty=Tensor[(3, 13, 7), float32] */;
  %442 = %440.3;
  (%441, %442, meta[relay.Constant][30] /* ty=Tensor[(48), float64] */)
}

def @func_3273() -> Tensor[(3, 13, 7), float64] {
  %443 = @func_3083() /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) */;
  %443.0
}

def @func_4064(%var_4044: Tensor[(16, 10, 4), float64], %var_4045: Tensor[(16, 10, 4), float64]) -> (Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) {
  %444 = cast(%var_4045, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
  %445 = shape_of(%var_4044, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%var_4044, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %448 = cast(%var_4045, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
  %449 = power(%446, %447) /* ty=Tensor[(16, 10, 4), float64] */;
  %450 = sinh(%448) /* ty=Tensor[(16, 10, 4), float64] */;
  (%449, %450)
}

def @func_2005(%var_1980: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), int64], Tensor[(3, 13, 7), float32]) {
  %451 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %452 = %451.0;
  %453 = cast(%var_1980, dtype="int64") /* ty=Tensor[(3, 13, 7), int64] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="int64") /* ty=Tensor[(3, 13, 7), int64] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %457 = cast(%var_1980, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %458 = maximum(%455, %456) /* ty=Tensor[(3, 13, 7), int64] */;
  %459 = asinh(%457) /* ty=Tensor[(3, 13, 7), float32] */;
  (%458, %459)
}

def @func_4533(%var_4528: Tensor[(315), float64]) -> (Tensor[(768), float32], Tensor[(10, 13, 4), float32], Tensor[(48), float64], Tensor[(4, 12), float64], Tensor[(315), bool]) {
  %460 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
  %461 = cast(meta[relay.Constant][31] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %462 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %463 = reshape(%461, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %464 = reshape(%462, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %465 = @func_493(%463, %464) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %466 = cast(%var_4528, dtype="bool") /* ty=Tensor[(315), bool] */;
  %467 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(315), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %468 = cast(meta[relay.Constant][31] /* ty=Tensor[(315), float64] */, dtype="bool") /* ty=Tensor[(315), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?), bool] */;
  %470 = @func_4259() /* ty=Tensor[(768), float32] */;
  %471 = %460.0;
  %472 = %465.2;
  %473 = less_equal(%468, %469) /* ty=Tensor[(315), bool] */;
  (%470, %471, %472, meta[relay.Constant][32] /* ty=Tensor[(4, 12), float64] */, %473)
}

def @func_2722(%var_2655: Tensor[(315), float64], %var_2656: Tensor[(2, 24), float64], %var_2671: Tensor[(768), float64], %var_2682: Tensor[(1274), float32]) -> (Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(3, 13, 7), float32], Tensor[(273), float32], Tensor[(768), float64], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(2, 24), bool]) {
  %474 = cast(%var_2655, dtype="float64") /* ty=Tensor[(315), float64] */;
  %475 = cast(%var_2656, dtype="float64") /* ty=Tensor[(2, 24), float64] */;
  %476 = reshape(%474, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %477 = reshape(%475, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %478 = @func_493(%476, %477) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %479 = cast(%var_2656, dtype="float64") /* ty=Tensor[(2, 24), float64] */;
  %480 = cast(meta[relay.Constant][33] /* ty=Tensor[(273), float32] */, dtype="float32") /* ty=Tensor[(273), float32] */;
  %481 = cast(%var_2671, dtype="float64") /* ty=Tensor[(768), float64] */;
  %482 = cast(%var_2655, dtype="float64") /* ty=Tensor[(315), float64] */;
  %483 = reshape(%479, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %484 = reshape(%480, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %485 = reshape(%481, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
  %486 = reshape(%482, newshape=[315]) /* ty=Tensor[(315), float64] */;
  %487 = @func_1960(%483, %484, %485, %486) /* ty=(Tensor[(48), float64], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(768), float64], Tensor[(3, 16, 16), bool], Tensor[(48), float64], Tensor[(315), float64], Tensor[(3, 13, 7), float64], Tensor[(48), float64], Tensor[(1680), float64], Tensor[(560), float32]) */;
  %488 = cast(%var_2682, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %489 = reshape(%488, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
  %490 = cast(%var_2656, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
  %491 = sin(%490) /* ty=Tensor[(2, 24), float32] */;
  %492 = cast(%491, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
  %493 = sqrt(%492) /* ty=Tensor[(2, 24), float32] */;
  %494 = cast(%491, dtype="bool") /* ty=Tensor[(2, 24), bool] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(2), int32] */;
  %496 = cast(%493, dtype="bool") /* ty=Tensor[(2, 24), bool] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %498 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %499 = %478.1;
  %500 = %487.3;
  %501 = @func_760(%489) /* ty=Tensor[(14, 7, 13), float64] */;
  %502 = not_equal(%496, %497) /* ty=Tensor[(2, 24), bool] */;
  (%498, %499, %var_2655, %500, meta[relay.Constant][33] /* ty=Tensor[(273), float32] */, %var_2671, %501, %var_2682, %502)
}

def @func_2585(%var_2574: int16) -> (Tensor[(8, 8, 3), int16], Tensor[(3, 13, 7), float32]) {
  %503 = cast(%var_2574, dtype="int16") /* ty=int16 */;
  %504 = cast(meta[relay.Constant][34] /* ty=Tensor[(8, 8, 3), int16] */, dtype="int16") /* ty=Tensor[(8, 8, 3), int16] */;
  %505 = subtract(%503, %504) /* ty=Tensor[(8, 8, 3), int16] */;
  %506 = @func_1899() /* ty=Tensor[(3, 13, 7), float32] */;
  (%505, %506)
}

def @func_4858(%var_4835: Tensor[(10, 13, 4), bool]) -> (Tensor[(10, 13, 4), uint32],) {
  %507 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %508 = cast(%var_4835, dtype="uint32") /* ty=Tensor[(10, 13, 4), uint32] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="uint32") /* ty=Tensor[(10, 13, 4), uint32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %512 = bitwise_and(%510, %511) /* ty=Tensor[(10, 13, 4), uint32] */;
  (%512,)
}

def @func_726(%var_721: Tensor[(5, 6, 1), uint16]) -> Tensor[(5, 6, 11), uint16] {
  %513 = cast(%var_721, dtype="uint16") /* ty=Tensor[(5, 6, 1), uint16] */;
  %514 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 6, 11), uint16] */, dtype="uint16") /* ty=Tensor[(5, 6, 11), uint16] */;
  multiply(%513, %514) /* ty=Tensor[(5, 6, 11), uint16] */
}

def @func_2348(%var_2310: Tensor[(48), float64]) -> (Tensor[(48), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32], Tensor[(3, 13, 7), bool]) {
  %515 = cast(meta[relay.Constant][36] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %516 = cast(%var_2310, dtype="float64") /* ty=Tensor[(48), float64] */;
  %517 = cast(meta[relay.Constant][37] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %518 = reshape(%515, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float64] */;
  %519 = reshape(%516, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %520 = reshape(%517, newshape=[8, 70]) /* ty=Tensor[(8, 70), float32] */;
  %521 = @func_962(%518, %519, %520) /* ty=(Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) */;
  %522 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %523 = %522.0;
  %524 = cast(%523, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %525 = cosh(%524) /* ty=Tensor[(3, 13, 7), float32] */;
  %526 = cast(%525, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %527 = sinh(%526) /* ty=Tensor[(3, 13, 7), float32] */;
  %528 = cast(%525, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %532 = %521.1;
  %533 = logical_and(%530, %531) /* ty=Tensor[(3, 13, 7), bool] */;
  (%532, meta[relay.Constant][36] /* ty=Tensor[(1680), float64] */, %var_2310, meta[relay.Constant][37] /* ty=Tensor[(560), float32] */, %533)
}

def @func_2758() -> (Tensor[(10, 13, 4), float32],) {
  %534 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %536 = sinh(%535) /* ty=Tensor[(10, 13, 4), float32] */;
  (%536,)
}

def @func_3642() -> Tensor[(3, 13, 7), float32] {
  @func_1899() /* ty=Tensor[(3, 13, 7), float32] */
}

def @func_2199() -> Tensor[(3, 13, 7), float32] {
  @func_1899() /* ty=Tensor[(3, 13, 7), float32] */
}

def @func_3774(%var_3771: Tensor[(48), float64], %var_3772: Tensor[(560), float32]) -> (Tensor[(10, 13, 4), float32], Tensor[(8, 70), float32], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32]) {
  %537 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
  %538 = cast(meta[relay.Constant][38] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %539 = cast(%var_3771, dtype="float64") /* ty=Tensor[(48), float64] */;
  %540 = cast(%var_3772, dtype="float32") /* ty=Tensor[(560), float32] */;
  %541 = reshape(%538, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float64] */;
  %542 = reshape(%539, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %543 = reshape(%540, newshape=[8, 70]) /* ty=Tensor[(8, 70), float32] */;
  %544 = @func_962(%541, %542, %543) /* ty=(Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) */;
  %545 = %537.0;
  %546 = %544.3;
  (%545, %546, meta[relay.Constant][38] /* ty=Tensor[(1680), float64] */, %var_3771, %var_3772)
}

def @func_2281() -> (Tensor[(3, 13, 7), float32],) {
  %547 = @func_2199() /* ty=Tensor[(3, 13, 7), float32] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %549 = sin(%548) /* ty=Tensor[(3, 13, 7), float32] */;
  (%549,)
}

def @func_3832(%var_3829: Tensor[(8, 13, 12), float64]) -> Tensor[(8, 13, 12), float64] {
  %550 = cast(%var_3829, dtype="float64") /* ty=Tensor[(8, 13, 12), float64] */;
  cos(%550) /* ty=Tensor[(8, 13, 12), float64] */
}

def @func_4111() -> (Tensor[(10, 13, 4), int16],) {
  %551 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
  %552 = %551.0;
  (%552,)
}

def @func_4989(%var_4981: Tensor[(48), float64], %var_4982: Tensor[(280, 2), float32]) -> (Tensor[(1, 14, 13), float64], Tensor[(10, 13, 4), float32], Tensor[(105, 3), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(280, 2), float32]) {
  %553 = @func_3226() /* ty=(Tensor[(3, 13, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) */;
  %554 = cast(meta[relay.Constant][39] /* ty=Tensor[(105, 3), float64] */, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
  %555 = reshape(%554, newshape=[315]) /* ty=Tensor[(315), float64] */;
  %556 = @func_4533(%555) /* ty=(Tensor[(768), float32], Tensor[(10, 13, 4), float32], Tensor[(48), float64], Tensor[(4, 12), float64], Tensor[(315), bool]) */;
  %557 = cast(%var_4981, dtype="float64") /* ty=Tensor[(48), float64] */;
  %558 = cast(%var_4982, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
  %559 = reshape(%557, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %560 = reshape(%558, newshape=[560]) /* ty=Tensor[(560), float32] */;
  %561 = @func_3774(%559, %560) /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 70), float32], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32]) */;
  %562 = %553.1;
  %563 = %556.1;
  %564 = %561.2;
  (%562, %563, meta[relay.Constant][39] /* ty=Tensor[(105, 3), float64] */, %564, %var_4981, %var_4982)
}

def @func_5375() -> (Tensor[(768), float32], Tensor[(3, 7, 15), float64], Tensor[(36), float32], Tensor[(24, 2), float64], Tensor[(3, 13, 7), float32]) {
  %565 = cast(meta[relay.Constant][40] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %566 = cast(meta[relay.Constant][40] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %567 = cast(meta[relay.Constant][41] /* ty=Tensor[(24, 2), float64] */, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %568 = reshape(%565, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %569 = reshape(%566, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %570 = reshape(%567, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %571 = @func_879(%568, %569, %570) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
  %572 = @func_4259() /* ty=Tensor[(768), float32] */;
  %573 = %571.5;
  %574 = @func_2199() /* ty=Tensor[(3, 13, 7), float32] */;
  (%572, %573, meta[relay.Constant][40] /* ty=Tensor[(36), float32] */, meta[relay.Constant][41] /* ty=Tensor[(24, 2), float64] */, %574)
}

def @func_1795() -> (Tensor[(3, 13, 7), float32],) {
  %575 = cast(meta[relay.Constant][43] /* ty=Tensor[(3, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %576 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(3, 13, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %579 = multiply(%577, %578) /* ty=Tensor[(3, 13, 7), float32] */;
  (%579,)
}

def @func_2161() -> Tensor[(10, 13, 4), bool] {
  %580 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
  %581 = %580.0;
  %582 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 13, 4), int16] */, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%584, %585) /* ty=Tensor[(10, 13, 4), bool] */
}

def @func_879(%var_827: Tensor[(3, 4, 3), float32], %var_828: Tensor[(3, 4, 3), float32], %var_862: Tensor[(48), float64]) -> (Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) {
  %586 = cast(%var_828, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %587 = shape_of(%var_827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%var_827, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %590 = not_equal(%588, %589) /* ty=Tensor[(3, 4, 3), bool] */;
  %591 = cast(%var_828, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%590, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %595 = cast(meta[relay.Constant][45] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %596 = reshape(%595, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint16] */;
  %597 = cast(meta[relay.Constant][46] /* ty=Tensor[(1274), float32] */, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %598 = reshape(%597, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
  %599 = cast(meta[relay.Constant][47] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %600 = cast(%var_862, dtype="float64") /* ty=Tensor[(48), float64] */;
  %601 = reshape(%599, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %602 = reshape(%600, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %603 = @func_493(%601, %602) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %604 = cast(%var_828, dtype="uint16") /* ty=Tensor[(3, 4, 3), uint16] */;
  %605 = shape_of(%var_827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_827, dtype="uint16") /* ty=Tensor[(3, 4, 3), uint16] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %608 = cast(meta[relay.Constant][48] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %609 = reshape(%608, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
  %610 = @func_528(%609) /* ty=(Tensor[(3, 16, 16), float64],) */;
  %611 = cast(%var_862, dtype="float64") /* ty=Tensor[(48), float64] */;
  %612 = reshape(%611, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %613 = greater(%593, %594) /* ty=Tensor[(3, 4, 3), bool] */;
  %614 = @func_726(%596) /* ty=Tensor[(5, 6, 11), uint16] */;
  %615 = @func_760(%598) /* ty=Tensor[(14, 7, 13), float64] */;
  %616 = %603.0;
  %617 = multiply(%606, %607) /* ty=Tensor[(3, 4, 3), uint16] */;
  %618 = %610.0;
  %619 = @func_389(%612) /* ty=Tensor[(6, 8, 4), bool] */;
  (%613, %614, meta[relay.Constant][45] /* ty=Tensor[(30), uint16] */, %615, meta[relay.Constant][46] /* ty=Tensor[(1274), float32] */, %616, meta[relay.Constant][47] /* ty=Tensor[(315), float64] */, %var_862, %617, %618, meta[relay.Constant][48] /* ty=Tensor[(768), float64] */, %619)
}

def @func_962(%var_923: Tensor[(10, 14, 12), float64], %var_932: Tensor[(48), float64], %var_945: Tensor[(8, 70), float32]) -> (Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) {
  %620 = cast(%var_932, dtype="float64") /* ty=Tensor[(48), float64] */;
  %621 = reshape(%620, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %622 = cast(%var_945, dtype="float32") /* ty=Tensor[(8, 70), float32] */;
  %623 = cast(%var_945, dtype="float32") /* ty=Tensor[(8, 70), float32] */;
  %624 = reshape(%622, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), float32] */;
  %625 = reshape(%623, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), float32] */;
  %626 = @func_622(%624, %625) /* ty=(Tensor[(48), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(6, 8, 4), uint8], Tensor[(3, 7, 15), float64], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), float32]) */;
  %627 = cast(%var_923, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %628 = sqrt(%627) /* ty=Tensor[(10, 14, 12), float64] */;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %630 = exp(%629) /* ty=Tensor[(10, 14, 12), float32] */;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
  %632 = atan(%631) /* ty=Tensor[(10, 14, 12), float64] */;
  %633 = cast(%628, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %634 = shape_of(%var_923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_923, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %637 = power(%635, %636) /* ty=Tensor[(10, 14, 12), float32] */;
  %638 = cast(%637, dtype="int16") /* ty=Tensor[(10, 14, 12), int16] */;
  %639 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%632, dtype="int16") /* ty=Tensor[(10, 14, 12), int16] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %642 = @func_389(%621) /* ty=Tensor[(6, 8, 4), bool] */;
  %643 = %626.3;
  %644 = logical_xor(%640, %641) /* ty=Tensor[(10, 14, 12), int16] */;
  (%642, %var_932, %643, %var_945, %644)
}

def @func_3083() -> (Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) {
  %645 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %646 = %645.0;
  %647 = cast(%646, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %648 = tan(%647) /* ty=Tensor[(3, 13, 7), float64] */;
  %649 = cast(%648, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %650 = reshape(%649, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %651 = @func_2005(%650) /* ty=(Tensor[(3, 13, 7), int64], Tensor[(3, 13, 7), float32]) */;
  %652 = %651.1;
  (%648, %652)
}

def @func_4259() -> Tensor[(768), float32] {
  %653 = @func_3712() /* ty=(Tensor[(768), float32],) */;
  %653.0
}

def @main(%var_5575: Tensor[(14, 15, 4), uint8], %var_5576: Tensor[(14, 15, 4), uint8]) -> Tensor[(14, 15, 4), uint8] {
  %654 = cast(%var_5576, dtype="uint8") /* ty=Tensor[(14, 15, 4), uint8] */;
  %655 = shape_of(%var_5575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%var_5575, dtype="uint8") /* ty=Tensor[(14, 15, 4), uint8] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%656, %657) /* ty=Tensor[(14, 15, 4), uint8] */
}

def @func_528(%var_520: Tensor[(3, 16, 16), float64]) -> (Tensor[(3, 16, 16), float64],) {
  %658 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %659 = shape_of(%var_520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_520, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %662 = power(%660, %661) /* ty=Tensor[(3, 16, 16), float64] */;
  (%662,)
}

def @func_5541(%var_5529: Tensor[(8, 12), float32]) -> (Tensor[(8, 12), float32], Tensor[(768), float32], Tensor[(35, 9), float64]) {
  %663 = cast(%var_5529, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %664 = cast(meta[relay.Constant][50] /* ty=Tensor[(35, 9), float64] */, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
  %665 = reshape(%664, newshape=[315]) /* ty=Tensor[(315), float64] */;
  %666 = @func_4533(%665) /* ty=(Tensor[(768), float32], Tensor[(10, 13, 4), float32], Tensor[(48), float64], Tensor[(4, 12), float64], Tensor[(315), bool]) */;
  %667 = rsqrt(%663) /* ty=Tensor[(8, 12), float32] */;
  %668 = %666.0;
  (%667, %668, meta[relay.Constant][50] /* ty=Tensor[(35, 9), float64] */)
}

def @func_4010(%var_3972: Tensor[(7, 9, 16), int32], %var_3973: Tensor[(7, 9, 16), int32]) -> (Tensor[(7, 9, 16), int32], Tensor[(560), float32], Tensor[(48), float64], Tensor[(7, 9, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(30), uint16], Tensor[(30), uint16]) {
  %669 = cast(%var_3973, dtype="int32") /* ty=Tensor[(7, 9, 16), int32] */;
  %670 = shape_of(%var_3972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%var_3972, dtype="int32") /* ty=Tensor[(7, 9, 16), int32] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %673 = cast(meta[relay.Constant][51] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %674 = reshape(%673, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %675 = @func_3358(%674) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(560), float32], Tensor[(48), float64]) */;
  %676 = cast(%var_3972, dtype="float64") /* ty=Tensor[(7, 9, 16), float64] */;
  %677 = atan(%676) /* ty=Tensor[(7, 9, 16), float64] */;
  %678 = cast(%677, dtype="float64") /* ty=Tensor[(7, 9, 16), float64] */;
  %679 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %680 = cast(meta[relay.Constant][52] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %681 = reshape(%680, newshape=[30]) /* ty=Tensor[(30), uint16] */;
  %682 = @func_3258(%681) /* ty=(Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(10, 13, 4), uint64]) */;
  %683 = minimum(%671, %672) /* ty=Tensor[(7, 9, 16), int32] */;
  %684 = %675.1;
  %685 = acosh(%678) /* ty=Tensor[(7, 9, 16), float64] */;
  %686 = %679.0;
  %687 = %682.1;
  (%683, %684, meta[relay.Constant][51] /* ty=Tensor[(48), float64] */, %685, %686, %687, meta[relay.Constant][52] /* ty=Tensor[(30), uint16] */)
}

def @func_3712() -> (Tensor[(768), float32],) {
  %688 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %689 = %688.2;
  (%689,)
}

def @func_3045(%var_2931: Tensor[(10, 13, 4), bool], %var_2951: Tensor[(4, 12), float64], %var_2977: Tensor[(182), float64]) -> (Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(4, 12), float64], Tensor[(10, 13, 4), float32], Tensor[(182), bool], Tensor[(?, 14, 13), float64]) {
  %690 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %691 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %692 = cast(%var_2931, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %696 = cast(meta[relay.Constant][53] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %697 = cast(%var_2951, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %698 = reshape(%696, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %699 = reshape(%697, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %700 = @func_493(%698, %699) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %701 = cast(%var_2931, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %702 = cast(%var_2977, dtype="float64") /* ty=Tensor[(182), float64] */;
  %703 = reshape(%702, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %704 = @func_1647(%703) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %707 = shape_of(%var_2977, dtype="int32") /* ty=Tensor[(1), int32] */;
  %708 = cast(%var_2977, dtype="bool") /* ty=Tensor[(182), bool] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?), bool] */;
  %710 = cast(%var_2977, dtype="float64") /* ty=Tensor[(182), float64] */;
  %711 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%705, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %714 = %690.0;
  %715 = divide(%694, %695) /* ty=Tensor[(10, 13, 4), float32] */;
  %716 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %717 = %700.1;
  %718 = log10(%701) /* ty=Tensor[(10, 13, 4), float32] */;
  %719 = logical_and(%708, %709) /* ty=Tensor[(182), bool] */;
  %720 = divide(%712, %713) /* ty=Tensor[(?, 14, 13), float64] */;
  (%714, %715, %716, %717, meta[relay.Constant][53] /* ty=Tensor[(315), float64] */, %var_2951, %718, %719, %720)
}

def @func_4878() -> Tensor[(10, 13, 4), float32] {
  %721 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
  %721.0
}

def @func_3438(%var_3383: Tensor[(7, 1, 8), float64]) -> (Tensor[(14, 7, 13), float64], Tensor[(91, 14), float32], Tensor[(3, 13, 7), float32], Tensor[(7, ?, 8), float64]) {
  %722 = cast(meta[relay.Constant][54] /* ty=Tensor[(91, 14), float32] */, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %723 = reshape(%722, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
  %724 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %725 = cast(%var_3383, dtype="float64") /* ty=Tensor[(7, 1, 8), float64] */;
  %726 = erf(%725) /* ty=Tensor[(7, 1, 8), float64] */;
  %727 = cast(%var_3383, dtype="float32") /* ty=Tensor[(7, 1, 8), float32] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="float32") /* ty=Tensor[(7, 1, 8), float32] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %731 = floor_mod(%729, %730) /* ty=Tensor[(7, ?, 8), float32] */;
  %732 = cast(%731, dtype="bool") /* ty=Tensor[(7, ?, 8), bool] */;
  %733 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%726, dtype="bool") /* ty=Tensor[(7, 1, 8), bool] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %736 = logical_and(%734, %735) /* ty=Tensor[(7, ?, 8), bool] */;
  %737 = cast(%736, dtype="float64") /* ty=Tensor[(7, ?, 8), float64] */;
  %738 = @func_760(%723) /* ty=Tensor[(14, 7, 13), float64] */;
  %739 = %724.0;
  %740 = log10(%737) /* ty=Tensor[(7, ?, 8), float64] */;
  (%738, meta[relay.Constant][54] /* ty=Tensor[(91, 14), float32] */, %739, %740)
}

def @func_4703() -> Tensor[(7, 16, 13), float64] {
  %741 = cast(meta[relay.Constant][55] /* ty=Tensor[(7, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 13), float64] */;
  log10(%741) /* ty=Tensor[(7, 16, 13), float64] */
}

def @func_5194(%var_5135: Tensor[(1008), int32]) -> (Tensor[(30), uint16], Tensor[(1008), int32], Tensor[(3, 13, 7), float64], Tensor[(16, 16, 15), bool], Tensor[(3840), int64], Tensor[(10, 13, 4), float64], Tensor[(520), bool], Tensor[(3, 4, 4), int64]) {
  %742 = cast(%var_5135, dtype="int32") /* ty=Tensor[(1008), int32] */;
  %743 = cast(%var_5135, dtype="int32") /* ty=Tensor[(1008), int32] */;
  %744 = reshape(%742, newshape=[7, 9, 16]) /* ty=Tensor[(7, 9, 16), int32] */;
  %745 = reshape(%743, newshape=[7, 9, 16]) /* ty=Tensor[(7, 9, 16), int32] */;
  %746 = @func_4010(%744, %745) /* ty=(Tensor[(7, 9, 16), int32], Tensor[(560), float32], Tensor[(48), float64], Tensor[(7, 9, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(30), uint16], Tensor[(30), uint16]) */;
  %747 = cast(meta[relay.Constant][56] /* ty=Tensor[(3840), int64] */, dtype="int64") /* ty=Tensor[(3840), int64] */;
  %748 = reshape(%747, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int64] */;
  %749 = @func_4483(%748) /* ty=(Tensor[(16, 16, 15), bool],) */;
  %750 = cast(meta[relay.Constant][57] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
  %751 = reshape(%750, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
  %752 = @func_2807(%751) /* ty=(Tensor[(10, 13, 4), float64],) */;
  %753 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
  %754 = atanh(%753) /* ty=Tensor[(3, 4, 4), float64] */;
  %755 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 4, 4), float64] */, dtype="int64") /* ty=Tensor[(3, 4, 4), int64] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="int64") /* ty=Tensor[(3, 4, 4), int64] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %759 = %746.6;
  %760 = @func_3273() /* ty=Tensor[(3, 13, 7), float64] */;
  %761 = %749.0;
  %762 = %752.0;
  %763 = add(%757, %758) /* ty=Tensor[(3, 4, 4), int64] */;
  (%759, %var_5135, %760, %761, meta[relay.Constant][56] /* ty=Tensor[(3840), int64] */, %762, meta[relay.Constant][57] /* ty=Tensor[(520), bool] */, %763)
}

def @func_760(%var_739: Tensor[(14, 7, 13), float32]) -> Tensor[(14, 7, 13), float64] {
  %764 = cast(%var_739, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %765 = sin(%764) /* ty=Tensor[(14, 7, 13), float32] */;
  %766 = cast(%var_739, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %767 = atanh(%766) /* ty=Tensor[(14, 7, 13), float32] */;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(14, 7, 13), float64] */;
  %769 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%765, dtype="float64") /* ty=Tensor[(14, 7, 13), float64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%770, %771) /* ty=Tensor[(14, 7, 13), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4067(%var_4065: Tensor[(16, 10, 4), float64], %var_4066: Tensor[(16, 10, 4), float64]) -> (Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) {
  %7 = fn (%var_4044: Tensor[(16, 10, 4), float64], %var_4045: Tensor[(16, 10, 4), float64]) -> (Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) {
    %0 = cast(%var_4045, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
    %1 = shape_of(%var_4044, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_4044, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %4 = cast(%var_4045, dtype="float64") /* ty=Tensor[(16, 10, 4), float64] */;
    %5 = power(%2, %3) /* ty=Tensor[(16, 10, 4), float64] */;
    %6 = sinh(%4) /* ty=Tensor[(16, 10, 4), float64] */;
    (%5, %6)
  };
  %7(%var_4065, %var_4066) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) */
}

def @func_5495(%var_5445: Tensor[(3, 7, 15), float32], %var_5454: Tensor[(320, 2), float64]) -> (Tensor[(16, 10, 4), float64], Tensor[(320, 2), float64], Tensor[(3, 7, 15), float32], Tensor[(3, 7, 15), int8], Tensor[(3, 7, 15), float64]) {
  %8 = cast(%var_5454, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %9 = cast(%var_5454, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %10 = reshape(%8, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float64] */;
  %11 = reshape(%9, newshape=[16, 10, 4]) /* ty=Tensor[(16, 10, 4), float64] */;
  %12 = @func_4064(%10, %11) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(16, 10, 4), float64]) */;
  %13 = @func_5375() /* ty=(Tensor[(768), float32], Tensor[(3, 7, 15), float64], Tensor[(36), float32], Tensor[(24, 2), float64], Tensor[(3, 13, 7), float32]) */;
  %14 = %13.1;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %16 = erf(%15) /* ty=Tensor[(3, 7, 15), float32] */;
  %17 = cast(%var_5445, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
  %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%16, dtype="bool") /* ty=Tensor[(3, 7, 15), bool] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %21 = greater_equal(%19, %20) /* ty=Tensor[(3, 7, 15), bool] */;
  %22 = cast(%21, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %23 = log10(%22) /* ty=Tensor[(3, 7, 15), float64] */;
  %24 = cast(%16, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="float32") /* ty=Tensor[(3, 7, 15), float32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %28 = cast(%14, dtype="int8") /* ty=Tensor[(3, 7, 15), int8] */;
  %29 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%23, dtype="int8") /* ty=Tensor[(3, 7, 15), int8] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %32 = cast(%16, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
  %33 = %12.0;
  %34 = floor_mod(%26, %27) /* ty=Tensor[(3, 7, 15), float32] */;
  %35 = subtract(%30, %31) /* ty=Tensor[(3, 7, 15), int8] */;
  %36 = acosh(%32) /* ty=Tensor[(3, 7, 15), float64] */;
  (%33, %var_5454, %34, %35, %36)
}

def @func_4879() -> Tensor[(10, 13, 4), float32] {
  %38 = fn () -> Tensor[(10, 13, 4), float32] {
    %37 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
    %37.0
  };
  %38() /* ty=Tensor[(10, 13, 4), float32] */
}

def @func_4310(%var_4309: int16) -> (Tensor[(560), float32], Tensor[(3, 13, 7), float32], int16, Tensor[(768), float32]) {
  %48 = fn (%var_4301: int16) -> (Tensor[(560), float32], Tensor[(3, 13, 7), float32], int16, Tensor[(768), float32]) {
    %39 = @func_3942() /* ty=(Tensor[(3, 13, 7), float32], Tensor[(560), float32], Tensor[(48), float64]) */;
    %40 = cast(%var_4301, dtype="int16") /* ty=int16 */;
    %41 = reshape(%40, newshape=[]) /* ty=int16 */;
    %42 = @func_2585(%41) /* ty=(Tensor[(8, 8, 3), int16], Tensor[(3, 13, 7), float32]) */;
    %43 = @func_4259() /* ty=Tensor[(768), float32] */;
    %44 = cast(%43, dtype="float32") /* ty=Tensor[(768), float32] */;
    %45 = %39.1;
    %46 = %42.1;
    %47 = acos(%44) /* ty=Tensor[(768), float32] */;
    (%45, %46, %var_4301, %47)
  };
  %48(%var_4309) /* ty=(Tensor[(560), float32], Tensor[(3, 13, 7), float32], int16, Tensor[(768), float32]) */
}

def @main(%var_5575: Tensor[(14, 15, 4), uint8], %var_5576: Tensor[(14, 15, 4), uint8]) -> Tensor[(14, 15, 4), uint8] {
  %49 = cast(%var_5576, dtype="uint8") /* ty=Tensor[(14, 15, 4), uint8] */;
  %50 = shape_of(%var_5575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%var_5575, dtype="uint8") /* ty=Tensor[(14, 15, 4), uint8] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  bitwise_or(%51, %52) /* ty=Tensor[(14, 15, 4), uint8] */
}

def @func_3520(%var_3518: Tensor[(15, 14, 14), uint64], %var_3519: Tensor[(48), float64]) -> (Tensor[(15, 14, 14), uint64], Tensor[(6, 8, 4), bool], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(520), int16]) {
  %76 = fn (%var_3493: Tensor[(15, 14, 14), uint64], %var_3504: Tensor[(48), float64]) -> (Tensor[(15, 14, 14), uint64], Tensor[(6, 8, 4), bool], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(520), int16]) {
    %53 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 14, 14), uint64] */, dtype="uint64") /* ty=Tensor[(15, 14, 14), uint64] */;
    %54 = shape_of(%var_3493, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%var_3493, dtype="uint64") /* ty=Tensor[(15, 14, 14), uint64] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %57 = cast(meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %58 = cast(meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %59 = cast(%var_3504, dtype="float64") /* ty=Tensor[(48), float64] */;
    %60 = reshape(%57, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %61 = reshape(%58, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %62 = reshape(%59, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %63 = @func_879(%60, %61, %62) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
    %64 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %65 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %66 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %67 = cast(meta[relay.Constant][2] /* ty=Tensor[(520), int16] */, dtype="int16") /* ty=Tensor[(520), int16] */;
    %68 = reshape(%67, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), int16] */;
    %69 = @func_2465(%68) /* ty=(Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), uint64]) */;
    %70 = bitwise_and(%55, %56) /* ty=Tensor[(15, 14, 14), uint64] */;
    %71 = %63.11;
    %72 = %64.0;
    %73 = %65.0;
    %74 = %66.0;
    %75 = %69.0;
    (%70, %71, meta[relay.Constant][1] /* ty=Tensor[(36), float32] */, %var_3504, %72, %73, %74, %75, meta[relay.Constant][2] /* ty=Tensor[(520), int16] */)
  };
  %76(%var_3518, %var_3519) /* ty=(Tensor[(15, 14, 14), uint64], Tensor[(6, 8, 4), bool], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(520), int16]) */
}

def @func_5028() -> (Tensor[(11, 4, 11), float32],) {
  @func_5026() /* ty=(Tensor[(11, 4, 11), float32],) */
}

def @func_4010(%var_3972: Tensor[(7, 9, 16), int32], %var_3973: Tensor[(7, 9, 16), int32]) -> (Tensor[(7, 9, 16), int32], Tensor[(560), float32], Tensor[(48), float64], Tensor[(7, 9, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(30), uint16], Tensor[(30), uint16]) {
  %77 = cast(%var_3973, dtype="int32") /* ty=Tensor[(7, 9, 16), int32] */;
  %78 = shape_of(%var_3972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_3972, dtype="int32") /* ty=Tensor[(7, 9, 16), int32] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %82 = reshape(%81, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %83 = @func_3358(%82) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(560), float32], Tensor[(48), float64]) */;
  %84 = cast(%var_3972, dtype="float64") /* ty=Tensor[(7, 9, 16), float64] */;
  %85 = atan(%84) /* ty=Tensor[(7, 9, 16), float64] */;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(7, 9, 16), float64] */;
  %87 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %88 = cast(meta[relay.Constant][4] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %89 = reshape(%88, newshape=[30]) /* ty=Tensor[(30), uint16] */;
  %90 = @func_3258(%89) /* ty=(Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(10, 13, 4), uint64]) */;
  %91 = minimum(%79, %80) /* ty=Tensor[(7, 9, 16), int32] */;
  %92 = %83.1;
  %93 = acosh(%86) /* ty=Tensor[(7, 9, 16), float64] */;
  %94 = %87.0;
  %95 = %90.1;
  (%91, %92, meta[relay.Constant][3] /* ty=Tensor[(48), float64] */, %93, %94, %95, meta[relay.Constant][4] /* ty=Tensor[(30), uint16] */)
}

def @func_5196(%var_5195: Tensor[(1008), int32]) -> (Tensor[(30), uint16], Tensor[(1008), int32], Tensor[(3, 13, 7), float64], Tensor[(16, 16, 15), bool], Tensor[(3840), int64], Tensor[(10, 13, 4), float64], Tensor[(520), bool], Tensor[(3, 4, 4), int64]) {
  %118 = fn (%var_5135: Tensor[(1008), int32]) -> (Tensor[(30), uint16], Tensor[(1008), int32], Tensor[(3, 13, 7), float64], Tensor[(16, 16, 15), bool], Tensor[(3840), int64], Tensor[(10, 13, 4), float64], Tensor[(520), bool], Tensor[(3, 4, 4), int64]) {
    %96 = cast(%var_5135, dtype="int32") /* ty=Tensor[(1008), int32] */;
    %97 = cast(%var_5135, dtype="int32") /* ty=Tensor[(1008), int32] */;
    %98 = reshape(%96, newshape=[7, 9, 16]) /* ty=Tensor[(7, 9, 16), int32] */;
    %99 = reshape(%97, newshape=[7, 9, 16]) /* ty=Tensor[(7, 9, 16), int32] */;
    %100 = @func_4010(%98, %99) /* ty=(Tensor[(7, 9, 16), int32], Tensor[(560), float32], Tensor[(48), float64], Tensor[(7, 9, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(30), uint16], Tensor[(30), uint16]) */;
    %101 = cast(meta[relay.Constant][5] /* ty=Tensor[(3840), int64] */, dtype="int64") /* ty=Tensor[(3840), int64] */;
    %102 = reshape(%101, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int64] */;
    %103 = @func_4483(%102) /* ty=(Tensor[(16, 16, 15), bool],) */;
    %104 = cast(meta[relay.Constant][6] /* ty=Tensor[(520), bool] */, dtype="bool") /* ty=Tensor[(520), bool] */;
    %105 = reshape(%104, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
    %106 = @func_2807(%105) /* ty=(Tensor[(10, 13, 4), float64],) */;
    %107 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 4, 4), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 4), float64] */;
    %108 = atanh(%107) /* ty=Tensor[(3, 4, 4), float64] */;
    %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 4, 4), float64] */, dtype="int64") /* ty=Tensor[(3, 4, 4), int64] */;
    %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%108, dtype="int64") /* ty=Tensor[(3, 4, 4), int64] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %113 = %100.6;
    %114 = @func_3273() /* ty=Tensor[(3, 13, 7), float64] */;
    %115 = %103.0;
    %116 = %106.0;
    %117 = add(%111, %112) /* ty=Tensor[(3, 4, 4), int64] */;
    (%113, %var_5135, %114, %115, meta[relay.Constant][5] /* ty=Tensor[(3840), int64] */, %116, meta[relay.Constant][6] /* ty=Tensor[(520), bool] */, %117)
  };
  %118(%var_5195) /* ty=(Tensor[(30), uint16], Tensor[(1008), int32], Tensor[(3, 13, 7), float64], Tensor[(16, 16, 15), bool], Tensor[(3840), int64], Tensor[(10, 13, 4), float64], Tensor[(520), bool], Tensor[(3, 4, 4), int64]) */
}

def @func_3187(%var_3186: Tensor[(48), float64]) -> (Tensor[(3, 13, 7), float64], Tensor[(2, 24), bool], Tensor[(315), float64], Tensor[(48), float64], Tensor[(768), float64], Tensor[(91, 14), float32]) {
  %133 = fn (%var_3168: Tensor[(48), float64]) -> (Tensor[(3, 13, 7), float64], Tensor[(2, 24), bool], Tensor[(315), float64], Tensor[(48), float64], Tensor[(768), float64], Tensor[(91, 14), float32]) {
    %119 = @func_3083() /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) */;
    %120 = cast(meta[relay.Constant][9] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %121 = cast(%var_3168, dtype="float64") /* ty=Tensor[(48), float64] */;
    %122 = cast(meta[relay.Constant][10] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
    %123 = cast(meta[relay.Constant][11] /* ty=Tensor[(91, 14), float32] */, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
    %124 = reshape(%120, newshape=[315]) /* ty=Tensor[(315), float64] */;
    %125 = reshape(%121, newshape=[2, 24]) /* ty=Tensor[(2, 24), float64] */;
    %126 = reshape(%122, newshape=[768]) /* ty=Tensor[(768), float64] */;
    %127 = reshape(%123, newshape=[1274]) /* ty=Tensor[(1274), float32] */;
    %128 = @func_2722(%124, %125, %126, %127) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(3, 13, 7), float32], Tensor[(273), float32], Tensor[(768), float64], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(2, 24), bool]) */;
    %129 = cast(meta[relay.Constant][11] /* ty=Tensor[(91, 14), float32] */, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
    %130 = %119.0;
    %131 = %128.8;
    %132 = erf(%129) /* ty=Tensor[(91, 14), float32] */;
    (%130, %131, meta[relay.Constant][9] /* ty=Tensor[(315), float64] */, %var_3168, meta[relay.Constant][10] /* ty=Tensor[(768), float64] */, %132)
  };
  %133(%var_3186) /* ty=(Tensor[(3, 13, 7), float64], Tensor[(2, 24), bool], Tensor[(315), float64], Tensor[(48), float64], Tensor[(768), float64], Tensor[(91, 14), float32]) */
}

def @func_3835(%var_3833: Tensor[(8, 13, 12), float64]) -> Tensor[(8, 13, 12), float64] {
  @func_3832(%var_3833) /* ty=Tensor[(8, 13, 12), float64] */
}

def @func_3970(%var_3968: Tensor[(182), float64]) -> (Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) {
  @func_3967(%var_3968) /* ty=(Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) */
}

def @func_391(%var_390: Tensor[(6, 8, 1), float64]) -> Tensor[(6, 8, 4), bool] {
  %136 = fn (%var_359: Tensor[(6, 8, 1), float64]) -> Tensor[(6, 8, 4), bool] {
    %134 = cast(%var_359, dtype="bool") /* ty=Tensor[(6, 8, 1), bool] */;
    %135 = cast(meta[relay.Constant][12] /* ty=Tensor[(6, 8, 4), float64] */, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
    less(%134, %135) /* ty=Tensor[(6, 8, 4), bool] */
  };
  %136(%var_390) /* ty=Tensor[(6, 8, 4), bool] */
}

def @func_4111() -> (Tensor[(10, 13, 4), int16],) {
  %137 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
  %138 = %137.0;
  (%138,)
}

def @func_4400(%var_4398: Tensor[(10, 13, 4), int16], %var_4399: Tensor[(3, 13, 7), float64]) -> (Tensor[(8, 12, 8), bool], Tensor[(10, 13, 4), float64], Tensor[(3, 13, 7), int16]) {
  %155 = fn (%var_4371: Tensor[(10, 13, 4), int16], %var_4385: Tensor[(3, 13, 7), float64]) -> (Tensor[(8, 12, 8), bool], Tensor[(10, 13, 4), float64], Tensor[(3, 13, 7), int16]) {
    %139 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
    %140 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
    %141 = %140.0;
    %142 = cast(%var_4371, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
    %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %144 = cast(%141, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
    %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %146 = @func_3083() /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) */;
    %147 = %146.0;
    %148 = cast(%var_4385, dtype="int16") /* ty=Tensor[(3, 13, 7), int16] */;
    %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(%147, dtype="int16") /* ty=Tensor[(3, 13, 7), int16] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %152 = %139.1;
    %153 = floor_divide(%144, %145) /* ty=Tensor[(10, 13, 4), float64] */;
    %154 = bitwise_or(%150, %151) /* ty=Tensor[(3, 13, 7), int16] */;
    (%152, %153, %154)
  };
  %155(%var_4398, %var_4399) /* ty=(Tensor[(8, 12, 8), bool], Tensor[(10, 13, 4), float64], Tensor[(3, 13, 7), int16]) */
}

def @func_2533(%var_2531: Tensor[(15, 14, 6), bool], %var_2532: Tensor[(15, 14, 6), bool]) -> (Tensor[(15, 14, 6), bool], Tensor[(10, 13, 4), bool]) {
  @func_2529(%var_2531, %var_2532) /* ty=(Tensor[(15, 14, 6), bool], Tensor[(10, 13, 4), bool]) */
}

def @func_3700(%var_3671: Tensor[(273), float32], %var_3672: Tensor[(315), float64]) -> (Tensor[(768), float32], Tensor[(48), float64], Tensor[(48), float64], Tensor[(273), float32], Tensor[(315), float64], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16]) {
  %156 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %157 = cast(meta[relay.Constant][13] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %158 = cast(%var_3671, dtype="float32") /* ty=Tensor[(273), float32] */;
  %159 = %156.2;
  %160 = cast(%159, dtype="float64") /* ty=Tensor[(768), float64] */;
  %161 = cast(%var_3672, dtype="float64") /* ty=Tensor[(315), float64] */;
  %162 = reshape(%157, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %163 = reshape(%158, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %164 = reshape(%160, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
  %165 = reshape(%161, newshape=[315]) /* ty=Tensor[(315), float64] */;
  %166 = @func_1960(%162, %163, %164, %165) /* ty=(Tensor[(48), float64], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(768), float64], Tensor[(3, 16, 16), bool], Tensor[(48), float64], Tensor[(315), float64], Tensor[(3, 13, 7), float64], Tensor[(48), float64], Tensor[(1680), float64], Tensor[(560), float32]) */;
  %167 = cast(meta[relay.Constant][14] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %168 = reshape(%167, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint16] */;
  %169 = %166.2;
  %170 = @func_726(%168) /* ty=Tensor[(5, 6, 11), uint16] */;
  (%159, %169, meta[relay.Constant][13] /* ty=Tensor[(48), float64] */, %var_3671, %var_3672, %170, meta[relay.Constant][14] /* ty=Tensor[(30), uint16] */)
}

def @func_5308(%var_5306: Tensor[(182), float64], %var_5307: Tensor[(3840), int64]) -> (Tensor[(10, 13, 4), float64], Tensor[(10, 13, 4), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(16, 16, 15), bool], Tensor[(3840), int64]) {
  %188 = fn (%var_5283: Tensor[(182), float64], %var_5291: Tensor[(3840), int64]) -> (Tensor[(10, 13, 4), float64], Tensor[(10, 13, 4), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(16, 16, 15), bool], Tensor[(3840), int64]) {
    %171 = @func_4878() /* ty=Tensor[(10, 13, 4), float32] */;
    %172 = cast(%171, dtype="int16") /* ty=Tensor[(10, 13, 4), int16] */;
    %173 = reshape(%172, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), int16] */;
    %174 = @func_2465(%173) /* ty=(Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), uint64]) */;
    %175 = %174.2;
    %176 = cast(%175, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
    %177 = cast(%171, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
    %178 = cast(%var_5283, dtype="float64") /* ty=Tensor[(182), float64] */;
    %179 = reshape(%178, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
    %180 = @func_1647(%179) /* ty=(Tensor[(1, 14, 13), float64],) */;
    %181 = cast(%var_5291, dtype="int64") /* ty=Tensor[(3840), int64] */;
    %182 = reshape(%181, newshape=[16, 16, 15]) /* ty=Tensor[(16, 16, 15), int64] */;
    %183 = @func_4483(%182) /* ty=(Tensor[(16, 16, 15), bool],) */;
    %184 = sin(%176) /* ty=Tensor[(10, 13, 4), float64] */;
    %185 = log(%177) /* ty=Tensor[(10, 13, 4), float32] */;
    %186 = %180.0;
    %187 = %183.0;
    (%184, %185, %186, %var_5283, %187, %var_5291)
  };
  %188(%var_5306, %var_5307) /* ty=(Tensor[(10, 13, 4), float64], Tensor[(10, 13, 4), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64], Tensor[(16, 16, 15), bool], Tensor[(3840), int64]) */
}

def @func_5544(%var_5542: Tensor[(8, 12), float32]) -> (Tensor[(8, 12), float32], Tensor[(768), float32], Tensor[(35, 9), float64]) {
  @func_5541(%var_5542) /* ty=(Tensor[(8, 12), float32], Tensor[(768), float32], Tensor[(35, 9), float64]) */
}

def @func_3358(%var_3356: Tensor[(48), float64]) -> (Tensor[(10, 13, 4), bool], Tensor[(560), float32], Tensor[(48), float64]) {
  %189 = cast(%var_3356, dtype="float64") /* ty=Tensor[(48), float64] */;
  %190 = reshape(%189, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %191 = @func_2348(%190) /* ty=(Tensor[(48), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32], Tensor[(3, 13, 7), bool]) */;
  %192 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %193 = %191.3;
  (%192, %193, %var_3356)
}

def @func_884(%var_881: Tensor[(3, 4, 3), float32], %var_882: Tensor[(3, 4, 3), float32], %var_883: Tensor[(48), float64]) -> (Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) {
  @func_879(%var_881, %var_882, %var_883) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */
}

def @func_622(%var_542: Tensor[(14, 8, 5), float32], %var_543: Tensor[(14, 8, 5), float32]) -> (Tensor[(48), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(6, 8, 4), uint8], Tensor[(3, 7, 15), float64], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), float32]) {
  %194 = cast(meta[relay.Constant][15] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %195 = cast(meta[relay.Constant][16] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %196 = reshape(%194, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %197 = reshape(%195, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %198 = @func_493(%196, %197) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %199 = cast(%var_543, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %200 = shape_of(%var_542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_542, dtype="float32") /* ty=Tensor[(14, 8, 5), float32] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %203 = floor_divide(%201, %202) /* ty=Tensor[(14, 8, 5), float32] */;
  %204 = cast(%203, dtype="bool") /* ty=Tensor[(14, 8, 5), bool] */;
  %205 = shape_of(%var_542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %206 = cast(%var_542, dtype="bool") /* ty=Tensor[(14, 8, 5), bool] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %208 = %198.2;
  %209 = cast(%208, dtype="float64") /* ty=Tensor[(48), float64] */;
  %210 = reshape(%209, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %211 = @func_389(%210) /* ty=Tensor[(6, 8, 4), bool] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(6, 8, 4), float32] */;
  %213 = sigmoid(%212) /* ty=Tensor[(6, 8, 4), float32] */;
  %214 = cast(%213, dtype="uint8") /* ty=Tensor[(6, 8, 4), uint8] */;
  %215 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%211, dtype="uint8") /* ty=Tensor[(6, 8, 4), uint8] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %218 = cast(meta[relay.Constant][15] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %219 = cast(%208, dtype="float64") /* ty=Tensor[(48), float64] */;
  %220 = reshape(%218, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %221 = reshape(%219, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %222 = @func_493(%220, %221) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %223 = cast(meta[relay.Constant][17] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %224 = reshape(%223, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
  %225 = @func_528(%224) /* ty=(Tensor[(3, 16, 16), float64],) */;
  %226 = cast(%213, dtype="float32") /* ty=Tensor[(6, 8, 4), float32] */;
  %227 = sin(%226) /* ty=Tensor[(6, 8, 4), float32] */;
  %228 = cast(%227, dtype="float32") /* ty=Tensor[(6, 8, 4), float32] */;
  %229 = less_equal(%206, %207) /* ty=Tensor[(14, 8, 5), bool] */;
  %230 = logical_xor(%216, %217) /* ty=Tensor[(6, 8, 4), uint8] */;
  %231 = %222.0;
  %232 = %225.0;
  %233 = asinh(%228) /* ty=Tensor[(6, 8, 4), float32] */;
  (%208, meta[relay.Constant][15] /* ty=Tensor[(315), float64] */, meta[relay.Constant][16] /* ty=Tensor[(48), float64] */, %229, %230, %231, %232, meta[relay.Constant][17] /* ty=Tensor[(768), float64] */, %233)
}

def @func_5541(%var_5529: Tensor[(8, 12), float32]) -> (Tensor[(8, 12), float32], Tensor[(768), float32], Tensor[(35, 9), float64]) {
  %234 = cast(%var_5529, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %235 = cast(meta[relay.Constant][18] /* ty=Tensor[(35, 9), float64] */, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
  %236 = reshape(%235, newshape=[315]) /* ty=Tensor[(315), float64] */;
  %237 = @func_4533(%236) /* ty=(Tensor[(768), float32], Tensor[(10, 13, 4), float32], Tensor[(48), float64], Tensor[(4, 12), float64], Tensor[(315), bool]) */;
  %238 = rsqrt(%234) /* ty=Tensor[(8, 12), float32] */;
  %239 = %237.0;
  (%238, %239, meta[relay.Constant][18] /* ty=Tensor[(35, 9), float64] */)
}

def @func_1647(%var_1642: Tensor[(1, 14, 13), float64]) -> (Tensor[(1, 14, 13), float64],) {
  %240 = cast(%var_1642, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %241 = asinh(%240) /* ty=Tensor[(1, 14, 13), float64] */;
  (%241,)
}

def @func_3704(%var_3702: Tensor[(273), float32], %var_3703: Tensor[(315), float64]) -> (Tensor[(768), float32], Tensor[(48), float64], Tensor[(48), float64], Tensor[(273), float32], Tensor[(315), float64], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16]) {
  @func_3700(%var_3702, %var_3703) /* ty=(Tensor[(768), float32], Tensor[(48), float64], Tensor[(48), float64], Tensor[(273), float32], Tensor[(315), float64], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16]) */
}

def @func_2467(%var_2466: Tensor[(10, 13, 4), int16]) -> (Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), uint64]) {
  %253 = fn (%var_2452: Tensor[(10, 13, 4), int16]) -> (Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), uint64]) {
    %242 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %243 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
    %244 = %243.0;
    %245 = cast(%244, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
    %246 = cast(%var_2452, dtype="uint64") /* ty=Tensor[(10, 13, 4), uint64] */;
    %247 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
    %248 = cast(%244, dtype="uint64") /* ty=Tensor[(10, 13, 4), uint64] */;
    %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %250 = %242.0;
    %251 = rsqrt(%245) /* ty=Tensor[(10, 13, 4), float32] */;
    %252 = logical_xor(%248, %249) /* ty=Tensor[(10, 13, 4), uint64] */;
    (%250, %251, %252)
  };
  %253(%var_2466) /* ty=(Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), uint64]) */
}

def @func_2728(%var_2724: Tensor[(315), float64], %var_2725: Tensor[(2, 24), float64], %var_2726: Tensor[(768), float64], %var_2727: Tensor[(1274), float32]) -> (Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(3, 13, 7), float32], Tensor[(273), float32], Tensor[(768), float64], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(2, 24), bool]) {
  @func_2722(%var_2724, %var_2725, %var_2726, %var_2727) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(3, 13, 7), float32], Tensor[(273), float32], Tensor[(768), float64], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(2, 24), bool]) */
}

def @func_763(%var_761: Tensor[(14, 7, 13), float32]) -> Tensor[(14, 7, 13), float64] {
  @func_760(%var_761) /* ty=Tensor[(14, 7, 13), float64] */
}

def @func_4483(%var_4462: Tensor[(16, 16, 15), int64]) -> (Tensor[(16, 16, 15), bool],) {
  %254 = cast(%var_4462, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %255 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(16, 16, 15), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %256 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 16, 15), int64] */, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %257 = dyn.reshape(%254, %255, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %258 = not_equal(%256, %257) /* ty=Tensor[(16, 16, 15), bool] */;
  %259 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 16, 15), int64] */, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="bool") /* ty=Tensor[(16, 16, 15), bool] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %263 = less(%261, %262) /* ty=Tensor[(16, 16, 15), bool] */;
  (%263,)
}

def @func_3944() -> (Tensor[(3, 13, 7), float32], Tensor[(560), float32], Tensor[(48), float64]) {
  @func_3942() /* ty=(Tensor[(3, 13, 7), float32], Tensor[(560), float32], Tensor[(48), float64]) */
}

def @func_1650(%var_1648: Tensor[(1, 14, 13), float64]) -> (Tensor[(1, 14, 13), float64],) {
  @func_1647(%var_1648) /* ty=(Tensor[(1, 14, 13), float64],) */
}

def @func_4721() -> (Tensor[(560), float32],) {
  %264 = @func_3942() /* ty=(Tensor[(3, 13, 7), float32], Tensor[(560), float32], Tensor[(48), float64]) */;
  %265 = %264.1;
  (%265,)
}

def @func_2809(%var_2808: Tensor[(10, 13, 4), bool]) -> (Tensor[(10, 13, 4), float64],) {
  %272 = fn (%var_2802: Tensor[(10, 13, 4), bool]) -> (Tensor[(10, 13, 4), float64],) {
    %266 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
    %267 = cast(%var_2802, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
    %268 = shape_of(%266, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(%266, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %271 = floor_mod(%269, %270) /* ty=Tensor[(10, 13, 4), float64] */;
    (%271,)
  };
  %272(%var_2808) /* ty=(Tensor[(10, 13, 4), float64],) */
}

def @func_3611() -> (Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) {
  %273 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
  %274 = cast(meta[relay.Constant][20] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %275 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 12), float32] */, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %276 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 4), float64] */, dtype="float64") /* ty=Tensor[(12, 4), float64] */;
  %277 = reshape(%274, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
  %278 = reshape(%275, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %279 = reshape(%276, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %280 = @func_1389(%277, %278, %279) /* ty=(Tensor[(8, 12, 8), bool], Tensor[(14, 7, 13), float64], Tensor[(36), float32], Tensor[(48), float64]) */;
  %281 = %273.0;
  %282 = %280.0;
  (%281, %282, meta[relay.Constant][20] /* ty=Tensor[(768), float32] */, meta[relay.Constant][21] /* ty=Tensor[(3, 12), float32] */, meta[relay.Constant][22] /* ty=Tensor[(12, 4), float64] */)
}

def @func_3809() -> (Tensor[(11, 4, 11), float32],) {
  %285 = fn () -> (Tensor[(11, 4, 11), float32],) {
    %283 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 11), float32] */;
    %284 = log(%283) /* ty=Tensor[(11, 4, 11), float32] */;
    (%284,)
  };
  %285() /* ty=(Tensor[(11, 4, 11), float32],) */
}

def @func_4616(%var_4615: Tensor[(1260), bool]) -> (Tensor[(4, 12), float64], Tensor[(48), float64], Tensor[(26, 7), float64], Tensor[(3, 980), uint64], Tensor[(10, 13, 4), uint32], Tensor[(10, 13, 4), float64], Tensor[(15, 14, 6), bool], Tensor[(1260), bool]) {
  %317 = fn (%var_4611: Tensor[(1260), bool]) -> (Tensor[(4, 12), float64], Tensor[(48), float64], Tensor[(26, 7), float64], Tensor[(3, 980), uint64], Tensor[(10, 13, 4), uint32], Tensor[(10, 13, 4), float64], Tensor[(15, 14, 6), bool], Tensor[(1260), bool]) {
    %286 = @func_4111() /* ty=(Tensor[(10, 13, 4), int16],) */;
    %287 = %286.0;
    %288 = cast(%287, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
    %289 = cast(meta[relay.Constant][24] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %290 = cast(meta[relay.Constant][25] /* ty=Tensor[(26, 7), float64] */, dtype="float64") /* ty=Tensor[(26, 7), float64] */;
    %291 = reshape(%288, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
    %292 = reshape(%289, newshape=[4, 12]) /* ty=Tensor[(4, 12), float64] */;
    %293 = reshape(%290, newshape=[182]) /* ty=Tensor[(182), float64] */;
    %294 = @func_3045(%291, %292, %293) /* ty=(Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(4, 12), float64], Tensor[(10, 13, 4), float32], Tensor[(182), bool], Tensor[(?, 14, 13), float64]) */;
    %295 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 980), uint64] */, dtype="uint64") /* ty=Tensor[(3, 980), uint64] */;
    %296 = %294.5;
    %297 = cast(%296, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
    %298 = reshape(%295, newshape=[15, 14, 14]) /* ty=Tensor[(15, 14, 14), uint64] */;
    %299 = reshape(%297, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %300 = @func_3517(%298, %299) /* ty=(Tensor[(15, 14, 14), uint64], Tensor[(6, 8, 4), bool], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(520), int16]) */;
    %301 = %300.8;
    %302 = cast(%301, dtype="uint32") /* ty=Tensor[(520), uint32] */;
    %303 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%287, dtype="uint32") /* ty=Tensor[(10, 13, 4), uint32] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %306 = bitwise_xor(%304, %305) /* ty=Tensor[(10, 13, 4), uint32] */;
    %307 = cast(%306, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
    %308 = reshape(%307, newshape=[10, 13, 4]) /* ty=Tensor[(10, 13, 4), bool] */;
    %309 = @func_2807(%308) /* ty=(Tensor[(10, 13, 4), float64],) */;
    %310 = cast(%var_4611, dtype="bool") /* ty=Tensor[(1260), bool] */;
    %311 = cast(%var_4611, dtype="bool") /* ty=Tensor[(1260), bool] */;
    %312 = reshape(%310, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), bool] */;
    %313 = reshape(%311, newshape=[15, 14, 6]) /* ty=Tensor[(15, 14, 6), bool] */;
    %314 = @func_2529(%312, %313) /* ty=(Tensor[(15, 14, 6), bool], Tensor[(10, 13, 4), bool]) */;
    %315 = %309.0;
    %316 = %314.0;
    (%296, meta[relay.Constant][24] /* ty=Tensor[(48), float64] */, meta[relay.Constant][25] /* ty=Tensor[(26, 7), float64] */, meta[relay.Constant][26] /* ty=Tensor[(3, 980), uint64] */, %306, %315, %316, %var_4611)
  };
  %317(%var_4615) /* ty=(Tensor[(4, 12), float64], Tensor[(48), float64], Tensor[(26, 7), float64], Tensor[(3, 980), uint64], Tensor[(10, 13, 4), uint32], Tensor[(10, 13, 4), float64], Tensor[(15, 14, 6), bool], Tensor[(1260), bool]) */
}

def @func_3642() -> Tensor[(3, 13, 7), float32] {
  @func_1899() /* ty=Tensor[(3, 13, 7), float32] */
}

def @func_2281() -> (Tensor[(3, 13, 7), float32],) {
  %318 = @func_2199() /* ty=Tensor[(3, 13, 7), float32] */;
  %319 = cast(%318, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %320 = sin(%319) /* ty=Tensor[(3, 13, 7), float32] */;
  (%320,)
}

def @func_496(%var_494: Tensor[(3, 7, 15), float64], %var_495: Tensor[(48), float64]) -> (Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) {
  %328 = fn (%var_472: Tensor[(3, 7, 15), float64], %var_491: Tensor[(48), float64]) -> (Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) {
    %321 = cast(%var_472, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
    %322 = sigmoid(%321) /* ty=Tensor[(3, 7, 15), float64] */;
    %323 = cast(%322, dtype="float64") /* ty=Tensor[(3, 7, 15), float64] */;
    %324 = cast(%var_491, dtype="float64") /* ty=Tensor[(48), float64] */;
    %325 = reshape(%324, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
    %326 = cosh(%323) /* ty=Tensor[(3, 7, 15), float64] */;
    %327 = @func_389(%325) /* ty=Tensor[(6, 8, 4), bool] */;
    (%326, %327, %var_491)
  };
  %328(%var_494, %var_495) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */
}

def @func_5026() -> (Tensor[(11, 4, 11), float32],) {
  %329 = @func_3808() /* ty=(Tensor[(11, 4, 11), float32],) */;
  %330 = %329.0;
  (%330,)
}

def @func_2007(%var_2006: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), int64], Tensor[(3, 13, 7), float32]) {
  %340 = fn (%var_1980: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), int64], Tensor[(3, 13, 7), float32]) {
    %331 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %332 = %331.0;
    %333 = cast(%var_1980, dtype="int64") /* ty=Tensor[(3, 13, 7), int64] */;
    %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%332, dtype="int64") /* ty=Tensor[(3, 13, 7), int64] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %337 = cast(%var_1980, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
    %338 = maximum(%335, %336) /* ty=Tensor[(3, 13, 7), int64] */;
    %339 = asinh(%337) /* ty=Tensor[(3, 13, 7), float32] */;
    (%338, %339)
  };
  %340(%var_2006) /* ty=(Tensor[(3, 13, 7), int64], Tensor[(3, 13, 7), float32]) */
}

def @func_4931(%var_4914: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), uint64], Tensor[(3, 13, 7), uint64]) {
  %341 = @func_3642() /* ty=Tensor[(3, 13, 7), float32] */;
  %342 = cast(%var_4914, dtype="uint64") /* ty=Tensor[(3, 13, 7), uint64] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="uint64") /* ty=Tensor[(3, 13, 7), uint64] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %346 = cast(%var_4914, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %347 = cos(%346) /* ty=Tensor[(3, 13, 7), float64] */;
  %348 = cast(%var_4914, dtype="uint64") /* ty=Tensor[(3, 13, 7), uint64] */;
  %349 = shape_of(%347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(%347, dtype="uint64") /* ty=Tensor[(3, 13, 7), uint64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %352 = subtract(%344, %345) /* ty=Tensor[(3, 13, 7), uint64] */;
  %353 = minimum(%350, %351) /* ty=Tensor[(3, 13, 7), uint64] */;
  (%352, %353)
}

def @func_1393(%var_1390: Tensor[(8, 12, 8), float32], %var_1391: Tensor[(36), float32], %var_1392: Tensor[(48), float64]) -> (Tensor[(8, 12, 8), bool], Tensor[(14, 7, 13), float64], Tensor[(36), float32], Tensor[(48), float64]) {
  %367 = fn (%var_1378: Tensor[(8, 12, 8), float32], %var_1386: Tensor[(36), float32], %var_1387: Tensor[(48), float64]) -> (Tensor[(8, 12, 8), bool], Tensor[(14, 7, 13), float64], Tensor[(36), float32], Tensor[(48), float64]) {
    %354 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(8, 12, 8), bool] */;
    %355 = shape_of(%var_1378, dtype="int32") /* ty=Tensor[(3), int32] */;
    %356 = cast(%var_1378, dtype="bool") /* ty=Tensor[(8, 12, 8), bool] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %358 = cast(%var_1386, dtype="float32") /* ty=Tensor[(36), float32] */;
    %359 = cast(%var_1386, dtype="float32") /* ty=Tensor[(36), float32] */;
    %360 = cast(%var_1387, dtype="float64") /* ty=Tensor[(48), float64] */;
    %361 = reshape(%358, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %362 = reshape(%359, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %363 = reshape(%360, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %364 = @func_879(%361, %362, %363) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
    %365 = less(%356, %357) /* ty=Tensor[(8, 12, 8), bool] */;
    %366 = %364.3;
    (%365, %366, %var_1386, %var_1387)
  };
  %367(%var_1390, %var_1391, %var_1392) /* ty=(Tensor[(8, 12, 8), bool], Tensor[(14, 7, 13), float64], Tensor[(36), float32], Tensor[(48), float64]) */
}

def @func_879(%var_827: Tensor[(3, 4, 3), float32], %var_828: Tensor[(3, 4, 3), float32], %var_862: Tensor[(48), float64]) -> (Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) {
  %368 = cast(%var_828, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %369 = shape_of(%var_827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_827, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %372 = not_equal(%370, %371) /* ty=Tensor[(3, 4, 3), bool] */;
  %373 = cast(%var_828, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="bool") /* ty=Tensor[(3, 4, 3), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = cast(meta[relay.Constant][28] /* ty=Tensor[(30), uint16] */, dtype="uint16") /* ty=Tensor[(30), uint16] */;
  %378 = reshape(%377, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint16] */;
  %379 = cast(meta[relay.Constant][29] /* ty=Tensor[(1274), float32] */, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %380 = reshape(%379, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
  %381 = cast(meta[relay.Constant][30] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %382 = cast(%var_862, dtype="float64") /* ty=Tensor[(48), float64] */;
  %383 = reshape(%381, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %384 = reshape(%382, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %385 = @func_493(%383, %384) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %386 = cast(%var_828, dtype="uint16") /* ty=Tensor[(3, 4, 3), uint16] */;
  %387 = shape_of(%var_827, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%var_827, dtype="uint16") /* ty=Tensor[(3, 4, 3), uint16] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %390 = cast(meta[relay.Constant][31] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %391 = reshape(%390, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
  %392 = @func_528(%391) /* ty=(Tensor[(3, 16, 16), float64],) */;
  %393 = cast(%var_862, dtype="float64") /* ty=Tensor[(48), float64] */;
  %394 = reshape(%393, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
  %395 = greater(%375, %376) /* ty=Tensor[(3, 4, 3), bool] */;
  %396 = @func_726(%378) /* ty=Tensor[(5, 6, 11), uint16] */;
  %397 = @func_760(%380) /* ty=Tensor[(14, 7, 13), float64] */;
  %398 = %385.0;
  %399 = multiply(%388, %389) /* ty=Tensor[(3, 4, 3), uint16] */;
  %400 = %392.0;
  %401 = @func_389(%394) /* ty=Tensor[(6, 8, 4), bool] */;
  (%395, %396, meta[relay.Constant][28] /* ty=Tensor[(30), uint16] */, %397, meta[relay.Constant][29] /* ty=Tensor[(1274), float32] */, %398, meta[relay.Constant][30] /* ty=Tensor[(315), float64] */, %var_862, %399, %400, meta[relay.Constant][31] /* ty=Tensor[(768), float64] */, %401)
}

def @func_3712() -> (Tensor[(768), float32],) {
  %402 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
  %403 = %402.2;
  (%403,)
}

def @func_2163() -> Tensor[(10, 13, 4), bool] {
  @func_2161() /* ty=Tensor[(10, 13, 4), bool] */
}

def @func_530(%var_529: Tensor[(3, 16, 16), float64]) -> (Tensor[(3, 16, 16), float64],) {
  %409 = fn (%var_520: Tensor[(3, 16, 16), float64]) -> (Tensor[(3, 16, 16), float64],) {
    %404 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 16, 16), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
    %405 = shape_of(%var_520, dtype="int32") /* ty=Tensor[(3), int32] */;
    %406 = cast(%var_520, dtype="float64") /* ty=Tensor[(3, 16, 16), float64] */;
    %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %408 = power(%406, %407) /* ty=Tensor[(3, 16, 16), float64] */;
    (%408,)
  };
  %409(%var_529) /* ty=(Tensor[(3, 16, 16), float64],) */
}

def @func_3361(%var_3359: Tensor[(48), float64]) -> (Tensor[(10, 13, 4), bool], Tensor[(560), float32], Tensor[(48), float64]) {
  @func_3358(%var_3359) /* ty=(Tensor[(10, 13, 4), bool], Tensor[(560), float32], Tensor[(48), float64]) */
}

def @func_4723() -> (Tensor[(560), float32],) {
  @func_4721() /* ty=(Tensor[(560), float32],) */
}

def @func_2759() -> (Tensor[(10, 13, 4), float32],) {
  %413 = fn () -> (Tensor[(10, 13, 4), float32],) {
    %410 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
    %411 = cast(%410, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
    %412 = sinh(%411) /* ty=Tensor[(10, 13, 4), float32] */;
    (%412,)
  };
  %413() /* ty=(Tensor[(10, 13, 4), float32],) */
}

def @func_3644() -> Tensor[(3, 13, 7), float32] {
  @func_3642() /* ty=Tensor[(3, 13, 7), float32] */
}

def @func_4807() -> (Tensor[(10, 13, 4), float64],) {
  %414 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
  %415 = %414.0;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(10, 13, 4), float64] */;
  %417 = sqrt(%416) /* ty=Tensor[(10, 13, 4), float64] */;
  (%417,)
}

def @func_3777(%var_3775: Tensor[(48), float64], %var_3776: Tensor[(560), float32]) -> (Tensor[(10, 13, 4), float32], Tensor[(8, 70), float32], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32]) {
  %428 = fn (%var_3771: Tensor[(48), float64], %var_3772: Tensor[(560), float32]) -> (Tensor[(10, 13, 4), float32], Tensor[(8, 70), float32], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32]) {
    %418 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
    %419 = cast(meta[relay.Constant][33] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %420 = cast(%var_3771, dtype="float64") /* ty=Tensor[(48), float64] */;
    %421 = cast(%var_3772, dtype="float32") /* ty=Tensor[(560), float32] */;
    %422 = reshape(%419, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float64] */;
    %423 = reshape(%420, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %424 = reshape(%421, newshape=[8, 70]) /* ty=Tensor[(8, 70), float32] */;
    %425 = @func_962(%422, %423, %424) /* ty=(Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) */;
    %426 = %418.0;
    %427 = %425.3;
    (%426, %427, meta[relay.Constant][33] /* ty=Tensor[(1680), float64] */, %var_3771, %var_3772)
  };
  %428(%var_3775, %var_3776) /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 70), float32], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32]) */
}

def @func_1899() -> Tensor[(3, 13, 7), float32] {
  %429 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %430 = %429.0;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %432 = asin(%431) /* ty=Tensor[(3, 13, 7), float64] */;
  %433 = cast(%430, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%435, %436) /* ty=Tensor[(3, 13, 7), float32] */
}

def @func_4137() -> (Tensor[(3, 12), float32],) {
  @func_4135() /* ty=(Tensor[(3, 12), float32],) */
}

def @func_3083() -> (Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) {
  %437 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %438 = %437.0;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
  %440 = tan(%439) /* ty=Tensor[(3, 13, 7), float64] */;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %442 = reshape(%441, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %443 = @func_2005(%442) /* ty=(Tensor[(3, 13, 7), int64], Tensor[(3, 13, 7), float32]) */;
  %444 = %443.1;
  (%440, %444)
}

def @func_626(%var_624: Tensor[(14, 8, 5), float32], %var_625: Tensor[(14, 8, 5), float32]) -> (Tensor[(48), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(6, 8, 4), uint8], Tensor[(3, 7, 15), float64], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), float32]) {
  @func_622(%var_624, %var_625) /* ty=(Tensor[(48), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(6, 8, 4), uint8], Tensor[(3, 7, 15), float64], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), float32]) */
}

def @func_4992(%var_4990: Tensor[(48), float64], %var_4991: Tensor[(280, 2), float32]) -> (Tensor[(1, 14, 13), float64], Tensor[(10, 13, 4), float32], Tensor[(105, 3), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(280, 2), float32]) {
  %457 = fn (%var_4981: Tensor[(48), float64], %var_4982: Tensor[(280, 2), float32]) -> (Tensor[(1, 14, 13), float64], Tensor[(10, 13, 4), float32], Tensor[(105, 3), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(280, 2), float32]) {
    %445 = @func_3226() /* ty=(Tensor[(3, 13, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) */;
    %446 = cast(meta[relay.Constant][34] /* ty=Tensor[(105, 3), float64] */, dtype="float64") /* ty=Tensor[(105, 3), float64] */;
    %447 = reshape(%446, newshape=[315]) /* ty=Tensor[(315), float64] */;
    %448 = @func_4533(%447) /* ty=(Tensor[(768), float32], Tensor[(10, 13, 4), float32], Tensor[(48), float64], Tensor[(4, 12), float64], Tensor[(315), bool]) */;
    %449 = cast(%var_4981, dtype="float64") /* ty=Tensor[(48), float64] */;
    %450 = cast(%var_4982, dtype="float32") /* ty=Tensor[(280, 2), float32] */;
    %451 = reshape(%449, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %452 = reshape(%450, newshape=[560]) /* ty=Tensor[(560), float32] */;
    %453 = @func_3774(%451, %452) /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 70), float32], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32]) */;
    %454 = %445.1;
    %455 = %448.1;
    %456 = %453.2;
    (%454, %455, meta[relay.Constant][34] /* ty=Tensor[(105, 3), float64] */, %456, %var_4981, %var_4982)
  };
  %457(%var_4990, %var_4991) /* ty=(Tensor[(1, 14, 13), float64], Tensor[(10, 13, 4), float32], Tensor[(105, 3), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(280, 2), float32]) */
}

def @func_4261() -> Tensor[(768), float32] {
  @func_4259() /* ty=Tensor[(768), float32] */
}

def @func_2283() -> (Tensor[(3, 13, 7), float32],) {
  @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */
}

def @func_5107() -> (Tensor[(10, 13, 4), float32], Tensor[(3, 13, 7), float32], Tensor[(11, 4, 11), float32], Tensor[(12, 4), float64]) {
  %465 = fn () -> (Tensor[(10, 13, 4), float32], Tensor[(3, 13, 7), float32], Tensor[(11, 4, 11), float32], Tensor[(12, 4), float64]) {
    %458 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %459 = @func_3808() /* ty=(Tensor[(11, 4, 11), float32],) */;
    %460 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
    %461 = @func_4878() /* ty=Tensor[(10, 13, 4), float32] */;
    %462 = %458.0;
    %463 = %459.0;
    %464 = %460.4;
    (%461, %462, %463, %464)
  };
  %465() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(3, 13, 7), float32], Tensor[(11, 4, 11), float32], Tensor[(12, 4), float64]) */
}

def @func_4934(%var_4932: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), uint64], Tensor[(3, 13, 7), uint64]) {
  @func_4931(%var_4932) /* ty=(Tensor[(3, 13, 7), uint64], Tensor[(3, 13, 7), uint64]) */
}

def @func_966(%var_963: Tensor[(10, 14, 12), float64], %var_964: Tensor[(48), float64], %var_965: Tensor[(8, 70), float32]) -> (Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) {
  %491 = fn (%var_923: Tensor[(10, 14, 12), float64], %var_932: Tensor[(48), float64], %var_945: Tensor[(8, 70), float32]) -> (Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) {
    %466 = cast(%var_932, dtype="float64") /* ty=Tensor[(48), float64] */;
    %467 = reshape(%466, newshape=[6, 8, 1]) /* ty=Tensor[(6, 8, 1), float64] */;
    %468 = cast(%var_945, dtype="float32") /* ty=Tensor[(8, 70), float32] */;
    %469 = cast(%var_945, dtype="float32") /* ty=Tensor[(8, 70), float32] */;
    %470 = reshape(%468, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), float32] */;
    %471 = reshape(%469, newshape=[14, 8, 5]) /* ty=Tensor[(14, 8, 5), float32] */;
    %472 = @func_622(%470, %471) /* ty=(Tensor[(48), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(6, 8, 4), uint8], Tensor[(3, 7, 15), float64], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), float32]) */;
    %473 = cast(%var_923, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
    %474 = sqrt(%473) /* ty=Tensor[(10, 14, 12), float64] */;
    %475 = cast(%474, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
    %476 = exp(%475) /* ty=Tensor[(10, 14, 12), float32] */;
    %477 = cast(%476, dtype="float64") /* ty=Tensor[(10, 14, 12), float64] */;
    %478 = atan(%477) /* ty=Tensor[(10, 14, 12), float64] */;
    %479 = cast(%474, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
    %480 = shape_of(%var_923, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%var_923, dtype="float32") /* ty=Tensor[(10, 14, 12), float32] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %483 = power(%481, %482) /* ty=Tensor[(10, 14, 12), float32] */;
    %484 = cast(%483, dtype="int16") /* ty=Tensor[(10, 14, 12), int16] */;
    %485 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %486 = cast(%478, dtype="int16") /* ty=Tensor[(10, 14, 12), int16] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %488 = @func_389(%467) /* ty=Tensor[(6, 8, 4), bool] */;
    %489 = %472.3;
    %490 = logical_xor(%486, %487) /* ty=Tensor[(10, 14, 12), int16] */;
    (%488, %var_932, %489, %var_945, %490)
  };
  %491(%var_963, %var_964, %var_965) /* ty=(Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) */
}

def @func_5499(%var_5497: Tensor[(3, 7, 15), float32], %var_5498: Tensor[(320, 2), float64]) -> (Tensor[(16, 10, 4), float64], Tensor[(320, 2), float64], Tensor[(3, 7, 15), float32], Tensor[(3, 7, 15), int8], Tensor[(3, 7, 15), float64]) {
  @func_5495(%var_5497, %var_5498) /* ty=(Tensor[(16, 10, 4), float64], Tensor[(320, 2), float64], Tensor[(3, 7, 15), float32], Tensor[(3, 7, 15), int8], Tensor[(3, 7, 15), float64]) */
}

def @func_2588(%var_2586: int16) -> (Tensor[(8, 8, 3), int16], Tensor[(3, 13, 7), float32]) {
  @func_2585(%var_2586) /* ty=(Tensor[(8, 8, 3), int16], Tensor[(3, 13, 7), float32]) */
}

def @func_5375() -> (Tensor[(768), float32], Tensor[(3, 7, 15), float64], Tensor[(36), float32], Tensor[(24, 2), float64], Tensor[(3, 13, 7), float32]) {
  %492 = cast(meta[relay.Constant][35] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %493 = cast(meta[relay.Constant][35] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %494 = cast(meta[relay.Constant][36] /* ty=Tensor[(24, 2), float64] */, dtype="float64") /* ty=Tensor[(24, 2), float64] */;
  %495 = reshape(%492, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %496 = reshape(%493, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
  %497 = reshape(%494, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %498 = @func_879(%495, %496, %497) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
  %499 = @func_4259() /* ty=Tensor[(768), float32] */;
  %500 = %498.5;
  %501 = @func_2199() /* ty=Tensor[(3, 13, 7), float32] */;
  (%499, %500, meta[relay.Constant][35] /* ty=Tensor[(36), float32] */, meta[relay.Constant][36] /* ty=Tensor[(24, 2), float64] */, %501)
}

def @func_4535(%var_4534: Tensor[(315), float64]) -> (Tensor[(768), float32], Tensor[(10, 13, 4), float32], Tensor[(48), float64], Tensor[(4, 12), float64], Tensor[(315), bool]) {
  %516 = fn (%var_4528: Tensor[(315), float64]) -> (Tensor[(768), float32], Tensor[(10, 13, 4), float32], Tensor[(48), float64], Tensor[(4, 12), float64], Tensor[(315), bool]) {
    %502 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
    %503 = cast(meta[relay.Constant][37] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
    %504 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
    %505 = reshape(%503, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
    %506 = reshape(%504, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %507 = @func_493(%505, %506) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
    %508 = cast(%var_4528, dtype="bool") /* ty=Tensor[(315), bool] */;
    %509 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(315), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %510 = cast(meta[relay.Constant][37] /* ty=Tensor[(315), float64] */, dtype="bool") /* ty=Tensor[(315), bool] */;
    %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?), bool] */;
    %512 = @func_4259() /* ty=Tensor[(768), float32] */;
    %513 = %502.0;
    %514 = %507.2;
    %515 = less_equal(%510, %511) /* ty=Tensor[(315), bool] */;
    (%512, %513, %514, meta[relay.Constant][38] /* ty=Tensor[(4, 12), float64] */, %515)
  };
  %516(%var_4534) /* ty=(Tensor[(768), float32], Tensor[(10, 13, 4), float32], Tensor[(48), float64], Tensor[(4, 12), float64], Tensor[(315), bool]) */
}

def @func_4809() -> (Tensor[(10, 13, 4), float64],) {
  @func_4807() /* ty=(Tensor[(10, 13, 4), float64],) */
}

def @func_726(%var_721: Tensor[(5, 6, 1), uint16]) -> Tensor[(5, 6, 11), uint16] {
  %517 = cast(%var_721, dtype="uint16") /* ty=Tensor[(5, 6, 1), uint16] */;
  %518 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 6, 11), uint16] */, dtype="uint16") /* ty=Tensor[(5, 6, 11), uint16] */;
  multiply(%517, %518) /* ty=Tensor[(5, 6, 11), uint16] */
}

def @func_2351(%var_2349: Tensor[(48), float64]) -> (Tensor[(48), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32], Tensor[(3, 13, 7), bool]) {
  @func_2348(%var_2349) /* ty=(Tensor[(48), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32], Tensor[(3, 13, 7), bool]) */
}

def @func_4860(%var_4859: Tensor[(10, 13, 4), bool]) -> (Tensor[(10, 13, 4), uint32],) {
  %525 = fn (%var_4835: Tensor[(10, 13, 4), bool]) -> (Tensor[(10, 13, 4), uint32],) {
    %519 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
    %520 = cast(%var_4835, dtype="uint32") /* ty=Tensor[(10, 13, 4), uint32] */;
    %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(3), int32] */;
    %522 = cast(%519, dtype="uint32") /* ty=Tensor[(10, 13, 4), uint32] */;
    %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %524 = bitwise_and(%522, %523) /* ty=Tensor[(10, 13, 4), uint32] */;
    (%524,)
  };
  %525(%var_4859) /* ty=(Tensor[(10, 13, 4), uint32],) */
}

def @func_729(%var_727: Tensor[(5, 6, 1), uint16]) -> Tensor[(5, 6, 11), uint16] {
  @func_726(%var_727) /* ty=Tensor[(5, 6, 11), uint16] */
}

def @func_2585(%var_2574: int16) -> (Tensor[(8, 8, 3), int16], Tensor[(3, 13, 7), float32]) {
  %526 = cast(%var_2574, dtype="int16") /* ty=int16 */;
  %527 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 8, 3), int16] */, dtype="int16") /* ty=Tensor[(8, 8, 3), int16] */;
  %528 = subtract(%526, %527) /* ty=Tensor[(8, 8, 3), int16] */;
  %529 = @func_1899() /* ty=Tensor[(3, 13, 7), float32] */;
  (%528, %529)
}

def @func_2722(%var_2655: Tensor[(315), float64], %var_2656: Tensor[(2, 24), float64], %var_2671: Tensor[(768), float64], %var_2682: Tensor[(1274), float32]) -> (Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(3, 13, 7), float32], Tensor[(273), float32], Tensor[(768), float64], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(2, 24), bool]) {
  %530 = cast(%var_2655, dtype="float64") /* ty=Tensor[(315), float64] */;
  %531 = cast(%var_2656, dtype="float64") /* ty=Tensor[(2, 24), float64] */;
  %532 = reshape(%530, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %533 = reshape(%531, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %534 = @func_493(%532, %533) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %535 = cast(%var_2656, dtype="float64") /* ty=Tensor[(2, 24), float64] */;
  %536 = cast(meta[relay.Constant][41] /* ty=Tensor[(273), float32] */, dtype="float32") /* ty=Tensor[(273), float32] */;
  %537 = cast(%var_2671, dtype="float64") /* ty=Tensor[(768), float64] */;
  %538 = cast(%var_2655, dtype="float64") /* ty=Tensor[(315), float64] */;
  %539 = reshape(%535, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %540 = reshape(%536, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %541 = reshape(%537, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
  %542 = reshape(%538, newshape=[315]) /* ty=Tensor[(315), float64] */;
  %543 = @func_1960(%539, %540, %541, %542) /* ty=(Tensor[(48), float64], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(768), float64], Tensor[(3, 16, 16), bool], Tensor[(48), float64], Tensor[(315), float64], Tensor[(3, 13, 7), float64], Tensor[(48), float64], Tensor[(1680), float64], Tensor[(560), float32]) */;
  %544 = cast(%var_2682, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %545 = reshape(%544, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
  %546 = cast(%var_2656, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
  %547 = sin(%546) /* ty=Tensor[(2, 24), float32] */;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(2, 24), float32] */;
  %549 = sqrt(%548) /* ty=Tensor[(2, 24), float32] */;
  %550 = cast(%547, dtype="bool") /* ty=Tensor[(2, 24), bool] */;
  %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(2), int32] */;
  %552 = cast(%549, dtype="bool") /* ty=Tensor[(2, 24), bool] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %554 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %555 = %534.1;
  %556 = %543.3;
  %557 = @func_760(%545) /* ty=Tensor[(14, 7, 13), float64] */;
  %558 = not_equal(%552, %553) /* ty=Tensor[(2, 24), bool] */;
  (%554, %555, %var_2655, %556, meta[relay.Constant][41] /* ty=Tensor[(273), float32] */, %var_2671, %557, %var_2682, %558)
}

def @func_1965(%var_1961: Tensor[(48), float64], %var_1962: Tensor[(3, 13, 7), float32], %var_1963: Tensor[(3, 16, 16), float64], %var_1964: Tensor[(315), float64]) -> (Tensor[(48), float64], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(768), float64], Tensor[(3, 16, 16), bool], Tensor[(48), float64], Tensor[(315), float64], Tensor[(3, 13, 7), float64], Tensor[(48), float64], Tensor[(1680), float64], Tensor[(560), float32]) {
  %603 = fn (%var_1916: Tensor[(48), float64], %var_1932: Tensor[(3, 13, 7), float32], %var_1942: Tensor[(3, 16, 16), float64], %var_1950: Tensor[(315), float64]) -> (Tensor[(48), float64], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(768), float64], Tensor[(3, 16, 16), bool], Tensor[(48), float64], Tensor[(315), float64], Tensor[(3, 13, 7), float64], Tensor[(48), float64], Tensor[(1680), float64], Tensor[(560), float32]) {
    %559 = cast(meta[relay.Constant][42] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %560 = cast(meta[relay.Constant][42] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %561 = cast(%var_1916, dtype="float64") /* ty=Tensor[(48), float64] */;
    %562 = reshape(%559, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %563 = reshape(%560, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %564 = reshape(%561, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %565 = @func_879(%562, %563, %564) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
    %566 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %567 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %568 = cast(meta[relay.Constant][43] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
    %569 = reshape(%568, newshape=[3, 16, 16]) /* ty=Tensor[(3, 16, 16), float64] */;
    %570 = @func_528(%569) /* ty=(Tensor[(3, 16, 16), float64],) */;
    %571 = %570.0;
    %572 = cast(%var_1942, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
    %573 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %574 = cast(%571, dtype="bool") /* ty=Tensor[(3, 16, 16), bool] */;
    %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %576 = cast(%var_1950, dtype="float64") /* ty=Tensor[(315), float64] */;
    %577 = %565.7;
    %578 = cast(%577, dtype="float64") /* ty=Tensor[(48), float64] */;
    %579 = reshape(%576, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
    %580 = reshape(%578, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %581 = @func_493(%579, %580) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
    %582 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %583 = %582.0;
    %584 = cast(%var_1932, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
    %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%583, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %588 = less_equal(%586, %587) /* ty=Tensor[(3, 13, 7), bool] */;
    %589 = cast(%588, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
    %590 = cast(meta[relay.Constant][44] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %591 = %581.2;
    %592 = cast(%591, dtype="float64") /* ty=Tensor[(48), float64] */;
    %593 = cast(meta[relay.Constant][45] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
    %594 = reshape(%590, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float64] */;
    %595 = reshape(%592, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %596 = reshape(%593, newshape=[8, 70]) /* ty=Tensor[(8, 70), float32] */;
    %597 = @func_962(%594, %595, %596) /* ty=(Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) */;
    %598 = %566.0;
    %599 = %567.0;
    %600 = greater_equal(%574, %575) /* ty=Tensor[(3, 16, 16), bool] */;
    %601 = acosh(%589) /* ty=Tensor[(3, 13, 7), float64] */;
    %602 = %597.1;
    (%577, meta[relay.Constant][42] /* ty=Tensor[(36), float32] */, %var_1916, %598, %599, meta[relay.Constant][43] /* ty=Tensor[(768), float64] */, %600, %591, %var_1950, %601, %602, meta[relay.Constant][44] /* ty=Tensor[(1680), float64] */, meta[relay.Constant][45] /* ty=Tensor[(560), float32] */)
  };
  %603(%var_1961, %var_1962, %var_1963, %var_1964) /* ty=(Tensor[(48), float64], Tensor[(36), float32], Tensor[(48), float64], Tensor[(3, 13, 7), float32], Tensor[(3, 13, 7), float32], Tensor[(768), float64], Tensor[(3, 16, 16), bool], Tensor[(48), float64], Tensor[(315), float64], Tensor[(3, 13, 7), float64], Tensor[(48), float64], Tensor[(1680), float64], Tensor[(560), float32]) */
}

def @func_4113() -> (Tensor[(10, 13, 4), int16],) {
  @func_4111() /* ty=(Tensor[(10, 13, 4), int16],) */
}

def @func_3584(%var_3579: Tensor[(1, 14, 13), float64]) -> (Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), int16], Tensor[(?, 14, 13), bool]) {
  %604 = @func_3273() /* ty=Tensor[(3, 13, 7), float64] */;
  %605 = cast(%604, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %606 = reshape(%605, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %607 = @func_2005(%606) /* ty=(Tensor[(3, 13, 7), int64], Tensor[(3, 13, 7), float32]) */;
  %608 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
  %609 = cast(%604, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %610 = reshape(%609, newshape=[3, 13, 7]) /* ty=Tensor[(3, 13, 7), float32] */;
  %611 = @func_3145(%610) /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(26, 7), float64]) */;
  %612 = %611.2;
  %613 = cast(%var_3579, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %617 = %607.1;
  %618 = %608.0;
  %619 = less_equal(%615, %616) /* ty=Tensor[(?, 14, 13), bool] */;
  (%604, %617, %618, %619)
}

def @func_4243(%var_4240: int16, %var_4241: Tensor[(768, 1), float32], %var_4242: Tensor[(36), float32]) -> (Tensor[(7, 10, 3), int16], Tensor[(8, 12, 8), bool], Tensor[(768, 1), float32], Tensor[(36), float32], Tensor[(48), float64], Tensor[(7, 10, 3), int64], Tensor[(48), float64]) {
  %642 = fn (%var_4144: int16, %var_4152: Tensor[(768, 1), float32], %var_4153: Tensor[(36), float32]) -> (Tensor[(7, 10, 3), int16], Tensor[(8, 12, 8), bool], Tensor[(768, 1), float32], Tensor[(36), float32], Tensor[(48), float64], Tensor[(7, 10, 3), int64], Tensor[(48), float64]) {
    %620 = cast(%var_4144, dtype="int16") /* ty=int16 */;
    %621 = cast(meta[relay.Constant][46] /* ty=Tensor[(7, 10, 3), int16] */, dtype="int16") /* ty=Tensor[(7, 10, 3), int16] */;
    %622 = cast(%var_4152, dtype="float32") /* ty=Tensor[(768, 1), float32] */;
    %623 = cast(%var_4153, dtype="float32") /* ty=Tensor[(36), float32] */;
    %624 = cast(meta[relay.Constant][47] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %625 = reshape(%622, newshape=[8, 12, 8]) /* ty=Tensor[(8, 12, 8), float32] */;
    %626 = reshape(%623, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %627 = reshape(%624, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %628 = @func_1389(%625, %626, %627) /* ty=(Tensor[(8, 12, 8), bool], Tensor[(14, 7, 13), float64], Tensor[(36), float32], Tensor[(48), float64]) */;
    %629 = cast(meta[relay.Constant][46] /* ty=Tensor[(7, 10, 3), int16] */, dtype="int64") /* ty=Tensor[(7, 10, 3), int64] */;
    %630 = cast(%var_4144, dtype="int64") /* ty=int64 */;
    %631 = cast(%var_4153, dtype="float32") /* ty=Tensor[(36), float32] */;
    %632 = cast(%var_4153, dtype="float32") /* ty=Tensor[(36), float32] */;
    %633 = cast(meta[relay.Constant][47] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
    %634 = reshape(%631, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %635 = reshape(%632, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float32] */;
    %636 = reshape(%633, newshape=[48]) /* ty=Tensor[(48), float64] */;
    %637 = @func_879(%634, %635, %636) /* ty=(Tensor[(3, 4, 3), bool], Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(14, 7, 13), float64], Tensor[(1274), float32], Tensor[(3, 7, 15), float64], Tensor[(315), float64], Tensor[(48), float64], Tensor[(3, 4, 3), uint16], Tensor[(3, 16, 16), float64], Tensor[(768), float64], Tensor[(6, 8, 4), bool]) */;
    %638 = minimum(%620, %621) /* ty=Tensor[(7, 10, 3), int16] */;
    %639 = %628.0;
    %640 = left_shift(%629, %630) /* ty=Tensor[(7, 10, 3), int64] */;
    %641 = %637.7;
    (%638, %639, %var_4152, %var_4153, meta[relay.Constant][47] /* ty=Tensor[(48), float64] */, %640, %641)
  };
  %642(%var_4240, %var_4241, %var_4242) /* ty=(Tensor[(7, 10, 3), int16], Tensor[(8, 12, 8), bool], Tensor[(768, 1), float32], Tensor[(36), float32], Tensor[(48), float64], Tensor[(7, 10, 3), int64], Tensor[(48), float64]) */
}

def @func_4486(%var_4484: Tensor[(16, 16, 15), int64]) -> (Tensor[(16, 16, 15), bool],) {
  @func_4483(%var_4484) /* ty=(Tensor[(16, 16, 15), bool],) */
}

def @func_3714() -> (Tensor[(768), float32],) {
  @func_3712() /* ty=(Tensor[(768), float32],) */
}

def @func_3085() -> (Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) {
  @func_3083() /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) */
}

def @func_4135() -> (Tensor[(3, 12), float32],) {
  %643 = @func_3751() /* ty=(Tensor[(3, 12), float32],) */;
  %644 = %643.0;
  (%644,)
}

def @func_1901() -> Tensor[(3, 13, 7), float32] {
  @func_1899() /* ty=Tensor[(3, 13, 7), float32] */
}

def @func_5377() -> (Tensor[(768), float32], Tensor[(3, 7, 15), float64], Tensor[(36), float32], Tensor[(24, 2), float64], Tensor[(3, 13, 7), float32]) {
  @func_5375() /* ty=(Tensor[(768), float32], Tensor[(3, 7, 15), float64], Tensor[(36), float32], Tensor[(24, 2), float64], Tensor[(3, 13, 7), float32]) */
}

def @func_3045(%var_2931: Tensor[(10, 13, 4), bool], %var_2951: Tensor[(4, 12), float64], %var_2977: Tensor[(182), float64]) -> (Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(4, 12), float64], Tensor[(10, 13, 4), float32], Tensor[(182), bool], Tensor[(?, 14, 13), float64]) {
  %645 = @func_2281() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %646 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %647 = cast(%var_2931, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %651 = cast(meta[relay.Constant][48] /* ty=Tensor[(315), float64] */, dtype="float64") /* ty=Tensor[(315), float64] */;
  %652 = cast(%var_2951, dtype="float64") /* ty=Tensor[(4, 12), float64] */;
  %653 = reshape(%651, newshape=[3, 7, 15]) /* ty=Tensor[(3, 7, 15), float64] */;
  %654 = reshape(%652, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %655 = @func_493(%653, %654) /* ty=(Tensor[(3, 7, 15), float64], Tensor[(6, 8, 4), bool], Tensor[(48), float64]) */;
  %656 = cast(%var_2931, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %657 = cast(%var_2977, dtype="float64") /* ty=Tensor[(182), float64] */;
  %658 = reshape(%657, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %659 = @func_1647(%658) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %660 = %659.0;
  %661 = cast(%660, dtype="bool") /* ty=Tensor[(1, 14, 13), bool] */;
  %662 = shape_of(%var_2977, dtype="int32") /* ty=Tensor[(1), int32] */;
  %663 = cast(%var_2977, dtype="bool") /* ty=Tensor[(182), bool] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?), bool] */;
  %665 = cast(%var_2977, dtype="float64") /* ty=Tensor[(182), float64] */;
  %666 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%660, dtype="float64") /* ty=Tensor[(1, 14, 13), float64] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %669 = %645.0;
  %670 = divide(%649, %650) /* ty=Tensor[(10, 13, 4), float32] */;
  %671 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  %672 = %655.1;
  %673 = log10(%656) /* ty=Tensor[(10, 13, 4), float32] */;
  %674 = logical_and(%663, %664) /* ty=Tensor[(182), bool] */;
  %675 = divide(%667, %668) /* ty=Tensor[(?, 14, 13), float64] */;
  (%669, %670, %671, %672, meta[relay.Constant][48] /* ty=Tensor[(315), float64] */, %var_2951, %673, %674, %675)
}

def @func_3050(%var_3047: Tensor[(10, 13, 4), bool], %var_3048: Tensor[(4, 12), float64], %var_3049: Tensor[(182), float64]) -> (Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(4, 12), float64], Tensor[(10, 13, 4), float32], Tensor[(182), bool], Tensor[(?, 14, 13), float64]) {
  @func_3045(%var_3047, %var_3048, %var_3049) /* ty=(Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), float32], Tensor[(10, 13, 4), bool], Tensor[(6, 8, 4), bool], Tensor[(315), float64], Tensor[(4, 12), float64], Tensor[(10, 13, 4), float32], Tensor[(182), bool], Tensor[(?, 14, 13), float64]) */
}

def @func_2200() -> Tensor[(3, 13, 7), float32] {
  %676 = fn () -> Tensor[(3, 13, 7), float32] {
    @func_1899() /* ty=Tensor[(3, 13, 7), float32] */
  };
  %676() /* ty=Tensor[(3, 13, 7), float32] */
}

def @func_1851() -> (Tensor[(3, 13, 7), float32],) {
  %681 = fn () -> (Tensor[(3, 13, 7), float32],) {
    %677 = @func_1795() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %678 = %677.0;
    %679 = cast(%678, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
    %680 = sqrt(%679) /* ty=Tensor[(3, 13, 7), float32] */;
    (%680,)
  };
  %681() /* ty=(Tensor[(3, 13, 7), float32],) */
}

def @func_3587(%var_3585: Tensor[(1, 14, 13), float64]) -> (Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), int16], Tensor[(?, 14, 13), bool]) {
  @func_3584(%var_3585) /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32], Tensor[(10, 13, 4), int16], Tensor[(?, 14, 13), bool]) */
}

def @func_2529(%var_2520: Tensor[(15, 14, 6), bool], %var_2521: Tensor[(15, 14, 6), bool]) -> (Tensor[(15, 14, 6), bool], Tensor[(10, 13, 4), bool]) {
  %682 = cast(%var_2521, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %683 = shape_of(%var_2520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%var_2520, dtype="bool") /* ty=Tensor[(15, 14, 6), bool] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %686 = logical_or(%684, %685) /* ty=Tensor[(15, 14, 6), bool] */;
  %687 = @func_2161() /* ty=Tensor[(10, 13, 4), bool] */;
  (%686, %687)
}

def @func_3942() -> (Tensor[(3, 13, 7), float32], Tensor[(560), float32], Tensor[(48), float64]) {
  %688 = cast(meta[relay.Constant][49] /* ty=Tensor[(48), float64] */, dtype="float64") /* ty=Tensor[(48), float64] */;
  %689 = reshape(%688, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %690 = @func_2348(%689) /* ty=(Tensor[(48), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32], Tensor[(3, 13, 7), bool]) */;
  %691 = @func_1899() /* ty=Tensor[(3, 13, 7), float32] */;
  %692 = %690.3;
  (%691, %692, meta[relay.Constant][49] /* ty=Tensor[(48), float64] */)
}

def @func_3227() -> (Tensor[(3, 13, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) {
  %700 = fn () -> (Tensor[(3, 13, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) {
    %693 = cast(meta[relay.Constant][50] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
    %694 = reshape(%693, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
    %695 = @func_1647(%694) /* ty=(Tensor[(1, 14, 13), float64],) */;
    %696 = cast(meta[relay.Constant][50] /* ty=Tensor[(182), float64] */, dtype="float64") /* ty=Tensor[(182), float64] */;
    %697 = @func_1899() /* ty=Tensor[(3, 13, 7), float32] */;
    %698 = %695.0;
    %699 = atan(%696) /* ty=Tensor[(182), float64] */;
    (%697, %698, %699)
  };
  %700() /* ty=(Tensor[(3, 13, 7), float32], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) */
}

def @func_2348(%var_2310: Tensor[(48), float64]) -> (Tensor[(48), float64], Tensor[(1680), float64], Tensor[(48), float64], Tensor[(560), float32], Tensor[(3, 13, 7), bool]) {
  %701 = cast(meta[relay.Constant][51] /* ty=Tensor[(1680), float64] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %702 = cast(%var_2310, dtype="float64") /* ty=Tensor[(48), float64] */;
  %703 = cast(meta[relay.Constant][52] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %704 = reshape(%701, newshape=[10, 14, 12]) /* ty=Tensor[(10, 14, 12), float64] */;
  %705 = reshape(%702, newshape=[48]) /* ty=Tensor[(48), float64] */;
  %706 = reshape(%703, newshape=[8, 70]) /* ty=Tensor[(8, 70), float32] */;
  %707 = @func_962(%704, %705, %706) /* ty=(Tensor[(6, 8, 4), bool], Tensor[(48), float64], Tensor[(14, 8, 5), bool], Tensor[(8, 70), float32], Tensor[(10, 14, 12), int16]) */;
  %708 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
  %709 = %708.0;
  %710 = cast(%709, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %711 = cosh(%710) /* ty=Tensor[(3, 13, 7), float32] */;
  %712 = cast(%711, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
  %713 = sinh(%712) /* ty=Tensor[(3, 13, 7), float32] */;
  %714 = cast(%711, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %715 = shape_of(%713, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%713, dtype="bool") /* ty=Tensor[(3, 13, 7), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %718 = %707.1;
  %719 = logical_and(%716, %717) /* ty=Tensor[(3, 13, 7), bool] */;
  (%718, meta[relay.Constant][51] /* ty=Tensor[(1680), float64] */, %var_2310, meta[relay.Constant][52] /* ty=Tensor[(560), float32] */, %719)
}

def @func_3752() -> (Tensor[(3, 12), float32],) {
  %722 = fn () -> (Tensor[(3, 12), float32],) {
    %720 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
    %721 = %720.3;
    (%721,)
  };
  %722() /* ty=(Tensor[(3, 12), float32],) */
}

def @func_4014(%var_4012: Tensor[(7, 9, 16), int32], %var_4013: Tensor[(7, 9, 16), int32]) -> (Tensor[(7, 9, 16), int32], Tensor[(560), float32], Tensor[(48), float64], Tensor[(7, 9, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(30), uint16], Tensor[(30), uint16]) {
  @func_4010(%var_4012, %var_4013) /* ty=(Tensor[(7, 9, 16), int32], Tensor[(560), float32], Tensor[(48), float64], Tensor[(7, 9, 16), float64], Tensor[(10, 13, 4), float32], Tensor[(30), uint16], Tensor[(30), uint16]) */
}

def @func_3147(%var_3146: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(26, 7), float64]) {
  %735 = fn (%var_3097: Tensor[(3, 13, 7), float32]) -> (Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(26, 7), float64]) {
    %723 = @func_1899() /* ty=Tensor[(3, 13, 7), float32] */;
    %724 = cast(%var_3097, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
    %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %726 = cast(%723, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %728 = cast(%var_3097, dtype="float64") /* ty=Tensor[(3, 13, 7), float64] */;
    %729 = cast(meta[relay.Constant][53] /* ty=Tensor[(26, 7), float64] */, dtype="float64") /* ty=Tensor[(26, 7), float64] */;
    %730 = reshape(%729, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
    %731 = @func_1647(%730) /* ty=(Tensor[(1, 14, 13), float64],) */;
    %732 = floor_divide(%726, %727) /* ty=Tensor[(3, 13, 7), float64] */;
    %733 = sigmoid(%728) /* ty=Tensor[(3, 13, 7), float64] */;
    %734 = %731.0;
    (%732, %733, %734, meta[relay.Constant][53] /* ty=Tensor[(26, 7), float64] */)
  };
  %735(%var_3146) /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(26, 7), float64]) */
}

def @func_5016() -> Tensor[(12, 4), float64] {
  %737 = fn () -> Tensor[(12, 4), float64] {
    %736 = @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */;
    %736.4
  };
  %737() /* ty=Tensor[(12, 4), float64] */
}

def @func_2102() -> (Tensor[(10, 13, 4), int16],) {
  @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */
}

def @func_4703() -> Tensor[(7, 16, 13), float64] {
  %738 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 16, 13), float64] */;
  log10(%738) /* ty=Tensor[(7, 16, 13), float64] */
}

def @func_3613() -> (Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) {
  @func_3611() /* ty=(Tensor[(10, 13, 4), float32], Tensor[(8, 12, 8), bool], Tensor[(768), float32], Tensor[(3, 12), float32], Tensor[(12, 4), float64]) */
}

def @func_3440(%var_3439: Tensor[(7, 1, 8), float64]) -> (Tensor[(14, 7, 13), float64], Tensor[(91, 14), float32], Tensor[(3, 13, 7), float32], Tensor[(7, ?, 8), float64]) {
  %758 = fn (%var_3383: Tensor[(7, 1, 8), float64]) -> (Tensor[(14, 7, 13), float64], Tensor[(91, 14), float32], Tensor[(3, 13, 7), float32], Tensor[(7, ?, 8), float64]) {
    %739 = cast(meta[relay.Constant][55] /* ty=Tensor[(91, 14), float32] */, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
    %740 = reshape(%739, newshape=[14, 7, 13]) /* ty=Tensor[(14, 7, 13), float32] */;
    %741 = @func_1850() /* ty=(Tensor[(3, 13, 7), float32],) */;
    %742 = cast(%var_3383, dtype="float64") /* ty=Tensor[(7, 1, 8), float64] */;
    %743 = erf(%742) /* ty=Tensor[(7, 1, 8), float64] */;
    %744 = cast(%var_3383, dtype="float32") /* ty=Tensor[(7, 1, 8), float32] */;
    %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
    %746 = cast(%743, dtype="float32") /* ty=Tensor[(7, 1, 8), float32] */;
    %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %748 = floor_mod(%746, %747) /* ty=Tensor[(7, ?, 8), float32] */;
    %749 = cast(%748, dtype="bool") /* ty=Tensor[(7, ?, 8), bool] */;
    %750 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%743, dtype="bool") /* ty=Tensor[(7, 1, 8), bool] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %753 = logical_and(%751, %752) /* ty=Tensor[(7, ?, 8), bool] */;
    %754 = cast(%753, dtype="float64") /* ty=Tensor[(7, ?, 8), float64] */;
    %755 = @func_760(%740) /* ty=Tensor[(14, 7, 13), float64] */;
    %756 = %741.0;
    %757 = log10(%754) /* ty=Tensor[(7, ?, 8), float64] */;
    (%755, meta[relay.Constant][55] /* ty=Tensor[(91, 14), float32] */, %756, %757)
  };
  %758(%var_3439) /* ty=(Tensor[(14, 7, 13), float64], Tensor[(91, 14), float32], Tensor[(3, 13, 7), float32], Tensor[(7, ?, 8), float64]) */
}

def @func_4259() -> Tensor[(768), float32] {
  %759 = @func_3712() /* ty=(Tensor[(768), float32],) */;
  %759.0
}

def @func_3274() -> Tensor[(3, 13, 7), float64] {
  %761 = fn () -> Tensor[(3, 13, 7), float64] {
    %760 = @func_3083() /* ty=(Tensor[(3, 13, 7), float64], Tensor[(3, 13, 7), float32]) */;
    %760.0
  };
  %761() /* ty=Tensor[(3, 13, 7), float64] */
}

def @func_2161() -> Tensor[(10, 13, 4), bool] {
  %762 = @func_2100() /* ty=(Tensor[(10, 13, 4), int16],) */;
  %763 = %762.0;
  %764 = cast(meta[relay.Constant][56] /* ty=Tensor[(10, 13, 4), int16] */, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %765 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %766 = cast(%763, dtype="bool") /* ty=Tensor[(10, 13, 4), bool] */;
  %767 = dyn.reshape(%764, %765, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%766, %767) /* ty=Tensor[(10, 13, 4), bool] */
}

def @func_760(%var_739: Tensor[(14, 7, 13), float32]) -> Tensor[(14, 7, 13), float64] {
  %768 = cast(%var_739, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %769 = sin(%768) /* ty=Tensor[(14, 7, 13), float32] */;
  %770 = cast(%var_739, dtype="float32") /* ty=Tensor[(14, 7, 13), float32] */;
  %771 = atanh(%770) /* ty=Tensor[(14, 7, 13), float32] */;
  %772 = cast(%771, dtype="float64") /* ty=Tensor[(14, 7, 13), float64] */;
  %773 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%769, dtype="float64") /* ty=Tensor[(14, 7, 13), float64] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%774, %775) /* ty=Tensor[(14, 7, 13), float64] */
}

def @func_3260(%var_3259: Tensor[(30), uint16]) -> (Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(10, 13, 4), uint64]) {
  %788 = fn (%var_3237: Tensor[(30), uint16]) -> (Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(10, 13, 4), uint64]) {
    %776 = cast(%var_3237, dtype="uint16") /* ty=Tensor[(30), uint16] */;
    %777 = reshape(%776, newshape=[5, 6, 1]) /* ty=Tensor[(5, 6, 1), uint16] */;
    %778 = @func_2758() /* ty=(Tensor[(10, 13, 4), float32],) */;
    %779 = %778.0;
    %780 = cast(%779, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
    %781 = exp(%780) /* ty=Tensor[(10, 13, 4), float32] */;
    %782 = cast(%779, dtype="uint64") /* ty=Tensor[(10, 13, 4), uint64] */;
    %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
    %784 = cast(%781, dtype="uint64") /* ty=Tensor[(10, 13, 4), uint64] */;
    %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %786 = @func_726(%777) /* ty=Tensor[(5, 6, 11), uint16] */;
    %787 = add(%784, %785) /* ty=Tensor[(10, 13, 4), uint64] */;
    (%786, %var_3237, %787)
  };
  %788(%var_3259) /* ty=(Tensor[(5, 6, 11), uint16], Tensor[(30), uint16], Tensor[(10, 13, 4), uint64]) */
}

def @func_2100() -> (Tensor[(10, 13, 4), int16],) {
  %789 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 13, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 4), float32] */;
  %790 = asin(%789) /* ty=Tensor[(10, 13, 4), float32] */;
  %791 = cast(%790, dtype="int16") /* ty=Tensor[(10, 13, 4), int16] */;
  %792 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(10, 13, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 13, 4), float32] */, dtype="int16") /* ty=Tensor[(10, 13, 4), int16] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %795 = left_shift(%793, %794) /* ty=Tensor[(10, 13, 4), int16] */;
  (%795,)
}

def @func_3832(%var_3829: Tensor[(8, 13, 12), float64]) -> Tensor[(8, 13, 12), float64] {
  %796 = cast(%var_3829, dtype="float64") /* ty=Tensor[(8, 13, 12), float64] */;
  cos(%796) /* ty=Tensor[(8, 13, 12), float64] */
}

def @func_3967(%var_3965: Tensor[(182), float64]) -> (Tensor[(3, 13, 7), float64], Tensor[(1, 14, 13), float64], Tensor[(182), float64]) {
  %797 = cast(%var_3965, dtype="float64") /* ty=Tensor[(182), float64] */;
  %798 = reshape(%797, newshape=[1, 14, 13]) /* ty=Tensor[(1, 14, 13), float64] */;
  %799 = @func_1647(%798) /* ty=(Tensor[(1, 14, 13), float64],) */;
  %800 = @func_3273() /* ty=Tensor[(3, 13, 7), float64] */;
  %801 = %799.0;
  (%800, %801, %var_3965)
}

def @func_1796() -> (Tensor[(3, 13, 7), float32],) {
  %807 = fn () -> (Tensor[(3, 13, 7), float32],) {
    %802 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
    %803 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(3, 13, 7), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 13, 7), float32] */, dtype="float32") /* ty=Tensor[(3, 13, 7), float32] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %806 = multiply(%804, %805) /* ty=Tensor[(3, 13, 7), float32] */;
    (%806,)
  };
  %807() /* ty=(Tensor[(3, 13, 7), float32],) */
}

def @func_4705() -> Tensor[(7, 16, 13), float64] {
  @func_4703() /* ty=Tensor[(7, 16, 13), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen52/build/output.py:1702: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen52/build/output.py", line 1707, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(840) tvmgen_default_fused_reshape_bitwise_or_kernel0(uchar* __restrict__ T_bitwise_or, uchar* __restrict__ placeholder, uchar* __restrict__ placeholder1) {
  T_bitwise_or[(((int)threadIdx.x))] = (placeholder[(((int)threadIdx.x))] | placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

