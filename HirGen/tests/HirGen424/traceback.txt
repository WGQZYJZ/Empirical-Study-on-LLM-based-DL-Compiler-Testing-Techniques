==========mod==========
#[version = "0.0.5"]
def @func_5157() -> Tensor[(10, 16, 11), float32] {
  %0 = @func_3405() /* ty=(Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) */;
  %1 = %0.2;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  sqrt(%2) /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_7394(%var_7368: Tensor[(910), int8], %var_7369: Tensor[(96), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(96), float64], Tensor[(910), int8], Tensor[(96), float64], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float32], Tensor[(20), int8]) {
  %3 = cast(%var_7368, dtype="int8") /* ty=Tensor[(910), int8] */;
  %4 = cast(%var_7369, dtype="float64") /* ty=Tensor[(96), float64] */;
  %5 = reshape(%3, newshape=[910]) /* ty=Tensor[(910), int8] */;
  %6 = reshape(%4, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %7 = @func_5531(%5, %6) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(14, 13, 5), uint64], Tensor[(910), int8], Tensor[(560), int8], Tensor[(96), float64]) */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
  %9 = reshape(%8, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), int8] */;
  %10 = @func_1165(%9) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) */;
  %11 = @func_5157() /* ty=Tensor[(10, 16, 11), float32] */;
  %12 = %7.4;
  %13 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %14 = %10.1;
  (%11, %12, %var_7368, %var_7369, %13, %14, meta[relay.Constant][0] /* ty=Tensor[(20), int8] */)
}

def @func_4088() -> (Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) {
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %17 = reshape(%15, newshape=[13, 9, 5]) /* ty=Tensor[(13, 9, 5), float32] */;
  %18 = reshape(%16, newshape=[13, 9, 5]) /* ty=Tensor[(13, 9, 5), float32] */;
  %19 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  %20 = @func_3285(%17, %18) /* ty=Tensor[(13, 9, 5), float32] */;
  (%19, %20, meta[relay.Constant][1] /* ty=Tensor[(585), float32] */)
}

def @func_1529() -> (Tensor[(10, 16, 11), float32],) {
  %21 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  (%21,)
}

def @func_2148() -> Tensor[(10, 16, 11), float32] {
  @func_1333() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_6546(%var_6538: Tensor[(1800), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(1800), uint8]) {
  %22 = @func_3405() /* ty=(Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) */;
  %23 = %22.0;
  %24 = cast(%var_6538, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(1), int32] */;
  %26 = cast(%23, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %28 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
  %29 = logical_xor(%26, %27) /* ty=Tensor[(1800), uint8] */;
  (%28, %29)
}

def @func_5793() -> (Tensor[(1800), float64], Tensor[(2, 2, 5), uint64]) {
  %30 = @func_2299() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 4), int8] */, dtype="int8") /* ty=Tensor[(5, 4), int8] */;
  %32 = reshape(%31, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), int8] */;
  %33 = @func_1165(%32) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) */;
  %34 = %33.0;
  %35 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 4), int8] */, dtype="bool") /* ty=Tensor[(5, 4), bool] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%34, dtype="bool") /* ty=Tensor[(2, 2, 5), bool] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %39 = greater(%37, %38) /* ty=Tensor[(2, 2, 5), bool] */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 4), int8] */, dtype="uint64") /* ty=Tensor[(5, 4), uint64] */;
  %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%39, dtype="uint64") /* ty=Tensor[(2, 2, 5), uint64] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %44 = %30.1;
  %45 = maximum(%42, %43) /* ty=Tensor[(2, 2, 5), uint64] */;
  (%44, %45)
}

def @func_3204() -> Tensor[(5, 9, 8), float32] {
  %46 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  exp(%46) /* ty=Tensor[(5, 9, 8), float32] */
}

def @func_4472(%var_4438: Tensor[(14, 1, 16), float32], %var_4458: Tensor[(91, 10), int8]) -> (Tensor[(14, 13, 5), uint64], Tensor[(91, 10), int8], Tensor[(560), int8], Tensor[(1, 1800), float64], Tensor[(14, ?, 16), float32]) {
  %47 = cast(%var_4458, dtype="int8") /* ty=Tensor[(91, 10), int8] */;
  %48 = cast(%var_4458, dtype="int8") /* ty=Tensor[(91, 10), int8] */;
  %49 = reshape(%47, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %50 = reshape(%48, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %51 = @func_156(%49, %50) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1800), float64] */, dtype="float64") /* ty=Tensor[(1, 1800), float64] */;
  %53 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1800), float64] */, dtype="float64") /* ty=Tensor[(1, 1800), float64] */;
  %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 1800), float64] */, dtype="float64") /* ty=Tensor[(1, 1800), float64] */;
  %55 = reshape(%52, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %56 = reshape(%53, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %57 = reshape(%54, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %58 = @func_556(%55, %56, %57) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %59 = cast(%var_4438, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %60 = erf(%59) /* ty=Tensor[(14, 1, 16), float32] */;
  %61 = cast(%60, dtype="int8") /* ty=Tensor[(14, 1, 16), int8] */;
  %62 = shape_of(%var_4438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%var_4438, dtype="int8") /* ty=Tensor[(14, 1, 16), int8] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %65 = bitwise_xor(%63, %64) /* ty=Tensor[(14, ?, 16), int8] */;
  %66 = cast(%60, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="float32") /* ty=Tensor[(14, ?, 16), float32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %70 = %51.1;
  %71 = %58.3;
  %72 = floor_mod(%68, %69) /* ty=Tensor[(14, ?, 16), float32] */;
  (%70, %var_4458, %71, meta[relay.Constant][4] /* ty=Tensor[(1, 1800), float64] */, %72)
}

def @func_7097() -> Tensor[(10, 16, 11), float32] {
  %73 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %73.1
}

def @func_2977() -> Tensor[(10, 16, 11), float32] {
  %74 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %74.0
}

def @func_5002() -> Tensor[(10, 16, 11), float32] {
  %75 = @func_3819() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(728), float64], Tensor[(7, 13, 8), float64]) */;
  %75.0
}

def @func_9116() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %76 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %77 = @func_2977() /* ty=Tensor[(10, 16, 11), float32] */;
  %78 = %76.0;
  (%77, %78)
}

def @main() -> (Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) {
  %79 = @func_5401() /* ty=(Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) */;
  %80 = %79.2;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
  %82 = @func_5002() /* ty=Tensor[(10, 16, 11), float32] */;
  %83 = asinh(%81) /* ty=Tensor[(7, 104), float64] */;
  (%82, %83)
}

def @func_2281() -> Tensor[(10, 16, 11), float32] {
  @func_1286() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_854() -> (Tensor[(10, 16, 11), float32],) {
  %84 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  (%84,)
}

def @func_7799() -> (Tensor[(10, 16, 11), float32],) {
  %85 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
  (%85,)
}

def @func_2491() -> (Tensor[(10, 16, 11), float32],) {
  %86 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  (%86,)
}

def @func_7619() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %87 = @func_7580() /* ty=Tensor[(10, 16, 11), float32] */;
  %88 = @func_4867() /* ty=Tensor[(10, 16, 11), float32] */;
  (%87, %88)
}

def @func_8236(%var_8202: Tensor[(16, 11, 15), float64], %var_8203: Tensor[(16, 11, 15), float64]) -> (Tensor[(16, 11, 15), float64],) {
  %89 = cast(%var_8203, dtype="float64") /* ty=Tensor[(16, 11, 15), float64] */;
  %90 = shape_of(%var_8202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%var_8202, dtype="float64") /* ty=Tensor[(16, 11, 15), float64] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %93 = mod(%91, %92) /* ty=Tensor[(16, 11, 15), float64] */;
  (%93,)
}

def @func_4882(%var_4874: Tensor[(4, 1, 9), float32]) -> (Tensor[(4, 1, 9), float64], Tensor[(10, 16, 11), float32]) {
  %94 = cast(%var_4874, dtype="float32") /* ty=Tensor[(4, 1, 9), float32] */;
  %95 = erf(%94) /* ty=Tensor[(4, 1, 9), float32] */;
  %96 = cast(%95, dtype="float64") /* ty=Tensor[(4, 1, 9), float64] */;
  %97 = sin(%96) /* ty=Tensor[(4, 1, 9), float64] */;
  %98 = @func_3177() /* ty=Tensor[(10, 16, 11), float32] */;
  (%97, %98)
}

def @func_4769() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) {
  %99 = @func_4500() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %100 = @func_4088() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */;
  %101 = %99.0;
  %102 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %103 = %100.2;
  (%101, %102, %103)
}

def @func_3653(%var_3614: Tensor[(96), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(2, 2, 5), float64], Tensor[(10, 16, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(54, 26), float64], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) {
  %104 = @func_2513() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %105 = cast(%var_3614, dtype="float64") /* ty=Tensor[(96), float64] */;
  %106 = reshape(%105, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
  %107 = @func_3568(%106) /* ty=(Tensor[(4, 6, 4), float64], Tensor[(10, 16, 11), uint8]) */;
  %108 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
  %109 = cast(%108, dtype="float64") /* ty=Tensor[(2, 2, 5), float64] */;
  %110 = sqrt(%109) /* ty=Tensor[(2, 2, 5), float64] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(2, 2, 5), float64] */;
  %112 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(54, 26), float64] */, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %114 = reshape(%113, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float64] */;
  %115 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
  %116 = %104.0;
  %117 = %107.0;
  %118 = exp(%111) /* ty=Tensor[(2, 2, 5), float64] */;
  %119 = %112.0;
  %120 = @func_1721(%114) /* ty=Tensor[(12, 9, 13), float64] */;
  %121 = %115.0;
  %122 = @func_3177() /* ty=Tensor[(10, 16, 11), float32] */;
  (%116, %117, %var_3614, %118, %119, %120, meta[relay.Constant][5] /* ty=Tensor[(54, 26), float64] */, %121, %122)
}

def @func_2738() -> (Tensor[(10, 16, 11), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %123 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %124 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 16, 11), float32] */, dtype="int32") /* ty=Tensor[(10, 16, 11), int32] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%123, dtype="int32") /* ty=Tensor[(10, 16, 11), int32] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %128 = @func_1488() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) */;
  %129 = cast(8.63925f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %130 = reshape(%129, newshape=[]) /* ty=float32 */;
  %131 = @func_1081(%130) /* ty=(Tensor[(12, 10, 1), float32], Tensor[(12, 10, 1), float32]) */;
  %132 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %133 = subtract(%126, %127) /* ty=Tensor[(10, 16, 11), int32] */;
  %134 = %128.0;
  %135 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  %136 = %131.0;
  %137 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
  %138 = %132.0;
  %139 = @func_2424() /* ty=Tensor[(10, 16, 11), float32] */;
  %140 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  (%133, %134, %135, %136, 8.63925f /* ty=float32 */, %137, %138, %139, %140)
}

def @func_9190(%var_9173: Tensor[(16, 4, 8), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(16, 4, 8), float32], Tensor[(10, 16, 11), uint16]) {
  %141 = @func_7135() /* ty=(Tensor[(16, 1, 1), float64],) */;
  %142 = %141.0;
  %143 = cast(%142, dtype="float32") /* ty=Tensor[(16, 1, 1), float32] */;
  %144 = cast(%var_9173, dtype="float32") /* ty=Tensor[(16, 4, 8), float32] */;
  %145 = @func_5680() /* ty=(Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) */;
  %146 = @func_6831() /* ty=Tensor[(10, 16, 11), float32] */;
  %147 = mod(%143, %144) /* ty=Tensor[(16, 4, 8), float32] */;
  %148 = %145.2;
  (%146, %147, %148)
}

def @func_8289(%var_8274: Tensor[(4, 4, 11), float32]) -> Tensor[(4, 4, 11), float32] {
  %149 = cast(%var_8274, dtype="float32") /* ty=Tensor[(4, 4, 11), float32] */;
  acos(%149) /* ty=Tensor[(4, 4, 11), float32] */
}

def @func_3405() -> (Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) {
  %150 = @func_2299() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */;
  %151 = @func_3159() /* ty=Tensor[(10, 16, 11), float32] */;
  %152 = cast(%151, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %153 = reshape(%152, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
  %154 = @func_730(%153) /* ty=(Tensor[(10, 16, 11), float64],) */;
  %155 = %150.1;
  %156 = %154.0;
  (%155, %151, %156)
}

def @func_1333() -> Tensor[(10, 16, 11), float32] {
  %157 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %157.0
}

def @func_4862() -> (Tensor[(10, 16, 11), float32],) {
  %158 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %159 = %158.0;
  (%159,)
}

def @func_4867() -> Tensor[(10, 16, 11), float32] {
  @func_1286() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_6291() -> float32 {
  %160 = @func_5943() /* ty=(Tensor[(10, 16, 11), float32], float32) */;
  %160.1
}

def @func_5627() -> (Tensor[(5, 9, 8), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %161 = @func_4769() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */;
  %162 = @func_2513() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %163 = @func_4862() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %164 = @func_3204() /* ty=Tensor[(5, 9, 8), float32] */;
  %165 = %161.0;
  %166 = %162.0;
  %167 = %163.0;
  (%164, %165, %166, %167)
}

def @func_8662() -> (Tensor[(2, 2, 5), uint32],) {
  %168 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
  (%168,)
}

def @func_2513() -> (Tensor[(10, 16, 11), float32],) {
  %169 = @func_1731() /* ty=Tensor[(10, 16, 11), float32] */;
  (%169,)
}

def @func_4277() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), uint8]) {
  %170 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
  %171 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
  %172 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %173 = %170.0;
  %174 = %171.0;
  (%172, %173, %174)
}

def @func_629(%var_625: Tensor[(560), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(8, 5, 14), bool], Tensor[(560), int8]) {
  %175 = cast(meta[relay.Constant][7] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %176 = cast(meta[relay.Constant][7] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %177 = cast(meta[relay.Constant][7] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %178 = reshape(%175, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %179 = reshape(%176, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %180 = reshape(%177, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %181 = @func_556(%178, %179, %180) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %182 = %181.1;
  %183 = cast(%182, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
  %184 = cast(%var_625, dtype="int8") /* ty=Tensor[(560), int8] */;
  %185 = reshape(%184, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %186 = @func_334(%185) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %187 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %188 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %189 = atan(%183) /* ty=Tensor[(8, 15, 15), float64] */;
  %190 = %186.0;
  (%187, meta[relay.Constant][7] /* ty=Tensor[(1800), float64] */, %188, %189, %190, %var_625)
}

def @func_5108(%var_5009: int32, %var_5010: Tensor[(11, 13, 3), int32], %var_5023: Tensor[(11, 13, 3), int32]) -> (Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(20), int8], Tensor[(11, 13, 3), float64], Tensor[(1, 200), float64]) {
  %191 = cast(%var_5023, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %192 = shape_of(%var_5010, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%var_5010, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %195 = cast(%var_5009, dtype="bool") /* ty=bool */;
  %196 = cast(%var_5010, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %197 = greater_equal(%195, %196) /* ty=Tensor[(11, 13, 3), bool] */;
  %198 = cast(%var_5010, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %202 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %203 = @func_4500() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %204 = cast(meta[relay.Constant][8] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
  %205 = reshape(%204, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %206 = @func_1229(%205) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %207 = cast(%var_5023, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %208 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %209 = logical_and(%193, %194) /* ty=Tensor[(11, 13, 3), bool] */;
  %210 = @func_4341() /* ty=Tensor[(10, 16, 11), float32] */;
  %211 = not_equal(%200, %201) /* ty=Tensor[(11, 13, 3), bool] */;
  %212 = %202.1;
  %213 = %203.0;
  %214 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %215 = %206.3;
  %216 = log2(%207) /* ty=Tensor[(11, 13, 3), float64] */;
  %217 = %208.2;
  (%209, %210, %211, %212, %213, %214, %215, meta[relay.Constant][8] /* ty=Tensor[(20), int8] */, %216, %217)
}

def @func_730(%var_680: Tensor[(10, 16, 11), float32]) -> (Tensor[(10, 16, 11), float64],) {
  %218 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %219 = cast(%var_680, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %223 = minimum(%221, %222) /* ty=Tensor[(10, 16, 11), int8] */;
  %224 = cast(%223, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %225 = cos(%224) /* ty=Tensor[(10, 16, 11), float64] */;
  %226 = cast(%225, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %227 = log2(%226) /* ty=Tensor[(10, 16, 11), float64] */;
  (%227,)
}

def @func_5297() -> Tensor[(10, 16, 11), float32] {
  @func_576() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_2526() -> Tensor[(8, 13, 1), float32] {
  %228 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 13, 1), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 1), float32] */;
  atanh(%228) /* ty=Tensor[(8, 13, 1), float32] */
}

def @func_6318() -> Tensor[(2, 2, 5), uint32] {
  @func_5315() /* ty=Tensor[(2, 2, 5), uint32] */
}

def @func_8088() -> Tensor[(10, 16, 11), float32] {
  %229 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %229.0
}

def @func_156(%var_95: Tensor[(14, 13, 5), int8], %var_96: Tensor[(14, 13, 5), int8]) -> (Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) {
  %230 = cast(%var_96, dtype="bool") /* ty=Tensor[(14, 13, 5), bool] */;
  %231 = shape_of(%var_95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%var_95, dtype="bool") /* ty=Tensor[(14, 13, 5), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = cast(%var_96, dtype="float32") /* ty=Tensor[(14, 13, 5), float32] */;
  %235 = log2(%234) /* ty=Tensor[(14, 13, 5), float32] */;
  %236 = cast(%235, dtype="float64") /* ty=Tensor[(14, 13, 5), float64] */;
  %237 = asinh(%236) /* ty=Tensor[(14, 13, 5), float64] */;
  %238 = cast(%235, dtype="uint64") /* ty=Tensor[(14, 13, 5), uint64] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%237, dtype="uint64") /* ty=Tensor[(14, 13, 5), uint64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %242 = greater(%232, %233) /* ty=Tensor[(14, 13, 5), bool] */;
  %243 = add(%240, %241) /* ty=Tensor[(14, 13, 5), uint64] */;
  (%242, %243)
}

def @func_7813(%var_7808: Tensor[(3, 13, 10), float32]) -> (Tensor[(3, 13, 10), float32], Tensor[(10, 16, 11), float32]) {
  %244 = cast(%var_7808, dtype="float32") /* ty=Tensor[(3, 13, 10), float32] */;
  %245 = @func_2738() /* ty=(Tensor[(10, 16, 11), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %246 = cos(%244) /* ty=Tensor[(3, 13, 10), float32] */;
  %247 = %245.1;
  (%246, %247)
}

def @func_7600() -> (Tensor[(1800), float64],) {
  %248 = @func_3405() /* ty=(Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) */;
  %249 = %248.0;
  (%249,)
}

def @func_8321(%var_8301: Tensor[(1, 9, 9), float32]) -> (Tensor[(?, 9, 9), float64], Tensor[(1800), float64]) {
  %250 = cast(%var_8301, dtype="float32") /* ty=Tensor[(1, 9, 9), float32] */;
  %251 = cos(%250) /* ty=Tensor[(1, 9, 9), float32] */;
  %252 = cast(%var_8301, dtype="float64") /* ty=Tensor[(1, 9, 9), float64] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="float64") /* ty=Tensor[(1, 9, 9), float64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %256 = @func_7600() /* ty=(Tensor[(1800), float64],) */;
  %257 = divide(%254, %255) /* ty=Tensor[(?, 9, 9), float64] */;
  %258 = %256.0;
  (%257, %258)
}

def @func_4396() -> Tensor[(10, 16, 11), float32] {
  %259 = @func_2513() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %259.0
}

def @func_1165(%var_1141: Tensor[(2, 2, 5), int8]) -> (Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) {
  %260 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 2, 5), int8] */, dtype="int8") /* ty=Tensor[(2, 2, 5), int8] */;
  %261 = shape_of(%var_1141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%var_1141, dtype="int8") /* ty=Tensor[(2, 2, 5), int8] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %264 = bitwise_or(%262, %263) /* ty=Tensor[(2, 2, 5), int8] */;
  %265 = cast(%264, dtype="float64") /* ty=Tensor[(2, 2, 5), float64] */;
  %266 = cast(%264, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
  %267 = cast(%var_1141, dtype="uint32") /* ty=Tensor[(2, 2, 5), uint32] */;
  %268 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(%264, dtype="uint32") /* ty=Tensor[(2, 2, 5), uint32] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %271 = acos(%265) /* ty=Tensor[(2, 2, 5), float64] */;
  %272 = erf(%266) /* ty=Tensor[(2, 2, 5), float32] */;
  %273 = multiply(%269, %270) /* ty=Tensor[(2, 2, 5), uint32] */;
  (%271, %272, %273)
}

def @func_5943() -> (Tensor[(10, 16, 11), float32], float32) {
  %274 = @func_2738() /* ty=(Tensor[(10, 16, 11), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %275 = @func_4867() /* ty=Tensor[(10, 16, 11), float32] */;
  %276 = %274.4;
  (%275, %276)
}

def @func_6225() -> (Tensor[(5, 9, 8), float32],) {
  %277 = @func_3204() /* ty=Tensor[(5, 9, 8), float32] */;
  (%277,)
}

def @func_7902() -> (Tensor[(10, 16, 11), uint16],) {
  %278 = @func_1822() /* ty=Tensor[(10, 16, 11), uint16] */;
  (%278,)
}

def @func_4677() -> (Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) {
  %279 = @func_2621() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %280 = @func_1822() /* ty=Tensor[(10, 16, 11), uint16] */;
  %281 = %279.0;
  (%280, %281)
}

def @func_3159() -> Tensor[(10, 16, 11), float32] {
  %282 = @func_2621() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %282.0
}

def @func_4423(%var_4412: Tensor[(11, 10, 1), int8]) -> (Tensor[(11, 10, ?), bool],) {
  %283 = cast(%var_4412, dtype="bool") /* ty=Tensor[(11, 10, 1), bool] */;
  %284 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(11, 10, 1), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(meta[relay.Constant][11] /* ty=Tensor[(11, 10, 1), int8] */, dtype="bool") /* ty=Tensor[(11, 10, 1), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = greater_equal(%285, %286) /* ty=Tensor[(11, 10, ?), bool] */;
  (%287,)
}

def @func_2817(%var_2809: Tensor[(10, 16, 11), float32]) -> Tensor[(10, 16, 11), int8] {
  %288 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %289 = %288.0;
  %290 = cast(%var_2809, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%292, %293) /* ty=Tensor[(10, 16, 11), int8] */
}

def @func_2424() -> Tensor[(10, 16, 11), float32] {
  @func_1286() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4177(%var_4125: Tensor[(455, 2), int8], %var_4143: Tensor[(4, 140), int8], %var_4150: Tensor[(96), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(455, 2), bool], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(14, 13, 5), uint64]) {
  %294 = @func_2919() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %295 = cast(meta[relay.Constant][12] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %296 = reshape(%295, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %297 = @func_2084(%296) /* ty=(Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) */;
  %298 = %297.0;
  %299 = cast(%var_4125, dtype="bool") /* ty=Tensor[(455, 2), bool] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(2), int32] */;
  %301 = cast(%298, dtype="bool") /* ty=Tensor[(455, 2), bool] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %303 = cast(%var_4143, dtype="int8") /* ty=Tensor[(4, 140), int8] */;
  %304 = reshape(%303, newshape=[280, 2]) /* ty=Tensor[(280, 2), int8] */;
  %305 = @func_462(%304) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(280, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(14, 13, 5), uint64], Tensor[(910), int8]) */;
  %306 = cast(%var_4150, dtype="float64") /* ty=Tensor[(96), float64] */;
  %307 = reshape(%306, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
  %308 = @func_3568(%307) /* ty=(Tensor[(4, 6, 4), float64], Tensor[(10, 16, 11), uint8]) */;
  %309 = cast(%var_4125, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
  %310 = cast(%var_4125, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
  %311 = reshape(%309, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %312 = reshape(%310, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %313 = @func_156(%311, %312) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
  %314 = %294.0;
  %315 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %316 = less_equal(%301, %302) /* ty=Tensor[(455, 2), bool] */;
  %317 = %305.3;
  %318 = %308.0;
  %319 = %313.1;
  (%314, %315, meta[relay.Constant][12] /* ty=Tensor[(1800), float64] */, %316, %317, %var_4143, %318, %var_4150, %319)
}

def @func_1440(%var_1374: Tensor[(10, 2), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %320 = cast(%var_1374, dtype="int8") /* ty=Tensor[(10, 2), int8] */;
  %321 = reshape(%320, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %322 = @func_1229(%321) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %323 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %324 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %325 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %326 = %322.0;
  %327 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %328 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  %329 = %323.0;
  (%324, %325, %326, %var_1374, %327, %328, %329)
}

def @func_1286() -> Tensor[(10, 16, 11), float32] {
  %330 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %330.0
}

def @func_7851() -> (Tensor[(10, 16, 11), float32],) {
  %331 = @func_7580() /* ty=Tensor[(10, 16, 11), float32] */;
  (%331,)
}

def @func_4500() -> (Tensor[(10, 16, 11), float32],) {
  %332 = @func_4341() /* ty=Tensor[(10, 16, 11), float32] */;
  (%332,)
}

def @func_556(%var_523: Tensor[(8, 15, 15), float64], %var_528: Tensor[(8, 15, 15), float64], %var_534: Tensor[(8, 15, 15), float64]) -> (Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) {
  %333 = cast(%var_523, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
  %334 = cosh(%333) /* ty=Tensor[(8, 15, 15), float64] */;
  %335 = cast(%var_528, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %339 = cast(%var_534, dtype="float32") /* ty=Tensor[(8, 15, 15), float32] */;
  %340 = shape_of(%var_523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%var_523, dtype="float32") /* ty=Tensor[(8, 15, 15), float32] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %343 = cast(meta[relay.Constant][13] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
  %344 = reshape(%343, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %345 = @func_334(%344) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %346 = mod(%337, %338) /* ty=Tensor[(8, 15, 15), float64] */;
  %347 = subtract(%341, %342) /* ty=Tensor[(8, 15, 15), float32] */;
  %348 = %345.2;
  (%346, %347, %348, meta[relay.Constant][13] /* ty=Tensor[(560), int8] */)
}

def @func_5962(%var_5948: Tensor[(15, 5, 3), int32]) -> (Tensor[(15, 5, 3), bool],) {
  %349 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 5, 3), int32] */, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
  %350 = shape_of(%var_5948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %351 = cast(%var_5948, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %353 = greater(%351, %352) /* ty=Tensor[(15, 5, 3), bool] */;
  (%353,)
}

def @func_2863() -> (Tensor[(10, 16, 11), float32],) {
  %354 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %355 = %354.1;
  (%355,)
}

def @func_1094() -> Tensor[(10, 16, 11), float32] {
  @func_800() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_514(%var_512: Tensor[(455, 2), int8]) -> (Tensor[(2, 10, 1), float64], Tensor[(14, 13, 5), bool], Tensor[(455, 2), int8]) {
  %356 = cast(meta[relay.Constant][15] /* ty=Tensor[(2, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 1), float64] */;
  %357 = cast(%var_512, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
  %358 = cast(%var_512, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
  %359 = reshape(%357, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %360 = reshape(%358, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %361 = @func_156(%359, %360) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
  %362 = log(%356) /* ty=Tensor[(2, 10, 1), float64] */;
  %363 = %361.0;
  (%362, %363, %var_512)
}

def @func_6820(%var_6769: Tensor[(5, 9, 11), float32], %var_6800: Tensor[(364, 2), float64]) -> (Tensor[(5, 9, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(364, 2), float64]) {
  %364 = cast(%var_6769, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
  %365 = cast(%var_6800, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
  %366 = reshape(%365, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %367 = @func_4852(%366) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */;
  %368 = asin(%364) /* ty=Tensor[(5, 9, 11), float32] */;
  %369 = @func_4719() /* ty=Tensor[(10, 16, 11), float32] */;
  %370 = %367.4;
  (%368, %369, %370, %var_6800)
}

def @func_6916(%var_6862: Tensor[(6, 8, 4), float64], %var_6875: Tensor[(104), uint32], %var_6877: Tensor[(6, 8, 4), float64], %var_6905: Tensor[(6, 8, 4), float64]) -> (Tensor[(13, 8, 10), float32], Tensor[(104), uint32], Tensor[(6, 8, 4), bool], Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32], Tensor[(6, 8, 4), float64], Tensor[(10, 16, 11), float32]) {
  %371 = cast(%var_6875, dtype="uint32") /* ty=Tensor[(104), uint32] */;
  %372 = reshape(%371, newshape=[13, 8, 1]) /* ty=Tensor[(13, 8, 1), uint32] */;
  %373 = @func_5454(%372) /* ty=(Tensor[(13, 8, 10), float32], Tensor[(13, 8, 10), float32]) */;
  %374 = cast(%var_6862, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %375 = sinh(%374) /* ty=Tensor[(6, 8, 4), float64] */;
  %376 = cast(%var_6877, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %380 = @func_4955() /* ty=(Tensor[(10, 16, 11), uint16],) */;
  %381 = cast(%375, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %382 = atanh(%381) /* ty=Tensor[(6, 8, 4), float64] */;
  %383 = cast(%var_6905, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%382, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %387 = %373.1;
  %388 = equal(%378, %379) /* ty=Tensor[(6, 8, 4), bool] */;
  %389 = %380.0;
  %390 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  %391 = floor_divide(%385, %386) /* ty=Tensor[(6, 8, 4), float64] */;
  %392 = @func_6155() /* ty=Tensor[(10, 16, 11), float32] */;
  (%387, %var_6875, %388, %389, %390, %391, %392)
}

def @func_1721(%var_1706: Tensor[(12, 9, 13), float64]) -> Tensor[(12, 9, 13), float64] {
  %393 = cast(%var_1706, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  asin(%393) /* ty=Tensor[(12, 9, 13), float64] */
}

def @func_7580() -> Tensor[(10, 16, 11), float32] {
  %394 = @func_1885() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %394.0
}

def @func_7135() -> (Tensor[(16, 1, 1), float64],) {
  %395 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 1, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
  %396 = log(%395) /* ty=Tensor[(16, 1, 1), float64] */;
  (%396,)
}

def @func_6155() -> Tensor[(10, 16, 11), float32] {
  %397 = @func_2919() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %397.0
}

def @func_7437() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16], Tensor[(728), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %398 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %399 = %398.0;
  %400 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %404 = cast(meta[relay.Constant][18] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %405 = reshape(%404, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %406 = @func_5883(%405) /* ty=(Tensor[(2, 2, 5), uint32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) */;
  %407 = power(%402, %403) /* ty=Tensor[(10, 16, 11), float32] */;
  %408 = @func_1822() /* ty=Tensor[(10, 16, 11), uint16] */;
  %409 = %406.2;
  %410 = @func_5297() /* ty=Tensor[(10, 16, 11), float32] */;
  %411 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  (%407, %408, %409, meta[relay.Constant][18] /* ty=Tensor[(728), float64] */, %410, %411)
}

def @func_4852(%var_4815: Tensor[(728), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) {
  %412 = cast(%var_4815, dtype="float64") /* ty=Tensor[(728), float64] */;
  %413 = reshape(%412, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), float64] */;
  %414 = @func_3725(%413) /* ty=(Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %415 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %416 = @func_4769() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */;
  %417 = @func_3159() /* ty=Tensor[(10, 16, 11), float32] */;
  %418 = %414.0;
  %419 = %415.0;
  %420 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
  %421 = %416.2;
  (%417, %418, %var_4815, %419, %420, %421)
}

def @func_8486() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %422 = @func_4500() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %423 = @func_7097() /* ty=Tensor[(10, 16, 11), float32] */;
  %424 = %422.0;
  (%423, %424)
}

def @func_5883(%var_5870: Tensor[(728), float64]) -> (Tensor[(2, 2, 5), uint32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) {
  %425 = @func_1488() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) */;
  %426 = cast(%var_5870, dtype="float64") /* ty=Tensor[(728), float64] */;
  %427 = reshape(%426, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), float64] */;
  %428 = @func_3725(%427) /* ty=(Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %429 = @func_4955() /* ty=(Tensor[(10, 16, 11), uint16],) */;
  %430 = %425.1;
  %431 = %428.0;
  %432 = @func_5297() /* ty=Tensor[(10, 16, 11), float32] */;
  %433 = %429.0;
  (%430, %431, %var_5870, %432, %433)
}

def @func_5531(%var_5515: Tensor[(910), int8], %var_5517: Tensor[(96), float64]) -> (Tensor[(2, 2, 5), float64], Tensor[(14, 13, 5), uint64], Tensor[(910), int8], Tensor[(560), int8], Tensor[(96), float64]) {
  %434 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
  %435 = cast(%434, dtype="float64") /* ty=Tensor[(2, 2, 5), float64] */;
  %436 = cast(%var_5515, dtype="int8") /* ty=Tensor[(910), int8] */;
  %437 = cast(meta[relay.Constant][19] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
  %438 = cast(%var_5517, dtype="float64") /* ty=Tensor[(96), float64] */;
  %439 = reshape(%436, newshape=[455, 2]) /* ty=Tensor[(455, 2), int8] */;
  %440 = reshape(%437, newshape=[4, 140]) /* ty=Tensor[(4, 140), int8] */;
  %441 = reshape(%438, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %442 = @func_4177(%439, %440, %441) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(455, 2), bool], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(14, 13, 5), uint64]) */;
  %443 = atan(%435) /* ty=Tensor[(2, 2, 5), float64] */;
  %444 = %442.8;
  (%443, %444, %var_5515, meta[relay.Constant][19] /* ty=Tensor[(560), int8] */, %var_5517)
}

def @func_8882() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %445 = @func_2621() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %446 = @func_5218() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) */;
  %447 = %445.1;
  %448 = %446.0;
  (%447, %448)
}

def @func_4341() -> Tensor[(10, 16, 11), float32] {
  %449 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %449.0
}

def @func_237() -> Tensor[(10, 16, 11), float32] {
  %450 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  sigmoid(%450) /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_8846(%var_8823: Tensor[(55, 9), float32], %var_8824: Tensor[(728), float64]) -> (Tensor[(13, 9, 5), float32], Tensor[(10, 16, 11), float32], Tensor[(55, 9), float32], Tensor[(728), float64]) {
  %451 = @func_4088() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */;
  %452 = cast(%var_8823, dtype="float32") /* ty=Tensor[(55, 9), float32] */;
  %453 = cast(%var_8824, dtype="float64") /* ty=Tensor[(728), float64] */;
  %454 = reshape(%452, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float32] */;
  %455 = reshape(%453, newshape=[364, 2]) /* ty=Tensor[(364, 2), float64] */;
  %456 = @func_6820(%454, %455) /* ty=(Tensor[(5, 9, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(364, 2), float64]) */;
  %457 = %451.1;
  %458 = %456.2;
  (%457, %458, %var_8823, %var_8824)
}

def @func_5680() -> (Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) {
  %459 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
  %460 = cast(%459, dtype="int8") /* ty=Tensor[(2, 2, 5), int8] */;
  %461 = reshape(%460, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %462 = @func_1229(%461) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %463 = %462.0;
  %464 = @func_1822() /* ty=Tensor[(10, 16, 11), uint16] */;
  (%459, %463, %464)
}

def @func_9005(%var_8981: Tensor[(1, 20), int8], %var_8982: Tensor[(1, 1800), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(5, 9, 8), uint16], Tensor[(10, 16, 11), float32], Tensor[(45), int8], Tensor[(14, 64), float64], Tensor[(1, 20), int8], Tensor[(1, 1800), float64], Tensor[(10, 16, 11), uint16]) {
  %465 = @func_5627() /* ty=(Tensor[(5, 9, 8), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %466 = %465.0;
  %467 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 9, 8), float32] */, dtype="uint16") /* ty=Tensor[(5, 9, 8), uint16] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="uint16") /* ty=Tensor[(5, 9, 8), uint16] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %471 = cast(meta[relay.Constant][22] /* ty=Tensor[(45), int8] */, dtype="int8") /* ty=Tensor[(45), int8] */;
  %472 = cast(meta[relay.Constant][22] /* ty=Tensor[(45), int8] */, dtype="int8") /* ty=Tensor[(45), int8] */;
  %473 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 64), float64] */, dtype="float64") /* ty=Tensor[(14, 64), float64] */;
  %474 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 64), float64] */, dtype="float64") /* ty=Tensor[(14, 64), float64] */;
  %475 = cast(%var_8981, dtype="int8") /* ty=Tensor[(1, 20), int8] */;
  %476 = cast(%var_8982, dtype="float64") /* ty=Tensor[(1, 1800), float64] */;
  %477 = reshape(%471, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), int8] */;
  %478 = reshape(%472, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), int8] */;
  %479 = reshape(%473, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %480 = reshape(%474, newshape=[896]) /* ty=Tensor[(896), float64] */;
  %481 = reshape(%475, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %482 = reshape(%476, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %483 = @func_8760(%477, %478, %479, %480, %481, %482) /* ty=(Tensor[(5, 3, 3), int8], Tensor[(16, 8, 7), int8], Tensor[(896), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */;
  %484 = @func_4677() /* ty=(Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) */;
  %485 = @func_1731() /* ty=Tensor[(10, 16, 11), float32] */;
  %486 = add(%469, %470) /* ty=Tensor[(5, 9, 8), uint16] */;
  %487 = %483.4;
  %488 = %484.0;
  (%485, %486, %487, meta[relay.Constant][22] /* ty=Tensor[(45), int8] */, meta[relay.Constant][23] /* ty=Tensor[(14, 64), float64] */, %var_8981, %var_8982, %488)
}

def @func_9136(%var_9129: Tensor[(10, 16, 11), float32]) -> Tensor[(10, 16, 11), bool] {
  %489 = @func_7851() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %490 = %489.0;
  %491 = cast(%var_9129, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%493, %494) /* ty=Tensor[(10, 16, 11), bool] */
}

def @func_576() -> Tensor[(10, 16, 11), float32] {
  @func_237() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_6338() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %495 = @func_2621() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %496 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %497 = %495.1;
  %498 = %496.0;
  (%497, %498)
}

def @func_3125(%var_3114: Tensor[(10, 16, 11), float32]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  %499 = @func_2863() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %500 = %499.0;
  %501 = cast(%var_3114, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %502 = shape_of(%500, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%500, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %505 = cast(meta[relay.Constant][24] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %506 = reshape(%505, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %507 = @func_2084(%506) /* ty=(Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) */;
  %508 = floor_mod(%503, %504) /* ty=Tensor[(10, 16, 11), float32] */;
  %509 = %507.6;
  (%508, %509, meta[relay.Constant][24] /* ty=Tensor[(1800), float64] */)
}

def @func_6497() -> Tensor[(10, 16, 11), float32] {
  %510 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %510.0
}

def @func_8806() -> (Tensor[(10, 16, 11), float32],) {
  %511 = @func_1885() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %512 = %511.1;
  (%512,)
}

def @func_2456() -> (Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) {
  %513 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  %514 = cast(%513, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %515 = cast(meta[relay.Constant][25] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
  %516 = reshape(%515, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %517 = @func_1229(%516) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %518 = rsqrt(%514) /* ty=Tensor[(10, 16, 11), float32] */;
  %519 = %517.2;
  (%518, %519, meta[relay.Constant][25] /* ty=Tensor[(20), int8] */)
}

def @func_6036() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64], Tensor[(1800), float64], Tensor[(10, 16, 11), float32]) {
  %520 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 104), float64] */, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
  %521 = reshape(%520, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %522 = @func_4852(%521) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */;
  %523 = @func_2299() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */;
  %524 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %525 = @func_3177() /* ty=Tensor[(10, 16, 11), float32] */;
  %526 = @func_2424() /* ty=Tensor[(10, 16, 11), float32] */;
  %527 = %522.4;
  %528 = %523.1;
  %529 = %524.0;
  (%525, %526, %527, meta[relay.Constant][26] /* ty=Tensor[(7, 104), float64] */, %528, %529)
}

def @func_3819() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(728), float64], Tensor[(7, 13, 8), float64]) {
  %530 = @func_2863() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %531 = cast(meta[relay.Constant][27] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %532 = reshape(%531, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), float64] */;
  %533 = @func_3725(%532) /* ty=(Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %534 = %533.0;
  %535 = cast(%534, dtype="float64") /* ty=Tensor[(7, 13, 8), float64] */;
  %536 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
  %537 = %530.0;
  %538 = tan(%535) /* ty=Tensor[(7, 13, 8), float64] */;
  (%536, %537, meta[relay.Constant][27] /* ty=Tensor[(728), float64] */, %538)
}

def @func_6204(%var_6187: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32],) {
  %539 = cast(%var_6187, dtype="float32") /* ty=Tensor[(15, 3, 3), float32] */;
  %540 = acos(%539) /* ty=Tensor[(15, 3, 3), float32] */;
  (%540,)
}

def @func_5315() -> Tensor[(2, 2, 5), uint32] {
  %541 = @func_5218() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) */;
  %541.1
}

def @func_800() -> Tensor[(10, 16, 11), float32] {
  @func_576() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_1822() -> Tensor[(10, 16, 11), uint16] {
  %542 = @func_1286() /* ty=Tensor[(10, 16, 11), float32] */;
  %543 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 16, 11), float32] */, dtype="uint16") /* ty=Tensor[(10, 16, 11), uint16] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="uint16") /* ty=Tensor[(10, 16, 11), uint16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%545, %546) /* ty=Tensor[(10, 16, 11), uint16] */
}

def @func_5744() -> (Tensor[(10, 16, 11), float32],) {
  %547 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  (%547,)
}

def @func_6392() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 4, 5), float64], Tensor[(200), float64], Tensor[(10, 16, 11), float32]) {
  %548 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %549 = cast(meta[relay.Constant][29] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %550 = reshape(%549, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float64] */;
  %551 = @func_644(%550) /* ty=(Tensor[(10, 4, 5), float64],) */;
  %552 = %548.0;
  %553 = %551.0;
  %554 = @func_4719() /* ty=Tensor[(10, 16, 11), float32] */;
  (%552, %553, meta[relay.Constant][29] /* ty=Tensor[(200), float64] */, %554)
}

def @func_4375() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %555 = @func_4341() /* ty=Tensor[(10, 16, 11), float32] */;
  %556 = @func_2977() /* ty=Tensor[(10, 16, 11), float32] */;
  %557 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  (%555, %556, %557)
}

def @func_2299() -> (Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  %558 = cast(meta[relay.Constant][30] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %559 = cast(meta[relay.Constant][30] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %560 = cast(meta[relay.Constant][30] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %561 = reshape(%558, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %562 = reshape(%559, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %563 = reshape(%560, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %564 = @func_556(%561, %562, %563) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %565 = %564.0;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
  %567 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(1800), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %568 = cast(meta[relay.Constant][30] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?), float64] */;
  %570 = @func_1286() /* ty=Tensor[(10, 16, 11), float32] */;
  %571 = divide(%568, %569) /* ty=Tensor[(1800), float64] */;
  (%570, %571)
}

def @func_8047() -> (Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  %572 = @func_1885() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %573 = @func_5793() /* ty=(Tensor[(1800), float64], Tensor[(2, 2, 5), uint64]) */;
  %574 = %572.1;
  %575 = %573.0;
  (%574, %575)
}

def @func_2621() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %576 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %577 = %576.0;
  %578 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  (%577, %578)
}

def @func_7678(%var_7658: int32) -> (Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], int32, Tensor[(429), int32]) {
  %579 = @func_5680() /* ty=(Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) */;
  %580 = cast(%var_7658, dtype="int32") /* ty=int32 */;
  %581 = cast(meta[relay.Constant][31] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
  %582 = cast(meta[relay.Constant][31] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
  %583 = reshape(%580, newshape=[]) /* ty=int32 */;
  %584 = reshape(%581, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), int32] */;
  %585 = reshape(%582, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), int32] */;
  %586 = @func_5108(%583, %584, %585) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(20), int8], Tensor[(11, 13, 3), float64], Tensor[(1, 200), float64]) */;
  %587 = %579.1;
  %588 = %586.0;
  (%587, %588, %var_7658, meta[relay.Constant][31] /* ty=Tensor[(429), int32] */)
}

def @func_1661() -> (Tensor[(10, 16, 11), uint8],) {
  %589 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %590 = %589.0;
  %591 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 16, 11), float32] */, dtype="uint8") /* ty=Tensor[(10, 16, 11), uint8] */;
  %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %593 = cast(%590, dtype="uint8") /* ty=Tensor[(10, 16, 11), uint8] */;
  %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %595 = logical_xor(%593, %594) /* ty=Tensor[(10, 16, 11), uint8] */;
  (%595,)
}

def @func_7225(%var_7221: Tensor[(15, 4, 15), uint16]) -> Tensor[(15, 4, 15), bool] {
  %596 = cast(%var_7221, dtype="bool") /* ty=Tensor[(15, 4, 15), bool] */;
  %597 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(15, 4, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 4, 15), uint16] */, dtype="bool") /* ty=Tensor[(15, 4, 15), bool] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%598, %599) /* ty=Tensor[(15, 4, 15), bool] */
}

def @func_7206() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %600 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %601 = @func_4277() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), uint8]) */;
  %602 = %600.0;
  %603 = %601.0;
  (%602, %603)
}

def @func_7935() -> Tensor[(10, 16, 11), float32] {
  @func_1094() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_3285(%var_3274: Tensor[(13, 9, 5), float32], %var_3275: Tensor[(13, 9, 5), float32]) -> Tensor[(13, 9, 5), float32] {
  %604 = cast(%var_3275, dtype="float32") /* ty=Tensor[(13, 9, 5), float32] */;
  %605 = shape_of(%var_3274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_3274, dtype="float32") /* ty=Tensor[(13, 9, 5), float32] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  add(%606, %607) /* ty=Tensor[(13, 9, 5), float32] */
}

def @func_4955() -> (Tensor[(10, 16, 11), uint16],) {
  %608 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %609 = cast(%608, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %610 = atan(%609) /* ty=Tensor[(10, 16, 11), float64] */;
  %611 = cast(%608, dtype="uint16") /* ty=Tensor[(10, 16, 11), uint16] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="uint16") /* ty=Tensor[(10, 16, 11), uint16] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %615 = bitwise_or(%613, %614) /* ty=Tensor[(10, 16, 11), uint16] */;
  (%615,)
}

def @func_6276() -> (Tensor[(2, 2, 5), uint64], Tensor[(13, 6, 4), float32], Tensor[(312), float32]) {
  %616 = @func_5793() /* ty=(Tensor[(1800), float64], Tensor[(2, 2, 5), uint64]) */;
  %617 = cast(meta[relay.Constant][34] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %618 = reshape(%617, newshape=[13, 6, 4]) /* ty=Tensor[(13, 6, 4), float32] */;
  %619 = @func_5986(%618) /* ty=(Tensor[(13, 6, 4), float32],) */;
  %620 = %616.1;
  %621 = %619.0;
  (%620, %621, meta[relay.Constant][34] /* ty=Tensor[(312), float32] */)
}

def @func_8156(%var_8139: Tensor[(728), float64]) -> (Tensor[(2, 2, 5), uint32], Tensor[(364, 2), float64], Tensor[(10, 16, 11), float32], Tensor[(728), bool], Tensor[(495, 728), float32], Tensor[(10, 16, 11), float32]) {
  %622 = cast(meta[relay.Constant][35] /* ty=Tensor[(495, 1), float32] */, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %623 = cast(meta[relay.Constant][36] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %624 = reshape(%622, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float32] */;
  %625 = reshape(%623, newshape=[364, 2]) /* ty=Tensor[(364, 2), float64] */;
  %626 = @func_6820(%624, %625) /* ty=(Tensor[(5, 9, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(364, 2), float64]) */;
  %627 = @func_5218() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) */;
  %628 = cast(%var_8139, dtype="bool") /* ty=Tensor[(728), bool] */;
  %629 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(728), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %630 = cast(meta[relay.Constant][36] /* ty=Tensor[(728), float64] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?), bool] */;
  %632 = cast(meta[relay.Constant][36] /* ty=Tensor[(728), float64] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %633 = cast(meta[relay.Constant][35] /* ty=Tensor[(495, 1), float32] */, dtype="bool") /* ty=Tensor[(495, 1), bool] */;
  %634 = greater(%632, %633) /* ty=Tensor[(495, 728), bool] */;
  %635 = cast(meta[relay.Constant][36] /* ty=Tensor[(728), float64] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %636 = cast(%634, dtype="float32") /* ty=Tensor[(495, 728), float32] */;
  %637 = @func_6318() /* ty=Tensor[(2, 2, 5), uint32] */;
  %638 = %626.3;
  %639 = %627.0;
  %640 = not_equal(%630, %631) /* ty=Tensor[(728), bool] */;
  %641 = add(%635, %636) /* ty=Tensor[(495, 728), float32] */;
  %642 = @func_8088() /* ty=Tensor[(10, 16, 11), float32] */;
  (%637, %638, %639, %640, %641, %642)
}

def @func_2919() -> (Tensor[(10, 16, 11), float32],) {
  %643 = @func_1286() /* ty=Tensor[(10, 16, 11), float32] */;
  (%643,)
}

def @func_462(%var_418: Tensor[(280, 2), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(280, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(14, 13, 5), uint64], Tensor[(910), int8]) {
  %644 = cast(%var_418, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %645 = reshape(%644, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %646 = @func_334(%645) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %647 = cast(%var_418, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %648 = reshape(%647, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %649 = @func_334(%648) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %650 = cast(meta[relay.Constant][37] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %651 = cast(meta[relay.Constant][37] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %652 = reshape(%650, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %653 = reshape(%651, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %654 = @func_156(%652, %653) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
  %655 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %656 = %646.1;
  %657 = %649.1;
  %658 = %654.1;
  (%655, %656, %var_418, %657, %658, meta[relay.Constant][37] /* ty=Tensor[(910), int8] */)
}

def @func_4719() -> Tensor[(10, 16, 11), float32] {
  @func_2977() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_3928(%var_3859: Tensor[(560), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(560), int8], Tensor[(10, 16, 11), float32]) {
  %659 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %660 = cast(%var_3859, dtype="int8") /* ty=Tensor[(560), int8] */;
  %661 = reshape(%660, newshape=[560]) /* ty=Tensor[(560), int8] */;
  %662 = @func_629(%661) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(8, 5, 14), bool], Tensor[(560), int8]) */;
  %663 = cast(%var_3859, dtype="int8") /* ty=Tensor[(560), int8] */;
  %664 = reshape(%663, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %665 = @func_334(%664) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %666 = %659.0;
  %667 = %662.3;
  %668 = %665.2;
  (%666, %667, %var_3859, %668)
}

def @func_7731() -> Tensor[(10, 16, 11), float32] {
  @func_4867() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_1117() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) {
  %669 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 200), float64] */, dtype="float64") /* ty=Tensor[(1, 200), float64] */;
  %670 = reshape(%669, newshape=[200]) /* ty=Tensor[(200), float64] */;
  %671 = @func_992(%670) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float32], Tensor[(1800), float64], Tensor[(10, 4, 5), float64], Tensor[(200), float64]) */;
  %672 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
  %673 = %671.1;
  (%672, %673, meta[relay.Constant][38] /* ty=Tensor[(1, 200), float64] */)
}

def @func_1488() -> (Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) {
  %674 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %676 = log10(%675) /* ty=Tensor[(10, 16, 11), float32] */;
  %677 = cast(%676, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %678 = cast(meta[relay.Constant][39] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
  %679 = reshape(%678, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), int8] */;
  %680 = @func_1165(%679) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) */;
  %681 = asin(%677) /* ty=Tensor[(10, 16, 11), float32] */;
  %682 = %680.2;
  (%681, %682, meta[relay.Constant][39] /* ty=Tensor[(20), int8] */)
}

def @func_1885() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %683 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %684 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
  %685 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %686 = %683.0;
  %687 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  (%684, %685, %686, %687)
}

def @func_3568(%var_3555: Tensor[(4, 6, 4), float64]) -> (Tensor[(4, 6, 4), float64], Tensor[(10, 16, 11), uint8]) {
  %688 = cast(%var_3555, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %689 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
  %690 = sin(%688) /* ty=Tensor[(4, 6, 4), float64] */;
  %691 = %689.0;
  (%690, %691)
}

def @func_7021() -> (Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) {
  %692 = @func_4955() /* ty=(Tensor[(10, 16, 11), uint16],) */;
  %693 = @func_6392() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 4, 5), float64], Tensor[(200), float64], Tensor[(10, 16, 11), float32]) */;
  %694 = %692.0;
  %695 = %693.3;
  (%694, %695)
}

def @func_5126() -> (Tensor[(10, 16, 11), float32],) {
  %696 = @func_1731() /* ty=Tensor[(10, 16, 11), float32] */;
  (%696,)
}

def @func_7067() -> Tensor[(10, 16, 11), float32] {
  %697 = @func_1885() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %697.0
}

def @func_3093() -> Tensor[(2, 2, 5), uint32] {
  %698 = @func_1488() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) */;
  %698.1
}

def @func_7280() -> (Tensor[(10, 16, 11), float32], Tensor[(8, 13, 1), float32]) {
  %699 = @func_1731() /* ty=Tensor[(10, 16, 11), float32] */;
  %700 = @func_2526() /* ty=Tensor[(8, 13, 1), float32] */;
  (%699, %700)
}

def @func_8409(%var_8373: Tensor[(1, 7, 4), int8], %var_8374: Tensor[(12, 7, 4), int8], %var_8378: Tensor[(12, 7, 4), int8]) -> (Tensor[(12, 7, 4), bool], Tensor[(1, 7, 4), float64]) {
  %701 = cast(%var_8373, dtype="int8") /* ty=Tensor[(1, 7, 4), int8] */;
  %702 = cast(%var_8374, dtype="int8") /* ty=Tensor[(12, 7, 4), int8] */;
  %703 = bitwise_and(%701, %702) /* ty=Tensor[(12, 7, 4), int8] */;
  %704 = cast(%var_8378, dtype="bool") /* ty=Tensor[(12, 7, 4), bool] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%703, dtype="bool") /* ty=Tensor[(12, 7, 4), bool] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %708 = not_equal(%706, %707) /* ty=Tensor[(12, 7, 4), bool] */;
  %709 = cast(%703, dtype="uint32") /* ty=Tensor[(12, 7, 4), uint32] */;
  %710 = shape_of(%var_8374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%var_8374, dtype="uint32") /* ty=Tensor[(12, 7, 4), uint32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %713 = minimum(%711, %712) /* ty=Tensor[(12, 7, 4), uint32] */;
  %714 = cast(%713, dtype="bool") /* ty=Tensor[(12, 7, 4), bool] */;
  %715 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%708, dtype="bool") /* ty=Tensor[(12, 7, 4), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %718 = cast(%var_8373, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
  %719 = less_equal(%716, %717) /* ty=Tensor[(12, 7, 4), bool] */;
  %720 = log2(%718) /* ty=Tensor[(1, 7, 4), float64] */;
  (%719, %720)
}

def @func_5218() -> (Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) {
  %721 = @func_2977() /* ty=Tensor[(10, 16, 11), float32] */;
  %722 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
  (%721, %722)
}

def @func_2084(%var_1974: Tensor[(1800), float64]) -> (Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) {
  %723 = cast(meta[relay.Constant][40] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %724 = reshape(%723, newshape=[455, 2]) /* ty=Tensor[(455, 2), int8] */;
  %725 = @func_514(%724) /* ty=(Tensor[(2, 10, 1), float64], Tensor[(14, 13, 5), bool], Tensor[(455, 2), int8]) */;
  %726 = cast(%var_1974, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %727 = cast(%var_1974, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %728 = cast(%var_1974, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %729 = reshape(%726, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %730 = reshape(%727, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %731 = reshape(%728, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %732 = @func_556(%729, %730, %731) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %733 = cast(meta[relay.Constant][42] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
  %734 = reshape(%733, newshape=[10, 2]) /* ty=Tensor[(10, 2), int8] */;
  %735 = @func_1440(%734) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %736 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %737 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  %738 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 140), int8] */, dtype="int8") /* ty=Tensor[(4, 140), int8] */;
  %739 = reshape(%738, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %740 = @func_334(%739) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %741 = %740.3;
  %742 = cast(%741, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %743 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%737, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %746 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %747 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %748 = cast(-0.856479f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %749 = reshape(%748, newshape=[]) /* ty=float32 */;
  %750 = @func_1081(%749) /* ty=(Tensor[(12, 10, 1), float32], Tensor[(12, 10, 1), float32]) */;
  %751 = %750.1;
  %752 = cast(%var_1974, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %753 = cast(%751, dtype="float64") /* ty=Tensor[(12, 10, 1), float64] */;
  %754 = cast(meta[relay.Constant][40] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %755 = %725.2;
  %756 = cast(%755, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
  %757 = reshape(%754, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %758 = reshape(%756, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %759 = @func_156(%757, %758) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
  %760 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 140), int8] */, dtype="int8") /* ty=Tensor[(4, 140), int8] */;
  %761 = reshape(%760, newshape=[560]) /* ty=Tensor[(560), int8] */;
  %762 = @func_629(%761) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(8, 5, 14), bool], Tensor[(560), int8]) */;
  %763 = cast(meta[relay.Constant][43] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %764 = reshape(%763, newshape=[200]) /* ty=Tensor[(200), float64] */;
  %765 = @func_992(%764) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float32], Tensor[(1800), float64], Tensor[(10, 4, 5), float64], Tensor[(200), float64]) */;
  %766 = %732.1;
  %767 = %735.2;
  %768 = %736.0;
  %769 = logical_or(%744, %745) /* ty=Tensor[(10, 16, 11), bool] */;
  %770 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %771 = %746.0;
  %772 = %747.0;
  %773 = power(%752, %753) /* ty=Tensor[(12, 10, 1800), float64] */;
  %774 = %759.0;
  %775 = %762.5;
  %776 = %765.3;
  (%755, meta[relay.Constant][40] /* ty=Tensor[(910), int8] */, %766, meta[relay.Constant][41] /* ty=Tensor[(4, 140), int8] */, %767, meta[relay.Constant][42] /* ty=Tensor[(20), int8] */, %768, %769, %770, -0.856479f /* ty=float32 */, %771, %772, %773, %774, %775, %776, meta[relay.Constant][43] /* ty=Tensor[(200), float64] */)
}

def @func_6473() -> Tensor[(1, 200), float64] {
  %777 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %777.2
}

def @func_1229(%var_1222: Tensor[(20), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) {
  %778 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %779 = cast(%var_1222, dtype="int8") /* ty=Tensor[(20), int8] */;
  %780 = reshape(%779, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), int8] */;
  %781 = @func_1165(%780) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) */;
  %782 = %778.1;
  %783 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %784 = %781.0;
  (%782, %783, %784, %var_1222)
}

def @func_7182(%var_7164: Tensor[(5, 9, 8), float32]) -> (Tensor[(10, 16, 11), float32], Tensor[(5, 9, 8), float32]) {
  %785 = @func_3204() /* ty=Tensor[(5, 9, 8), float32] */;
  %786 = cast(%var_7164, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %790 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %791 = divide(%788, %789) /* ty=Tensor[(5, 9, 8), float32] */;
  (%790, %791)
}

def @func_992(%var_987: Tensor[(200), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float32], Tensor[(1800), float64], Tensor[(10, 4, 5), float64], Tensor[(200), float64]) {
  %792 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %793 = cast(meta[relay.Constant][44] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %794 = cast(meta[relay.Constant][44] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %795 = cast(meta[relay.Constant][44] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %796 = reshape(%793, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %797 = reshape(%794, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %798 = reshape(%795, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %799 = @func_556(%796, %797, %798) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %800 = cast(%var_987, dtype="float64") /* ty=Tensor[(200), float64] */;
  %801 = reshape(%800, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float64] */;
  %802 = @func_644(%801) /* ty=(Tensor[(10, 4, 5), float64],) */;
  %803 = %792.0;
  %804 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %805 = %799.1;
  %806 = %802.0;
  (%803, %804, %805, meta[relay.Constant][44] /* ty=Tensor[(1800), float64] */, %806, %var_987)
}

def @func_3177() -> Tensor[(10, 16, 11), float32] {
  @func_800() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4634(%var_4582: Tensor[(6, 200), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(6, 200), int64], Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32]) {
  %807 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %808 = %807.2;
  %809 = cast(%808, dtype="float64") /* ty=Tensor[(1, 200), float64] */;
  %810 = log10(%809) /* ty=Tensor[(1, 200), float64] */;
  %811 = cast(%810, dtype="bool") /* ty=Tensor[(1, 200), bool] */;
  %812 = cast(%var_4582, dtype="bool") /* ty=Tensor[(6, 200), bool] */;
  %813 = not_equal(%811, %812) /* ty=Tensor[(6, 200), bool] */;
  %814 = cast(%813, dtype="int64") /* ty=Tensor[(6, 200), int64] */;
  %815 = shape_of(%var_4582, dtype="int32") /* ty=Tensor[(2), int32] */;
  %816 = cast(%var_4582, dtype="int64") /* ty=Tensor[(6, 200), int64] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %818 = @func_1488() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) */;
  %819 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  %820 = multiply(%816, %817) /* ty=Tensor[(6, 200), int64] */;
  %821 = %818.1;
  %822 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
  (%819, %820, %821, %822)
}

def @func_5401() -> (Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) {
  %823 = @func_4277() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), uint8]) */;
  %824 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 104), float64] */, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
  %825 = reshape(%824, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), float64] */;
  %826 = @func_3725(%825) /* ty=(Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %827 = %823.2;
  %828 = %826.1;
  (%827, %828, meta[relay.Constant][45] /* ty=Tensor[(7, 104), float64] */)
}

def @func_8760(%var_8707: Tensor[(5, 3, 3), int8], %var_8708: Tensor[(5, 3, 3), int8], %var_8715: Tensor[(896), float64], %var_8723: Tensor[(896), float64], %var_8735: Tensor[(20), int8], %var_8756: Tensor[(1800), float64]) -> (Tensor[(5, 3, 3), int8], Tensor[(16, 8, 7), int8], Tensor[(896), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  %829 = cast(%var_8708, dtype="int8") /* ty=Tensor[(5, 3, 3), int8] */;
  %830 = shape_of(%var_8707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %831 = cast(%var_8707, dtype="int8") /* ty=Tensor[(5, 3, 3), int8] */;
  %832 = dyn.reshape(%829, %830, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %833 = cast(%var_8715, dtype="float64") /* ty=Tensor[(896), float64] */;
  %834 = reshape(%833, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), float64] */;
  %835 = @func_7525(%834) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(16, 8, 7), int8]) */;
  %836 = cast(%var_8723, dtype="bool") /* ty=Tensor[(896), bool] */;
  %837 = shape_of(%var_8715, dtype="int32") /* ty=Tensor[(1), int32] */;
  %838 = cast(%var_8715, dtype="bool") /* ty=Tensor[(896), bool] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?), bool] */;
  %840 = @func_6036() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64], Tensor[(1800), float64], Tensor[(10, 16, 11), float32]) */;
  %841 = cast(%var_8735, dtype="int8") /* ty=Tensor[(20), int8] */;
  %842 = reshape(%841, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %843 = @func_1229(%842) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %844 = cast(%var_8756, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %845 = cast(%var_8756, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %846 = cast(%var_8756, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %847 = reshape(%844, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %848 = reshape(%845, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %849 = reshape(%846, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %850 = @func_556(%847, %848, %849) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %851 = right_shift(%831, %832) /* ty=Tensor[(5, 3, 3), int8] */;
  %852 = %835.1;
  %853 = less(%838, %839) /* ty=Tensor[(896), bool] */;
  %854 = %840.2;
  %855 = %843.0;
  %856 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %857 = %850.2;
  (%851, %852, %853, %854, %855, %var_8735, %856, %857, %var_8756)
}

def @func_3725(%var_3686: Tensor[(7, 13, 8), float64]) -> (Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %858 = cast(%var_3686, dtype="float64") /* ty=Tensor[(7, 13, 8), float64] */;
  %859 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %860 = log10(%858) /* ty=Tensor[(7, 13, 8), float64] */;
  %861 = %859.0;
  %862 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  (%860, %861, %862)
}

def @func_7157() -> Tensor[(10, 16, 11), float32] {
  %863 = @func_4088() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */;
  %863.0
}

def @func_1731() -> Tensor[(10, 16, 11), float32] {
  %864 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %864.0
}

def @func_5986(%var_5983: Tensor[(13, 6, 4), float32]) -> (Tensor[(13, 6, 4), float32],) {
  %865 = cast(%var_5983, dtype="float32") /* ty=Tensor[(13, 6, 4), float32] */;
  %866 = acosh(%865) /* ty=Tensor[(13, 6, 4), float32] */;
  (%866,)
}

def @func_6831() -> Tensor[(10, 16, 11), float32] {
  @func_576() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_3837() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %867 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %868 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  (%867, %868)
}

def @func_1783(%var_1750: int16, %var_1751: Tensor[(12, 14, 10), int16]) -> (Tensor[(12, 14, 10), bool], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) {
  %869 = cast(%var_1750, dtype="bool") /* ty=bool */;
  %870 = cast(%var_1751, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
  %871 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
  %872 = greater_equal(%869, %870) /* ty=Tensor[(12, 14, 10), bool] */;
  %873 = %871.0;
  %874 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  (%872, %873, %874)
}

def @func_9245() -> (Tensor[(10, 16, 11), uint16],) {
  %875 = @func_7902() /* ty=(Tensor[(10, 16, 11), uint16],) */;
  %876 = %875.0;
  (%876,)
}

def @func_7525(%var_7514: Tensor[(16, 8, 7), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(16, 8, 7), int8]) {
  %877 = @func_7135() /* ty=(Tensor[(16, 1, 1), float64],) */;
  %878 = %877.0;
  %879 = cast(%878, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
  %880 = exp(%879) /* ty=Tensor[(16, 1, 1), float64] */;
  %881 = cast(%880, dtype="int8") /* ty=Tensor[(16, 1, 1), int8] */;
  %882 = cast(%var_7514, dtype="int8") /* ty=Tensor[(16, 8, 7), int8] */;
  %883 = @func_6155() /* ty=Tensor[(10, 16, 11), float32] */;
  %884 = right_shift(%881, %882) /* ty=Tensor[(16, 8, 7), int8] */;
  (%883, %884)
}

def @func_9276() -> (Tensor[(10, 16, 11), float32],) {
  %885 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %886 = %885.0;
  (%886,)
}

def @func_644(%var_638: Tensor[(10, 4, 5), float64]) -> (Tensor[(10, 4, 5), float64],) {
  %887 = cast(%var_638, dtype="float64") /* ty=Tensor[(10, 4, 5), float64] */;
  %888 = sqrt(%887) /* ty=Tensor[(10, 4, 5), float64] */;
  (%888,)
}

def @func_5454(%var_5409: Tensor[(13, 8, 1), uint32]) -> (Tensor[(13, 8, 10), float32], Tensor[(13, 8, 10), float32]) {
  %889 = cast(%var_5409, dtype="uint32") /* ty=Tensor[(13, 8, 1), uint32] */;
  %890 = cast(meta[relay.Constant][46] /* ty=Tensor[(13, 8, 10), uint32] */, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
  %891 = bitwise_and(%889, %890) /* ty=Tensor[(13, 8, 10), uint32] */;
  %892 = cast(%891, dtype="float32") /* ty=Tensor[(13, 8, 10), float32] */;
  %893 = cast(%891, dtype="float32") /* ty=Tensor[(13, 8, 10), float32] */;
  %894 = log(%892) /* ty=Tensor[(13, 8, 10), float32] */;
  %895 = atan(%893) /* ty=Tensor[(13, 8, 10), float32] */;
  (%894, %895)
}

def @func_407(%var_388: Tensor[(560), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8], Tensor[(14, 13, 5), bool], Tensor[(910), int8], Tensor[(10, 16, 11), float32]) {
  %896 = cast(%var_388, dtype="int8") /* ty=Tensor[(560), int8] */;
  %897 = reshape(%896, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %898 = @func_334(%897) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %899 = cast(meta[relay.Constant][47] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %900 = cast(meta[relay.Constant][47] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %901 = reshape(%899, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %902 = reshape(%900, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %903 = @func_156(%901, %902) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
  %904 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %905 = %898.3;
  %906 = %903.0;
  %907 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  (%904, %905, %var_388, %906, meta[relay.Constant][47] /* ty=Tensor[(910), int8] */, %907)
}

def @func_8613() -> (Tensor[(10, 16, 11), uint16], Tensor[(13, 9, 5), float32], Tensor[(10, 16, 11), float32]) {
  %908 = @func_7902() /* ty=(Tensor[(10, 16, 11), uint16],) */;
  %909 = @func_4088() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */;
  %910 = %908.0;
  %911 = %909.1;
  %912 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
  (%910, %911, %912)
}

def @func_1081(%var_1060: float32) -> (Tensor[(12, 10, 1), float32], Tensor[(12, 10, 1), float32]) {
  %913 = cast(%var_1060, dtype="float32") /* ty=float32 */;
  %914 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
  %915 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
  %916 = divide(%913, %914) /* ty=Tensor[(12, 10, 1), float32] */;
  %917 = cosh(%915) /* ty=Tensor[(12, 10, 1), float32] */;
  (%916, %917)
}

def @func_6675(%var_6634: Tensor[(1800), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(1800), uint8], Tensor[(20), int8], int32, Tensor[(429), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %918 = cast(%var_6634, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %919 = reshape(%918, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %920 = @func_2084(%919) /* ty=(Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) */;
  %921 = cast(meta[relay.Constant][49] /* ty=Tensor[(1800), float64] */, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %922 = shape_of(%var_6634, dtype="int32") /* ty=Tensor[(1), int32] */;
  %923 = cast(%var_6634, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %925 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %926 = cast(meta[relay.Constant][50] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
  %927 = cast(meta[relay.Constant][50] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
  %928 = reshape(%925, newshape=[]) /* ty=int32 */;
  %929 = reshape(%926, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), int32] */;
  %930 = reshape(%927, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), int32] */;
  %931 = @func_5108(%928, %929, %930) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(20), int8], Tensor[(11, 13, 3), float64], Tensor[(1, 200), float64]) */;
  %932 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %933 = @func_2977() /* ty=Tensor[(10, 16, 11), float32] */;
  %934 = @func_6155() /* ty=Tensor[(10, 16, 11), float32] */;
  %935 = @func_2424() /* ty=Tensor[(10, 16, 11), float32] */;
  %936 = %920.3;
  %937 = add(%923, %924) /* ty=Tensor[(1800), uint8] */;
  %938 = %931.7;
  %939 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
  %940 = %932.1;
  (%933, %934, %935, %936, %937, %938, -3 /* ty=int32 */, meta[relay.Constant][50] /* ty=Tensor[(429), int32] */, %939, %940)
}

def @func_334(%var_287: Tensor[(8, 5, 14), int8]) -> (Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %941 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 5, 14), int8] */, dtype="bool") /* ty=Tensor[(8, 5, 14), bool] */;
  %942 = shape_of(%var_287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %943 = cast(%var_287, dtype="bool") /* ty=Tensor[(8, 5, 14), bool] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %945 = not_equal(%943, %944) /* ty=Tensor[(8, 5, 14), bool] */;
  %946 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %947 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %948 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  (%945, %946, %947, %948)
}

def @func_7550() -> (Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) {
  %949 = @func_5401() /* ty=(Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) */;
  %950 = %949.0;
  %951 = @func_3177() /* ty=Tensor[(10, 16, 11), float32] */;
  (%950, %951)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5457(%var_5455: Tensor[(13, 8, 1), uint32]) -> (Tensor[(13, 8, 10), float32], Tensor[(13, 8, 10), float32]) {
  @func_5454(%var_5455) /* ty=(Tensor[(13, 8, 10), float32], Tensor[(13, 8, 10), float32]) */
}

def @func_6675(%var_6634: Tensor[(1800), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(1800), uint8], Tensor[(20), int8], int32, Tensor[(429), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %0 = cast(%var_6634, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %1 = reshape(%0, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %2 = @func_2084(%1) /* ty=(Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1800), float64] */, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %4 = shape_of(%var_6634, dtype="int32") /* ty=Tensor[(1), int32] */;
  %5 = cast(%var_6634, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %7 = cast(-3 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
  %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
  %10 = reshape(%7, newshape=[]) /* ty=int32 */;
  %11 = reshape(%8, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), int32] */;
  %12 = reshape(%9, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), int32] */;
  %13 = @func_5108(%10, %11, %12) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(20), int8], Tensor[(11, 13, 3), float64], Tensor[(1, 200), float64]) */;
  %14 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %15 = @func_2977() /* ty=Tensor[(10, 16, 11), float32] */;
  %16 = @func_6155() /* ty=Tensor[(10, 16, 11), float32] */;
  %17 = @func_2424() /* ty=Tensor[(10, 16, 11), float32] */;
  %18 = %2.3;
  %19 = add(%5, %6) /* ty=Tensor[(1800), uint8] */;
  %20 = %13.7;
  %21 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
  %22 = %14.1;
  (%15, %16, %17, %18, %19, %20, -3 /* ty=int32 */, meta[relay.Constant][1] /* ty=Tensor[(429), int32] */, %21, %22)
}

def @func_5454(%var_5409: Tensor[(13, 8, 1), uint32]) -> (Tensor[(13, 8, 10), float32], Tensor[(13, 8, 10), float32]) {
  %23 = cast(%var_5409, dtype="uint32") /* ty=Tensor[(13, 8, 1), uint32] */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 8, 10), uint32] */, dtype="uint32") /* ty=Tensor[(13, 8, 10), uint32] */;
  %25 = bitwise_and(%23, %24) /* ty=Tensor[(13, 8, 10), uint32] */;
  %26 = cast(%25, dtype="float32") /* ty=Tensor[(13, 8, 10), float32] */;
  %27 = cast(%25, dtype="float32") /* ty=Tensor[(13, 8, 10), float32] */;
  %28 = log(%26) /* ty=Tensor[(13, 8, 10), float32] */;
  %29 = atan(%27) /* ty=Tensor[(13, 8, 10), float32] */;
  (%28, %29)
}

def @func_9245() -> (Tensor[(10, 16, 11), uint16],) {
  %30 = @func_7902() /* ty=(Tensor[(10, 16, 11), uint16],) */;
  %31 = %30.0;
  (%31,)
}

def @func_3839() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_6823(%var_6821: Tensor[(5, 9, 11), float32], %var_6822: Tensor[(364, 2), float64]) -> (Tensor[(5, 9, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(364, 2), float64]) {
  %39 = fn (%var_6769: Tensor[(5, 9, 11), float32], %var_6800: Tensor[(364, 2), float64]) -> (Tensor[(5, 9, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(364, 2), float64]) {
    %32 = cast(%var_6769, dtype="float32") /* ty=Tensor[(5, 9, 11), float32] */;
    %33 = cast(%var_6800, dtype="float64") /* ty=Tensor[(364, 2), float64] */;
    %34 = reshape(%33, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %35 = @func_4852(%34) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */;
    %36 = asin(%32) /* ty=Tensor[(5, 9, 11), float32] */;
    %37 = @func_4719() /* ty=Tensor[(10, 16, 11), float32] */;
    %38 = %35.4;
    (%36, %37, %38, %var_6800)
  };
  %39(%var_6821, %var_6822) /* ty=(Tensor[(5, 9, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(364, 2), float64]) */
}

def @func_7601() -> (Tensor[(1800), float64],) {
  %42 = fn () -> (Tensor[(1800), float64],) {
    %40 = @func_3405() /* ty=(Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) */;
    %41 = %40.0;
    (%41,)
  };
  %42() /* ty=(Tensor[(1800), float64],) */
}

def @func_1661() -> (Tensor[(10, 16, 11), uint8],) {
  %43 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %44 = %43.0;
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 16, 11), float32] */, dtype="uint8") /* ty=Tensor[(10, 16, 11), uint8] */;
  %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %47 = cast(%44, dtype="uint8") /* ty=Tensor[(10, 16, 11), uint8] */;
  %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %49 = logical_xor(%47, %48) /* ty=Tensor[(10, 16, 11), uint8] */;
  (%49,)
}

def @func_4502() -> (Tensor[(10, 16, 11), float32],) {
  @func_4500() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_8488() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_8486() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_8291(%var_8290: Tensor[(4, 4, 11), float32]) -> Tensor[(4, 4, 11), float32] {
  %51 = fn (%var_8274: Tensor[(4, 4, 11), float32]) -> Tensor[(4, 4, 11), float32] {
    %50 = cast(%var_8274, dtype="float32") /* ty=Tensor[(4, 4, 11), float32] */;
    acos(%50) /* ty=Tensor[(4, 4, 11), float32] */
  };
  %51(%var_8290) /* ty=Tensor[(4, 4, 11), float32] */
}

def @func_8049() -> (Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  @func_8047() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */
}

def @func_2920() -> (Tensor[(10, 16, 11), float32],) {
  %53 = fn () -> (Tensor[(10, 16, 11), float32],) {
    %52 = @func_1286() /* ty=Tensor[(10, 16, 11), float32] */;
    (%52,)
  };
  %53() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_1824() -> Tensor[(10, 16, 11), uint16] {
  @func_1822() /* ty=Tensor[(10, 16, 11), uint16] */
}

def @func_6548(%var_6547: Tensor[(1800), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(1800), uint8]) {
  %62 = fn (%var_6538: Tensor[(1800), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(1800), uint8]) {
    %54 = @func_3405() /* ty=(Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) */;
    %55 = %54.0;
    %56 = cast(%var_6538, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
    %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(1), int32] */;
    %58 = cast(%55, dtype="uint8") /* ty=Tensor[(1800), uint8] */;
    %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %60 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
    %61 = logical_xor(%58, %59) /* ty=Tensor[(1800), uint8] */;
    (%60, %61)
  };
  %62(%var_6547) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), uint8]) */
}

def @func_7206() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %63 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %64 = @func_4277() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), uint8]) */;
  %65 = %63.0;
  %66 = %64.0;
  (%65, %66)
}

def @func_8846(%var_8823: Tensor[(55, 9), float32], %var_8824: Tensor[(728), float64]) -> (Tensor[(13, 9, 5), float32], Tensor[(10, 16, 11), float32], Tensor[(55, 9), float32], Tensor[(728), float64]) {
  %67 = @func_4088() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */;
  %68 = cast(%var_8823, dtype="float32") /* ty=Tensor[(55, 9), float32] */;
  %69 = cast(%var_8824, dtype="float64") /* ty=Tensor[(728), float64] */;
  %70 = reshape(%68, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float32] */;
  %71 = reshape(%69, newshape=[364, 2]) /* ty=Tensor[(364, 2), float64] */;
  %72 = @func_6820(%70, %71) /* ty=(Tensor[(5, 9, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(364, 2), float64]) */;
  %73 = %67.1;
  %74 = %72.2;
  (%73, %74, %var_8823, %var_8824)
}

def @func_7228(%var_7226: Tensor[(15, 4, 15), uint16]) -> Tensor[(15, 4, 15), bool] {
  @func_7225(%var_7226) /* ty=Tensor[(15, 4, 15), bool] */
}

def @func_5108(%var_5009: int32, %var_5010: Tensor[(11, 13, 3), int32], %var_5023: Tensor[(11, 13, 3), int32]) -> (Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(20), int8], Tensor[(11, 13, 3), float64], Tensor[(1, 200), float64]) {
  %75 = cast(%var_5023, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %76 = shape_of(%var_5010, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%var_5010, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = cast(%var_5009, dtype="bool") /* ty=bool */;
  %80 = cast(%var_5010, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %81 = greater_equal(%79, %80) /* ty=Tensor[(11, 13, 3), bool] */;
  %82 = cast(%var_5010, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="bool") /* ty=Tensor[(11, 13, 3), bool] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %86 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %87 = @func_4500() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %88 = cast(meta[relay.Constant][4] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
  %89 = reshape(%88, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %90 = @func_1229(%89) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %91 = cast(%var_5023, dtype="float64") /* ty=Tensor[(11, 13, 3), float64] */;
  %92 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %93 = logical_and(%77, %78) /* ty=Tensor[(11, 13, 3), bool] */;
  %94 = @func_4341() /* ty=Tensor[(10, 16, 11), float32] */;
  %95 = not_equal(%84, %85) /* ty=Tensor[(11, 13, 3), bool] */;
  %96 = %86.1;
  %97 = %87.0;
  %98 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %99 = %90.3;
  %100 = log2(%91) /* ty=Tensor[(11, 13, 3), float64] */;
  %101 = %92.2;
  (%93, %94, %95, %96, %97, %98, %99, meta[relay.Constant][4] /* ty=Tensor[(20), int8] */, %100, %101)
}

def @func_8662() -> (Tensor[(2, 2, 5), uint32],) {
  %102 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
  (%102,)
}

def @func_629(%var_625: Tensor[(560), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(8, 5, 14), bool], Tensor[(560), int8]) {
  %103 = cast(meta[relay.Constant][5] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %104 = cast(meta[relay.Constant][5] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %105 = cast(meta[relay.Constant][5] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %106 = reshape(%103, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %107 = reshape(%104, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %108 = reshape(%105, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %109 = @func_556(%106, %107, %108) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %110 = %109.1;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
  %112 = cast(%var_625, dtype="int8") /* ty=Tensor[(560), int8] */;
  %113 = reshape(%112, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %114 = @func_334(%113) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %115 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %116 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %117 = atan(%111) /* ty=Tensor[(8, 15, 15), float64] */;
  %118 = %114.0;
  (%115, meta[relay.Constant][5] /* ty=Tensor[(1800), float64] */, %116, %117, %118, %var_625)
}

def @func_7208() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_7206() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_4719() -> Tensor[(10, 16, 11), float32] {
  @func_2977() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_1663() -> (Tensor[(10, 16, 11), uint8],) {
  @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */
}

def @func_7580() -> Tensor[(10, 16, 11), float32] {
  %119 = @func_1885() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %119.0
}

def @func_2424() -> Tensor[(10, 16, 11), float32] {
  @func_1286() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_6292() -> float32 {
  %121 = fn () -> float32 {
    %120 = @func_5943() /* ty=(Tensor[(10, 16, 11), float32], float32) */;
    %120.1
  };
  %121() /* ty=float32 */
}

def @func_7137() -> (Tensor[(16, 1, 1), float64],) {
  @func_7135() /* ty=(Tensor[(16, 1, 1), float64],) */
}

def @func_159(%var_157: Tensor[(14, 13, 5), int8], %var_158: Tensor[(14, 13, 5), int8]) -> (Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) {
  %136 = fn (%var_95: Tensor[(14, 13, 5), int8], %var_96: Tensor[(14, 13, 5), int8]) -> (Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) {
    %122 = cast(%var_96, dtype="bool") /* ty=Tensor[(14, 13, 5), bool] */;
    %123 = shape_of(%var_95, dtype="int32") /* ty=Tensor[(3), int32] */;
    %124 = cast(%var_95, dtype="bool") /* ty=Tensor[(14, 13, 5), bool] */;
    %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %126 = cast(%var_96, dtype="float32") /* ty=Tensor[(14, 13, 5), float32] */;
    %127 = log2(%126) /* ty=Tensor[(14, 13, 5), float32] */;
    %128 = cast(%127, dtype="float64") /* ty=Tensor[(14, 13, 5), float64] */;
    %129 = asinh(%128) /* ty=Tensor[(14, 13, 5), float64] */;
    %130 = cast(%127, dtype="uint64") /* ty=Tensor[(14, 13, 5), uint64] */;
    %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
    %132 = cast(%129, dtype="uint64") /* ty=Tensor[(14, 13, 5), uint64] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %134 = greater(%124, %125) /* ty=Tensor[(14, 13, 5), bool] */;
    %135 = add(%132, %133) /* ty=Tensor[(14, 13, 5), uint64] */;
    (%134, %135)
  };
  %136(%var_157, %var_158) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */
}

def @func_632(%var_630: Tensor[(560), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(8, 5, 14), bool], Tensor[(560), int8]) {
  @func_629(%var_630) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(8, 5, 14), bool], Tensor[(560), int8]) */
}

def @func_9138(%var_9137: Tensor[(10, 16, 11), float32]) -> Tensor[(10, 16, 11), bool] {
  %143 = fn (%var_9129: Tensor[(10, 16, 11), float32]) -> Tensor[(10, 16, 11), bool] {
    %137 = @func_7851() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %138 = %137.0;
    %139 = cast(%var_9129, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
    %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
    %141 = cast(%138, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
    %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%141, %142) /* ty=Tensor[(10, 16, 11), bool] */
  };
  %143(%var_9137) /* ty=Tensor[(10, 16, 11), bool] */
}

def @func_6204(%var_6187: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32],) {
  %144 = cast(%var_6187, dtype="float32") /* ty=Tensor[(15, 3, 3), float32] */;
  %145 = acos(%144) /* ty=Tensor[(15, 3, 3), float32] */;
  (%145,)
}

def @func_407(%var_388: Tensor[(560), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8], Tensor[(14, 13, 5), bool], Tensor[(910), int8], Tensor[(10, 16, 11), float32]) {
  %146 = cast(%var_388, dtype="int8") /* ty=Tensor[(560), int8] */;
  %147 = reshape(%146, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %148 = @func_334(%147) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %149 = cast(meta[relay.Constant][6] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %150 = cast(meta[relay.Constant][6] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %151 = reshape(%149, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %152 = reshape(%150, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %153 = @func_156(%151, %152) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
  %154 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %155 = %148.3;
  %156 = %153.0;
  %157 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  (%154, %155, %var_388, %156, meta[relay.Constant][6] /* ty=Tensor[(910), int8] */, %157)
}

def @func_5403() -> (Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) {
  @func_5401() /* ty=(Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) */
}

def @func_3095() -> Tensor[(2, 2, 5), uint32] {
  @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */
}

def @func_9008(%var_9006: Tensor[(1, 20), int8], %var_9007: Tensor[(1, 1800), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(5, 9, 8), uint16], Tensor[(10, 16, 11), float32], Tensor[(45), int8], Tensor[(14, 64), float64], Tensor[(1, 20), int8], Tensor[(1, 1800), float64], Tensor[(10, 16, 11), uint16]) {
  %182 = fn (%var_8981: Tensor[(1, 20), int8], %var_8982: Tensor[(1, 1800), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(5, 9, 8), uint16], Tensor[(10, 16, 11), float32], Tensor[(45), int8], Tensor[(14, 64), float64], Tensor[(1, 20), int8], Tensor[(1, 1800), float64], Tensor[(10, 16, 11), uint16]) {
    %158 = @func_5627() /* ty=(Tensor[(5, 9, 8), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
    %159 = %158.0;
    %160 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 9, 8), float32] */, dtype="uint16") /* ty=Tensor[(5, 9, 8), uint16] */;
    %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
    %162 = cast(%159, dtype="uint16") /* ty=Tensor[(5, 9, 8), uint16] */;
    %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %164 = cast(meta[relay.Constant][8] /* ty=Tensor[(45), int8] */, dtype="int8") /* ty=Tensor[(45), int8] */;
    %165 = cast(meta[relay.Constant][8] /* ty=Tensor[(45), int8] */, dtype="int8") /* ty=Tensor[(45), int8] */;
    %166 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 64), float64] */, dtype="float64") /* ty=Tensor[(14, 64), float64] */;
    %167 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 64), float64] */, dtype="float64") /* ty=Tensor[(14, 64), float64] */;
    %168 = cast(%var_8981, dtype="int8") /* ty=Tensor[(1, 20), int8] */;
    %169 = cast(%var_8982, dtype="float64") /* ty=Tensor[(1, 1800), float64] */;
    %170 = reshape(%164, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), int8] */;
    %171 = reshape(%165, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), int8] */;
    %172 = reshape(%166, newshape=[896]) /* ty=Tensor[(896), float64] */;
    %173 = reshape(%167, newshape=[896]) /* ty=Tensor[(896), float64] */;
    %174 = reshape(%168, newshape=[20]) /* ty=Tensor[(20), int8] */;
    %175 = reshape(%169, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
    %176 = @func_8760(%170, %171, %172, %173, %174, %175) /* ty=(Tensor[(5, 3, 3), int8], Tensor[(16, 8, 7), int8], Tensor[(896), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */;
    %177 = @func_4677() /* ty=(Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) */;
    %178 = @func_1731() /* ty=Tensor[(10, 16, 11), float32] */;
    %179 = add(%162, %163) /* ty=Tensor[(5, 9, 8), uint16] */;
    %180 = %176.4;
    %181 = %177.0;
    (%178, %179, %180, meta[relay.Constant][8] /* ty=Tensor[(45), int8] */, meta[relay.Constant][9] /* ty=Tensor[(14, 64), float64] */, %var_8981, %var_8982, %181)
  };
  %182(%var_9006, %var_9007) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(5, 9, 8), uint16], Tensor[(10, 16, 11), float32], Tensor[(45), int8], Tensor[(14, 64), float64], Tensor[(1, 20), int8], Tensor[(1, 1800), float64], Tensor[(10, 16, 11), uint16]) */
}

def @func_6207(%var_6205: Tensor[(15, 3, 3), float32]) -> (Tensor[(15, 3, 3), float32],) {
  @func_6204(%var_6205) /* ty=(Tensor[(15, 3, 3), float32],) */
}

def @func_2281() -> Tensor[(10, 16, 11), float32] {
  @func_1286() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_3177() -> Tensor[(10, 16, 11), float32] {
  @func_800() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_3288(%var_3286: Tensor[(13, 9, 5), float32], %var_3287: Tensor[(13, 9, 5), float32]) -> Tensor[(13, 9, 5), float32] {
  %187 = fn (%var_3274: Tensor[(13, 9, 5), float32], %var_3275: Tensor[(13, 9, 5), float32]) -> Tensor[(13, 9, 5), float32] {
    %183 = cast(%var_3275, dtype="float32") /* ty=Tensor[(13, 9, 5), float32] */;
    %184 = shape_of(%var_3274, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(%var_3274, dtype="float32") /* ty=Tensor[(13, 9, 5), float32] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    add(%185, %186) /* ty=Tensor[(13, 9, 5), float32] */
  };
  %187(%var_3286, %var_3287) /* ty=Tensor[(13, 9, 5), float32] */
}

def @func_337(%var_335: Tensor[(8, 5, 14), int8]) -> (Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_334(%var_335) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_1229(%var_1222: Tensor[(20), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) {
  %188 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %189 = cast(%var_1222, dtype="int8") /* ty=Tensor[(20), int8] */;
  %190 = reshape(%189, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), int8] */;
  %191 = @func_1165(%190) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) */;
  %192 = %188.1;
  %193 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %194 = %191.0;
  (%192, %193, %194, %var_1222)
}

def @func_5682() -> (Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) {
  @func_5680() /* ty=(Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) */
}

def @func_5219() -> (Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) {
  %197 = fn () -> (Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) {
    %195 = @func_2977() /* ty=Tensor[(10, 16, 11), float32] */;
    %196 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
    (%195, %196)
  };
  %197() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) */
}

def @func_1335() -> Tensor[(10, 16, 11), float32] {
  @func_1333() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_7525(%var_7514: Tensor[(16, 8, 7), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(16, 8, 7), int8]) {
  %198 = @func_7135() /* ty=(Tensor[(16, 1, 1), float64],) */;
  %199 = %198.0;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
  %201 = exp(%200) /* ty=Tensor[(16, 1, 1), float64] */;
  %202 = cast(%201, dtype="int8") /* ty=Tensor[(16, 1, 1), int8] */;
  %203 = cast(%var_7514, dtype="int8") /* ty=Tensor[(16, 8, 7), int8] */;
  %204 = @func_6155() /* ty=Tensor[(10, 16, 11), float32] */;
  %205 = right_shift(%202, %203) /* ty=Tensor[(16, 8, 7), int8] */;
  (%204, %205)
}

def @func_7397(%var_7395: Tensor[(910), int8], %var_7396: Tensor[(96), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(96), float64], Tensor[(910), int8], Tensor[(96), float64], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float32], Tensor[(20), int8]) {
  %218 = fn (%var_7368: Tensor[(910), int8], %var_7369: Tensor[(96), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(96), float64], Tensor[(910), int8], Tensor[(96), float64], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float32], Tensor[(20), int8]) {
    %206 = cast(%var_7368, dtype="int8") /* ty=Tensor[(910), int8] */;
    %207 = cast(%var_7369, dtype="float64") /* ty=Tensor[(96), float64] */;
    %208 = reshape(%206, newshape=[910]) /* ty=Tensor[(910), int8] */;
    %209 = reshape(%207, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %210 = @func_5531(%208, %209) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(14, 13, 5), uint64], Tensor[(910), int8], Tensor[(560), int8], Tensor[(96), float64]) */;
    %211 = cast(meta[relay.Constant][10] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
    %212 = reshape(%211, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), int8] */;
    %213 = @func_1165(%212) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) */;
    %214 = @func_5157() /* ty=Tensor[(10, 16, 11), float32] */;
    %215 = %210.4;
    %216 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
    %217 = %213.1;
    (%214, %215, %var_7368, %var_7369, %216, %217, meta[relay.Constant][10] /* ty=Tensor[(20), int8] */)
  };
  %218(%var_7395, %var_7396) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(96), float64], Tensor[(910), int8], Tensor[(96), float64], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float32], Tensor[(20), int8]) */
}

def @func_3204() -> Tensor[(5, 9, 8), float32] {
  %219 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 9, 8), float32] */, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  exp(%219) /* ty=Tensor[(5, 9, 8), float32] */
}

def @func_4770() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) {
  %225 = fn () -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) {
    %220 = @func_4500() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %221 = @func_4088() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */;
    %222 = %220.0;
    %223 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
    %224 = %221.2;
    (%222, %223, %224)
  };
  %225() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */
}

def @func_1096() -> Tensor[(10, 16, 11), float32] {
  @func_1094() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4884(%var_4883: Tensor[(4, 1, 9), float32]) -> (Tensor[(4, 1, 9), float64], Tensor[(10, 16, 11), float32]) {
  %231 = fn (%var_4874: Tensor[(4, 1, 9), float32]) -> (Tensor[(4, 1, 9), float64], Tensor[(10, 16, 11), float32]) {
    %226 = cast(%var_4874, dtype="float32") /* ty=Tensor[(4, 1, 9), float32] */;
    %227 = erf(%226) /* ty=Tensor[(4, 1, 9), float32] */;
    %228 = cast(%227, dtype="float64") /* ty=Tensor[(4, 1, 9), float64] */;
    %229 = sin(%228) /* ty=Tensor[(4, 1, 9), float64] */;
    %230 = @func_3177() /* ty=Tensor[(10, 16, 11), float32] */;
    (%229, %230)
  };
  %231(%var_4883) /* ty=(Tensor[(4, 1, 9), float64], Tensor[(10, 16, 11), float32]) */
}

def @func_2740() -> (Tensor[(10, 16, 11), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_2738() /* ty=(Tensor[(10, 16, 11), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_2977() -> Tensor[(10, 16, 11), float32] {
  %232 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %232.0
}

def @func_855() -> (Tensor[(10, 16, 11), float32],) {
  %234 = fn () -> (Tensor[(10, 16, 11), float32],) {
    %233 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
    (%233,)
  };
  %234() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_7680(%var_7679: int32) -> (Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], int32, Tensor[(429), int32]) {
  %245 = fn (%var_7658: int32) -> (Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], int32, Tensor[(429), int32]) {
    %235 = @func_5680() /* ty=(Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) */;
    %236 = cast(%var_7658, dtype="int32") /* ty=int32 */;
    %237 = cast(meta[relay.Constant][12] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
    %238 = cast(meta[relay.Constant][12] /* ty=Tensor[(429), int32] */, dtype="int32") /* ty=Tensor[(429), int32] */;
    %239 = reshape(%236, newshape=[]) /* ty=int32 */;
    %240 = reshape(%237, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), int32] */;
    %241 = reshape(%238, newshape=[11, 13, 3]) /* ty=Tensor[(11, 13, 3), int32] */;
    %242 = @func_5108(%239, %240, %241) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(20), int8], Tensor[(11, 13, 3), float64], Tensor[(1, 200), float64]) */;
    %243 = %235.1;
    %244 = %242.0;
    (%243, %244, %var_7658, meta[relay.Constant][12] /* ty=Tensor[(429), int32] */)
  };
  %245(%var_7679) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], int32, Tensor[(429), int32]) */
}

def @func_2863() -> (Tensor[(10, 16, 11), float32],) {
  %246 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %247 = %246.1;
  (%247,)
}

def @func_334(%var_287: Tensor[(8, 5, 14), int8]) -> (Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %248 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 5, 14), int8] */, dtype="bool") /* ty=Tensor[(8, 5, 14), bool] */;
  %249 = shape_of(%var_287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%var_287, dtype="bool") /* ty=Tensor[(8, 5, 14), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = not_equal(%250, %251) /* ty=Tensor[(8, 5, 14), bool] */;
  %253 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %254 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %255 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  (%252, %253, %254, %255)
}

def @func_576() -> Tensor[(10, 16, 11), float32] {
  @func_237() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4396() -> Tensor[(10, 16, 11), float32] {
  %256 = @func_2513() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %256.0
}

def @func_6833() -> Tensor[(10, 16, 11), float32] {
  @func_6831() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4868() -> Tensor[(10, 16, 11), float32] {
  %257 = fn () -> Tensor[(10, 16, 11), float32] {
    @func_1286() /* ty=Tensor[(10, 16, 11), float32] */
  };
  %257() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4398() -> Tensor[(10, 16, 11), float32] {
  @func_4396() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_5627() -> (Tensor[(5, 9, 8), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %258 = @func_4769() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */;
  %259 = @func_2513() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %260 = @func_4862() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %261 = @func_3204() /* ty=Tensor[(5, 9, 8), float32] */;
  %262 = %258.0;
  %263 = %259.0;
  %264 = %260.0;
  (%261, %262, %263, %264)
}

def @func_6037() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64], Tensor[(1800), float64], Tensor[(10, 16, 11), float32]) {
  %275 = fn () -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64], Tensor[(1800), float64], Tensor[(10, 16, 11), float32]) {
    %265 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 104), float64] */, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
    %266 = reshape(%265, newshape=[728]) /* ty=Tensor[(728), float64] */;
    %267 = @func_4852(%266) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */;
    %268 = @func_2299() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */;
    %269 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %270 = @func_3177() /* ty=Tensor[(10, 16, 11), float32] */;
    %271 = @func_2424() /* ty=Tensor[(10, 16, 11), float32] */;
    %272 = %267.4;
    %273 = %268.1;
    %274 = %269.0;
    (%270, %271, %272, meta[relay.Constant][14] /* ty=Tensor[(7, 104), float64] */, %273, %274)
  };
  %275() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64], Tensor[(1800), float64], Tensor[(10, 16, 11), float32]) */
}

def @func_4955() -> (Tensor[(10, 16, 11), uint16],) {
  %276 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
  %278 = atan(%277) /* ty=Tensor[(10, 16, 11), float64] */;
  %279 = cast(%276, dtype="uint16") /* ty=Tensor[(10, 16, 11), uint16] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="uint16") /* ty=Tensor[(10, 16, 11), uint16] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %283 = bitwise_or(%281, %282) /* ty=Tensor[(10, 16, 11), uint16] */;
  (%283,)
}

def @func_4181(%var_4178: Tensor[(455, 2), int8], %var_4179: Tensor[(4, 140), int8], %var_4180: Tensor[(96), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(455, 2), bool], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(14, 13, 5), uint64]) {
  %310 = fn (%var_4125: Tensor[(455, 2), int8], %var_4143: Tensor[(4, 140), int8], %var_4150: Tensor[(96), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(455, 2), bool], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(14, 13, 5), uint64]) {
    %284 = @func_2919() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %285 = cast(meta[relay.Constant][15] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %286 = reshape(%285, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
    %287 = @func_2084(%286) /* ty=(Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) */;
    %288 = %287.0;
    %289 = cast(%var_4125, dtype="bool") /* ty=Tensor[(455, 2), bool] */;
    %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(2), int32] */;
    %291 = cast(%288, dtype="bool") /* ty=Tensor[(455, 2), bool] */;
    %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %293 = cast(%var_4143, dtype="int8") /* ty=Tensor[(4, 140), int8] */;
    %294 = reshape(%293, newshape=[280, 2]) /* ty=Tensor[(280, 2), int8] */;
    %295 = @func_462(%294) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(280, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(14, 13, 5), uint64], Tensor[(910), int8]) */;
    %296 = cast(%var_4150, dtype="float64") /* ty=Tensor[(96), float64] */;
    %297 = reshape(%296, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
    %298 = @func_3568(%297) /* ty=(Tensor[(4, 6, 4), float64], Tensor[(10, 16, 11), uint8]) */;
    %299 = cast(%var_4125, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
    %300 = cast(%var_4125, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
    %301 = reshape(%299, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
    %302 = reshape(%300, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
    %303 = @func_156(%301, %302) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
    %304 = %284.0;
    %305 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
    %306 = less_equal(%291, %292) /* ty=Tensor[(455, 2), bool] */;
    %307 = %295.3;
    %308 = %298.0;
    %309 = %303.1;
    (%304, %305, meta[relay.Constant][15] /* ty=Tensor[(1800), float64] */, %306, %307, %var_4143, %308, %var_4150, %309)
  };
  %310(%var_4178, %var_4179, %var_4180) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(455, 2), bool], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(14, 13, 5), uint64]) */
}

def @func_5680() -> (Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) {
  %311 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
  %312 = cast(%311, dtype="int8") /* ty=Tensor[(2, 2, 5), int8] */;
  %313 = reshape(%312, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %314 = @func_1229(%313) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %315 = %314.0;
  %316 = @func_1822() /* ty=Tensor[(10, 16, 11), uint16] */;
  (%311, %315, %316)
}

def @func_5317() -> Tensor[(2, 2, 5), uint32] {
  @func_5315() /* ty=Tensor[(2, 2, 5), uint32] */
}

def @func_7528(%var_7526: Tensor[(16, 8, 7), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(16, 8, 7), int8]) {
  @func_7525(%var_7526) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(16, 8, 7), int8]) */
}

def @func_9277() -> (Tensor[(10, 16, 11), float32],) {
  %319 = fn () -> (Tensor[(10, 16, 11), float32],) {
    %317 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %318 = %317.0;
    (%318,)
  };
  %319() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_4500() -> (Tensor[(10, 16, 11), float32],) {
  %320 = @func_4341() /* ty=Tensor[(10, 16, 11), float32] */;
  (%320,)
}

def @func_7815(%var_7814: Tensor[(3, 13, 10), float32]) -> (Tensor[(3, 13, 10), float32], Tensor[(10, 16, 11), float32]) {
  %325 = fn (%var_7808: Tensor[(3, 13, 10), float32]) -> (Tensor[(3, 13, 10), float32], Tensor[(10, 16, 11), float32]) {
    %321 = cast(%var_7808, dtype="float32") /* ty=Tensor[(3, 13, 10), float32] */;
    %322 = @func_2738() /* ty=(Tensor[(10, 16, 11), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
    %323 = cos(%321) /* ty=Tensor[(3, 13, 10), float32] */;
    %324 = %322.1;
    (%323, %324)
  };
  %325(%var_7814) /* ty=(Tensor[(3, 13, 10), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_7282() -> (Tensor[(10, 16, 11), float32], Tensor[(8, 13, 1), float32]) {
  @func_7280() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(8, 13, 1), float32]) */
}

def @func_5744() -> (Tensor[(10, 16, 11), float32],) {
  %326 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  (%326,)
}

def @func_8090() -> Tensor[(10, 16, 11), float32] {
  @func_8088() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_8156(%var_8139: Tensor[(728), float64]) -> (Tensor[(2, 2, 5), uint32], Tensor[(364, 2), float64], Tensor[(10, 16, 11), float32], Tensor[(728), bool], Tensor[(495, 728), float32], Tensor[(10, 16, 11), float32]) {
  %327 = cast(meta[relay.Constant][16] /* ty=Tensor[(495, 1), float32] */, dtype="float32") /* ty=Tensor[(495, 1), float32] */;
  %328 = cast(meta[relay.Constant][17] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %329 = reshape(%327, newshape=[5, 9, 11]) /* ty=Tensor[(5, 9, 11), float32] */;
  %330 = reshape(%328, newshape=[364, 2]) /* ty=Tensor[(364, 2), float64] */;
  %331 = @func_6820(%329, %330) /* ty=(Tensor[(5, 9, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(364, 2), float64]) */;
  %332 = @func_5218() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) */;
  %333 = cast(%var_8139, dtype="bool") /* ty=Tensor[(728), bool] */;
  %334 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(728), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %335 = cast(meta[relay.Constant][17] /* ty=Tensor[(728), float64] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?), bool] */;
  %337 = cast(meta[relay.Constant][17] /* ty=Tensor[(728), float64] */, dtype="bool") /* ty=Tensor[(728), bool] */;
  %338 = cast(meta[relay.Constant][16] /* ty=Tensor[(495, 1), float32] */, dtype="bool") /* ty=Tensor[(495, 1), bool] */;
  %339 = greater(%337, %338) /* ty=Tensor[(495, 728), bool] */;
  %340 = cast(meta[relay.Constant][17] /* ty=Tensor[(728), float64] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %341 = cast(%339, dtype="float32") /* ty=Tensor[(495, 728), float32] */;
  %342 = @func_6318() /* ty=Tensor[(2, 2, 5), uint32] */;
  %343 = %331.3;
  %344 = %332.0;
  %345 = not_equal(%335, %336) /* ty=Tensor[(728), bool] */;
  %346 = add(%340, %341) /* ty=Tensor[(495, 728), float32] */;
  %347 = @func_8088() /* ty=Tensor[(10, 16, 11), float32] */;
  (%342, %343, %344, %345, %346, %347)
}

def @func_1117() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) {
  %348 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 200), float64] */, dtype="float64") /* ty=Tensor[(1, 200), float64] */;
  %349 = reshape(%348, newshape=[200]) /* ty=Tensor[(200), float64] */;
  %350 = @func_992(%349) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float32], Tensor[(1800), float64], Tensor[(10, 4, 5), float64], Tensor[(200), float64]) */;
  %351 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
  %352 = %350.1;
  (%351, %352, meta[relay.Constant][18] /* ty=Tensor[(1, 200), float64] */)
}

def @func_1822() -> Tensor[(10, 16, 11), uint16] {
  %353 = @func_1286() /* ty=Tensor[(10, 16, 11), float32] */;
  %354 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 16, 11), float32] */, dtype="uint16") /* ty=Tensor[(10, 16, 11), uint16] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="uint16") /* ty=Tensor[(10, 16, 11), uint16] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  left_shift(%356, %357) /* ty=Tensor[(10, 16, 11), uint16] */
}

def @func_6340() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_6338() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_1530() -> (Tensor[(10, 16, 11), float32],) {
  %359 = fn () -> (Tensor[(10, 16, 11), float32],) {
    %358 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
    (%358,)
  };
  %359() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_6227() -> (Tensor[(5, 9, 8), float32],) {
  @func_6225() /* ty=(Tensor[(5, 9, 8), float32],) */
}

def @func_1287() -> Tensor[(10, 16, 11), float32] {
  %361 = fn () -> Tensor[(10, 16, 11), float32] {
    %360 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %360.0
  };
  %361() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4341() -> Tensor[(10, 16, 11), float32] {
  %362 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %362.0
}

def @func_6678(%var_6676: Tensor[(1800), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(1800), uint8], Tensor[(20), int8], int32, Tensor[(429), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_6675(%var_6676) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(1800), uint8], Tensor[(20), int8], int32, Tensor[(429), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_6278() -> (Tensor[(2, 2, 5), uint64], Tensor[(13, 6, 4), float32], Tensor[(312), float32]) {
  @func_6276() /* ty=(Tensor[(2, 2, 5), uint64], Tensor[(13, 6, 4), float32], Tensor[(312), float32]) */
}

def @func_6922(%var_6918: Tensor[(6, 8, 4), float64], %var_6919: Tensor[(104), uint32], %var_6920: Tensor[(6, 8, 4), float64], %var_6921: Tensor[(6, 8, 4), float64]) -> (Tensor[(13, 8, 10), float32], Tensor[(104), uint32], Tensor[(6, 8, 4), bool], Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32], Tensor[(6, 8, 4), float64], Tensor[(10, 16, 11), float32]) {
  @func_6916(%var_6918, %var_6919, %var_6920, %var_6921) /* ty=(Tensor[(13, 8, 10), float32], Tensor[(104), uint32], Tensor[(6, 8, 4), bool], Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32], Tensor[(6, 8, 4), float64], Tensor[(10, 16, 11), float32]) */
}

def @func_5158() -> Tensor[(10, 16, 11), float32] {
  %366 = fn () -> Tensor[(10, 16, 11), float32] {
    %363 = @func_3405() /* ty=(Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) */;
    %364 = %363.2;
    %365 = cast(%364, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
    sqrt(%365) /* ty=Tensor[(10, 16, 11), float32] */
  };
  %366() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_5964(%var_5963: Tensor[(15, 5, 3), int32]) -> (Tensor[(15, 5, 3), bool],) {
  %372 = fn (%var_5948: Tensor[(15, 5, 3), int32]) -> (Tensor[(15, 5, 3), bool],) {
    %367 = cast(meta[relay.Constant][20] /* ty=Tensor[(15, 5, 3), int32] */, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
    %368 = shape_of(%var_5948, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%var_5948, dtype="bool") /* ty=Tensor[(15, 5, 3), bool] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %371 = greater(%369, %370) /* ty=Tensor[(15, 5, 3), bool] */;
    (%371,)
  };
  %372(%var_5963) /* ty=(Tensor[(15, 5, 3), bool],) */
}

def @func_646(%var_645: Tensor[(10, 4, 5), float64]) -> (Tensor[(10, 4, 5), float64],) {
  %375 = fn (%var_638: Tensor[(10, 4, 5), float64]) -> (Tensor[(10, 4, 5), float64],) {
    %373 = cast(%var_638, dtype="float64") /* ty=Tensor[(10, 4, 5), float64] */;
    %374 = sqrt(%373) /* ty=Tensor[(10, 4, 5), float64] */;
    (%374,)
  };
  %375(%var_645) /* ty=(Tensor[(10, 4, 5), float64],) */
}

def @func_5989(%var_5987: Tensor[(13, 6, 4), float32]) -> (Tensor[(13, 6, 4), float32],) {
  @func_5986(%var_5987) /* ty=(Tensor[(13, 6, 4), float32],) */
}

def @func_5629() -> (Tensor[(5, 9, 8), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_5627() /* ty=(Tensor[(5, 9, 8), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_4854(%var_4853: Tensor[(728), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) {
  %386 = fn (%var_4815: Tensor[(728), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) {
    %376 = cast(%var_4815, dtype="float64") /* ty=Tensor[(728), float64] */;
    %377 = reshape(%376, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), float64] */;
    %378 = @func_3725(%377) /* ty=(Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
    %379 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
    %380 = @func_4769() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */;
    %381 = @func_3159() /* ty=Tensor[(10, 16, 11), float32] */;
    %382 = %378.0;
    %383 = %379.0;
    %384 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
    %385 = %380.2;
    (%381, %382, %var_4815, %383, %384, %385)
  };
  %386(%var_4853) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(585), float32]) */
}

def @func_5002() -> Tensor[(10, 16, 11), float32] {
  %387 = @func_3819() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(728), float64], Tensor[(7, 13, 8), float64]) */;
  %387.0
}

def @func_6225() -> (Tensor[(5, 9, 8), float32],) {
  %388 = @func_3204() /* ty=Tensor[(5, 9, 8), float32] */;
  (%388,)
}

def @func_6498() -> Tensor[(10, 16, 11), float32] {
  %390 = fn () -> Tensor[(10, 16, 11), float32] {
    %389 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %389.0
  };
  %390() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_3655(%var_3654: Tensor[(96), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(2, 2, 5), float64], Tensor[(10, 16, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(54, 26), float64], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) {
  %410 = fn (%var_3614: Tensor[(96), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(2, 2, 5), float64], Tensor[(10, 16, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(54, 26), float64], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) {
    %391 = @func_2513() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %392 = cast(%var_3614, dtype="float64") /* ty=Tensor[(96), float64] */;
    %393 = reshape(%392, newshape=[4, 6, 4]) /* ty=Tensor[(4, 6, 4), float64] */;
    %394 = @func_3568(%393) /* ty=(Tensor[(4, 6, 4), float64], Tensor[(10, 16, 11), uint8]) */;
    %395 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
    %396 = cast(%395, dtype="float64") /* ty=Tensor[(2, 2, 5), float64] */;
    %397 = sqrt(%396) /* ty=Tensor[(2, 2, 5), float64] */;
    %398 = cast(%397, dtype="float64") /* ty=Tensor[(2, 2, 5), float64] */;
    %399 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %400 = cast(meta[relay.Constant][21] /* ty=Tensor[(54, 26), float64] */, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
    %401 = reshape(%400, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float64] */;
    %402 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
    %403 = %391.0;
    %404 = %394.0;
    %405 = exp(%398) /* ty=Tensor[(2, 2, 5), float64] */;
    %406 = %399.0;
    %407 = @func_1721(%401) /* ty=Tensor[(12, 9, 13), float64] */;
    %408 = %402.0;
    %409 = @func_3177() /* ty=Tensor[(10, 16, 11), float32] */;
    (%403, %404, %var_3614, %405, %406, %407, meta[relay.Constant][21] /* ty=Tensor[(54, 26), float64] */, %408, %409)
  };
  %410(%var_3654) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(2, 2, 5), float64], Tensor[(10, 16, 11), float32], Tensor[(12, 9, 13), float64], Tensor[(54, 26), float64], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) */
}

def @func_2087(%var_2085: Tensor[(1800), float64]) -> (Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) {
  @func_2084(%var_2085) /* ty=(Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) */
}

def @func_7157() -> Tensor[(10, 16, 11), float32] {
  %411 = @func_4088() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */;
  %411.0
}

def @func_8768(%var_8762: Tensor[(5, 3, 3), int8], %var_8763: Tensor[(5, 3, 3), int8], %var_8764: Tensor[(896), float64], %var_8765: Tensor[(896), float64], %var_8766: Tensor[(20), int8], %var_8767: Tensor[(1800), float64]) -> (Tensor[(5, 3, 3), int8], Tensor[(16, 8, 7), int8], Tensor[(896), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  @func_8760(%var_8762, %var_8763, %var_8764, %var_8765, %var_8766, %var_8767) /* ty=(Tensor[(5, 3, 3), int8], Tensor[(16, 8, 7), int8], Tensor[(896), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */
}

def @func_7182(%var_7164: Tensor[(5, 9, 8), float32]) -> (Tensor[(10, 16, 11), float32], Tensor[(5, 9, 8), float32]) {
  %412 = @func_3204() /* ty=Tensor[(5, 9, 8), float32] */;
  %413 = cast(%var_7164, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="float32") /* ty=Tensor[(5, 9, 8), float32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %417 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %418 = divide(%415, %416) /* ty=Tensor[(5, 9, 8), float32] */;
  (%417, %418)
}

def @func_4634(%var_4582: Tensor[(6, 200), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(6, 200), int64], Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32]) {
  %419 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %420 = %419.2;
  %421 = cast(%420, dtype="float64") /* ty=Tensor[(1, 200), float64] */;
  %422 = log10(%421) /* ty=Tensor[(1, 200), float64] */;
  %423 = cast(%422, dtype="bool") /* ty=Tensor[(1, 200), bool] */;
  %424 = cast(%var_4582, dtype="bool") /* ty=Tensor[(6, 200), bool] */;
  %425 = not_equal(%423, %424) /* ty=Tensor[(6, 200), bool] */;
  %426 = cast(%425, dtype="int64") /* ty=Tensor[(6, 200), int64] */;
  %427 = shape_of(%var_4582, dtype="int32") /* ty=Tensor[(2), int32] */;
  %428 = cast(%var_4582, dtype="int64") /* ty=Tensor[(6, 200), int64] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %430 = @func_1488() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) */;
  %431 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  %432 = multiply(%428, %429) /* ty=Tensor[(6, 200), int64] */;
  %433 = %430.1;
  %434 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
  (%431, %432, %433, %434)
}

def @func_1167(%var_1166: Tensor[(2, 2, 5), int8]) -> (Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) {
  %449 = fn (%var_1141: Tensor[(2, 2, 5), int8]) -> (Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) {
    %435 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 2, 5), int8] */, dtype="int8") /* ty=Tensor[(2, 2, 5), int8] */;
    %436 = shape_of(%var_1141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %437 = cast(%var_1141, dtype="int8") /* ty=Tensor[(2, 2, 5), int8] */;
    %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %439 = bitwise_or(%437, %438) /* ty=Tensor[(2, 2, 5), int8] */;
    %440 = cast(%439, dtype="float64") /* ty=Tensor[(2, 2, 5), float64] */;
    %441 = cast(%439, dtype="float32") /* ty=Tensor[(2, 2, 5), float32] */;
    %442 = cast(%var_1141, dtype="uint32") /* ty=Tensor[(2, 2, 5), uint32] */;
    %443 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%439, dtype="uint32") /* ty=Tensor[(2, 2, 5), uint32] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %446 = acos(%440) /* ty=Tensor[(2, 2, 5), float64] */;
    %447 = erf(%441) /* ty=Tensor[(2, 2, 5), float32] */;
    %448 = multiply(%444, %445) /* ty=Tensor[(2, 2, 5), uint32] */;
    (%446, %447, %448)
  };
  %449(%var_1166) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) */
}

def @func_7159() -> Tensor[(10, 16, 11), float32] {
  @func_7157() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4277() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), uint8]) {
  %450 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
  %451 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
  %452 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %453 = %450.0;
  %454 = %451.0;
  (%452, %453, %454)
}

def @func_6338() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %455 = @func_2621() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %456 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %457 = %455.1;
  %458 = %456.0;
  (%457, %458)
}

def @func_2820(%var_2818: Tensor[(10, 16, 11), float32]) -> Tensor[(10, 16, 11), int8] {
  @func_2817(%var_2818) /* ty=Tensor[(10, 16, 11), int8] */
}

def @func_7904() -> (Tensor[(10, 16, 11), uint16],) {
  @func_7902() /* ty=(Tensor[(10, 16, 11), uint16],) */
}

def @func_5746() -> (Tensor[(10, 16, 11), float32],) {
  @func_5744() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_561(%var_558: Tensor[(8, 15, 15), float64], %var_559: Tensor[(8, 15, 15), float64], %var_560: Tensor[(8, 15, 15), float64]) -> (Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) {
  @func_556(%var_558, %var_559, %var_560) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */
}

def @func_3160() -> Tensor[(10, 16, 11), float32] {
  %460 = fn () -> Tensor[(10, 16, 11), float32] {
    %459 = @func_2621() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
    %459.0
  };
  %460() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_7582() -> Tensor[(10, 16, 11), float32] {
  @func_7580() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_992(%var_987: Tensor[(200), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float32], Tensor[(1800), float64], Tensor[(10, 4, 5), float64], Tensor[(200), float64]) {
  %461 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %462 = cast(meta[relay.Constant][23] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %463 = cast(meta[relay.Constant][23] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %464 = cast(meta[relay.Constant][23] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %465 = reshape(%462, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %466 = reshape(%463, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %467 = reshape(%464, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %468 = @func_556(%465, %466, %467) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %469 = cast(%var_987, dtype="float64") /* ty=Tensor[(200), float64] */;
  %470 = reshape(%469, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float64] */;
  %471 = @func_644(%470) /* ty=(Tensor[(10, 4, 5), float64],) */;
  %472 = %461.0;
  %473 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %474 = %468.1;
  %475 = %471.0;
  (%472, %473, %474, meta[relay.Constant][23] /* ty=Tensor[(1800), float64] */, %475, %var_987)
}

def @func_516(%var_515: Tensor[(455, 2), int8]) -> (Tensor[(2, 10, 1), float64], Tensor[(14, 13, 5), bool], Tensor[(455, 2), int8]) {
  %484 = fn (%var_512: Tensor[(455, 2), int8]) -> (Tensor[(2, 10, 1), float64], Tensor[(14, 13, 5), bool], Tensor[(455, 2), int8]) {
    %476 = cast(meta[relay.Constant][24] /* ty=Tensor[(2, 10, 1), float64] */, dtype="float64") /* ty=Tensor[(2, 10, 1), float64] */;
    %477 = cast(%var_512, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
    %478 = cast(%var_512, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
    %479 = reshape(%477, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
    %480 = reshape(%478, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
    %481 = @func_156(%479, %480) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
    %482 = log(%476) /* ty=Tensor[(2, 10, 1), float64] */;
    %483 = %481.0;
    (%482, %483, %var_512)
  };
  %484(%var_515) /* ty=(Tensor[(2, 10, 1), float64], Tensor[(14, 13, 5), bool], Tensor[(455, 2), int8]) */
}

def @func_5004() -> Tensor[(10, 16, 11), float32] {
  @func_5002() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_8486() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %485 = @func_4500() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %486 = @func_7097() /* ty=Tensor[(10, 16, 11), float32] */;
  %487 = %485.0;
  (%486, %487)
}

def @func_6276() -> (Tensor[(2, 2, 5), uint64], Tensor[(13, 6, 4), float32], Tensor[(312), float32]) {
  %488 = @func_5793() /* ty=(Tensor[(1800), float64], Tensor[(2, 2, 5), uint64]) */;
  %489 = cast(meta[relay.Constant][25] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %490 = reshape(%489, newshape=[13, 6, 4]) /* ty=Tensor[(13, 6, 4), float32] */;
  %491 = @func_5986(%490) /* ty=(Tensor[(13, 6, 4), float32],) */;
  %492 = %488.1;
  %493 = %491.0;
  (%492, %493, meta[relay.Constant][25] /* ty=Tensor[(312), float32] */)
}

def @func_5298() -> Tensor[(10, 16, 11), float32] {
  %494 = fn () -> Tensor[(10, 16, 11), float32] {
    @func_576() /* ty=Tensor[(10, 16, 11), float32] */
  };
  %494() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4637(%var_4635: Tensor[(6, 200), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(6, 200), int64], Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32]) {
  @func_4634(%var_4635) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(6, 200), int64], Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32]) */
}

def @func_2456() -> (Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) {
  %495 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  %496 = cast(%495, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %497 = cast(meta[relay.Constant][26] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
  %498 = reshape(%497, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %499 = @func_1229(%498) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %500 = rsqrt(%496) /* ty=Tensor[(10, 16, 11), float32] */;
  %501 = %499.2;
  (%500, %501, meta[relay.Constant][26] /* ty=Tensor[(20), int8] */)
}

def @func_4679() -> (Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) {
  @func_4677() /* ty=(Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) */
}

def @func_5126() -> (Tensor[(10, 16, 11), float32],) {
  %502 = @func_1731() /* ty=Tensor[(10, 16, 11), float32] */;
  (%502,)
}

def @func_410(%var_408: Tensor[(560), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8], Tensor[(14, 13, 5), bool], Tensor[(910), int8], Tensor[(10, 16, 11), float32]) {
  @func_407(%var_408) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8], Tensor[(14, 13, 5), bool], Tensor[(910), int8], Tensor[(10, 16, 11), float32]) */
}

def @func_4721() -> Tensor[(10, 16, 11), float32] {
  @func_4719() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_2623() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_2621() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_9192(%var_9191: Tensor[(16, 4, 8), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(16, 4, 8), float32], Tensor[(10, 16, 11), uint16]) {
  %511 = fn (%var_9173: Tensor[(16, 4, 8), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(16, 4, 8), float32], Tensor[(10, 16, 11), uint16]) {
    %503 = @func_7135() /* ty=(Tensor[(16, 1, 1), float64],) */;
    %504 = %503.0;
    %505 = cast(%504, dtype="float32") /* ty=Tensor[(16, 1, 1), float32] */;
    %506 = cast(%var_9173, dtype="float32") /* ty=Tensor[(16, 4, 8), float32] */;
    %507 = @func_5680() /* ty=(Tensor[(2, 2, 5), uint32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) */;
    %508 = @func_6831() /* ty=Tensor[(10, 16, 11), float32] */;
    %509 = mod(%505, %506) /* ty=Tensor[(16, 4, 8), float32] */;
    %510 = %507.2;
    (%508, %509, %510)
  };
  %511(%var_9191) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(16, 4, 8), float32], Tensor[(10, 16, 11), uint16]) */
}

def @func_578() -> Tensor[(10, 16, 11), float32] {
  @func_576() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_2817(%var_2809: Tensor[(10, 16, 11), float32]) -> Tensor[(10, 16, 11), int8] {
  %512 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %513 = %512.0;
  %514 = cast(%var_2809, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  add(%516, %517) /* ty=Tensor[(10, 16, 11), int8] */
}

def @func_2979() -> Tensor[(10, 16, 11), float32] {
  @func_2977() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_7937() -> Tensor[(10, 16, 11), float32] {
  @func_7935() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_8413(%var_8410: Tensor[(1, 7, 4), int8], %var_8411: Tensor[(12, 7, 4), int8], %var_8412: Tensor[(12, 7, 4), int8]) -> (Tensor[(12, 7, 4), bool], Tensor[(1, 7, 4), float64]) {
  %538 = fn (%var_8373: Tensor[(1, 7, 4), int8], %var_8374: Tensor[(12, 7, 4), int8], %var_8378: Tensor[(12, 7, 4), int8]) -> (Tensor[(12, 7, 4), bool], Tensor[(1, 7, 4), float64]) {
    %518 = cast(%var_8373, dtype="int8") /* ty=Tensor[(1, 7, 4), int8] */;
    %519 = cast(%var_8374, dtype="int8") /* ty=Tensor[(12, 7, 4), int8] */;
    %520 = bitwise_and(%518, %519) /* ty=Tensor[(12, 7, 4), int8] */;
    %521 = cast(%var_8378, dtype="bool") /* ty=Tensor[(12, 7, 4), bool] */;
    %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
    %523 = cast(%520, dtype="bool") /* ty=Tensor[(12, 7, 4), bool] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %525 = not_equal(%523, %524) /* ty=Tensor[(12, 7, 4), bool] */;
    %526 = cast(%520, dtype="uint32") /* ty=Tensor[(12, 7, 4), uint32] */;
    %527 = shape_of(%var_8374, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(%var_8374, dtype="uint32") /* ty=Tensor[(12, 7, 4), uint32] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %530 = minimum(%528, %529) /* ty=Tensor[(12, 7, 4), uint32] */;
    %531 = cast(%530, dtype="bool") /* ty=Tensor[(12, 7, 4), bool] */;
    %532 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%525, dtype="bool") /* ty=Tensor[(12, 7, 4), bool] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %535 = cast(%var_8373, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
    %536 = less_equal(%533, %534) /* ty=Tensor[(12, 7, 4), bool] */;
    %537 = log2(%535) /* ty=Tensor[(1, 7, 4), float64] */;
    (%536, %537)
  };
  %538(%var_8410, %var_8411, %var_8412) /* ty=(Tensor[(12, 7, 4), bool], Tensor[(1, 7, 4), float64]) */
}

def @func_9247() -> (Tensor[(10, 16, 11), uint16],) {
  @func_9245() /* ty=(Tensor[(10, 16, 11), uint16],) */
}

def @main() -> (Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) {
  %539 = @func_5403() /* ty=(Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) */;
  %540 = %539.2;
  %541 = cast(%540, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
  %542 = @func_5002() /* ty=Tensor[(10, 16, 11), float32] */;
  %543 = asinh(%541) /* ty=Tensor[(7, 104), float64] */;
  (%542, %543)
}

def @func_7437() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16], Tensor[(728), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %544 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %545 = %544.0;
  %546 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %550 = cast(meta[relay.Constant][28] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %551 = reshape(%550, newshape=[728]) /* ty=Tensor[(728), float64] */;
  %552 = @func_5883(%551) /* ty=(Tensor[(2, 2, 5), uint32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) */;
  %553 = power(%548, %549) /* ty=Tensor[(10, 16, 11), float32] */;
  %554 = @func_1822() /* ty=Tensor[(10, 16, 11), uint16] */;
  %555 = %552.2;
  %556 = @func_5297() /* ty=Tensor[(10, 16, 11), float32] */;
  %557 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  (%553, %554, %555, meta[relay.Constant][28] /* ty=Tensor[(728), float64] */, %556, %557)
}

def @func_7852() -> (Tensor[(10, 16, 11), float32],) {
  %559 = fn () -> (Tensor[(10, 16, 11), float32],) {
    %558 = @func_7580() /* ty=Tensor[(10, 16, 11), float32] */;
    (%558,)
  };
  %559() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_2150() -> Tensor[(10, 16, 11), float32] {
  @func_2148() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_7732() -> Tensor[(10, 16, 11), float32] {
  %560 = fn () -> Tensor[(10, 16, 11), float32] {
    @func_4867() /* ty=Tensor[(10, 16, 11), float32] */
  };
  %560() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_2458() -> (Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) {
  @func_2456() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */
}

def @func_7098() -> Tensor[(10, 16, 11), float32] {
  %562 = fn () -> Tensor[(10, 16, 11), float32] {
    %561 = @func_3837() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
    %561.1
  };
  %562() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_1119() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) {
  @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */
}

def @func_8614() -> (Tensor[(10, 16, 11), uint16], Tensor[(13, 9, 5), float32], Tensor[(10, 16, 11), float32]) {
  %568 = fn () -> (Tensor[(10, 16, 11), uint16], Tensor[(13, 9, 5), float32], Tensor[(10, 16, 11), float32]) {
    %563 = @func_7902() /* ty=(Tensor[(10, 16, 11), uint16],) */;
    %564 = @func_4088() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */;
    %565 = %563.0;
    %566 = %564.1;
    %567 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
    (%565, %566, %567)
  };
  %568() /* ty=(Tensor[(10, 16, 11), uint16], Tensor[(13, 9, 5), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_3571(%var_3569: Tensor[(4, 6, 4), float64]) -> (Tensor[(4, 6, 4), float64], Tensor[(10, 16, 11), uint8]) {
  @func_3568(%var_3569) /* ty=(Tensor[(4, 6, 4), float64], Tensor[(10, 16, 11), uint8]) */
}

def @func_1232(%var_1230: Tensor[(20), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) {
  @func_1229(%var_1230) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */
}

def @func_5128() -> (Tensor[(10, 16, 11), float32],) {
  @func_5126() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_6392() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 4, 5), float64], Tensor[(200), float64], Tensor[(10, 16, 11), float32]) {
  %569 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %570 = cast(meta[relay.Constant][29] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %571 = reshape(%570, newshape=[10, 4, 5]) /* ty=Tensor[(10, 4, 5), float64] */;
  %572 = @func_644(%571) /* ty=(Tensor[(10, 4, 5), float64],) */;
  %573 = %569.0;
  %574 = %572.0;
  %575 = @func_4719() /* ty=Tensor[(10, 16, 11), float32] */;
  (%573, %574, meta[relay.Constant][29] /* ty=Tensor[(200), float64] */, %575)
}

def @func_2148() -> Tensor[(10, 16, 11), float32] {
  @func_1333() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_7185(%var_7183: Tensor[(5, 9, 8), float32]) -> (Tensor[(10, 16, 11), float32], Tensor[(5, 9, 8), float32]) {
  @func_7182(%var_7183) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(5, 9, 8), float32]) */
}

def @func_3406() -> (Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) {
  %583 = fn () -> (Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) {
    %576 = @func_2299() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */;
    %577 = @func_3159() /* ty=Tensor[(10, 16, 11), float32] */;
    %578 = cast(%577, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
    %579 = reshape(%578, newshape=[10, 16, 11]) /* ty=Tensor[(10, 16, 11), float32] */;
    %580 = @func_730(%579) /* ty=(Tensor[(10, 16, 11), float64],) */;
    %581 = %576.1;
    %582 = %580.0;
    (%581, %577, %582)
  };
  %583() /* ty=(Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float64]) */
}

def @func_1094() -> Tensor[(10, 16, 11), float32] {
  @func_800() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_3125(%var_3114: Tensor[(10, 16, 11), float32]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  %584 = @func_2863() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %585 = %584.0;
  %586 = cast(%var_3114, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %590 = cast(meta[relay.Constant][30] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %591 = reshape(%590, newshape=[1800]) /* ty=Tensor[(1800), float64] */;
  %592 = @func_2084(%591) /* ty=(Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) */;
  %593 = floor_mod(%588, %589) /* ty=Tensor[(10, 16, 11), float32] */;
  %594 = %592.6;
  (%593, %594, meta[relay.Constant][30] /* ty=Tensor[(1800), float64] */)
}

def @func_802() -> Tensor[(10, 16, 11), float32] {
  @func_800() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_8882() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %595 = @func_2621() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %596 = @func_5218() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) */;
  %597 = %595.1;
  %598 = %596.0;
  (%597, %598)
}

def @func_8239(%var_8237: Tensor[(16, 11, 15), float64], %var_8238: Tensor[(16, 11, 15), float64]) -> (Tensor[(16, 11, 15), float64],) {
  %604 = fn (%var_8202: Tensor[(16, 11, 15), float64], %var_8203: Tensor[(16, 11, 15), float64]) -> (Tensor[(16, 11, 15), float64],) {
    %599 = cast(%var_8203, dtype="float64") /* ty=Tensor[(16, 11, 15), float64] */;
    %600 = shape_of(%var_8202, dtype="int32") /* ty=Tensor[(3), int32] */;
    %601 = cast(%var_8202, dtype="float64") /* ty=Tensor[(16, 11, 15), float64] */;
    %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %603 = mod(%601, %602) /* ty=Tensor[(16, 11, 15), float64] */;
    (%603,)
  };
  %604(%var_8237, %var_8238) /* ty=(Tensor[(16, 11, 15), float64],) */
}

def @func_6394() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 4, 5), float64], Tensor[(200), float64], Tensor[(10, 16, 11), float32]) {
  @func_6392() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 4, 5), float64], Tensor[(200), float64], Tensor[(10, 16, 11), float32]) */
}

def @func_7439() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16], Tensor[(728), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_7437() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16], Tensor[(728), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_2515() -> (Tensor[(10, 16, 11), float32],) {
  @func_2513() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_5794() -> (Tensor[(1800), float64], Tensor[(2, 2, 5), uint64]) {
  %621 = fn () -> (Tensor[(1800), float64], Tensor[(2, 2, 5), uint64]) {
    %605 = @func_2299() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */;
    %606 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 4), int8] */, dtype="int8") /* ty=Tensor[(5, 4), int8] */;
    %607 = reshape(%606, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), int8] */;
    %608 = @func_1165(%607) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) */;
    %609 = %608.0;
    %610 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 4), int8] */, dtype="bool") /* ty=Tensor[(5, 4), bool] */;
    %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(%609, dtype="bool") /* ty=Tensor[(2, 2, 5), bool] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %614 = greater(%612, %613) /* ty=Tensor[(2, 2, 5), bool] */;
    %615 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 4), int8] */, dtype="uint64") /* ty=Tensor[(5, 4), uint64] */;
    %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
    %617 = cast(%614, dtype="uint64") /* ty=Tensor[(2, 2, 5), uint64] */;
    %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %619 = %605.1;
    %620 = maximum(%617, %618) /* ty=Tensor[(2, 2, 5), uint64] */;
    (%619, %620)
  };
  %621() /* ty=(Tensor[(1800), float64], Tensor[(2, 2, 5), uint64]) */
}

def @func_5534(%var_5532: Tensor[(910), int8], %var_5533: Tensor[(96), float64]) -> (Tensor[(2, 2, 5), float64], Tensor[(14, 13, 5), uint64], Tensor[(910), int8], Tensor[(560), int8], Tensor[(96), float64]) {
  %633 = fn (%var_5515: Tensor[(910), int8], %var_5517: Tensor[(96), float64]) -> (Tensor[(2, 2, 5), float64], Tensor[(14, 13, 5), uint64], Tensor[(910), int8], Tensor[(560), int8], Tensor[(96), float64]) {
    %622 = @func_3093() /* ty=Tensor[(2, 2, 5), uint32] */;
    %623 = cast(%622, dtype="float64") /* ty=Tensor[(2, 2, 5), float64] */;
    %624 = cast(%var_5515, dtype="int8") /* ty=Tensor[(910), int8] */;
    %625 = cast(meta[relay.Constant][32] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
    %626 = cast(%var_5517, dtype="float64") /* ty=Tensor[(96), float64] */;
    %627 = reshape(%624, newshape=[455, 2]) /* ty=Tensor[(455, 2), int8] */;
    %628 = reshape(%625, newshape=[4, 140]) /* ty=Tensor[(4, 140), int8] */;
    %629 = reshape(%626, newshape=[96]) /* ty=Tensor[(96), float64] */;
    %630 = @func_4177(%627, %628, %629) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(455, 2), bool], Tensor[(10, 16, 11), float32], Tensor[(4, 140), int8], Tensor[(4, 6, 4), float64], Tensor[(96), float64], Tensor[(14, 13, 5), uint64]) */;
    %631 = atan(%623) /* ty=Tensor[(2, 2, 5), float64] */;
    %632 = %630.8;
    (%631, %632, %var_5515, meta[relay.Constant][32] /* ty=Tensor[(560), int8] */, %var_5517)
  };
  %633(%var_5532, %var_5533) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(14, 13, 5), uint64], Tensor[(910), int8], Tensor[(560), int8], Tensor[(96), float64]) */
}

def @func_2300() -> (Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  %648 = fn () -> (Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
    %634 = cast(meta[relay.Constant][33] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %635 = cast(meta[relay.Constant][33] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %636 = cast(meta[relay.Constant][33] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %637 = reshape(%634, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
    %638 = reshape(%635, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
    %639 = reshape(%636, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
    %640 = @func_556(%637, %638, %639) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
    %641 = %640.0;
    %642 = cast(%641, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
    %643 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(1800), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %644 = cast(meta[relay.Constant][33] /* ty=Tensor[(1800), float64] */, dtype="float64") /* ty=Tensor[(1800), float64] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?), float64] */;
    %646 = @func_1286() /* ty=Tensor[(10, 16, 11), float32] */;
    %647 = divide(%644, %645) /* ty=Tensor[(1800), float64] */;
    (%646, %647)
  };
  %648() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */
}

def @func_7902() -> (Tensor[(10, 16, 11), uint16],) {
  %649 = @func_1822() /* ty=Tensor[(10, 16, 11), uint16] */;
  (%649,)
}

def @func_995(%var_993: Tensor[(200), float64]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float32], Tensor[(1800), float64], Tensor[(10, 4, 5), float64], Tensor[(200), float64]) {
  @func_992(%var_993) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float32], Tensor[(1800), float64], Tensor[(10, 4, 5), float64], Tensor[(200), float64]) */
}

def @func_3568(%var_3555: Tensor[(4, 6, 4), float64]) -> (Tensor[(4, 6, 4), float64], Tensor[(10, 16, 11), uint8]) {
  %650 = cast(%var_3555, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %651 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
  %652 = sin(%650) /* ty=Tensor[(4, 6, 4), float64] */;
  %653 = %651.0;
  (%652, %653)
}

def @func_2621() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %654 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %655 = %654.0;
  %656 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  (%655, %656)
}

def @func_4475(%var_4473: Tensor[(14, 1, 16), float32], %var_4474: Tensor[(91, 10), int8]) -> (Tensor[(14, 13, 5), uint64], Tensor[(91, 10), int8], Tensor[(560), int8], Tensor[(1, 1800), float64], Tensor[(14, ?, 16), float32]) {
  %683 = fn (%var_4438: Tensor[(14, 1, 16), float32], %var_4458: Tensor[(91, 10), int8]) -> (Tensor[(14, 13, 5), uint64], Tensor[(91, 10), int8], Tensor[(560), int8], Tensor[(1, 1800), float64], Tensor[(14, ?, 16), float32]) {
    %657 = cast(%var_4458, dtype="int8") /* ty=Tensor[(91, 10), int8] */;
    %658 = cast(%var_4458, dtype="int8") /* ty=Tensor[(91, 10), int8] */;
    %659 = reshape(%657, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
    %660 = reshape(%658, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
    %661 = @func_156(%659, %660) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
    %662 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 1800), float64] */, dtype="float64") /* ty=Tensor[(1, 1800), float64] */;
    %663 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 1800), float64] */, dtype="float64") /* ty=Tensor[(1, 1800), float64] */;
    %664 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 1800), float64] */, dtype="float64") /* ty=Tensor[(1, 1800), float64] */;
    %665 = reshape(%662, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
    %666 = reshape(%663, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
    %667 = reshape(%664, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
    %668 = @func_556(%665, %666, %667) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
    %669 = cast(%var_4438, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
    %670 = erf(%669) /* ty=Tensor[(14, 1, 16), float32] */;
    %671 = cast(%670, dtype="int8") /* ty=Tensor[(14, 1, 16), int8] */;
    %672 = shape_of(%var_4438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %673 = cast(%var_4438, dtype="int8") /* ty=Tensor[(14, 1, 16), int8] */;
    %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %675 = bitwise_xor(%673, %674) /* ty=Tensor[(14, ?, 16), int8] */;
    %676 = cast(%670, dtype="float32") /* ty=Tensor[(14, 1, 16), float32] */;
    %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(%675, dtype="float32") /* ty=Tensor[(14, ?, 16), float32] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %680 = %661.1;
    %681 = %668.3;
    %682 = floor_mod(%678, %679) /* ty=Tensor[(14, ?, 16), float32] */;
    (%680, %var_4458, %681, meta[relay.Constant][34] /* ty=Tensor[(1, 1800), float64] */, %682)
  };
  %683(%var_4473, %var_4474) /* ty=(Tensor[(14, 13, 5), uint64], Tensor[(91, 10), int8], Tensor[(560), int8], Tensor[(1, 1800), float64], Tensor[(14, ?, 16), float32]) */
}

def @func_7067() -> Tensor[(10, 16, 11), float32] {
  %684 = @func_1885() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %684.0
}

def @func_3727(%var_3726: Tensor[(7, 13, 8), float64]) -> (Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %690 = fn (%var_3686: Tensor[(7, 13, 8), float64]) -> (Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
    %685 = cast(%var_3686, dtype="float64") /* ty=Tensor[(7, 13, 8), float64] */;
    %686 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %687 = log10(%685) /* ty=Tensor[(7, 13, 8), float64] */;
    %688 = %686.0;
    %689 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
    (%687, %688, %689)
  };
  %690(%var_3726) /* ty=(Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_556(%var_523: Tensor[(8, 15, 15), float64], %var_528: Tensor[(8, 15, 15), float64], %var_534: Tensor[(8, 15, 15), float64]) -> (Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) {
  %691 = cast(%var_523, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
  %692 = cosh(%691) /* ty=Tensor[(8, 15, 15), float64] */;
  %693 = cast(%var_528, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
  %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %695 = cast(%692, dtype="float64") /* ty=Tensor[(8, 15, 15), float64] */;
  %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %697 = cast(%var_534, dtype="float32") /* ty=Tensor[(8, 15, 15), float32] */;
  %698 = shape_of(%var_523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(%var_523, dtype="float32") /* ty=Tensor[(8, 15, 15), float32] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %701 = cast(meta[relay.Constant][35] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
  %702 = reshape(%701, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %703 = @func_334(%702) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %704 = mod(%695, %696) /* ty=Tensor[(8, 15, 15), float64] */;
  %705 = subtract(%699, %700) /* ty=Tensor[(8, 15, 15), float32] */;
  %706 = %703.2;
  (%704, %705, %706, meta[relay.Constant][35] /* ty=Tensor[(560), int8] */)
}

def @func_1081(%var_1060: float32) -> (Tensor[(12, 10, 1), float32], Tensor[(12, 10, 1), float32]) {
  %707 = cast(%var_1060, dtype="float32") /* ty=float32 */;
  %708 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
  %709 = cast(meta[relay.Constant][36] /* ty=Tensor[(12, 10, 1), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 1), float32] */;
  %710 = divide(%707, %708) /* ty=Tensor[(12, 10, 1), float32] */;
  %711 = cosh(%709) /* ty=Tensor[(12, 10, 1), float32] */;
  (%710, %711)
}

def @func_5401() -> (Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) {
  %712 = @func_4277() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), uint8]) */;
  %713 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 104), float64] */, dtype="float64") /* ty=Tensor[(7, 104), float64] */;
  %714 = reshape(%713, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), float64] */;
  %715 = @func_3725(%714) /* ty=(Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %716 = %712.2;
  %717 = %715.1;
  (%716, %717, meta[relay.Constant][37] /* ty=Tensor[(7, 104), float64] */)
}

def @func_3128(%var_3126: Tensor[(10, 16, 11), float32]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  @func_3125(%var_3126) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) */
}

def @func_6474() -> Tensor[(1, 200), float64] {
  %719 = fn () -> Tensor[(1, 200), float64] {
    %718 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
    %718.2
  };
  %719() /* ty=Tensor[(1, 200), float64] */
}

def @func_5986(%var_5983: Tensor[(13, 6, 4), float32]) -> (Tensor[(13, 6, 4), float32],) {
  %720 = cast(%var_5983, dtype="float32") /* ty=Tensor[(13, 6, 4), float32] */;
  %721 = acosh(%720) /* ty=Tensor[(13, 6, 4), float32] */;
  (%721,)
}

def @func_1723(%var_1722: Tensor[(12, 9, 13), float64]) -> Tensor[(12, 9, 13), float64] {
  %723 = fn (%var_1706: Tensor[(12, 9, 13), float64]) -> Tensor[(12, 9, 13), float64] {
    %722 = cast(%var_1706, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
    asin(%722) /* ty=Tensor[(12, 9, 13), float64] */
  };
  %723(%var_1722) /* ty=Tensor[(12, 9, 13), float64] */
}

def @func_2738() -> (Tensor[(10, 16, 11), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %724 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %725 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 16, 11), float32] */, dtype="int32") /* ty=Tensor[(10, 16, 11), int32] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="int32") /* ty=Tensor[(10, 16, 11), int32] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %729 = @func_1488() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) */;
  %730 = cast(8.63925f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %731 = reshape(%730, newshape=[]) /* ty=float32 */;
  %732 = @func_1081(%731) /* ty=(Tensor[(12, 10, 1), float32], Tensor[(12, 10, 1), float32]) */;
  %733 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %734 = subtract(%727, %728) /* ty=Tensor[(10, 16, 11), int32] */;
  %735 = %729.0;
  %736 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  %737 = %732.0;
  %738 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
  %739 = %733.0;
  %740 = @func_2424() /* ty=Tensor[(10, 16, 11), float32] */;
  %741 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  (%734, %735, %736, %737, 8.63925f /* ty=float32 */, %738, %739, %740, %741)
}

def @func_8159(%var_8157: Tensor[(728), float64]) -> (Tensor[(2, 2, 5), uint32], Tensor[(364, 2), float64], Tensor[(10, 16, 11), float32], Tensor[(728), bool], Tensor[(495, 728), float32], Tensor[(10, 16, 11), float32]) {
  @func_8156(%var_8157) /* ty=(Tensor[(2, 2, 5), uint32], Tensor[(364, 2), float64], Tensor[(10, 16, 11), float32], Tensor[(728), bool], Tensor[(495, 728), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_8806() -> (Tensor[(10, 16, 11), float32],) {
  %742 = @func_1885() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %743 = %742.1;
  (%743,)
}

def @func_4677() -> (Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) {
  %744 = @func_2621() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %745 = @func_1822() /* ty=Tensor[(10, 16, 11), uint16] */;
  %746 = %744.0;
  (%745, %746)
}

def @func_8047() -> (Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  %747 = @func_1885() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %748 = @func_5793() /* ty=(Tensor[(1800), float64], Tensor[(2, 2, 5), uint64]) */;
  %749 = %747.1;
  %750 = %748.0;
  (%749, %750)
}

def @func_7551() -> (Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) {
  %754 = fn () -> (Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) {
    %751 = @func_5401() /* ty=(Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64]) */;
    %752 = %751.0;
    %753 = @func_3177() /* ty=Tensor[(10, 16, 11), float32] */;
    (%752, %753)
  };
  %754() /* ty=(Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) */
}

def @func_465(%var_463: Tensor[(280, 2), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(280, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(14, 13, 5), uint64], Tensor[(910), int8]) {
  @func_462(%var_463) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(280, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(14, 13, 5), uint64], Tensor[(910), int8]) */
}

def @func_6320() -> Tensor[(2, 2, 5), uint32] {
  @func_6318() /* ty=Tensor[(2, 2, 5), uint32] */
}

def @func_4375() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %755 = @func_4341() /* ty=Tensor[(10, 16, 11), float32] */;
  %756 = @func_2977() /* ty=Tensor[(10, 16, 11), float32] */;
  %757 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  (%755, %756, %757)
}

def @func_4279() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), uint8]) {
  @func_4277() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), uint8]) */
}

def @func_1732() -> Tensor[(10, 16, 11), float32] {
  %759 = fn () -> Tensor[(10, 16, 11), float32] {
    %758 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %758.0
  };
  %759() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_239() -> Tensor[(10, 16, 11), float32] {
  @func_237() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_4957() -> (Tensor[(10, 16, 11), uint16],) {
  @func_4955() /* ty=(Tensor[(10, 16, 11), uint16],) */
}

def @func_732(%var_731: Tensor[(10, 16, 11), float32]) -> (Tensor[(10, 16, 11), float64],) {
  %770 = fn (%var_680: Tensor[(10, 16, 11), float32]) -> (Tensor[(10, 16, 11), float64],) {
    %760 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
    %761 = cast(%var_680, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
    %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
    %763 = cast(%760, dtype="int8") /* ty=Tensor[(10, 16, 11), int8] */;
    %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %765 = minimum(%763, %764) /* ty=Tensor[(10, 16, 11), int8] */;
    %766 = cast(%765, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
    %767 = cos(%766) /* ty=Tensor[(10, 16, 11), float64] */;
    %768 = cast(%767, dtype="float64") /* ty=Tensor[(10, 16, 11), float64] */;
    %769 = log2(%768) /* ty=Tensor[(10, 16, 11), float64] */;
    (%769,)
  };
  %770(%var_731) /* ty=(Tensor[(10, 16, 11), float64],) */
}

def @func_4423(%var_4412: Tensor[(11, 10, 1), int8]) -> (Tensor[(11, 10, ?), bool],) {
  %771 = cast(%var_4412, dtype="bool") /* ty=Tensor[(11, 10, 1), bool] */;
  %772 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(11, 10, 1), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 10, 1), int8] */, dtype="bool") /* ty=Tensor[(11, 10, 1), bool] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %775 = greater_equal(%773, %774) /* ty=Tensor[(11, 10, ?), bool] */;
  (%775,)
}

def @func_7935() -> Tensor[(10, 16, 11), float32] {
  @func_1094() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_1440(%var_1374: Tensor[(10, 2), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %776 = cast(%var_1374, dtype="int8") /* ty=Tensor[(10, 2), int8] */;
  %777 = reshape(%776, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %778 = @func_1229(%777) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %779 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %780 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %781 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %782 = %778.0;
  %783 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %784 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  %785 = %779.0;
  (%780, %781, %782, %var_1374, %783, %784, %785)
}

def @func_4426(%var_4424: Tensor[(11, 10, 1), int8]) -> (Tensor[(11, 10, ?), bool],) {
  @func_4423(%var_4424) /* ty=(Tensor[(11, 10, ?), bool],) */
}

def @func_3093() -> Tensor[(2, 2, 5), uint32] {
  %786 = @func_1488() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) */;
  %786.1
}

def @func_2865() -> (Tensor[(10, 16, 11), float32],) {
  @func_2863() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_6156() -> Tensor[(10, 16, 11), float32] {
  %788 = fn () -> Tensor[(10, 16, 11), float32] {
    %787 = @func_2919() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %787.0
  };
  %788() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_8850(%var_8848: Tensor[(55, 9), float32], %var_8849: Tensor[(728), float64]) -> (Tensor[(13, 9, 5), float32], Tensor[(10, 16, 11), float32], Tensor[(55, 9), float32], Tensor[(728), float64]) {
  @func_8846(%var_8848, %var_8849) /* ty=(Tensor[(13, 9, 5), float32], Tensor[(10, 16, 11), float32], Tensor[(55, 9), float32], Tensor[(728), float64]) */
}

def @func_4377() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_4375() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_7022() -> (Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) {
  %793 = fn () -> (Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) {
    %789 = @func_4955() /* ty=(Tensor[(10, 16, 11), uint16],) */;
    %790 = @func_6392() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 4, 5), float64], Tensor[(200), float64], Tensor[(10, 16, 11), float32]) */;
    %791 = %789.0;
    %792 = %790.3;
    (%791, %792)
  };
  %793() /* ty=(Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32]) */
}

def @func_1443(%var_1441: Tensor[(10, 2), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_1440(%var_1441) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_1886() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %799 = fn () -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
    %794 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %795 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
    %796 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
    %797 = %794.0;
    %798 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
    (%795, %796, %797, %798)
  };
  %799() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_5315() -> Tensor[(2, 2, 5), uint32] {
  %800 = @func_5218() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32]) */;
  %800.1
}

def @func_1084(%var_1082: float32) -> (Tensor[(12, 10, 1), float32], Tensor[(12, 10, 1), float32]) {
  @func_1081(%var_1082) /* ty=(Tensor[(12, 10, 1), float32], Tensor[(12, 10, 1), float32]) */
}

def @func_7225(%var_7221: Tensor[(15, 4, 15), uint16]) -> Tensor[(15, 4, 15), bool] {
  %801 = cast(%var_7221, dtype="bool") /* ty=Tensor[(15, 4, 15), bool] */;
  %802 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(15, 4, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 4, 15), uint16] */, dtype="bool") /* ty=Tensor[(15, 4, 15), bool] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%803, %804) /* ty=Tensor[(15, 4, 15), bool] */
}

def @func_8808() -> (Tensor[(10, 16, 11), float32],) {
  @func_8806() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_3820() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(728), float64], Tensor[(7, 13, 8), float64]) {
  %814 = fn () -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(728), float64], Tensor[(7, 13, 8), float64]) {
    %805 = @func_2863() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %806 = cast(meta[relay.Constant][41] /* ty=Tensor[(728), float64] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %807 = reshape(%806, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), float64] */;
    %808 = @func_3725(%807) /* ty=(Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
    %809 = %808.0;
    %810 = cast(%809, dtype="float64") /* ty=Tensor[(7, 13, 8), float64] */;
    %811 = @func_2281() /* ty=Tensor[(10, 16, 11), float32] */;
    %812 = %805.0;
    %813 = tan(%810) /* ty=Tensor[(7, 13, 8), float64] */;
    (%811, %812, meta[relay.Constant][41] /* ty=Tensor[(728), float64] */, %813)
  };
  %814() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(728), float64], Tensor[(7, 13, 8), float64]) */
}

def @func_5883(%var_5870: Tensor[(728), float64]) -> (Tensor[(2, 2, 5), uint32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) {
  %815 = @func_1488() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) */;
  %816 = cast(%var_5870, dtype="float64") /* ty=Tensor[(728), float64] */;
  %817 = reshape(%816, newshape=[7, 13, 8]) /* ty=Tensor[(7, 13, 8), float64] */;
  %818 = @func_3725(%817) /* ty=(Tensor[(7, 13, 8), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %819 = @func_4955() /* ty=(Tensor[(10, 16, 11), uint16],) */;
  %820 = %815.1;
  %821 = %818.0;
  %822 = @func_5297() /* ty=Tensor[(10, 16, 11), float32] */;
  %823 = %819.0;
  (%820, %821, %var_5870, %822, %823)
}

def @func_4863() -> (Tensor[(10, 16, 11), float32],) {
  %826 = fn () -> (Tensor[(10, 16, 11), float32],) {
    %824 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %825 = %824.0;
    (%825,)
  };
  %826() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_1490() -> (Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) {
  @func_1488() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) */
}

def @func_8760(%var_8707: Tensor[(5, 3, 3), int8], %var_8708: Tensor[(5, 3, 3), int8], %var_8715: Tensor[(896), float64], %var_8723: Tensor[(896), float64], %var_8735: Tensor[(20), int8], %var_8756: Tensor[(1800), float64]) -> (Tensor[(5, 3, 3), int8], Tensor[(16, 8, 7), int8], Tensor[(896), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1800), float64]) {
  %827 = cast(%var_8708, dtype="int8") /* ty=Tensor[(5, 3, 3), int8] */;
  %828 = shape_of(%var_8707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%var_8707, dtype="int8") /* ty=Tensor[(5, 3, 3), int8] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %831 = cast(%var_8715, dtype="float64") /* ty=Tensor[(896), float64] */;
  %832 = reshape(%831, newshape=[16, 8, 7]) /* ty=Tensor[(16, 8, 7), float64] */;
  %833 = @func_7525(%832) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(16, 8, 7), int8]) */;
  %834 = cast(%var_8723, dtype="bool") /* ty=Tensor[(896), bool] */;
  %835 = shape_of(%var_8715, dtype="int32") /* ty=Tensor[(1), int32] */;
  %836 = cast(%var_8715, dtype="bool") /* ty=Tensor[(896), bool] */;
  %837 = dyn.reshape(%834, %835, newshape=[]) /* ty=Tensor[(?), bool] */;
  %838 = @func_6036() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(7, 104), float64], Tensor[(1800), float64], Tensor[(10, 16, 11), float32]) */;
  %839 = cast(%var_8735, dtype="int8") /* ty=Tensor[(20), int8] */;
  %840 = reshape(%839, newshape=[20]) /* ty=Tensor[(20), int8] */;
  %841 = @func_1229(%840) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), float64], Tensor[(20), int8]) */;
  %842 = cast(%var_8756, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %843 = cast(%var_8756, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %844 = cast(%var_8756, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %845 = reshape(%842, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %846 = reshape(%843, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %847 = reshape(%844, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %848 = @func_556(%845, %846, %847) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %849 = right_shift(%829, %830) /* ty=Tensor[(5, 3, 3), int8] */;
  %850 = %833.1;
  %851 = less(%836, %837) /* ty=Tensor[(896), bool] */;
  %852 = %838.2;
  %853 = %841.0;
  %854 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %855 = %848.2;
  (%849, %850, %851, %852, %853, %var_8735, %854, %855, %var_8756)
}

def @func_5886(%var_5884: Tensor[(728), float64]) -> (Tensor[(2, 2, 5), uint32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) {
  @func_5883(%var_5884) /* ty=(Tensor[(2, 2, 5), uint32], Tensor[(7, 13, 8), float64], Tensor[(728), float64], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), uint16]) */
}

def @func_4088() -> (Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) {
  %856 = cast(meta[relay.Constant][42] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %857 = cast(meta[relay.Constant][42] /* ty=Tensor[(585), float32] */, dtype="float32") /* ty=Tensor[(585), float32] */;
  %858 = reshape(%856, newshape=[13, 9, 5]) /* ty=Tensor[(13, 9, 5), float32] */;
  %859 = reshape(%857, newshape=[13, 9, 5]) /* ty=Tensor[(13, 9, 5), float32] */;
  %860 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  %861 = @func_3285(%858, %859) /* ty=Tensor[(13, 9, 5), float32] */;
  (%860, %861, meta[relay.Constant][42] /* ty=Tensor[(585), float32] */)
}

def @func_800() -> Tensor[(10, 16, 11), float32] {
  @func_576() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_8884() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  @func_8882() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_2426() -> Tensor[(10, 16, 11), float32] {
  @func_2424() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_1488() -> (Tensor[(10, 16, 11), float32], Tensor[(2, 2, 5), uint32], Tensor[(20), int8]) {
  %862 = @func_576() /* ty=Tensor[(10, 16, 11), float32] */;
  %863 = cast(%862, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %864 = log10(%863) /* ty=Tensor[(10, 16, 11), float32] */;
  %865 = cast(%864, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  %866 = cast(meta[relay.Constant][43] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
  %867 = reshape(%866, newshape=[2, 2, 5]) /* ty=Tensor[(2, 2, 5), int8] */;
  %868 = @func_1165(%867) /* ty=(Tensor[(2, 2, 5), float64], Tensor[(2, 2, 5), float32], Tensor[(2, 2, 5), uint32]) */;
  %869 = asin(%865) /* ty=Tensor[(10, 16, 11), float32] */;
  %870 = %868.2;
  (%869, %870, meta[relay.Constant][43] /* ty=Tensor[(20), int8] */)
}

def @func_2528() -> Tensor[(8, 13, 1), float32] {
  @func_2526() /* ty=Tensor[(8, 13, 1), float32] */
}

def @func_1333() -> Tensor[(10, 16, 11), float32] {
  %871 = @func_1117() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(1, 200), float64]) */;
  %871.0
}

def @func_3179() -> Tensor[(10, 16, 11), float32] {
  @func_3177() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_8321(%var_8301: Tensor[(1, 9, 9), float32]) -> (Tensor[(?, 9, 9), float64], Tensor[(1800), float64]) {
  %872 = cast(%var_8301, dtype="float32") /* ty=Tensor[(1, 9, 9), float32] */;
  %873 = cos(%872) /* ty=Tensor[(1, 9, 9), float32] */;
  %874 = cast(%var_8301, dtype="float64") /* ty=Tensor[(1, 9, 9), float64] */;
  %875 = shape_of(%873, dtype="int32") /* ty=Tensor[(3), int32] */;
  %876 = cast(%873, dtype="float64") /* ty=Tensor[(1, 9, 9), float64] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %878 = @func_7600() /* ty=(Tensor[(1800), float64],) */;
  %879 = divide(%876, %877) /* ty=Tensor[(?, 9, 9), float64] */;
  %880 = %878.0;
  (%879, %880)
}

def @func_3206() -> Tensor[(5, 9, 8), float32] {
  @func_3204() /* ty=Tensor[(5, 9, 8), float32] */
}

def @func_3837() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %881 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %882 = @func_2148() /* ty=Tensor[(10, 16, 11), float32] */;
  (%881, %882)
}

def @func_6916(%var_6862: Tensor[(6, 8, 4), float64], %var_6875: Tensor[(104), uint32], %var_6877: Tensor[(6, 8, 4), float64], %var_6905: Tensor[(6, 8, 4), float64]) -> (Tensor[(13, 8, 10), float32], Tensor[(104), uint32], Tensor[(6, 8, 4), bool], Tensor[(10, 16, 11), uint16], Tensor[(10, 16, 11), float32], Tensor[(6, 8, 4), float64], Tensor[(10, 16, 11), float32]) {
  %883 = cast(%var_6875, dtype="uint32") /* ty=Tensor[(104), uint32] */;
  %884 = reshape(%883, newshape=[13, 8, 1]) /* ty=Tensor[(13, 8, 1), uint32] */;
  %885 = @func_5454(%884) /* ty=(Tensor[(13, 8, 10), float32], Tensor[(13, 8, 10), float32]) */;
  %886 = cast(%var_6862, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %887 = sinh(%886) /* ty=Tensor[(6, 8, 4), float64] */;
  %888 = cast(%var_6877, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
  %889 = shape_of(%887, dtype="int32") /* ty=Tensor[(3), int32] */;
  %890 = cast(%887, dtype="bool") /* ty=Tensor[(6, 8, 4), bool] */;
  %891 = dyn.reshape(%888, %889, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %892 = @func_4955() /* ty=(Tensor[(10, 16, 11), uint16],) */;
  %893 = cast(%887, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %894 = atanh(%893) /* ty=Tensor[(6, 8, 4), float64] */;
  %895 = cast(%var_6905, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%894, dtype="float64") /* ty=Tensor[(6, 8, 4), float64] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %899 = %885.1;
  %900 = equal(%890, %891) /* ty=Tensor[(6, 8, 4), bool] */;
  %901 = %892.0;
  %902 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  %903 = floor_divide(%897, %898) /* ty=Tensor[(6, 8, 4), float64] */;
  %904 = @func_6155() /* ty=Tensor[(10, 16, 11), float32] */;
  (%899, %var_6875, %900, %901, %902, %903, %904)
}

def @func_5113(%var_5110: int32, %var_5111: Tensor[(11, 13, 3), int32], %var_5112: Tensor[(11, 13, 3), int32]) -> (Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(20), int8], Tensor[(11, 13, 3), float64], Tensor[(1, 200), float64]) {
  @func_5108(%var_5110, %var_5111, %var_5112) /* ty=(Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(11, 13, 3), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(20), int8], Tensor[(11, 13, 3), float64], Tensor[(1, 200), float64]) */
}

def @func_8088() -> Tensor[(10, 16, 11), float32] {
  %905 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %905.0
}

def @func_2526() -> Tensor[(8, 13, 1), float32] {
  %906 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 13, 1), float32] */, dtype="float32") /* ty=Tensor[(8, 13, 1), float32] */;
  atanh(%906) /* ty=Tensor[(8, 13, 1), float32] */
}

def @func_7620() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %909 = fn () -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
    %907 = @func_7580() /* ty=Tensor[(10, 16, 11), float32] */;
    %908 = @func_4867() /* ty=Tensor[(10, 16, 11), float32] */;
    (%907, %908)
  };
  %909() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

def @func_462(%var_418: Tensor[(280, 2), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(280, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(14, 13, 5), uint64], Tensor[(910), int8]) {
  %910 = cast(%var_418, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %911 = reshape(%910, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %912 = @func_334(%911) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %913 = cast(%var_418, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %914 = reshape(%913, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %915 = @func_334(%914) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %916 = cast(meta[relay.Constant][45] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %917 = cast(meta[relay.Constant][45] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %918 = reshape(%916, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %919 = reshape(%917, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %920 = @func_156(%918, %919) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
  %921 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
  %922 = %912.1;
  %923 = %915.1;
  %924 = %920.1;
  (%921, %922, %var_418, %923, %924, meta[relay.Constant][45] /* ty=Tensor[(910), int8] */)
}

def @func_2283() -> Tensor[(10, 16, 11), float32] {
  @func_2281() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_1786(%var_1784: int16, %var_1785: Tensor[(12, 14, 10), int16]) -> (Tensor[(12, 14, 10), bool], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) {
  %931 = fn (%var_1750: int16, %var_1751: Tensor[(12, 14, 10), int16]) -> (Tensor[(12, 14, 10), bool], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) {
    %925 = cast(%var_1750, dtype="bool") /* ty=bool */;
    %926 = cast(%var_1751, dtype="bool") /* ty=Tensor[(12, 14, 10), bool] */;
    %927 = @func_1661() /* ty=(Tensor[(10, 16, 11), uint8],) */;
    %928 = greater_equal(%925, %926) /* ty=Tensor[(12, 14, 10), bool] */;
    %929 = %927.0;
    %930 = @func_237() /* ty=Tensor[(10, 16, 11), float32] */;
    (%928, %929, %930)
  };
  %931(%var_1784, %var_1785) /* ty=(Tensor[(12, 14, 10), bool], Tensor[(10, 16, 11), uint8], Tensor[(10, 16, 11), float32]) */
}

def @func_3930(%var_3929: Tensor[(560), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(560), int8], Tensor[(10, 16, 11), float32]) {
  %942 = fn (%var_3859: Tensor[(560), int8]) -> (Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(560), int8], Tensor[(10, 16, 11), float32]) {
    %932 = @func_2491() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %933 = cast(%var_3859, dtype="int8") /* ty=Tensor[(560), int8] */;
    %934 = reshape(%933, newshape=[560]) /* ty=Tensor[(560), int8] */;
    %935 = @func_629(%934) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(8, 5, 14), bool], Tensor[(560), int8]) */;
    %936 = cast(%var_3859, dtype="int8") /* ty=Tensor[(560), int8] */;
    %937 = reshape(%936, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
    %938 = @func_334(%937) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
    %939 = %932.0;
    %940 = %935.3;
    %941 = %938.2;
    (%939, %940, %var_3859, %941)
  };
  %942(%var_3929) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(560), int8], Tensor[(10, 16, 11), float32]) */
}

def @func_8324(%var_8322: Tensor[(1, 9, 9), float32]) -> (Tensor[(?, 9, 9), float64], Tensor[(1800), float64]) {
  @func_8321(%var_8322) /* ty=(Tensor[(?, 9, 9), float64], Tensor[(1800), float64]) */
}

def @func_7135() -> (Tensor[(16, 1, 1), float64],) {
  %943 = cast(meta[relay.Constant][46] /* ty=Tensor[(16, 1, 1), float64] */, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
  %944 = log(%943) /* ty=Tensor[(16, 1, 1), float64] */;
  (%944,)
}

def @func_4090() -> (Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) {
  @func_4088() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(13, 9, 5), float32], Tensor[(585), float32]) */
}

def @func_6318() -> Tensor[(2, 2, 5), uint32] {
  @func_5315() /* ty=Tensor[(2, 2, 5), uint32] */
}

def @func_5944() -> (Tensor[(10, 16, 11), float32], float32) {
  %948 = fn () -> (Tensor[(10, 16, 11), float32], float32) {
    %945 = @func_2738() /* ty=(Tensor[(10, 16, 11), int32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
    %946 = @func_4867() /* ty=Tensor[(10, 16, 11), float32] */;
    %947 = %945.4;
    (%946, %947)
  };
  %948() /* ty=(Tensor[(10, 16, 11), float32], float32) */
}

def @func_2513() -> (Tensor[(10, 16, 11), float32],) {
  %949 = @func_1731() /* ty=Tensor[(10, 16, 11), float32] */;
  (%949,)
}

def @func_7280() -> (Tensor[(10, 16, 11), float32], Tensor[(8, 13, 1), float32]) {
  %950 = @func_1731() /* ty=Tensor[(10, 16, 11), float32] */;
  %951 = @func_2526() /* ty=Tensor[(8, 13, 1), float32] */;
  (%950, %951)
}

def @func_2492() -> (Tensor[(10, 16, 11), float32],) {
  %953 = fn () -> (Tensor[(10, 16, 11), float32],) {
    %952 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
    (%952,)
  };
  %953() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_2084(%var_1974: Tensor[(1800), float64]) -> (Tensor[(455, 2), int8], Tensor[(910), int8], Tensor[(8, 15, 15), float32], Tensor[(4, 140), int8], Tensor[(10, 16, 11), float32], Tensor[(20), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), bool], Tensor[(10, 16, 11), float32], float32, Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(12, 10, 1800), float64], Tensor[(14, 13, 5), bool], Tensor[(560), int8], Tensor[(1800), float64], Tensor[(200), float64]) {
  %954 = cast(meta[relay.Constant][47] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %955 = reshape(%954, newshape=[455, 2]) /* ty=Tensor[(455, 2), int8] */;
  %956 = @func_514(%955) /* ty=(Tensor[(2, 10, 1), float64], Tensor[(14, 13, 5), bool], Tensor[(455, 2), int8]) */;
  %957 = cast(%var_1974, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %958 = cast(%var_1974, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %959 = cast(%var_1974, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %960 = reshape(%957, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %961 = reshape(%958, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %962 = reshape(%959, newshape=[8, 15, 15]) /* ty=Tensor[(8, 15, 15), float64] */;
  %963 = @func_556(%960, %961, %962) /* ty=(Tensor[(8, 15, 15), float64], Tensor[(8, 15, 15), float32], Tensor[(10, 16, 11), float32], Tensor[(560), int8]) */;
  %964 = cast(meta[relay.Constant][49] /* ty=Tensor[(20), int8] */, dtype="int8") /* ty=Tensor[(20), int8] */;
  %965 = reshape(%964, newshape=[10, 2]) /* ty=Tensor[(10, 2), int8] */;
  %966 = @func_1440(%965) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 2), int8], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %967 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %968 = @func_800() /* ty=Tensor[(10, 16, 11), float32] */;
  %969 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 140), int8] */, dtype="int8") /* ty=Tensor[(4, 140), int8] */;
  %970 = reshape(%969, newshape=[8, 5, 14]) /* ty=Tensor[(8, 5, 14), int8] */;
  %971 = @func_334(%970) /* ty=(Tensor[(8, 5, 14), bool], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */;
  %972 = %971.3;
  %973 = cast(%972, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %974 = shape_of(%968, dtype="int32") /* ty=Tensor[(3), int32] */;
  %975 = cast(%968, dtype="bool") /* ty=Tensor[(10, 16, 11), bool] */;
  %976 = dyn.reshape(%973, %974, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %977 = @func_854() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %978 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
  %979 = cast(-0.856479f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %980 = reshape(%979, newshape=[]) /* ty=float32 */;
  %981 = @func_1081(%980) /* ty=(Tensor[(12, 10, 1), float32], Tensor[(12, 10, 1), float32]) */;
  %982 = %981.1;
  %983 = cast(%var_1974, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %984 = cast(%982, dtype="float64") /* ty=Tensor[(12, 10, 1), float64] */;
  %985 = cast(meta[relay.Constant][47] /* ty=Tensor[(910), int8] */, dtype="int8") /* ty=Tensor[(910), int8] */;
  %986 = %956.2;
  %987 = cast(%986, dtype="int8") /* ty=Tensor[(455, 2), int8] */;
  %988 = reshape(%985, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %989 = reshape(%987, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), int8] */;
  %990 = @func_156(%988, %989) /* ty=(Tensor[(14, 13, 5), bool], Tensor[(14, 13, 5), uint64]) */;
  %991 = cast(meta[relay.Constant][48] /* ty=Tensor[(4, 140), int8] */, dtype="int8") /* ty=Tensor[(4, 140), int8] */;
  %992 = reshape(%991, newshape=[560]) /* ty=Tensor[(560), int8] */;
  %993 = @func_629(%992) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(1800), float64], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float64], Tensor[(8, 5, 14), bool], Tensor[(560), int8]) */;
  %994 = cast(meta[relay.Constant][50] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %995 = reshape(%994, newshape=[200]) /* ty=Tensor[(200), float64] */;
  %996 = @func_992(%995) /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32], Tensor[(8, 15, 15), float32], Tensor[(1800), float64], Tensor[(10, 4, 5), float64], Tensor[(200), float64]) */;
  %997 = %963.1;
  %998 = %966.2;
  %999 = %967.0;
  %1000 = logical_or(%975, %976) /* ty=Tensor[(10, 16, 11), bool] */;
  %1001 = @func_1333() /* ty=Tensor[(10, 16, 11), float32] */;
  %1002 = %977.0;
  %1003 = %978.0;
  %1004 = power(%983, %984) /* ty=Tensor[(12, 10, 1800), float64] */;
  %1005 = %990.0;
  %1006 = %993.5;
  %1007 = %996.3;
  (%986, meta[relay.Constant][47] /* ty=Tensor[(910), int8] */, %997, meta[relay.Constant][48] /* ty=Tensor[(4, 140), int8] */, %998, meta[relay.Constant][49] /* ty=Tensor[(20), int8] */, %999, %1000, %1001, -0.856479f /* ty=float32 */, %1002, %1003, %1004, %1005, %1006, %1007, meta[relay.Constant][50] /* ty=Tensor[(200), float64] */)
}

def @func_237() -> Tensor[(10, 16, 11), float32] {
  %1008 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 16, 11), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 11), float32] */;
  sigmoid(%1008) /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_7800() -> (Tensor[(10, 16, 11), float32],) {
  %1010 = fn () -> (Tensor[(10, 16, 11), float32],) {
    %1009 = @func_1094() /* ty=Tensor[(10, 16, 11), float32] */;
    (%1009,)
  };
  %1010() /* ty=(Tensor[(10, 16, 11), float32],) */
}

def @func_8664() -> (Tensor[(2, 2, 5), uint32],) {
  @func_8662() /* ty=(Tensor[(2, 2, 5), uint32],) */
}

def @func_4343() -> Tensor[(10, 16, 11), float32] {
  @func_4341() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_6831() -> Tensor[(10, 16, 11), float32] {
  @func_576() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_7069() -> Tensor[(10, 16, 11), float32] {
  @func_7067() /* ty=Tensor[(10, 16, 11), float32] */
}

def @func_9117() -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
  %1014 = fn () -> (Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) {
    %1011 = @func_1529() /* ty=(Tensor[(10, 16, 11), float32],) */;
    %1012 = @func_2977() /* ty=Tensor[(10, 16, 11), float32] */;
    %1013 = %1011.0;
    (%1012, %1013)
  };
  %1014() /* ty=(Tensor[(10, 16, 11), float32], Tensor[(10, 16, 11), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen424/build/output.py", line 3285, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:16:14] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

