==========mod==========
#[version = "0.0.5"]
def @func_6381(%var_6338: float64, %var_6349: Tensor[(2, 8, 8), float64], %var_6356: Tensor[(2, 8, 8), float64], %var_6364: Tensor[(140), float64]) -> (Tensor[(2, 8, 8), float64], Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), float64], Tensor[(2, 8, 8), bool], Tensor[(60), bool], Tensor[(360), float64], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(2, 8, 8), float64]) {
  %0 = cast(%var_6338, dtype="float64") /* ty=float64 */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 8, 8), float64] */, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %3 = cast(%var_6338, dtype="bool") /* ty=bool */;
  %4 = cast(%var_6349, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %5 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(2, 8, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %8 = cast(%var_6356, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %9 = shape_of(%var_6349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%var_6349, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(15, 4), bool] */, dtype="bool") /* ty=Tensor[(15, 4), bool] */;
  %14 = cast(%var_6364, dtype="float64") /* ty=Tensor[(140), float64] */;
  %15 = reshape(%12, newshape=[9, 4, 10]) /* ty=Tensor[(9, 4, 10), float64] */;
  %16 = reshape(%13, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %17 = reshape(%14, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %18 = @func_6213(%15, %16, %17) /* ty=(Tensor[(9, 4, 10), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(140), float64], Tensor[(16, 2, 14), float64]) */;
  %19 = cast(%var_6349, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %20 = power(%0, %1) /* ty=Tensor[(2, 8, 8), float64] */;
  %21 = less(%2, %3) /* ty=Tensor[(2, 8, 8), bool] */;
  %22 = floor_mod(%6, %7) /* ty=Tensor[(2, 8, 8), float64] */;
  %23 = greater_equal(%10, %11) /* ty=Tensor[(2, 8, 8), bool] */;
  %24 = %18.2;
  %25 = cos(%19) /* ty=Tensor[(2, 8, 8), float64] */;
  (%20, %21, %22, %23, %24, meta[relay.Constant][1] /* ty=Tensor[(360), float64] */, meta[relay.Constant][2] /* ty=Tensor[(15, 4), bool] */, %var_6364, %25)
}

def @func_2407() -> Tensor[(20), bool] {
  %26 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %26.5
}

def @func_2036(%var_1930: float64, %var_1932: Tensor[(20), bool], %var_1933: Tensor[(1352), float32], %var_1973: Tensor[(56), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(15, 6, 9), float64], Tensor[(810), float64], Tensor[(6, 20), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(60), bool], Tensor[(7, 4, 2), uint32], Tensor[(56), uint32], Tensor[(20), bool], Tensor[(13, 10, 7), uint64], Tensor[(13, 10, 7), float32], Tensor[(8), float64], Tensor[(140), bool], float64) {
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %28 = reshape(%27, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
  %29 = @func_600(%28) /* ty=(Tensor[(15, 6, 9), float64],) */;
  %30 = cast(meta[relay.Constant][6] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %31 = cast(meta[relay.Constant][7] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %32 = reshape(%30, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %33 = reshape(%31, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %34 = @func_894(%32, %33) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) */;
  %35 = cast(%var_1930, dtype="uint32") /* ty=uint32 */;
  %36 = cast(%var_1973, dtype="uint32") /* ty=Tensor[(56), uint32] */;
  %37 = reshape(%35, newshape=[]) /* ty=uint32 */;
  %38 = reshape(%36, newshape=[7, 4, 2]) /* ty=Tensor[(7, 4, 2), uint32] */;
  %39 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
  %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
  %41 = cast(%var_1930, dtype="float64") /* ty=float64 */;
  %42 = cast(meta[relay.Constant][5] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %43 = cast(%var_1932, dtype="bool") /* ty=Tensor[(20), bool] */;
  %44 = cast(%var_1933, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %45 = reshape(%39, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %46 = reshape(%40, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %47 = reshape(%41, newshape=[]) /* ty=float64 */;
  %48 = reshape(%42, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %49 = reshape(%43, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %50 = reshape(%44, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %51 = @func_1288(%45, %46, %47, %48, %49, %50) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) */;
  %52 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %53 = %52.0;
  %54 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
  %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
  %56 = cast(%var_1930, dtype="float64") /* ty=float64 */;
  %57 = cast(meta[relay.Constant][5] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %58 = cast(%var_1932, dtype="bool") /* ty=Tensor[(20), bool] */;
  %59 = cast(%var_1933, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %60 = reshape(%54, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %61 = reshape(%55, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %62 = reshape(%56, newshape=[]) /* ty=float64 */;
  %63 = reshape(%57, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %64 = reshape(%58, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %65 = reshape(%59, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %66 = @func_1288(%60, %61, %62, %63, %64, %65) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) */;
  %67 = %66.7;
  %68 = cast(%67, dtype="uint64") /* ty=Tensor[(13, 10, 7), uint64] */;
  %69 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%53, dtype="uint64") /* ty=Tensor[(13, 10, 7), uint64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %72 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
  %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
  %75 = cast(%var_1930, dtype="float64") /* ty=float64 */;
  %76 = cast(meta[relay.Constant][5] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %77 = %51.1;
  %78 = cast(%77, dtype="bool") /* ty=Tensor[(20), bool] */;
  %79 = cast(%var_1933, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %80 = reshape(%73, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %81 = reshape(%74, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %82 = reshape(%75, newshape=[]) /* ty=float64 */;
  %83 = reshape(%76, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %84 = reshape(%78, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %85 = reshape(%79, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %86 = @func_1288(%80, %81, %82, %83, %84, %85) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) */;
  %87 = %34.1;
  %88 = cast(%87, dtype="bool") /* ty=Tensor[(4, 7, 5), bool] */;
  %89 = cast(meta[relay.Constant][7] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %90 = reshape(%88, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %91 = reshape(%89, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %92 = @func_894(%90, %91) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) */;
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %94 = cast(%var_1933, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %95 = reshape(%93, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %96 = reshape(%94, newshape=[1, 1352]) /* ty=Tensor[(1, 1352), float32] */;
  %97 = @func_1379(%95, %96) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) */;
  %98 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  %99 = %29.0;
  %100 = @func_1226(%37, %38) /* ty=Tensor[(7, 4, 2), uint32] */;
  %101 = subtract(%70, %71) /* ty=Tensor[(13, 10, 7), uint64] */;
  %102 = %72.0;
  %103 = %86.2;
  %104 = %92.2;
  %105 = %97.2;
  (%98, %99, meta[relay.Constant][3] /* ty=Tensor[(810), float64] */, meta[relay.Constant][4] /* ty=Tensor[(6, 20), int16] */, %var_1930, meta[relay.Constant][5] /* ty=Tensor[(8), float64] */, %var_1932, %var_1933, %87, meta[relay.Constant][6] /* ty=Tensor[(140), bool] */, meta[relay.Constant][7] /* ty=Tensor[(60), bool] */, %100, %var_1973, %77, %101, %102, %103, %104, %105)
}

def @func_1700(%var_1693: float32, %var_1694: Tensor[(5, 4), bool]) -> (Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float32, Tensor[(5, 4), bool], Tensor[(140), bool]) {
  %106 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %107 = cast(%var_1693, dtype="float32") /* ty=float32 */;
  %108 = cast(%var_1694, dtype="bool") /* ty=Tensor[(5, 4), bool] */;
  %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %110 = reshape(%107, newshape=[]) /* ty=float32 */;
  %111 = reshape(%108, newshape=[20, 1]) /* ty=Tensor[(20, 1), bool] */;
  %112 = reshape(%109, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
  %113 = @func_386(%110, %111, %112) /* ty=(Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) */;
  %114 = %106.0;
  %115 = %113.9;
  (%114, %115, %var_1693, %var_1694, meta[relay.Constant][8] /* ty=Tensor[(140), bool] */)
}

def @func_1140() -> (Tensor[(16, 2, 14), float64],) {
  %116 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  (%116,)
}

def @func_5119(%var_5114: Tensor[(810), float64]) -> (Tensor[(13, 10, 7), float32], Tensor[(15, 6, 9), float64], Tensor[(810), float64]) {
  %117 = @func_2386() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %118 = cast(%var_5114, dtype="float64") /* ty=Tensor[(810), float64] */;
  %119 = reshape(%118, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
  %120 = @func_600(%119) /* ty=(Tensor[(15, 6, 9), float64],) */;
  %121 = %117.0;
  %122 = %120.0;
  (%121, %122, %var_5114)
}

def @func_1900(%var_1879: Tensor[(60), bool], %var_1883: Tensor[(5, 28), float64]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(60), bool], Tensor[(5, 28), bool], Tensor[(5, 28), float32]) {
  %123 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 28), bool] */, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %124 = cast(%var_1879, dtype="bool") /* ty=Tensor[(60), bool] */;
  %125 = reshape(%123, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %126 = reshape(%124, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %127 = @func_476(%125, %126) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %128 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 28), bool] */, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %129 = acos(%128) /* ty=Tensor[(5, 28), float64] */;
  %130 = cast(%var_1883, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(2), int32] */;
  %132 = cast(%129, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %134 = cast(%129, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %135 = sigmoid(%134) /* ty=Tensor[(5, 28), float32] */;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %137 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
  %138 = %127.1;
  %139 = greater(%132, %133) /* ty=Tensor[(5, 28), bool] */;
  %140 = sinh(%136) /* ty=Tensor[(5, 28), float32] */;
  (%137, %138, %var_1879, %139, %140)
}

def @func_3859(%var_3854: Tensor[(2, 9, 10), float32]) -> Tensor[(2, 9, 10), float32] {
  %141 = cast(%var_3854, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
  log10(%141) /* ty=Tensor[(2, 9, 10), float32] */
}

def @func_5243() -> (Tensor[(448), float64],) {
  %142 = @func_4097() /* ty=(Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64]) */;
  %143 = %142.2;
  (%143,)
}

def @func_569(%var_484: Tensor[(4, 13, 7), float64], %var_526: Tensor[(60), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(140), bool], Tensor[(60), bool], Tensor[(4, 13, 7), int32]) {
  %144 = cast(meta[relay.Constant][10] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %145 = cast(%var_526, dtype="bool") /* ty=Tensor[(60), bool] */;
  %146 = reshape(%144, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %147 = reshape(%145, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %148 = @func_476(%146, %147) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %149 = cast(%var_484, dtype="float64") /* ty=Tensor[(4, 13, 7), float64] */;
  %150 = sqrt(%149) /* ty=Tensor[(4, 13, 7), float64] */;
  %151 = cast(%150, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
  %152 = shape_of(%var_484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %153 = cast(%var_484, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %155 = not_equal(%153, %154) /* ty=Tensor[(4, 13, 7), bool] */;
  %156 = cast(%155, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
  %157 = shape_of(%var_484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%var_484, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = equal(%158, %159) /* ty=Tensor[(4, 13, 7), bool] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(4, 13, 7), float32] */;
  %162 = atan(%161) /* ty=Tensor[(4, 13, 7), float32] */;
  %163 = cast(%150, dtype="int32") /* ty=Tensor[(4, 13, 7), int32] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="int32") /* ty=Tensor[(4, 13, 7), int32] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %167 = %148.0;
  %168 = bitwise_or(%165, %166) /* ty=Tensor[(4, 13, 7), int32] */;
  (%167, meta[relay.Constant][10] /* ty=Tensor[(140), bool] */, %var_526, %168)
}

def @func_3537(%var_3521: Tensor[(13, 10, 7), float32]) -> (Tensor[(13, 10, 7), int64], Tensor[(13, 10, 7), float32]) {
  %169 = @func_2386() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %170 = %169.0;
  %171 = cast(%var_3521, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %175 = cast(%var_3521, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %176 = asin(%175) /* ty=Tensor[(13, 10, 7), float32] */;
  %177 = cast(%170, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%176, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %181 = bitwise_xor(%173, %174) /* ty=Tensor[(13, 10, 7), int64] */;
  %182 = mod(%179, %180) /* ty=Tensor[(13, 10, 7), float32] */;
  (%181, %182)
}

def @func_3220(%var_3211: Tensor[(16, 2, 14), float64]) -> (Tensor[(16, 2, 14), bool],) {
  %183 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %184 = %183.0;
  %185 = cast(%var_3211, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
  %187 = cast(%184, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %189 = logical_and(%187, %188) /* ty=Tensor[(16, 2, 14), bool] */;
  (%189,)
}

def @func_600(%var_595: Tensor[(15, 6, 9), float64]) -> (Tensor[(15, 6, 9), float64],) {
  %190 = cast(%var_595, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  %191 = sin(%190) /* ty=Tensor[(15, 6, 9), float64] */;
  (%191,)
}

def @func_5607() -> (Tensor[(13, 10, 7), float32],) {
  %192 = @func_2323() /* ty=Tensor[(13, 10, 7), float32] */;
  (%192,)
}

def @func_4579(%var_4552: Tensor[(8), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), bool], Tensor[(1352), float64], Tensor[(20), bool], Tensor[(8), float64], Tensor[(8), float64]) {
  %193 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %194 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %195 = %194.1;
  %196 = @func_3654() /* ty=Tensor[(13, 10, 7), float32] */;
  %197 = cast(%196, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %198 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%195, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = @func_2687() /* ty=(Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) */;
  %202 = %201.2;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %204 = cast(%var_4552, dtype="float64") /* ty=Tensor[(8), float64] */;
  %205 = sigmoid(%203) /* ty=Tensor[(1352), float64] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %207 = reshape(%204, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %208 = reshape(%206, newshape=[1, 1352]) /* ty=Tensor[(1, 1352), float32] */;
  %209 = @func_1379(%207, %208) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) */;
  %210 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
  %211 = %193.0;
  %212 = not_equal(%199, %200) /* ty=Tensor[(13, 10, 7), bool] */;
  %213 = %209.4;
  %214 = %210.0;
  (%211, %212, %205, %213, %var_4552, %214)
}

def @func_2901() -> (Tensor[(16, 2, 14), float64],) {
  %215 = @func_1719() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %216 = %215.0;
  (%216,)
}

def @func_6084() -> (Tensor[(8), float64], Tensor[(16, 2, 14), float64], Tensor[(60, 1), bool]) {
  %217 = cast(meta[relay.Constant][11] /* ty=Tensor[(60, 1), bool] */, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
  %218 = reshape(%217, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %219 = @func_1080(%218) /* ty=(Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) */;
  %220 = @func_5449() /* ty=Tensor[(8), float64] */;
  %221 = %219.1;
  (%220, %221, meta[relay.Constant][11] /* ty=Tensor[(60, 1), bool] */)
}

def @func_6564() -> Tensor[(16, 2, 14), uint64] {
  %222 = @func_2725() /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) */;
  %222.0
}

def @func_1226(%var_1202: uint32, %var_1203: Tensor[(7, 4, 2), uint32]) -> Tensor[(7, 4, 2), uint32] {
  %223 = cast(%var_1202, dtype="uint32") /* ty=uint32 */;
  %224 = cast(%var_1203, dtype="uint32") /* ty=Tensor[(7, 4, 2), uint32] */;
  left_shift(%223, %224) /* ty=Tensor[(7, 4, 2), uint32] */
}

def @func_5431() -> (Tensor[(5, 5, 12), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64], Tensor[(8), float64], Tensor[(56), uint32]) {
  %225 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 12), float32] */;
  %226 = cast(meta[relay.Constant][13] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %227 = reshape(%226, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %228 = cast(meta[relay.Constant][14] /* ty=Tensor[(56), uint32] */, dtype="uint32") /* ty=Tensor[(56), uint32] */;
  %229 = reshape(%228, newshape=[1, 56]) /* ty=Tensor[(1, 56), uint32] */;
  %230 = @func_4056(%229) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(7, 4, 2), uint32], uint32, Tensor[(1, 56), uint32], Tensor[(8), float64]) */;
  %231 = sigmoid(%225) /* ty=Tensor[(5, 5, 12), float32] */;
  %232 = @func_1108(%227) /* ty=Tensor[(16, 2, 14), uint64] */;
  %233 = %230.4;
  (%231, %232, meta[relay.Constant][13] /* ty=Tensor[(448), float64] */, %233, meta[relay.Constant][14] /* ty=Tensor[(56), uint32] */)
}

def @func_3565() -> Tensor[(16, 2, 14), float64] {
  @func_877() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_3400(%var_3384: Tensor[(1352), float32]) -> (Tensor[(8), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(140), bool], float64, Tensor[(1352), float32], Tensor[(20, 60), int8]) {
  %234 = @func_3272() /* ty=(Tensor[(8), float64],) */;
  %235 = cast(meta[relay.Constant][15] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %236 = cast(meta[relay.Constant][16] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %237 = reshape(%235, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %238 = reshape(%236, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %239 = @func_476(%237, %238) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %240 = cast(-6.48876f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %241 = %234.0;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(8), float64] */;
  %243 = cast(meta[relay.Constant][17] /* ty=Tensor[(20, 1), bool] */, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %244 = cast(%var_3384, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %245 = reshape(%240, newshape=[]) /* ty=float64 */;
  %246 = reshape(%242, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
  %247 = reshape(%243, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %248 = reshape(%244, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %249 = @func_755(%245, %246, %247, %248) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
  %250 = cast(meta[relay.Constant][16] /* ty=Tensor[(60), bool] */, dtype="int8") /* ty=Tensor[(60), int8] */;
  %251 = cast(meta[relay.Constant][17] /* ty=Tensor[(20, 1), bool] */, dtype="int8") /* ty=Tensor[(20, 1), int8] */;
  %252 = %239.2;
  %253 = %249.3;
  %254 = multiply(%250, %251) /* ty=Tensor[(20, 60), int8] */;
  (%241, %252, meta[relay.Constant][15] /* ty=Tensor[(140), bool] */, %253, -6.48876f64 /* ty=float64 */, %var_3384, %254)
}

def @func_2725() -> (Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) {
  %255 = cast(meta[relay.Constant][18] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %256 = cast(meta[relay.Constant][19] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %257 = reshape(%255, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %258 = reshape(%256, newshape=[1, 1352]) /* ty=Tensor[(1, 1352), float32] */;
  %259 = @func_1379(%257, %258) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) */;
  %260 = @func_1667() /* ty=Tensor[(13, 10, 7), float32] */;
  %261 = cast(%260, dtype="float64") /* ty=Tensor[(13, 10, 7), float64] */;
  %262 = %259.6;
  %263 = asinh(%261) /* ty=Tensor[(13, 10, 7), float64] */;
  (%262, meta[relay.Constant][18] /* ty=Tensor[(8), float64] */, meta[relay.Constant][19] /* ty=Tensor[(1352), float32] */, %263)
}

def @func_4097() -> (Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64]) {
  %264 = cast(meta[relay.Constant][20] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %265 = reshape(%264, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %266 = @func_3417() /* ty=Tensor[(13, 10, 7), float32] */;
  %267 = @func_1108(%265) /* ty=Tensor[(16, 2, 14), uint64] */;
  (%266, %267, meta[relay.Constant][20] /* ty=Tensor[(448), float64] */)
}

def @func_476(%var_442: Tensor[(140), bool], %var_452: Tensor[(3, 20), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) {
  %268 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 10, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %269 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 20), bool] */, dtype="bool") /* ty=Tensor[(1, 20), bool] */;
  %270 = cast(%var_452, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %271 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 20), bool] */, dtype="bool") /* ty=Tensor[(1, 20), bool] */;
  %272 = cast(%var_442, dtype="bool") /* ty=Tensor[(140), bool] */;
  %273 = reshape(%271, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %274 = reshape(%272, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %275 = @func_64(%273, %274) /* ty=Tensor[(4, 7, 5), bool] */;
  %276 = cast(%var_442, dtype="int64") /* ty=Tensor[(140), int64] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="int64") /* ty=Tensor[(4, 7, 5), int64] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %280 = bitwise_or(%278, %279) /* ty=Tensor[(4, 7, 5), int64] */;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(4, 7, 5), float64] */;
  %282 = log10(%268) /* ty=Tensor[(13, 10, 7), float32] */;
  %283 = greater_equal(%269, %270) /* ty=Tensor[(3, 20), bool] */;
  %284 = sinh(%281) /* ty=Tensor[(4, 7, 5), float64] */;
  (%282, %283, %284)
}

def @func_6441() -> (Tensor[(8), float64],) {
  %285 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
  %286 = %285.0;
  (%286,)
}

def @func_3654() -> Tensor[(13, 10, 7), float32] {
  %287 = @func_2780() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %287.0
}

def @func_64(%var_0: Tensor[(4, 1, 5), bool], %var_1: Tensor[(4, 7, 5), bool]) -> Tensor[(4, 7, 5), bool] {
  %288 = cast(%var_0, dtype="bool") /* ty=Tensor[(4, 1, 5), bool] */;
  %289 = cast(%var_1, dtype="bool") /* ty=Tensor[(4, 7, 5), bool] */;
  %290 = logical_and(%288, %289) /* ty=Tensor[(4, 7, 5), bool] */;
  %291 = cast(%var_0, dtype="float32") /* ty=Tensor[(4, 1, 5), float32] */;
  %292 = sigmoid(%291) /* ty=Tensor[(4, 1, 5), float32] */;
  %293 = cast(%290, dtype="bool") /* ty=Tensor[(4, 7, 5), bool] */;
  %294 = cast(%292, dtype="bool") /* ty=Tensor[(4, 1, 5), bool] */;
  equal(%293, %294) /* ty=Tensor[(4, 7, 5), bool] */
}

def @func_2185(%var_2150: Tensor[(1352), float32]) -> (Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), bool], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool]) {
  %295 = cast(meta[relay.Constant][23] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %296 = cast(%var_2150, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %297 = reshape(%295, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %298 = reshape(%296, newshape=[1, 1352]) /* ty=Tensor[(1, 1352), float32] */;
  %299 = @func_1379(%297, %298) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) */;
  %300 = @func_1854() /* ty=Tensor[(13, 10, 7), float32] */;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %302 = cosh(%301) /* ty=Tensor[(13, 10, 7), float32] */;
  %303 = cast(%300, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = cast(meta[relay.Constant][24] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %308 = cast(meta[relay.Constant][25] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %309 = reshape(%307, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %310 = reshape(%308, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %311 = %299.6;
  %312 = equal(%305, %306) /* ty=Tensor[(13, 10, 7), bool] */;
  %313 = @func_64(%309, %310) /* ty=Tensor[(4, 7, 5), bool] */;
  (%311, meta[relay.Constant][23] /* ty=Tensor[(8), float64] */, %var_2150, %312, %313, meta[relay.Constant][24] /* ty=Tensor[(20), bool] */, meta[relay.Constant][25] /* ty=Tensor[(140), bool] */)
}

def @func_1080(%var_1072: Tensor[(60), bool]) -> (Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) {
  %314 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %315 = %314.6;
  %316 = cast(%315, dtype="bool") /* ty=Tensor[(140), bool] */;
  %317 = cast(%var_1072, dtype="bool") /* ty=Tensor[(60), bool] */;
  %318 = reshape(%316, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %319 = reshape(%317, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %320 = @func_894(%318, %319) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) */;
  %321 = %320.0;
  (%315, %321, %var_1072)
}

def @func_2518(%var_2505: Tensor[(5, 8, 11), bool], %var_2506: Tensor[(5, 8, 11), bool]) -> Tensor[(5, 8, 11), bool] {
  %322 = cast(%var_2506, dtype="bool") /* ty=Tensor[(5, 8, 11), bool] */;
  %323 = shape_of(%var_2505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%var_2505, dtype="bool") /* ty=Tensor[(5, 8, 11), bool] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%324, %325) /* ty=Tensor[(5, 8, 11), bool] */
}

def @func_4842() -> (Tensor[(20), bool],) {
  %326 = @func_2407() /* ty=Tensor[(20), bool] */;
  (%326,)
}

def @func_5168(%var_5136: Tensor[(9, 16, 13), int32], %var_5145: Tensor[(1352), float32]) -> (Tensor[(9, 16, 13), int32], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(8, 12, 14), float64], Tensor[(1344), float64], Tensor[(9, 16, 13), bool]) {
  %327 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 16, 13), int32] */, dtype="int32") /* ty=Tensor[(9, 16, 13), int32] */;
  %328 = shape_of(%var_5136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%var_5136, dtype="int32") /* ty=Tensor[(9, 16, 13), int32] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %331 = cast(%var_5145, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %332 = reshape(%331, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %333 = @func_4195(%332) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(16, 2, 14), float32]) */;
  %334 = cast(meta[relay.Constant][27] /* ty=Tensor[(1344), float64] */, dtype="float64") /* ty=Tensor[(1344), float64] */;
  %335 = reshape(%334, newshape=[8, 12, 14]) /* ty=Tensor[(8, 12, 14), float64] */;
  %336 = cast(meta[relay.Constant][28] /* ty=Tensor[(9, 16, 13), int32] */, dtype="bool") /* ty=Tensor[(9, 16, 13), bool] */;
  %337 = shape_of(%var_5136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%var_5136, dtype="bool") /* ty=Tensor[(9, 16, 13), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = bitwise_and(%329, %330) /* ty=Tensor[(9, 16, 13), int32] */;
  %341 = %333.1;
  %342 = @func_3672(%335) /* ty=Tensor[(8, 12, 14), float64] */;
  %343 = less_equal(%338, %339) /* ty=Tensor[(9, 16, 13), bool] */;
  (%340, %341, %var_5145, %342, meta[relay.Constant][27] /* ty=Tensor[(1344), float64] */, %343)
}

def @func_3750() -> (Tensor[(8), float64], Tensor[(13, 10, 7), float32]) {
  %344 = @func_2725() /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) */;
  %345 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %346 = %344.1;
  %347 = %345.3;
  (%346, %347)
}

def @func_6213(%var_6180: Tensor[(9, 4, 10), float64], %var_6185: Tensor[(60), bool], %var_6186: Tensor[(140), float64]) -> (Tensor[(9, 4, 10), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(140), float64], Tensor[(16, 2, 14), float64]) {
  %348 = cast(%var_6180, dtype="float64") /* ty=Tensor[(9, 4, 10), float64] */;
  %349 = cast(%var_6185, dtype="bool") /* ty=Tensor[(60), bool] */;
  %350 = cast(%var_6186, dtype="float64") /* ty=Tensor[(140), float64] */;
  %351 = reshape(%349, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %352 = reshape(%350, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %353 = @func_1900(%351, %352) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(60), bool], Tensor[(5, 28), bool], Tensor[(5, 28), float32]) */;
  %354 = @func_2807() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %355 = cosh(%348) /* ty=Tensor[(9, 4, 10), float64] */;
  %356 = %353.0;
  %357 = %354.0;
  (%355, %356, %var_6185, %var_6186, %357)
}

def @func_2386() -> (Tensor[(13, 10, 7), float32],) {
  %358 = @func_1745() /* ty=Tensor[(13, 10, 7), float32] */;
  (%358,)
}

def @func_2526(%var_2523: Tensor[(9, 15, 6), float64]) -> (Tensor[(9, 15, 6), float64],) {
  %359 = cast(%var_2523, dtype="float64") /* ty=Tensor[(9, 15, 6), float64] */;
  %360 = log(%359) /* ty=Tensor[(9, 15, 6), float64] */;
  (%360,)
}

def @func_4322(%var_4299: Tensor[(12, 5, 1), float64]) -> (Tensor[(12, 5, ?), float32], Tensor[(8), float64], Tensor[(12, 5, ?), float32], Tensor[(16, 2, 14), float64]) {
  %361 = cast(%var_4299, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
  %362 = acos(%361) /* ty=Tensor[(12, 5, 1), float64] */;
  %363 = cast(%var_4299, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %367 = @func_2935() /* ty=(Tensor[(8), float64],) */;
  %368 = cast(%362, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
  %369 = shape_of(%var_4299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_4299, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %372 = @func_1719() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %373 = power(%365, %366) /* ty=Tensor[(12, 5, ?), float32] */;
  %374 = %367.0;
  %375 = divide(%370, %371) /* ty=Tensor[(12, 5, ?), float32] */;
  %376 = %372.0;
  (%373, %374, %375, %376)
}

def @func_1745() -> Tensor[(13, 10, 7), float32] {
  %377 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  log2(%378) /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_5397() -> Tensor[(8), float64] {
  %379 = @func_3150() /* ty=(Tensor[(8), float64], Tensor[(8), float64]) */;
  %379.0
}

def @func_2116(%var_2102: Tensor[(60), bool], %var_2111: float64, %var_2112: Tensor[(8, 1), float64], %var_2114: Tensor[(1352), float32]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(1, 140), bool], Tensor[(60), bool], Tensor[(1352), float32], float64, Tensor[(8, 1), float64], Tensor[(20), bool], Tensor[(1352), float32]) {
  %380 = cast(meta[relay.Constant][29] /* ty=Tensor[(1, 140), bool] */, dtype="bool") /* ty=Tensor[(1, 140), bool] */;
  %381 = cast(%var_2102, dtype="bool") /* ty=Tensor[(60), bool] */;
  %382 = reshape(%380, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %383 = reshape(%381, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %384 = @func_476(%382, %383) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %385 = cast(%var_2111, dtype="float64") /* ty=float64 */;
  %386 = cast(%var_2112, dtype="float64") /* ty=Tensor[(8, 1), float64] */;
  %387 = cast(meta[relay.Constant][30] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %388 = cast(%var_2114, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %389 = reshape(%385, newshape=[]) /* ty=float64 */;
  %390 = reshape(%386, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
  %391 = reshape(%387, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %392 = reshape(%388, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %393 = @func_755(%389, %390, %391, %392) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
  %394 = @func_1854() /* ty=Tensor[(13, 10, 7), float32] */;
  %395 = %384.1;
  %396 = %393.5;
  (%394, %395, meta[relay.Constant][29] /* ty=Tensor[(1, 140), bool] */, %var_2102, %396, %var_2111, %var_2112, meta[relay.Constant][30] /* ty=Tensor[(20), bool] */, %var_2114)
}

def @func_5472() -> Tensor[(16, 2, 14), int32] {
  %397 = @func_2477() /* ty=(Tensor[(16, 2, 14), int32],) */;
  %397.0
}

def @func_1574() -> Tensor[(16, 2, 14), float64] {
  %398 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %398.0
}

def @func_1108(%var_1102: Tensor[(16, 2, 14), float64]) -> Tensor[(16, 2, 14), uint64] {
  %399 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  %400 = cast(%var_1102, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%402, %403) /* ty=Tensor[(16, 2, 14), uint64] */
}

def @func_3436() -> (Tensor[(13, 10, 7), float32], Tensor[(9, 15, 6), float64], Tensor[(810), float64]) {
  %404 = cast(meta[relay.Constant][31] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %405 = reshape(%404, newshape=[9, 15, 6]) /* ty=Tensor[(9, 15, 6), float64] */;
  %406 = @func_2526(%405) /* ty=(Tensor[(9, 15, 6), float64],) */;
  %407 = @func_3417() /* ty=Tensor[(13, 10, 7), float32] */;
  %408 = %406.0;
  (%407, %408, meta[relay.Constant][31] /* ty=Tensor[(810), float64] */)
}

def @func_5066() -> (Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), int8]) {
  %409 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %411 = reshape(%410, newshape=[13, 10, 7]) /* ty=Tensor[(13, 10, 7), float32] */;
  %412 = @func_3731(%411) /* ty=(Tensor[(13, 10, 7), int8], Tensor[(4, 7, 5), bool], Tensor[(1352), float32]) */;
  %413 = %412.0;
  (%409, %413)
}

def @func_6293(%var_6257: Tensor[(60), bool], %var_6274: Tensor[(350, 1), float32], %var_6282: Tensor[(10, 2), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(140), uint64], Tensor[(60), bool], Tensor[(10, 7, 5), float32], Tensor[(350, 1), float32], Tensor[(13, 10, 7), float32], Tensor[(20, 1), bool], float32, Tensor[(10, 2), bool]) {
  %414 = @func_2386() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %415 = cast(%var_6257, dtype="bool") /* ty=Tensor[(60), bool] */;
  %416 = reshape(%415, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %417 = @func_1080(%416) /* ty=(Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) */;
  %418 = cast(%var_6274, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
  %419 = reshape(%418, newshape=[10, 7, 5]) /* ty=Tensor[(10, 7, 5), float32] */;
  %420 = @func_3831(%419) /* ty=(Tensor[(10, 7, 5), float32], Tensor[(13, 10, 7), float32]) */;
  %421 = cast(9.33362f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %422 = cast(%var_6282, dtype="bool") /* ty=Tensor[(10, 2), bool] */;
  %423 = %417.0;
  %424 = cast(%423, dtype="bool") /* ty=Tensor[(140), bool] */;
  %425 = reshape(%421, newshape=[]) /* ty=float32 */;
  %426 = reshape(%422, newshape=[20, 1]) /* ty=Tensor[(20, 1), bool] */;
  %427 = reshape(%424, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
  %428 = @func_386(%425, %426, %427) /* ty=(Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) */;
  %429 = %414.0;
  %430 = %420.0;
  %431 = @func_2323() /* ty=Tensor[(13, 10, 7), float32] */;
  %432 = %428.4;
  (%429, %423, %var_6257, %430, %var_6274, %431, %432, 9.33362f /* ty=float32 */, %var_6282)
}

def @func_4481() -> Tensor[(13, 10, 7), float32] {
  @func_1854() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_5782() -> Tensor[(16, 2, 14), int32] {
  %433 = @func_2477() /* ty=(Tensor[(16, 2, 14), int32],) */;
  %433.0
}

def @func_6103(%var_6092: Tensor[(9, 2, 3), uint64]) -> Tensor[(9, 2, 3), uint64] {
  %434 = cast(%var_6092, dtype="uint64") /* ty=Tensor[(9, 2, 3), uint64] */;
  %435 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(9, 2, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 2, 3), uint64] */, dtype="uint64") /* ty=Tensor[(9, 2, 3), uint64] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%436, %437) /* ty=Tensor[(9, 2, 3), uint64] */
}

def @func_2477() -> (Tensor[(16, 2, 14), int32],) {
  %438 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  %439 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 2, 14), float64] */, dtype="int32") /* ty=Tensor[(16, 2, 14), int32] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="int32") /* ty=Tensor[(16, 2, 14), int32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %443 = bitwise_or(%441, %442) /* ty=Tensor[(16, 2, 14), int32] */;
  (%443,)
}

def @func_2687() -> (Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) {
  %444 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %445 = cast(meta[relay.Constant][34] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %446 = reshape(%445, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %447 = @func_2185(%446) /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), bool], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool]) */;
  %448 = cast(meta[relay.Constant][34] /* ty=Tensor[(1352), float32] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %449 = %444.2;
  %450 = %447.6;
  %451 = cosh(%448) /* ty=Tensor[(1352), float64] */;
  (%449, %450, %451)
}

def @func_3194() -> Tensor[(16, 2, 14), int32] {
  %452 = @func_2477() /* ty=(Tensor[(16, 2, 14), int32],) */;
  %452.0
}

def @func_5334(%var_5305: Tensor[(60, 1), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(60, 140), bool], Tensor[(60, 140), float32]) {
  %453 = cast(%var_5305, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
  %454 = reshape(%453, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %455 = @func_1080(%454) /* ty=(Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) */;
  %456 = %455.0;
  %457 = cast(%456, dtype="bool") /* ty=Tensor[(140), bool] */;
  %458 = cast(%var_5305, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
  %459 = cast(%456, dtype="float32") /* ty=Tensor[(140), float32] */;
  %460 = cast(%var_5305, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %461 = floor_mod(%459, %460) /* ty=Tensor[(60, 140), float32] */;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(60, 140), float32] */;
  %463 = @func_4481() /* ty=Tensor[(13, 10, 7), float32] */;
  %464 = not_equal(%457, %458) /* ty=Tensor[(60, 140), bool] */;
  %465 = rsqrt(%462) /* ty=Tensor[(60, 140), float32] */;
  (%463, %464, %465)
}

def @func_2655(%var_2630: Tensor[(338, 4), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(8), float64], Tensor[(120, 1), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(338, 4), float32]) {
  %466 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %467 = cast(meta[relay.Constant][35] /* ty=Tensor[(120, 1), int16] */, dtype="int16") /* ty=Tensor[(120, 1), int16] */;
  %468 = cast(meta[relay.Constant][35] /* ty=Tensor[(120, 1), int16] */, dtype="int16") /* ty=Tensor[(120, 1), int16] */;
  %469 = cast(6.23349f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %470 = cast(meta[relay.Constant][36] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %471 = cast(meta[relay.Constant][37] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %472 = cast(%var_2630, dtype="float32") /* ty=Tensor[(338, 4), float32] */;
  %473 = reshape(%467, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %474 = reshape(%468, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %475 = reshape(%469, newshape=[]) /* ty=float64 */;
  %476 = reshape(%470, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %477 = reshape(%471, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %478 = reshape(%472, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %479 = @func_1288(%473, %474, %475, %476, %477, %478) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) */;
  %480 = %466.0;
  %481 = %479.2;
  (%480, %481, meta[relay.Constant][35] /* ty=Tensor[(120, 1), int16] */, 6.23349f64 /* ty=float64 */, meta[relay.Constant][36] /* ty=Tensor[(8), float64] */, meta[relay.Constant][37] /* ty=Tensor[(20), bool] */, %var_2630)
}

def @func_3150() -> (Tensor[(8), float64], Tensor[(8), float64]) {
  %482 = @func_2935() /* ty=(Tensor[(8), float64],) */;
  %483 = @func_2935() /* ty=(Tensor[(8), float64],) */;
  %484 = %482.0;
  %485 = %483.0;
  (%484, %485)
}

def @func_193(%var_188: float32, %var_189: Tensor[(8, 13, 13), float32]) -> (Tensor[(8, 13, 13), float32],) {
  %486 = cast(%var_188, dtype="float32") /* ty=float32 */;
  %487 = cast(%var_189, dtype="float32") /* ty=Tensor[(8, 13, 13), float32] */;
  %488 = floor_mod(%486, %487) /* ty=Tensor[(8, 13, 13), float32] */;
  (%488,)
}

def @func_1159() -> (Tensor[(13, 10, 7), float32],) {
  %489 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %490 = %489.3;
  (%490,)
}

def @func_2323() -> Tensor[(13, 10, 7), float32] {
  @func_1667() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_2807() -> (Tensor[(16, 2, 14), float64],) {
  %491 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %492 = %491.0;
  (%492,)
}

def @func_4241() -> (Tensor[(13, 10, 7), float32],) {
  %493 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
  %494 = %493.1;
  (%494,)
}

def @func_3496() -> (Tensor[(13, 10, 7), float64], Tensor[(8), float64]) {
  %495 = @func_2725() /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) */;
  %496 = @func_2935() /* ty=(Tensor[(8), float64],) */;
  %497 = %495.3;
  %498 = %496.0;
  (%497, %498)
}

def @func_4688() -> (Tensor[(8), float64], Tensor[(13, 10, 7), float32], Tensor[(300, 1), uint16], Tensor[(300), uint16]) {
  %499 = @func_3150() /* ty=(Tensor[(8), float64], Tensor[(8), float64]) */;
  %500 = cast(meta[relay.Constant][38] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %501 = cast(meta[relay.Constant][38] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %502 = reshape(%500, newshape=[300, 1]) /* ty=Tensor[(300, 1), uint16] */;
  %503 = reshape(%501, newshape=[15, 10, 2]) /* ty=Tensor[(15, 10, 2), uint16] */;
  %504 = @func_3003(%502, %503) /* ty=(Tensor[(140), bool], Tensor[(300, 1), uint16], Tensor[(15, 10, 2), bool]) */;
  %505 = %499.0;
  %506 = @func_1667() /* ty=Tensor[(13, 10, 7), float32] */;
  %507 = %504.1;
  (%505, %506, %507, meta[relay.Constant][38] /* ty=Tensor[(300), uint16] */)
}

def @func_2780() -> (Tensor[(13, 10, 7), float32],) {
  %508 = @func_1745() /* ty=Tensor[(13, 10, 7), float32] */;
  (%508,)
}

def @func_2935() -> (Tensor[(8), float64],) {
  %509 = @func_2725() /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) */;
  %510 = %509.1;
  (%510,)
}

def @func_3672(%var_3661: Tensor[(8, 12, 14), float64]) -> Tensor[(8, 12, 14), float64] {
  %511 = cast(7.10166f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %512 = cast(%var_3661, dtype="float64") /* ty=Tensor[(8, 12, 14), float64] */;
  floor_mod(%511, %512) /* ty=Tensor[(8, 12, 14), float64] */
}

def @func_1618(%var_1586: Tensor[(13, 8, 5), float32], %var_1605: Tensor[(56), uint32]) -> (Tensor[(13, 8, 5), int32], Tensor[(13, 8, 5), bool], Tensor[(7, 4, 2), uint32], uint32, Tensor[(56), uint32]) {
  %513 = cast(%var_1586, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %514 = cos(%513) /* ty=Tensor[(13, 8, 5), float32] */;
  %515 = cast(%var_1586, dtype="int32") /* ty=Tensor[(13, 8, 5), int32] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="int32") /* ty=Tensor[(13, 8, 5), int32] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %519 = cast(%514, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %520 = shape_of(%var_1586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%var_1586, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %523 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %524 = cast(%var_1605, dtype="uint32") /* ty=Tensor[(56), uint32] */;
  %525 = reshape(%523, newshape=[]) /* ty=uint32 */;
  %526 = reshape(%524, newshape=[7, 4, 2]) /* ty=Tensor[(7, 4, 2), uint32] */;
  %527 = add(%517, %518) /* ty=Tensor[(13, 8, 5), int32] */;
  %528 = logical_or(%521, %522) /* ty=Tensor[(13, 8, 5), bool] */;
  %529 = @func_1226(%525, %526) /* ty=Tensor[(7, 4, 2), uint32] */;
  (%527, %528, %529, meta[relay.Constant][39] /* ty=uint32 */, %var_1605)
}

def @func_1854() -> Tensor[(13, 10, 7), float32] {
  @func_1667() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_3782() -> (Tensor[(16, 2, 14), float32], Tensor[(140), bool], Tensor[(1352), float32]) {
  %530 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %531 = %530.0;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %533 = cast(meta[relay.Constant][40] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %534 = reshape(%533, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %535 = @func_3400(%534) /* ty=(Tensor[(8), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(140), bool], float64, Tensor[(1352), float32], Tensor[(20, 60), int8]) */;
  %536 = cos(%532) /* ty=Tensor[(16, 2, 14), float32] */;
  %537 = %535.3;
  (%536, %537, meta[relay.Constant][40] /* ty=Tensor[(1352), float32] */)
}

def @func_5378() -> (Tensor[(16, 2, 14), float64],) {
  %538 = @func_1719() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %539 = %538.0;
  (%539,)
}

def @func_3313(%var_3301: Tensor[(20), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(140), bool], float32, Tensor[(20), bool]) {
  %540 = cast(9.26396f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %541 = cast(%var_3301, dtype="bool") /* ty=Tensor[(20), bool] */;
  %542 = reshape(%540, newshape=[]) /* ty=float32 */;
  %543 = reshape(%541, newshape=[5, 4]) /* ty=Tensor[(5, 4), bool] */;
  %544 = @func_1700(%542, %543) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float32, Tensor[(5, 4), bool], Tensor[(140), bool]) */;
  %545 = @func_1667() /* ty=Tensor[(13, 10, 7), float32] */;
  %546 = %544.4;
  (%545, %546, 9.26396f /* ty=float32 */, %var_3301)
}

def @func_5770() -> (Tensor[(8), float64], Tensor[(13, 10, 7), float32], Tensor[(60, 1), bool], float64, Tensor[(13, 104), float32]) {
  %547 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
  %548 = cast(meta[relay.Constant][41] /* ty=Tensor[(60, 1), bool] */, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
  %549 = cast(-5.08884f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %550 = %547.0;
  %551 = cast(%550, dtype="float64") /* ty=Tensor[(8), float64] */;
  %552 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 104), float32] */, dtype="float32") /* ty=Tensor[(13, 104), float32] */;
  %553 = reshape(%548, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %554 = reshape(%549, newshape=[]) /* ty=float64 */;
  %555 = reshape(%551, newshape=[8, 1]) /* ty=Tensor[(8, 1), float64] */;
  %556 = reshape(%552, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %557 = @func_2116(%553, %554, %555, %556) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(1, 140), bool], Tensor[(60), bool], Tensor[(1352), float32], float64, Tensor[(8, 1), float64], Tensor[(20), bool], Tensor[(1352), float32]) */;
  %558 = %557.0;
  (%550, %558, meta[relay.Constant][41] /* ty=Tensor[(60, 1), bool] */, -5.08884f64 /* ty=float64 */, meta[relay.Constant][42] /* ty=Tensor[(13, 104), float32] */)
}

def @func_4984(%var_4958: Tensor[(20), bool]) -> Tensor[(20), float64] {
  %559 = @func_4842() /* ty=(Tensor[(20), bool],) */;
  %560 = %559.0;
  %561 = cast(%var_4958, dtype="float32") /* ty=Tensor[(20), float32] */;
  %562 = shape_of(%560, dtype="int32") /* ty=Tensor[(1), int32] */;
  %563 = cast(%560, dtype="float32") /* ty=Tensor[(20), float32] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?), float32] */;
  %565 = add(%563, %564) /* ty=Tensor[(20), float32] */;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(20), float64] */;
  atanh(%566) /* ty=Tensor[(20), float64] */
}

def @func_1417() -> Tensor[(13, 10, 7), float32] {
  %567 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %567.1
}

def @func_1838(%var_1831: Tensor[(15, 10, 2), uint16], %var_1832: Tensor[(15, 10, 2), uint16]) -> Tensor[(15, 10, 2), uint16] {
  %568 = cast(%var_1832, dtype="uint16") /* ty=Tensor[(15, 10, 2), uint16] */;
  %569 = shape_of(%var_1831, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%var_1831, dtype="uint16") /* ty=Tensor[(15, 10, 2), uint16] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_or(%570, %571) /* ty=Tensor[(15, 10, 2), uint16] */
}

def @func_1288(%var_1236: Tensor[(5, 6, 4), int16], %var_1237: Tensor[(5, 6, 4), int16], %var_1258: float64, %var_1259: Tensor[(8), float64], %var_1260: Tensor[(20), bool], %var_1261: Tensor[(1352), float32]) -> (Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) {
  %572 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %573 = cast(%var_1258, dtype="float64") /* ty=float64 */;
  %574 = cast(%var_1259, dtype="float64") /* ty=Tensor[(8), float64] */;
  %575 = cast(%var_1260, dtype="bool") /* ty=Tensor[(20), bool] */;
  %576 = cast(%var_1261, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %577 = reshape(%573, newshape=[]) /* ty=float64 */;
  %578 = reshape(%574, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
  %579 = reshape(%575, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %580 = reshape(%576, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %581 = @func_755(%577, %578, %579, %580) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
  %582 = cast(%var_1237, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %583 = cast(%var_1258, dtype="bool") /* ty=bool */;
  %584 = cast(%var_1237, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %585 = shape_of(%var_1236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%var_1236, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %588 = bitwise_or(%586, %587) /* ty=Tensor[(5, 6, 4), int16] */;
  %589 = cast(%588, dtype="uint32") /* ty=Tensor[(5, 6, 4), uint32] */;
  %590 = shape_of(%var_1236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_1236, dtype="uint32") /* ty=Tensor[(5, 6, 4), uint32] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %593 = logical_xor(%591, %592) /* ty=Tensor[(5, 6, 4), uint32] */;
  %594 = cast(%593, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %595 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %596 = %572.0;
  %597 = %581.2;
  %598 = less_equal(%582, %583) /* ty=Tensor[(5, 6, 4), bool] */;
  %599 = exp(%594) /* ty=Tensor[(5, 6, 4), float32] */;
  %600 = %595.0;
  (%596, %597, %var_1259, %var_1260, %var_1261, %598, %599, %600)
}

def @func_3259(%var_3237: Tensor[(3, 6, 12), float64]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool]) {
  %601 = cast(%var_3237, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
  %602 = atan(%601) /* ty=Tensor[(3, 6, 12), float64] */;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %604 = cast(%602, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %605 = shape_of(%var_3237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%var_3237, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %608 = sigmoid(%603) /* ty=Tensor[(3, 6, 12), float32] */;
  %609 = less_equal(%606, %607) /* ty=Tensor[(3, 6, 12), bool] */;
  (%608, %609)
}

def @func_4859(%var_4850: Tensor[(16, 2, 14), uint32]) -> (Tensor[(16, 2, 14), bool],) {
  %610 = cast(%var_4850, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %611 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(16, 2, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %612 = cast(meta[relay.Constant][43] /* ty=Tensor[(16, 2, 14), uint32] */, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %614 = not_equal(%612, %613) /* ty=Tensor[(16, 2, 14), bool] */;
  (%614,)
}

def @func_4128(%var_4122: float64, %var_4123: Tensor[(11, 15, 2), float64]) -> (Tensor[(11, 15, 2), float64],) {
  %615 = cast(%var_4122, dtype="float64") /* ty=float64 */;
  %616 = cast(%var_4123, dtype="float64") /* ty=Tensor[(11, 15, 2), float64] */;
  %617 = floor_divide(%615, %616) /* ty=Tensor[(11, 15, 2), float64] */;
  (%617,)
}

def @func_3272() -> (Tensor[(8), float64],) {
  %618 = @func_3150() /* ty=(Tensor[(8), float64], Tensor[(8), float64]) */;
  %619 = %618.0;
  (%619,)
}

def @func_1379(%var_1347: Tensor[(8), float64], %var_1349: Tensor[(1, 1352), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) {
  %620 = cast(4.7627f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %621 = cast(%var_1347, dtype="float64") /* ty=Tensor[(8), float64] */;
  %622 = cast(meta[relay.Constant][44] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %623 = cast(%var_1349, dtype="float32") /* ty=Tensor[(1, 1352), float32] */;
  %624 = reshape(%620, newshape=[]) /* ty=float64 */;
  %625 = reshape(%621, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
  %626 = reshape(%622, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %627 = reshape(%623, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %628 = @func_755(%624, %625, %626, %627) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
  %629 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %631 = reshape(%630, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %632 = %628.4;
  %633 = @func_1108(%631) /* ty=Tensor[(16, 2, 14), uint64] */;
  (%629, %632, 4.7627f64 /* ty=float64 */, %var_1347, meta[relay.Constant][44] /* ty=Tensor[(20), bool] */, %var_1349, %633)
}

def @func_2841(%var_2831: Tensor[(13, 10, 7), float32]) -> (Tensor[(13, 10, 7), int64], Tensor[(8, 13, 13), float32], float32, Tensor[(676, 2), float32]) {
  %634 = @func_1745() /* ty=Tensor[(13, 10, 7), float32] */;
  %635 = cast(%var_2831, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %639 = cast(6.20708f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %640 = cast(meta[relay.Constant][45] /* ty=Tensor[(676, 2), float32] */, dtype="float32") /* ty=Tensor[(676, 2), float32] */;
  %641 = reshape(%639, newshape=[]) /* ty=float32 */;
  %642 = reshape(%640, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float32] */;
  %643 = @func_193(%641, %642) /* ty=(Tensor[(8, 13, 13), float32],) */;
  %644 = right_shift(%637, %638) /* ty=Tensor[(13, 10, 7), int64] */;
  %645 = %643.0;
  (%644, %645, 6.20708f /* ty=float32 */, meta[relay.Constant][45] /* ty=Tensor[(676, 2), float32] */)
}

def @main() -> (Tensor[(13, 10, 7), float32], Tensor[(448), float64], Tensor[(16, 2, 14), bool]) {
  %646 = @func_2386() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %647 = @func_5243() /* ty=(Tensor[(448), float64],) */;
  %648 = @func_2901() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %649 = %648.0;
  %650 = cast(meta[relay.Constant][46] /* ty=Tensor[(16, 2, 14), float64] */, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %651 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%649, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = %646.0;
  %655 = %647.0;
  %656 = less(%652, %653) /* ty=Tensor[(16, 2, 14), bool] */;
  (%654, %655, %656)
}

def @func_1485(%var_1454: Tensor[(20), bool], %var_1479: Tensor[(60), bool]) -> (Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(60), bool], Tensor[(13, 10, 7), bool]) {
  %657 = cast(%var_1454, dtype="bool") /* ty=Tensor[(20), bool] */;
  %658 = cast(meta[relay.Constant][47] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %659 = reshape(%657, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %660 = reshape(%658, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %661 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %662 = %661.0;
  %663 = cast(%662, dtype="float64") /* ty=Tensor[(13, 10, 7), float64] */;
  %664 = log(%663) /* ty=Tensor[(13, 10, 7), float64] */;
  %665 = cast(meta[relay.Constant][48] /* ty=Tensor[(13, 10, 7), float64] */, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %669 = cast(%var_1479, dtype="bool") /* ty=Tensor[(60), bool] */;
  %670 = reshape(%669, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %671 = @func_1080(%670) /* ty=(Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) */;
  %672 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
  %673 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %674 = %673.0;
  %675 = cast(%674, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %676 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%672, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %679 = @func_64(%659, %660) /* ty=Tensor[(4, 7, 5), bool] */;
  %680 = power(%667, %668) /* ty=Tensor[(13, 10, 7), float32] */;
  %681 = %671.1;
  %682 = logical_or(%677, %678) /* ty=Tensor[(13, 10, 7), bool] */;
  (%679, %var_1454, meta[relay.Constant][47] /* ty=Tensor[(140), bool] */, %680, %681, %var_1479, %682)
}

def @func_877() -> Tensor[(16, 2, 14), float64] {
  %683 = cast(meta[relay.Constant][49] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %684 = acosh(%683) /* ty=Tensor[(16, 2, 14), float32] */;
  %685 = cast(meta[relay.Constant][49] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %686 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%684, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  minimum(%687, %688) /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_1331(%var_1304: Tensor[(60), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), float32], Tensor[(364), float64], Tensor[(60), bool], Tensor[(13, 10, 7), float32]) {
  %689 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %690 = cast(meta[relay.Constant][50] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %691 = cast(%var_1304, dtype="bool") /* ty=Tensor[(60), bool] */;
  %692 = reshape(%690, newshape=[4, 13, 7]) /* ty=Tensor[(4, 13, 7), float64] */;
  %693 = reshape(%691, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %694 = @func_569(%692, %693) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(140), bool], Tensor[(60), bool], Tensor[(4, 13, 7), int32]) */;
  %695 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %696 = %689.0;
  %697 = %694.0;
  %698 = %695.1;
  (%696, %697, meta[relay.Constant][50] /* ty=Tensor[(364), float64] */, %var_1304, %698)
}

def @func_4010() -> Tensor[(16, 2, 14), int32] {
  %699 = @func_2477() /* ty=(Tensor[(16, 2, 14), int32],) */;
  %699.0
}

def @func_4455(%var_4407: Tensor[(16, 13, 16), int8], %var_4408: Tensor[(16, 13, 16), int8], %var_4415: Tensor[(15, 4), bool]) -> (Tensor[(5, 28), bool], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(16, 13, 16), uint32], Tensor[(16, 13, 16), bool]) {
  %700 = cast(%var_4415, dtype="bool") /* ty=Tensor[(15, 4), bool] */;
  %701 = cast(meta[relay.Constant][51] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
  %702 = reshape(%700, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %703 = reshape(%701, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
  %704 = @func_1900(%702, %703) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(60), bool], Tensor[(5, 28), bool], Tensor[(5, 28), float32]) */;
  %705 = cast(%var_4408, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %706 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%var_4407, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = less_equal(%707, %708) /* ty=Tensor[(16, 13, 16), bool] */;
  %710 = cast(%709, dtype="uint32") /* ty=Tensor[(16, 13, 16), uint32] */;
  %711 = shape_of(%var_4408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%var_4408, dtype="uint32") /* ty=Tensor[(16, 13, 16), uint32] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %714 = cast(%var_4408, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %715 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%var_4407, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %718 = %704.3;
  %719 = multiply(%712, %713) /* ty=Tensor[(16, 13, 16), uint32] */;
  %720 = not_equal(%716, %717) /* ty=Tensor[(16, 13, 16), bool] */;
  (%718, %var_4415, meta[relay.Constant][51] /* ty=Tensor[(140), float64] */, %719, %720)
}

def @func_5449() -> Tensor[(8), float64] {
  %721 = @func_3150() /* ty=(Tensor[(8), float64], Tensor[(8), float64]) */;
  %721.1
}

def @func_1667() -> Tensor[(13, 10, 7), float32] {
  @func_1417() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_2254() -> (Tensor[(16, 2, 14), float32],) {
  %722 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %723 = %722.0;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %725 = log(%724) /* ty=Tensor[(16, 2, 14), float32] */;
  (%725,)
}

def @func_3731(%var_3720: Tensor[(13, 10, 7), float32]) -> (Tensor[(13, 10, 7), int8], Tensor[(4, 7, 5), bool], Tensor[(1352), float32]) {
  %726 = @func_3417() /* ty=Tensor[(13, 10, 7), float32] */;
  %727 = cast(%var_3720, dtype="int8") /* ty=Tensor[(13, 10, 7), int8] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="int8") /* ty=Tensor[(13, 10, 7), int8] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %731 = cast(meta[relay.Constant][52] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %732 = reshape(%731, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %733 = @func_2185(%732) /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), bool], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool]) */;
  %734 = logical_xor(%729, %730) /* ty=Tensor[(13, 10, 7), int8] */;
  %735 = %733.4;
  (%734, %735, meta[relay.Constant][52] /* ty=Tensor[(1352), float32] */)
}

def @func_755(%var_730: float64, %var_731: Tensor[(1, 8), float64], %var_739: Tensor[(20), bool], %var_749: Tensor[(1352), float32]) -> (Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) {
  %736 = cast(%var_730, dtype="float64") /* ty=float64 */;
  %737 = cast(%var_731, dtype="float64") /* ty=Tensor[(1, 8), float64] */;
  %738 = cast(%var_739, dtype="bool") /* ty=Tensor[(20), bool] */;
  %739 = cast(meta[relay.Constant][53] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %740 = reshape(%738, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %741 = reshape(%739, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %742 = cast(%var_730, dtype="float32") /* ty=float32 */;
  %743 = cast(%var_749, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %744 = reshape(%742, newshape=[]) /* ty=float32 */;
  %745 = reshape(%743, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float32] */;
  %746 = @func_193(%744, %745) /* ty=(Tensor[(8, 13, 13), float32],) */;
  %747 = floor_divide(%736, %737) /* ty=Tensor[(1, 8), float64] */;
  %748 = @func_64(%740, %741) /* ty=Tensor[(4, 7, 5), bool] */;
  %749 = %746.0;
  (%747, %748, %var_739, meta[relay.Constant][53] /* ty=Tensor[(140), bool] */, %749, %var_749)
}

def @func_4195(%var_4175: Tensor[(1352), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(16, 2, 14), float32]) {
  %750 = cast(%var_4175, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %751 = reshape(%750, newshape=[338, 4]) /* ty=Tensor[(338, 4), float32] */;
  %752 = @func_2655(%751) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8), float64], Tensor[(120, 1), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(338, 4), float32]) */;
  %753 = @func_2254() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %754 = %753.0;
  %755 = cast(%754, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %756 = @func_1574() /* ty=Tensor[(16, 2, 14), float64] */;
  %757 = %752.6;
  %758 = sinh(%755) /* ty=Tensor[(16, 2, 14), float32] */;
  (%756, %757, %var_4175, %758)
}

def @func_1036() -> (Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) {
  %759 = cast(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %760 = cast(meta[relay.Constant][55] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %761 = reshape(%759, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %762 = reshape(%760, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %763 = @func_476(%761, %762) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %764 = cast(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %765 = cast(meta[relay.Constant][55] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %766 = reshape(%764, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %767 = reshape(%765, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %768 = @func_476(%766, %767) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %769 = cast(5.89218f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %770 = cast(meta[relay.Constant][56] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %771 = cast(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %772 = reshape(%769, newshape=[]) /* ty=float32 */;
  %773 = reshape(%770, newshape=[20, 1]) /* ty=Tensor[(20, 1), bool] */;
  %774 = reshape(%771, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
  %775 = @func_386(%772, %773, %774) /* ty=(Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) */;
  %776 = %775.3;
  %777 = cast(%776, dtype="uint64") /* ty=Tensor[(4, 7, 5), uint64] */;
  %778 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %779 = cast(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %781 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  %782 = %763.0;
  %783 = %768.0;
  %784 = subtract(%779, %780) /* ty=Tensor[(140), uint64] */;
  (%781, %782, meta[relay.Constant][55] /* ty=Tensor[(60), bool] */, %783, 5.89218f /* ty=float32 */, meta[relay.Constant][56] /* ty=Tensor[(20), bool] */, %784)
}

def @func_5711(%var_5698: Tensor[(16, 2, 14), float64]) -> (Tensor[(16, 2, 14), bool],) {
  %785 = @func_3565() /* ty=Tensor[(16, 2, 14), float64] */;
  %786 = cast(%var_5698, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %790 = equal(%788, %789) /* ty=Tensor[(16, 2, 14), bool] */;
  (%790,)
}

def @func_894(%var_891: Tensor[(140), bool], %var_892: Tensor[(3, 20), bool]) -> (Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) {
  %791 = cast(%var_891, dtype="bool") /* ty=Tensor[(140), bool] */;
  %792 = cast(%var_892, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %793 = reshape(%791, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %794 = reshape(%792, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %795 = @func_476(%793, %794) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %796 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  %797 = %795.2;
  (%796, %797, %var_891, %var_892)
}

def @func_2360(%var_2334: Tensor[(10, 16, 7), float32], %var_2348: Tensor[(60), bool]) -> (Tensor[(10, 16, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(20), bool], Tensor[(60), bool]) {
  %798 = cast(%var_2334, dtype="float32") /* ty=Tensor[(10, 16, 7), float32] */;
  %799 = acos(%798) /* ty=Tensor[(10, 16, 7), float32] */;
  %800 = cast(meta[relay.Constant][57] /* ty=Tensor[(10, 16, 7), float32] */, dtype="uint8") /* ty=Tensor[(10, 16, 7), uint8] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%799, dtype="uint8") /* ty=Tensor[(10, 16, 7), uint8] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %804 = logical_xor(%802, %803) /* ty=Tensor[(10, 16, 7), uint8] */;
  %805 = cast(%804, dtype="float32") /* ty=Tensor[(10, 16, 7), float32] */;
  %806 = cast(meta[relay.Constant][58] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %807 = cast(%var_2348, dtype="bool") /* ty=Tensor[(60), bool] */;
  %808 = reshape(%806, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %809 = reshape(%807, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %810 = @func_1485(%808, %809) /* ty=(Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(60), bool], Tensor[(13, 10, 7), bool]) */;
  %811 = cosh(%805) /* ty=Tensor[(10, 16, 7), float32] */;
  %812 = %810.4;
  (%811, %812, meta[relay.Constant][58] /* ty=Tensor[(20), bool] */, %var_2348)
}

def @func_386(%var_285: float32, %var_294: Tensor[(20, 1), bool], %var_295: Tensor[(5, 28), bool]) -> (Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) {
  %813 = cast(%var_285, dtype="float32") /* ty=float32 */;
  %814 = cast(meta[relay.Constant][59] /* ty=Tensor[(13, 104), float32] */, dtype="float32") /* ty=Tensor[(13, 104), float32] */;
  %815 = reshape(%813, newshape=[]) /* ty=float32 */;
  %816 = reshape(%814, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float32] */;
  %817 = @func_193(%815, %816) /* ty=(Tensor[(8, 13, 13), float32],) */;
  %818 = cast(%var_294, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %819 = cast(%var_295, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %820 = reshape(%818, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %821 = reshape(%819, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %822 = cast(meta[relay.Constant][60] /* ty=Tensor[(13, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 9), float64] */;
  %823 = asin(%822) /* ty=Tensor[(13, 12, 9), float64] */;
  %824 = cast(meta[relay.Constant][60] /* ty=Tensor[(13, 12, 9), float64] */, dtype="bool") /* ty=Tensor[(13, 12, 9), bool] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="bool") /* ty=Tensor[(13, 12, 9), bool] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %828 = not_equal(%826, %827) /* ty=Tensor[(13, 12, 9), bool] */;
  %829 = cast(meta[relay.Constant][60] /* ty=Tensor[(13, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 9), float64] */;
  %830 = erf(%829) /* ty=Tensor[(13, 12, 9), float64] */;
  %831 = cast(%830, dtype="uint8") /* ty=Tensor[(13, 12, 9), uint8] */;
  %832 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %833 = cast(%828, dtype="uint8") /* ty=Tensor[(13, 12, 9), uint8] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %835 = cast(%var_294, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %836 = cast(%var_295, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %837 = reshape(%835, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %838 = reshape(%836, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %839 = cast(%828, dtype="float32") /* ty=Tensor[(13, 12, 9), float32] */;
  %840 = cast(%var_294, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %841 = @func_64(%837, %838) /* ty=Tensor[(4, 7, 5), bool] */;
  %842 = cast(%841, dtype="bool") /* ty=Tensor[(4, 7, 5), bool] */;
  %843 = reshape(%840, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %844 = reshape(%842, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %845 = cast(%var_285, dtype="float32") /* ty=float32 */;
  %846 = cast(meta[relay.Constant][59] /* ty=Tensor[(13, 104), float32] */, dtype="float32") /* ty=Tensor[(13, 104), float32] */;
  %847 = reshape(%845, newshape=[]) /* ty=float32 */;
  %848 = reshape(%846, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float32] */;
  %849 = @func_193(%847, %848) /* ty=(Tensor[(8, 13, 13), float32],) */;
  %850 = %817.0;
  %851 = @func_64(%820, %821) /* ty=Tensor[(4, 7, 5), bool] */;
  %852 = bitwise_xor(%833, %834) /* ty=Tensor[(13, 12, 9), uint8] */;
  %853 = sinh(%839) /* ty=Tensor[(13, 12, 9), float32] */;
  %854 = @func_64(%843, %844) /* ty=Tensor[(4, 7, 5), bool] */;
  %855 = %849.0;
  (%850, %var_285, meta[relay.Constant][59] /* ty=Tensor[(13, 104), float32] */, %851, %var_294, %var_295, %852, %841, %853, %854, %855)
}

def @func_6499() -> Tensor[(1352), float32] {
  %856 = @func_3782() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(140), bool], Tensor[(1352), float32]) */;
  %856.2
}

def @func_4797() -> (Tensor[(20), bool], Tensor[(13, 10, 7), float32], Tensor[(5, 8, 11), bool], Tensor[(440), bool], Tensor[(16, 13, 16), bool], Tensor[(3328), int8], Tensor[(60), bool]) {
  %857 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %858 = cast(meta[relay.Constant][61] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %859 = cast(meta[relay.Constant][61] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
  %860 = reshape(%858, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), bool] */;
  %861 = reshape(%859, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), bool] */;
  %862 = cast(meta[relay.Constant][62] /* ty=Tensor[(3328), int8] */, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %863 = cast(meta[relay.Constant][62] /* ty=Tensor[(3328), int8] */, dtype="int8") /* ty=Tensor[(3328), int8] */;
  %864 = cast(meta[relay.Constant][63] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %865 = reshape(%862, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
  %866 = reshape(%863, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
  %867 = reshape(%864, newshape=[15, 4]) /* ty=Tensor[(15, 4), bool] */;
  %868 = @func_4455(%865, %866, %867) /* ty=(Tensor[(5, 28), bool], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(16, 13, 16), uint32], Tensor[(16, 13, 16), bool]) */;
  %869 = @func_2407() /* ty=Tensor[(20), bool] */;
  %870 = %857.3;
  %871 = @func_2518(%860, %861) /* ty=Tensor[(5, 8, 11), bool] */;
  %872 = %868.4;
  (%869, %870, %871, meta[relay.Constant][61] /* ty=Tensor[(440), bool] */, %872, meta[relay.Constant][62] /* ty=Tensor[(3328), int8] */, meta[relay.Constant][63] /* ty=Tensor[(60), bool] */)
}

def @func_4056(%var_4036: Tensor[(1, 56), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(7, 4, 2), uint32], uint32, Tensor[(1, 56), uint32], Tensor[(8), float64]) {
  %873 = @func_2807() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %874 = cast(meta[relay.Constant][64] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %875 = cast(%var_4036, dtype="uint32") /* ty=Tensor[(1, 56), uint32] */;
  %876 = reshape(%874, newshape=[]) /* ty=uint32 */;
  %877 = reshape(%875, newshape=[7, 4, 2]) /* ty=Tensor[(7, 4, 2), uint32] */;
  %878 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
  %879 = %873.0;
  %880 = @func_1226(%876, %877) /* ty=Tensor[(7, 4, 2), uint32] */;
  %881 = %878.0;
  (%879, %880, meta[relay.Constant][64] /* ty=uint32 */, %var_4036, %881)
}

def @func_1794(%var_1759: Tensor[(2, 13, 10), float32], %var_1772: Tensor[(8), float64]) -> (Tensor[(2, 13, 10), float32], Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(15, 6, 9), float64], Tensor[(3, 270), float64]) {
  %882 = cast(%var_1759, dtype="float32") /* ty=Tensor[(2, 13, 10), float32] */;
  %883 = cast(-4.04047f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %884 = cast(%var_1772, dtype="float64") /* ty=Tensor[(8), float64] */;
  %885 = cast(meta[relay.Constant][65] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %886 = cast(meta[relay.Constant][66] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %887 = reshape(%883, newshape=[]) /* ty=float64 */;
  %888 = reshape(%884, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
  %889 = reshape(%885, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %890 = reshape(%886, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %891 = @func_755(%887, %888, %889, %890) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
  %892 = cast(meta[relay.Constant][67] /* ty=Tensor[(3, 270), float64] */, dtype="float64") /* ty=Tensor[(3, 270), float64] */;
  %893 = reshape(%892, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
  %894 = @func_600(%893) /* ty=(Tensor[(15, 6, 9), float64],) */;
  %895 = asinh(%882) /* ty=Tensor[(2, 13, 10), float32] */;
  %896 = @func_1574() /* ty=Tensor[(16, 2, 14), float64] */;
  %897 = %891.1;
  %898 = %894.0;
  (%895, %896, %897, -4.04047f64 /* ty=float64 */, %var_1772, meta[relay.Constant][65] /* ty=Tensor[(20), bool] */, meta[relay.Constant][66] /* ty=Tensor[(1352), float32] */, %898, meta[relay.Constant][67] /* ty=Tensor[(3, 270), float64] */)
}

def @func_3003(%var_2964: Tensor[(300, 1), uint16], %var_2998: Tensor[(15, 10, 2), uint16]) -> (Tensor[(140), bool], Tensor[(300, 1), uint16], Tensor[(15, 10, 2), bool]) {
  %899 = @func_2687() /* ty=(Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) */;
  %900 = cast(%var_2964, dtype="uint16") /* ty=Tensor[(300, 1), uint16] */;
  %901 = cast(%var_2964, dtype="uint16") /* ty=Tensor[(300, 1), uint16] */;
  %902 = reshape(%900, newshape=[15, 10, 2]) /* ty=Tensor[(15, 10, 2), uint16] */;
  %903 = reshape(%901, newshape=[15, 10, 2]) /* ty=Tensor[(15, 10, 2), uint16] */;
  %904 = @func_1838(%902, %903) /* ty=Tensor[(15, 10, 2), uint16] */;
  %905 = cast(%var_2998, dtype="bool") /* ty=Tensor[(15, 10, 2), bool] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="bool") /* ty=Tensor[(15, 10, 2), bool] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %909 = %899.1;
  %910 = greater_equal(%907, %908) /* ty=Tensor[(15, 10, 2), bool] */;
  (%909, %var_2964, %910)
}

def @func_5457() -> (Tensor[(13, 10, 7), float32],) {
  %911 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %912 = %911.0;
  (%912,)
}

def @func_5999(%var_5938: Tensor[(5, 5, 16), float64]) -> (Tensor[(5, 5, 16), float64], Tensor[(13, 10, 7), float32]) {
  %913 = cast(%var_5938, dtype="float64") /* ty=Tensor[(5, 5, 16), float64] */;
  %914 = tan(%913) /* ty=Tensor[(5, 5, 16), float64] */;
  %915 = @func_3654() /* ty=Tensor[(13, 10, 7), float32] */;
  (%914, %915)
}

def @func_3417() -> Tensor[(13, 10, 7), float32] {
  @func_1854() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_6144() -> Tensor[(1352), float32] {
  %916 = @func_3782() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(140), bool], Tensor[(1352), float32]) */;
  %916.2
}

def @func_5911() -> (Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), float32], Tensor[(20), bool]) {
  %917 = @func_5457() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %918 = %917.0;
  %919 = @func_4481() /* ty=Tensor[(13, 10, 7), float32] */;
  %920 = @func_2407() /* ty=Tensor[(20), bool] */;
  (%918, %919, %920)
}

def @func_2444(%var_2430: Tensor[(60), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(70, 2), bool], Tensor[(60), bool]) {
  %921 = cast(meta[relay.Constant][68] /* ty=Tensor[(70, 2), bool] */, dtype="bool") /* ty=Tensor[(70, 2), bool] */;
  %922 = cast(%var_2430, dtype="bool") /* ty=Tensor[(60), bool] */;
  %923 = reshape(%921, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %924 = reshape(%922, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %925 = @func_476(%923, %924) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %926 = @func_1745() /* ty=Tensor[(13, 10, 7), float32] */;
  %927 = %925.1;
  (%926, %927, meta[relay.Constant][68] /* ty=Tensor[(70, 2), bool] */, %var_2430)
}

def @func_3831(%var_3822: Tensor[(10, 7, 5), float32]) -> (Tensor[(10, 7, 5), float32], Tensor[(13, 10, 7), float32]) {
  %928 = cast(%var_3822, dtype="float32") /* ty=Tensor[(10, 7, 5), float32] */;
  %929 = tan(%928) /* ty=Tensor[(10, 7, 5), float32] */;
  %930 = @func_3417() /* ty=Tensor[(13, 10, 7), float32] */;
  (%929, %930)
}

def @func_5666(%var_5654: Tensor[(9), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(1, 9), float32], Tensor[(9), float32]) {
  %931 = @func_1574() /* ty=Tensor[(16, 2, 14), float64] */;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %933 = cast(%var_5654, dtype="float32") /* ty=Tensor[(9), float32] */;
  %934 = reshape(%933, newshape=[1, 9]) /* ty=Tensor[(1, 9), float32] */;
  %935 = @func_4646(%934) /* ty=(Tensor[(1, 9), float32], Tensor[(140), bool]) */;
  %936 = atan(%932) /* ty=Tensor[(16, 2, 14), float64] */;
  %937 = %935.0;
  (%936, %937, %var_5654)
}

def @func_5917() -> (Tensor[(13, 10, 7), float32],) {
  %938 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
  (%938,)
}

def @func_1719() -> (Tensor[(16, 2, 14), float64],) {
  %939 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %940 = %939.0;
  (%940,)
}

def @func_4646(%var_4622: Tensor[(1, 9), float32]) -> (Tensor[(1, 9), float32], Tensor[(140), bool]) {
  %941 = cast(%var_4622, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
  %942 = @func_2687() /* ty=(Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) */;
  %943 = acosh(%941) /* ty=Tensor[(1, 9), float32] */;
  %944 = %942.1;
  (%943, %944)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5459() -> (Tensor[(13, 10, 7), float32],) {
  @func_5457() /* ty=(Tensor[(13, 10, 7), float32],) */
}

def @func_1719() -> (Tensor[(16, 2, 14), float64],) {
  %0 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_2447(%var_2445: Tensor[(60), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(70, 2), bool], Tensor[(60), bool]) {
  @func_2444(%var_2445) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(70, 2), bool], Tensor[(60), bool]) */
}

def @func_1485(%var_1454: Tensor[(20), bool], %var_1479: Tensor[(60), bool]) -> (Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(60), bool], Tensor[(13, 10, 7), bool]) {
  %2 = cast(%var_1454, dtype="bool") /* ty=Tensor[(20), bool] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %4 = reshape(%2, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %5 = reshape(%3, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %6 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="float64") /* ty=Tensor[(13, 10, 7), float64] */;
  %9 = log(%8) /* ty=Tensor[(13, 10, 7), float64] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 10, 7), float64] */, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %11 = shape_of(%9, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%9, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %14 = cast(%var_1479, dtype="bool") /* ty=Tensor[(60), bool] */;
  %15 = reshape(%14, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %16 = @func_1080(%15) /* ty=(Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) */;
  %17 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
  %18 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %19 = %18.0;
  %20 = cast(%19, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %21 = shape_of(%17, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%17, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %24 = @func_64(%4, %5) /* ty=Tensor[(4, 7, 5), bool] */;
  %25 = power(%12, %13) /* ty=Tensor[(13, 10, 7), float32] */;
  %26 = %16.1;
  %27 = logical_or(%22, %23) /* ty=Tensor[(13, 10, 7), bool] */;
  (%24, %var_1454, meta[relay.Constant][0] /* ty=Tensor[(140), bool] */, %25, %26, %var_1479, %27)
}

def @func_4058(%var_4057: Tensor[(1, 56), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(7, 4, 2), uint32], uint32, Tensor[(1, 56), uint32], Tensor[(8), float64]) {
  %37 = fn (%var_4036: Tensor[(1, 56), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(7, 4, 2), uint32], uint32, Tensor[(1, 56), uint32], Tensor[(8), float64]) {
    %28 = @func_2807() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %29 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %30 = cast(%var_4036, dtype="uint32") /* ty=Tensor[(1, 56), uint32] */;
    %31 = reshape(%29, newshape=[]) /* ty=uint32 */;
    %32 = reshape(%30, newshape=[7, 4, 2]) /* ty=Tensor[(7, 4, 2), uint32] */;
    %33 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
    %34 = %28.0;
    %35 = @func_1226(%31, %32) /* ty=Tensor[(7, 4, 2), uint32] */;
    %36 = %33.0;
    (%34, %35, meta[relay.Constant][2] /* ty=uint32 */, %var_4036, %36)
  };
  %37(%var_4057) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(7, 4, 2), uint32], uint32, Tensor[(1, 56), uint32], Tensor[(8), float64]) */
}

def @func_1618(%var_1586: Tensor[(13, 8, 5), float32], %var_1605: Tensor[(56), uint32]) -> (Tensor[(13, 8, 5), int32], Tensor[(13, 8, 5), bool], Tensor[(7, 4, 2), uint32], uint32, Tensor[(56), uint32]) {
  %38 = cast(%var_1586, dtype="float32") /* ty=Tensor[(13, 8, 5), float32] */;
  %39 = cos(%38) /* ty=Tensor[(13, 8, 5), float32] */;
  %40 = cast(%var_1586, dtype="int32") /* ty=Tensor[(13, 8, 5), int32] */;
  %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
  %42 = cast(%39, dtype="int32") /* ty=Tensor[(13, 8, 5), int32] */;
  %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %44 = cast(%39, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %45 = shape_of(%var_1586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_1586, dtype="bool") /* ty=Tensor[(13, 8, 5), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %48 = cast(meta[relay.Constant][3] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %49 = cast(%var_1605, dtype="uint32") /* ty=Tensor[(56), uint32] */;
  %50 = reshape(%48, newshape=[]) /* ty=uint32 */;
  %51 = reshape(%49, newshape=[7, 4, 2]) /* ty=Tensor[(7, 4, 2), uint32] */;
  %52 = add(%42, %43) /* ty=Tensor[(13, 8, 5), int32] */;
  %53 = logical_or(%46, %47) /* ty=Tensor[(13, 8, 5), bool] */;
  %54 = @func_1226(%50, %51) /* ty=Tensor[(7, 4, 2), uint32] */;
  (%52, %53, %54, meta[relay.Constant][3] /* ty=uint32 */, %var_1605)
}

def @func_3436() -> (Tensor[(13, 10, 7), float32], Tensor[(9, 15, 6), float64], Tensor[(810), float64]) {
  %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %56 = reshape(%55, newshape=[9, 15, 6]) /* ty=Tensor[(9, 15, 6), float64] */;
  %57 = @func_2526(%56) /* ty=(Tensor[(9, 15, 6), float64],) */;
  %58 = @func_3417() /* ty=Tensor[(13, 10, 7), float32] */;
  %59 = %57.0;
  (%58, %59, meta[relay.Constant][4] /* ty=Tensor[(810), float64] */)
}

def @func_4579(%var_4552: Tensor[(8), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), bool], Tensor[(1352), float64], Tensor[(20), bool], Tensor[(8), float64], Tensor[(8), float64]) {
  %60 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %61 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %62 = %61.1;
  %63 = @func_3654() /* ty=Tensor[(13, 10, 7), float32] */;
  %64 = cast(%63, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %65 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%62, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %68 = @func_2687() /* ty=(Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) */;
  %69 = %68.2;
  %70 = cast(%69, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %71 = cast(%var_4552, dtype="float64") /* ty=Tensor[(8), float64] */;
  %72 = sigmoid(%70) /* ty=Tensor[(1352), float64] */;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %74 = reshape(%71, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %75 = reshape(%73, newshape=[1, 1352]) /* ty=Tensor[(1, 1352), float32] */;
  %76 = @func_1379(%74, %75) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) */;
  %77 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
  %78 = %60.0;
  %79 = not_equal(%66, %67) /* ty=Tensor[(13, 10, 7), bool] */;
  %80 = %76.4;
  %81 = %77.0;
  (%78, %79, %72, %80, %var_4552, %81)
}

def @func_6387(%var_6383: float64, %var_6384: Tensor[(2, 8, 8), float64], %var_6385: Tensor[(2, 8, 8), float64], %var_6386: Tensor[(140), float64]) -> (Tensor[(2, 8, 8), float64], Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), float64], Tensor[(2, 8, 8), bool], Tensor[(60), bool], Tensor[(360), float64], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(2, 8, 8), float64]) {
  @func_6381(%var_6383, %var_6384, %var_6385, %var_6386) /* ty=(Tensor[(2, 8, 8), float64], Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), float64], Tensor[(2, 8, 8), bool], Tensor[(60), bool], Tensor[(360), float64], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(2, 8, 8), float64]) */
}

def @func_2478() -> (Tensor[(16, 2, 14), int32],) {
  %88 = fn () -> (Tensor[(16, 2, 14), int32],) {
    %82 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
    %83 = cast(meta[relay.Constant][5] /* ty=Tensor[(16, 2, 14), float64] */, dtype="int32") /* ty=Tensor[(16, 2, 14), int32] */;
    %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
    %85 = cast(%82, dtype="int32") /* ty=Tensor[(16, 2, 14), int32] */;
    %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %87 = bitwise_or(%85, %86) /* ty=Tensor[(16, 2, 14), int32] */;
    (%87,)
  };
  %88() /* ty=(Tensor[(16, 2, 14), int32],) */
}

def @func_3654() -> Tensor[(13, 10, 7), float32] {
  %89 = @func_2780() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %89.0
}

def @func_2325() -> Tensor[(13, 10, 7), float32] {
  @func_2323() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_5917() -> (Tensor[(13, 10, 7), float32],) {
  %90 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
  (%90,)
}

def @func_5432() -> (Tensor[(5, 5, 12), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64], Tensor[(8), float64], Tensor[(56), uint32]) {
  %100 = fn () -> (Tensor[(5, 5, 12), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64], Tensor[(8), float64], Tensor[(56), uint32]) {
    %91 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 5, 12), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 12), float32] */;
    %92 = cast(meta[relay.Constant][7] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
    %93 = reshape(%92, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
    %94 = cast(meta[relay.Constant][8] /* ty=Tensor[(56), uint32] */, dtype="uint32") /* ty=Tensor[(56), uint32] */;
    %95 = reshape(%94, newshape=[1, 56]) /* ty=Tensor[(1, 56), uint32] */;
    %96 = @func_4056(%95) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(7, 4, 2), uint32], uint32, Tensor[(1, 56), uint32], Tensor[(8), float64]) */;
    %97 = sigmoid(%91) /* ty=Tensor[(5, 5, 12), float32] */;
    %98 = @func_1108(%93) /* ty=Tensor[(16, 2, 14), uint64] */;
    %99 = %96.4;
    (%97, %98, meta[relay.Constant][7] /* ty=Tensor[(448), float64] */, %99, meta[relay.Constant][8] /* ty=Tensor[(56), uint32] */)
  };
  %100() /* ty=(Tensor[(5, 5, 12), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64], Tensor[(8), float64], Tensor[(56), uint32]) */
}

def @func_2781() -> (Tensor[(13, 10, 7), float32],) {
  %102 = fn () -> (Tensor[(13, 10, 7), float32],) {
    %101 = @func_1745() /* ty=Tensor[(13, 10, 7), float32] */;
    (%101,)
  };
  %102() /* ty=(Tensor[(13, 10, 7), float32],) */
}

def @func_4984(%var_4958: Tensor[(20), bool]) -> Tensor[(20), float64] {
  %103 = @func_4842() /* ty=(Tensor[(20), bool],) */;
  %104 = %103.0;
  %105 = cast(%var_4958, dtype="float32") /* ty=Tensor[(20), float32] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(1), int32] */;
  %107 = cast(%104, dtype="float32") /* ty=Tensor[(20), float32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?), float32] */;
  %109 = add(%107, %108) /* ty=Tensor[(20), float32] */;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(20), float64] */;
  atanh(%110) /* ty=Tensor[(20), float64] */
}

def @func_1747() -> Tensor[(13, 10, 7), float32] {
  @func_1745() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_1226(%var_1202: uint32, %var_1203: Tensor[(7, 4, 2), uint32]) -> Tensor[(7, 4, 2), uint32] {
  %111 = cast(%var_1202, dtype="uint32") /* ty=uint32 */;
  %112 = cast(%var_1203, dtype="uint32") /* ty=Tensor[(7, 4, 2), uint32] */;
  left_shift(%111, %112) /* ty=Tensor[(7, 4, 2), uint32] */
}

def @func_3403(%var_3401: Tensor[(1352), float32]) -> (Tensor[(8), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(140), bool], float64, Tensor[(1352), float32], Tensor[(20, 60), int8]) {
  @func_3400(%var_3401) /* ty=(Tensor[(8), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(140), bool], float64, Tensor[(1352), float32], Tensor[(20, 60), int8]) */
}

def @func_1794(%var_1759: Tensor[(2, 13, 10), float32], %var_1772: Tensor[(8), float64]) -> (Tensor[(2, 13, 10), float32], Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(15, 6, 9), float64], Tensor[(3, 270), float64]) {
  %113 = cast(%var_1759, dtype="float32") /* ty=Tensor[(2, 13, 10), float32] */;
  %114 = cast(-4.04047f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %115 = cast(%var_1772, dtype="float64") /* ty=Tensor[(8), float64] */;
  %116 = cast(meta[relay.Constant][9] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %117 = cast(meta[relay.Constant][10] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %118 = reshape(%114, newshape=[]) /* ty=float64 */;
  %119 = reshape(%115, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
  %120 = reshape(%116, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %121 = reshape(%117, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %122 = @func_755(%118, %119, %120, %121) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
  %123 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 270), float64] */, dtype="float64") /* ty=Tensor[(3, 270), float64] */;
  %124 = reshape(%123, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
  %125 = @func_600(%124) /* ty=(Tensor[(15, 6, 9), float64],) */;
  %126 = asinh(%113) /* ty=Tensor[(2, 13, 10), float32] */;
  %127 = @func_1574() /* ty=Tensor[(16, 2, 14), float64] */;
  %128 = %122.1;
  %129 = %125.0;
  (%126, %127, %128, -4.04047f64 /* ty=float64 */, %var_1772, meta[relay.Constant][9] /* ty=Tensor[(20), bool] */, meta[relay.Constant][10] /* ty=Tensor[(1352), float32] */, %129, meta[relay.Constant][11] /* ty=Tensor[(3, 270), float64] */)
}

def @func_2386() -> (Tensor[(13, 10, 7), float32],) {
  %130 = @func_1745() /* ty=Tensor[(13, 10, 7), float32] */;
  (%130,)
}

def @func_3006(%var_3004: Tensor[(300, 1), uint16], %var_3005: Tensor[(15, 10, 2), uint16]) -> (Tensor[(140), bool], Tensor[(300, 1), uint16], Tensor[(15, 10, 2), bool]) {
  %143 = fn (%var_2964: Tensor[(300, 1), uint16], %var_2998: Tensor[(15, 10, 2), uint16]) -> (Tensor[(140), bool], Tensor[(300, 1), uint16], Tensor[(15, 10, 2), bool]) {
    %131 = @func_2687() /* ty=(Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) */;
    %132 = cast(%var_2964, dtype="uint16") /* ty=Tensor[(300, 1), uint16] */;
    %133 = cast(%var_2964, dtype="uint16") /* ty=Tensor[(300, 1), uint16] */;
    %134 = reshape(%132, newshape=[15, 10, 2]) /* ty=Tensor[(15, 10, 2), uint16] */;
    %135 = reshape(%133, newshape=[15, 10, 2]) /* ty=Tensor[(15, 10, 2), uint16] */;
    %136 = @func_1838(%134, %135) /* ty=Tensor[(15, 10, 2), uint16] */;
    %137 = cast(%var_2998, dtype="bool") /* ty=Tensor[(15, 10, 2), bool] */;
    %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
    %139 = cast(%136, dtype="bool") /* ty=Tensor[(15, 10, 2), bool] */;
    %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %141 = %131.1;
    %142 = greater_equal(%139, %140) /* ty=Tensor[(15, 10, 2), bool] */;
    (%141, %var_2964, %142)
  };
  %143(%var_3004, %var_3005) /* ty=(Tensor[(140), bool], Tensor[(300, 1), uint16], Tensor[(15, 10, 2), bool]) */
}

def @func_6566() -> Tensor[(16, 2, 14), uint64] {
  @func_6564() /* ty=Tensor[(16, 2, 14), uint64] */
}

def @func_1296(%var_1290: Tensor[(5, 6, 4), int16], %var_1291: Tensor[(5, 6, 4), int16], %var_1292: float64, %var_1293: Tensor[(8), float64], %var_1294: Tensor[(20), bool], %var_1295: Tensor[(1352), float32]) -> (Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) {
  @func_1288(%var_1290, %var_1291, %var_1292, %var_1293, %var_1294, %var_1295) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) */
}

def @func_2655(%var_2630: Tensor[(338, 4), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(8), float64], Tensor[(120, 1), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(338, 4), float32]) {
  %144 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %145 = cast(meta[relay.Constant][12] /* ty=Tensor[(120, 1), int16] */, dtype="int16") /* ty=Tensor[(120, 1), int16] */;
  %146 = cast(meta[relay.Constant][12] /* ty=Tensor[(120, 1), int16] */, dtype="int16") /* ty=Tensor[(120, 1), int16] */;
  %147 = cast(6.23349f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %148 = cast(meta[relay.Constant][13] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %149 = cast(meta[relay.Constant][14] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %150 = cast(%var_2630, dtype="float32") /* ty=Tensor[(338, 4), float32] */;
  %151 = reshape(%145, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %152 = reshape(%146, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
  %153 = reshape(%147, newshape=[]) /* ty=float64 */;
  %154 = reshape(%148, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %155 = reshape(%149, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %156 = reshape(%150, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %157 = @func_1288(%151, %152, %153, %154, %155, %156) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) */;
  %158 = %144.0;
  %159 = %157.2;
  (%158, %159, meta[relay.Constant][12] /* ty=Tensor[(120, 1), int16] */, 6.23349f64 /* ty=float64 */, meta[relay.Constant][13] /* ty=Tensor[(8), float64] */, meta[relay.Constant][14] /* ty=Tensor[(20), bool] */, %var_2630)
}

def @func_4097() -> (Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64]) {
  %160 = cast(meta[relay.Constant][15] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %161 = reshape(%160, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %162 = @func_3417() /* ty=Tensor[(13, 10, 7), float32] */;
  %163 = @func_1108(%161) /* ty=Tensor[(16, 2, 14), uint64] */;
  (%162, %163, meta[relay.Constant][15] /* ty=Tensor[(448), float64] */)
}

def @func_386(%var_285: float32, %var_294: Tensor[(20, 1), bool], %var_295: Tensor[(5, 28), bool]) -> (Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) {
  %164 = cast(%var_285, dtype="float32") /* ty=float32 */;
  %165 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 104), float32] */, dtype="float32") /* ty=Tensor[(13, 104), float32] */;
  %166 = reshape(%164, newshape=[]) /* ty=float32 */;
  %167 = reshape(%165, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float32] */;
  %168 = @func_193(%166, %167) /* ty=(Tensor[(8, 13, 13), float32],) */;
  %169 = cast(%var_294, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %170 = cast(%var_295, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %171 = reshape(%169, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %172 = reshape(%170, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %173 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 9), float64] */;
  %174 = asin(%173) /* ty=Tensor[(13, 12, 9), float64] */;
  %175 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 12, 9), float64] */, dtype="bool") /* ty=Tensor[(13, 12, 9), bool] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="bool") /* ty=Tensor[(13, 12, 9), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %179 = not_equal(%177, %178) /* ty=Tensor[(13, 12, 9), bool] */;
  %180 = cast(meta[relay.Constant][17] /* ty=Tensor[(13, 12, 9), float64] */, dtype="float64") /* ty=Tensor[(13, 12, 9), float64] */;
  %181 = erf(%180) /* ty=Tensor[(13, 12, 9), float64] */;
  %182 = cast(%181, dtype="uint8") /* ty=Tensor[(13, 12, 9), uint8] */;
  %183 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%179, dtype="uint8") /* ty=Tensor[(13, 12, 9), uint8] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %186 = cast(%var_294, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %187 = cast(%var_295, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %188 = reshape(%186, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %189 = reshape(%187, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %190 = cast(%179, dtype="float32") /* ty=Tensor[(13, 12, 9), float32] */;
  %191 = cast(%var_294, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %192 = @func_64(%188, %189) /* ty=Tensor[(4, 7, 5), bool] */;
  %193 = cast(%192, dtype="bool") /* ty=Tensor[(4, 7, 5), bool] */;
  %194 = reshape(%191, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %195 = reshape(%193, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %196 = cast(%var_285, dtype="float32") /* ty=float32 */;
  %197 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 104), float32] */, dtype="float32") /* ty=Tensor[(13, 104), float32] */;
  %198 = reshape(%196, newshape=[]) /* ty=float32 */;
  %199 = reshape(%197, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float32] */;
  %200 = @func_193(%198, %199) /* ty=(Tensor[(8, 13, 13), float32],) */;
  %201 = %168.0;
  %202 = @func_64(%171, %172) /* ty=Tensor[(4, 7, 5), bool] */;
  %203 = bitwise_xor(%184, %185) /* ty=Tensor[(13, 12, 9), uint8] */;
  %204 = sinh(%190) /* ty=Tensor[(13, 12, 9), float32] */;
  %205 = @func_64(%194, %195) /* ty=Tensor[(4, 7, 5), bool] */;
  %206 = %200.0;
  (%201, %var_285, meta[relay.Constant][16] /* ty=Tensor[(13, 104), float32] */, %202, %var_294, %var_295, %203, %192, %204, %205, %206)
}

def @func_1108(%var_1102: Tensor[(16, 2, 14), float64]) -> Tensor[(16, 2, 14), uint64] {
  %207 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  %208 = cast(%var_1102, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %209 = shape_of(%207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%207, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  left_shift(%210, %211) /* ty=Tensor[(16, 2, 14), uint64] */
}

def @func_1140() -> (Tensor[(16, 2, 14), float64],) {
  %212 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  (%212,)
}

def @func_3223(%var_3221: Tensor[(16, 2, 14), float64]) -> (Tensor[(16, 2, 14), bool],) {
  @func_3220(%var_3221) /* ty=(Tensor[(16, 2, 14), bool],) */
}

def @func_1334(%var_1332: Tensor[(60), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), float32], Tensor[(364), float64], Tensor[(60), bool], Tensor[(13, 10, 7), float32]) {
  @func_1331(%var_1332) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), float32], Tensor[(364), float64], Tensor[(60), bool], Tensor[(13, 10, 7), float32]) */
}

def @func_2444(%var_2430: Tensor[(60), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(70, 2), bool], Tensor[(60), bool]) {
  %213 = cast(meta[relay.Constant][18] /* ty=Tensor[(70, 2), bool] */, dtype="bool") /* ty=Tensor[(70, 2), bool] */;
  %214 = cast(%var_2430, dtype="bool") /* ty=Tensor[(60), bool] */;
  %215 = reshape(%213, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %216 = reshape(%214, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %217 = @func_476(%215, %216) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %218 = @func_1745() /* ty=Tensor[(13, 10, 7), float32] */;
  %219 = %217.1;
  (%218, %219, meta[relay.Constant][18] /* ty=Tensor[(70, 2), bool] */, %var_2430)
}

def @func_1038() -> (Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) {
  @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */
}

def @func_1288(%var_1236: Tensor[(5, 6, 4), int16], %var_1237: Tensor[(5, 6, 4), int16], %var_1258: float64, %var_1259: Tensor[(8), float64], %var_1260: Tensor[(20), bool], %var_1261: Tensor[(1352), float32]) -> (Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) {
  %220 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %221 = cast(%var_1258, dtype="float64") /* ty=float64 */;
  %222 = cast(%var_1259, dtype="float64") /* ty=Tensor[(8), float64] */;
  %223 = cast(%var_1260, dtype="bool") /* ty=Tensor[(20), bool] */;
  %224 = cast(%var_1261, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %225 = reshape(%221, newshape=[]) /* ty=float64 */;
  %226 = reshape(%222, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
  %227 = reshape(%223, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %228 = reshape(%224, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %229 = @func_755(%225, %226, %227, %228) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
  %230 = cast(%var_1237, dtype="bool") /* ty=Tensor[(5, 6, 4), bool] */;
  %231 = cast(%var_1258, dtype="bool") /* ty=bool */;
  %232 = cast(%var_1237, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %233 = shape_of(%var_1236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%var_1236, dtype="int16") /* ty=Tensor[(5, 6, 4), int16] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %236 = bitwise_or(%234, %235) /* ty=Tensor[(5, 6, 4), int16] */;
  %237 = cast(%236, dtype="uint32") /* ty=Tensor[(5, 6, 4), uint32] */;
  %238 = shape_of(%var_1236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%var_1236, dtype="uint32") /* ty=Tensor[(5, 6, 4), uint32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %241 = logical_xor(%239, %240) /* ty=Tensor[(5, 6, 4), uint32] */;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(5, 6, 4), float32] */;
  %243 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %244 = %220.0;
  %245 = %229.2;
  %246 = less_equal(%230, %231) /* ty=Tensor[(5, 6, 4), bool] */;
  %247 = exp(%242) /* ty=Tensor[(5, 6, 4), float32] */;
  %248 = %243.0;
  (%244, %245, %var_1259, %var_1260, %var_1261, %246, %247, %248)
}

def @func_5607() -> (Tensor[(13, 10, 7), float32],) {
  %249 = @func_2323() /* ty=Tensor[(13, 10, 7), float32] */;
  (%249,)
}

def @func_4861(%var_4860: Tensor[(16, 2, 14), uint32]) -> (Tensor[(16, 2, 14), bool],) {
  %255 = fn (%var_4850: Tensor[(16, 2, 14), uint32]) -> (Tensor[(16, 2, 14), bool],) {
    %250 = cast(%var_4850, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
    %251 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(16, 2, 14), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %252 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 2, 14), uint32] */, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %254 = not_equal(%252, %253) /* ty=Tensor[(16, 2, 14), bool] */;
    (%254,)
  };
  %255(%var_4860) /* ty=(Tensor[(16, 2, 14), bool],) */
}

def @func_3313(%var_3301: Tensor[(20), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(140), bool], float32, Tensor[(20), bool]) {
  %256 = cast(9.26396f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %257 = cast(%var_3301, dtype="bool") /* ty=Tensor[(20), bool] */;
  %258 = reshape(%256, newshape=[]) /* ty=float32 */;
  %259 = reshape(%257, newshape=[5, 4]) /* ty=Tensor[(5, 4), bool] */;
  %260 = @func_1700(%258, %259) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float32, Tensor[(5, 4), bool], Tensor[(140), bool]) */;
  %261 = @func_1667() /* ty=Tensor[(13, 10, 7), float32] */;
  %262 = %260.4;
  (%261, %262, 9.26396f /* ty=float32 */, %var_3301)
}

def @func_5450() -> Tensor[(8), float64] {
  %264 = fn () -> Tensor[(8), float64] {
    %263 = @func_3150() /* ty=(Tensor[(8), float64], Tensor[(8), float64]) */;
    %263.1
  };
  %264() /* ty=Tensor[(8), float64] */
}

def @func_6144() -> Tensor[(1352), float32] {
  %265 = @func_3782() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(140), bool], Tensor[(1352), float32]) */;
  %265.2
}

def @func_1083(%var_1081: Tensor[(60), bool]) -> (Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) {
  @func_1080(%var_1081) /* ty=(Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) */
}

def @func_4242() -> (Tensor[(13, 10, 7), float32],) {
  %268 = fn () -> (Tensor[(13, 10, 7), float32],) {
    %266 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
    %267 = %266.1;
    (%267,)
  };
  %268() /* ty=(Tensor[(13, 10, 7), float32],) */
}

def @func_4011() -> Tensor[(16, 2, 14), int32] {
  %270 = fn () -> Tensor[(16, 2, 14), int32] {
    %269 = @func_2477() /* ty=(Tensor[(16, 2, 14), int32],) */;
    %269.0
  };
  %270() /* ty=Tensor[(16, 2, 14), int32] */
}

def @func_5714(%var_5712: Tensor[(16, 2, 14), float64]) -> (Tensor[(16, 2, 14), bool],) {
  @func_5711(%var_5712) /* ty=(Tensor[(16, 2, 14), bool],) */
}

def @func_1904(%var_1902: Tensor[(60), bool], %var_1903: Tensor[(5, 28), float64]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(60), bool], Tensor[(5, 28), bool], Tensor[(5, 28), float32]) {
  @func_1900(%var_1902, %var_1903) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(60), bool], Tensor[(5, 28), bool], Tensor[(5, 28), float32]) */
}

def @func_5171(%var_5169: Tensor[(9, 16, 13), int32], %var_5170: Tensor[(1352), float32]) -> (Tensor[(9, 16, 13), int32], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(8, 12, 14), float64], Tensor[(1344), float64], Tensor[(9, 16, 13), bool]) {
  %288 = fn (%var_5136: Tensor[(9, 16, 13), int32], %var_5145: Tensor[(1352), float32]) -> (Tensor[(9, 16, 13), int32], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(8, 12, 14), float64], Tensor[(1344), float64], Tensor[(9, 16, 13), bool]) {
    %271 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 16, 13), int32] */, dtype="int32") /* ty=Tensor[(9, 16, 13), int32] */;
    %272 = shape_of(%var_5136, dtype="int32") /* ty=Tensor[(3), int32] */;
    %273 = cast(%var_5136, dtype="int32") /* ty=Tensor[(9, 16, 13), int32] */;
    %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %275 = cast(%var_5145, dtype="float32") /* ty=Tensor[(1352), float32] */;
    %276 = reshape(%275, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
    %277 = @func_4195(%276) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(16, 2, 14), float32]) */;
    %278 = cast(meta[relay.Constant][21] /* ty=Tensor[(1344), float64] */, dtype="float64") /* ty=Tensor[(1344), float64] */;
    %279 = reshape(%278, newshape=[8, 12, 14]) /* ty=Tensor[(8, 12, 14), float64] */;
    %280 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 16, 13), int32] */, dtype="bool") /* ty=Tensor[(9, 16, 13), bool] */;
    %281 = shape_of(%var_5136, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%var_5136, dtype="bool") /* ty=Tensor[(9, 16, 13), bool] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %284 = bitwise_and(%273, %274) /* ty=Tensor[(9, 16, 13), int32] */;
    %285 = %277.1;
    %286 = @func_3672(%279) /* ty=Tensor[(8, 12, 14), float64] */;
    %287 = less_equal(%282, %283) /* ty=Tensor[(9, 16, 13), bool] */;
    (%284, %285, %var_5145, %286, meta[relay.Constant][21] /* ty=Tensor[(1344), float64] */, %287)
  };
  %288(%var_5169, %var_5170) /* ty=(Tensor[(9, 16, 13), int32], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(8, 12, 14), float64], Tensor[(1344), float64], Tensor[(9, 16, 13), bool]) */
}

def @func_6500() -> Tensor[(1352), float32] {
  %290 = fn () -> Tensor[(1352), float32] {
    %289 = @func_3782() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(140), bool], Tensor[(1352), float32]) */;
    %289.2
  };
  %290() /* ty=Tensor[(1352), float32] */
}

def @func_3152() -> (Tensor[(8), float64], Tensor[(8), float64]) {
  @func_3150() /* ty=(Tensor[(8), float64], Tensor[(8), float64]) */
}

def @func_4582(%var_4580: Tensor[(8), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), bool], Tensor[(1352), float64], Tensor[(20), bool], Tensor[(8), float64], Tensor[(8), float64]) {
  @func_4579(%var_4580) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), bool], Tensor[(1352), float64], Tensor[(20), bool], Tensor[(8), float64], Tensor[(8), float64]) */
}

def @func_5378() -> (Tensor[(16, 2, 14), float64],) {
  %291 = @func_1719() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %292 = %291.0;
  (%292,)
}

def @func_5912() -> (Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), float32], Tensor[(20), bool]) {
  %297 = fn () -> (Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), float32], Tensor[(20), bool]) {
    %293 = @func_5457() /* ty=(Tensor[(13, 10, 7), float32],) */;
    %294 = %293.0;
    %295 = @func_4481() /* ty=Tensor[(13, 10, 7), float32] */;
    %296 = @func_2407() /* ty=Tensor[(20), bool] */;
    (%294, %295, %296)
  };
  %297() /* ty=(Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), float32], Tensor[(20), bool]) */
}

def @func_3674(%var_3673: Tensor[(8, 12, 14), float64]) -> Tensor[(8, 12, 14), float64] {
  %300 = fn (%var_3661: Tensor[(8, 12, 14), float64]) -> Tensor[(8, 12, 14), float64] {
    %298 = cast(7.10166f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %299 = cast(%var_3661, dtype="float64") /* ty=Tensor[(8, 12, 14), float64] */;
    floor_mod(%298, %299) /* ty=Tensor[(8, 12, 14), float64] */
  };
  %300(%var_3673) /* ty=Tensor[(8, 12, 14), float64] */
}

def @func_897(%var_895: Tensor[(140), bool], %var_896: Tensor[(3, 20), bool]) -> (Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) {
  %308 = fn (%var_891: Tensor[(140), bool], %var_892: Tensor[(3, 20), bool]) -> (Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) {
    %301 = cast(%var_891, dtype="bool") /* ty=Tensor[(140), bool] */;
    %302 = cast(%var_892, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
    %303 = reshape(%301, newshape=[140]) /* ty=Tensor[(140), bool] */;
    %304 = reshape(%302, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
    %305 = @func_476(%303, %304) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
    %306 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
    %307 = %305.2;
    (%306, %307, %var_891, %var_892)
  };
  %308(%var_895, %var_896) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) */
}

def @func_3751() -> (Tensor[(8), float64], Tensor[(13, 10, 7), float32]) {
  %313 = fn () -> (Tensor[(8), float64], Tensor[(13, 10, 7), float32]) {
    %309 = @func_2725() /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) */;
    %310 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
    %311 = %309.1;
    %312 = %310.3;
    (%311, %312)
  };
  %313() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */
}

def @func_6217(%var_6214: Tensor[(9, 4, 10), float64], %var_6215: Tensor[(60), bool], %var_6216: Tensor[(140), float64]) -> (Tensor[(9, 4, 10), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(140), float64], Tensor[(16, 2, 14), float64]) {
  %324 = fn (%var_6180: Tensor[(9, 4, 10), float64], %var_6185: Tensor[(60), bool], %var_6186: Tensor[(140), float64]) -> (Tensor[(9, 4, 10), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(140), float64], Tensor[(16, 2, 14), float64]) {
    %314 = cast(%var_6180, dtype="float64") /* ty=Tensor[(9, 4, 10), float64] */;
    %315 = cast(%var_6185, dtype="bool") /* ty=Tensor[(60), bool] */;
    %316 = cast(%var_6186, dtype="float64") /* ty=Tensor[(140), float64] */;
    %317 = reshape(%315, newshape=[60]) /* ty=Tensor[(60), bool] */;
    %318 = reshape(%316, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %319 = @func_1900(%317, %318) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(60), bool], Tensor[(5, 28), bool], Tensor[(5, 28), float32]) */;
    %320 = @func_2807() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %321 = cosh(%314) /* ty=Tensor[(9, 4, 10), float64] */;
    %322 = %319.0;
    %323 = %320.0;
    (%321, %322, %var_6185, %var_6186, %323)
  };
  %324(%var_6214, %var_6215, %var_6216) /* ty=(Tensor[(9, 4, 10), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(140), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_2122(%var_2118: Tensor[(60), bool], %var_2119: float64, %var_2120: Tensor[(8, 1), float64], %var_2121: Tensor[(1352), float32]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(1, 140), bool], Tensor[(60), bool], Tensor[(1352), float32], float64, Tensor[(8, 1), float64], Tensor[(20), bool], Tensor[(1352), float32]) {
  @func_2116(%var_2118, %var_2119, %var_2120, %var_2121) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(1, 140), bool], Tensor[(60), bool], Tensor[(1352), float32], float64, Tensor[(8, 1), float64], Tensor[(20), bool], Tensor[(1352), float32]) */
}

def @func_3417() -> Tensor[(13, 10, 7), float32] {
  @func_1854() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_4195(%var_4175: Tensor[(1352), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(16, 2, 14), float32]) {
  %325 = cast(%var_4175, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %326 = reshape(%325, newshape=[338, 4]) /* ty=Tensor[(338, 4), float32] */;
  %327 = @func_2655(%326) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8), float64], Tensor[(120, 1), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(338, 4), float32]) */;
  %328 = @func_2254() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %329 = %328.0;
  %330 = cast(%329, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %331 = @func_1574() /* ty=Tensor[(16, 2, 14), float64] */;
  %332 = %327.6;
  %333 = sinh(%330) /* ty=Tensor[(16, 2, 14), float32] */;
  (%331, %332, %var_4175, %333)
}

def @func_6106(%var_6104: Tensor[(9, 2, 3), uint64]) -> Tensor[(9, 2, 3), uint64] {
  @func_6103(%var_6104) /* ty=Tensor[(9, 2, 3), uint64] */
}

def @func_3259(%var_3237: Tensor[(3, 6, 12), float64]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool]) {
  %334 = cast(%var_3237, dtype="float64") /* ty=Tensor[(3, 6, 12), float64] */;
  %335 = atan(%334) /* ty=Tensor[(3, 6, 12), float64] */;
  %336 = cast(%335, dtype="float32") /* ty=Tensor[(3, 6, 12), float32] */;
  %337 = cast(%335, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %338 = shape_of(%var_3237, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%var_3237, dtype="bool") /* ty=Tensor[(3, 6, 12), bool] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %341 = sigmoid(%336) /* ty=Tensor[(3, 6, 12), float32] */;
  %342 = less_equal(%339, %340) /* ty=Tensor[(3, 6, 12), bool] */;
  (%341, %342)
}

def @func_2935() -> (Tensor[(8), float64],) {
  %343 = @func_2725() /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) */;
  %344 = %343.1;
  (%344,)
}

def @func_3784() -> (Tensor[(16, 2, 14), float32], Tensor[(140), bool], Tensor[(1352), float32]) {
  @func_3782() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(140), bool], Tensor[(1352), float32]) */
}

def @func_603(%var_601: Tensor[(15, 6, 9), float64]) -> (Tensor[(15, 6, 9), float64],) {
  @func_600(%var_601) /* ty=(Tensor[(15, 6, 9), float64],) */
}

def @func_5398() -> Tensor[(8), float64] {
  %346 = fn () -> Tensor[(8), float64] {
    %345 = @func_3150() /* ty=(Tensor[(8), float64], Tensor[(8), float64]) */;
    %345.0
  };
  %346() /* ty=Tensor[(8), float64] */
}

def @func_2185(%var_2150: Tensor[(1352), float32]) -> (Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), bool], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool]) {
  %347 = cast(meta[relay.Constant][23] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %348 = cast(%var_2150, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %349 = reshape(%347, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %350 = reshape(%348, newshape=[1, 1352]) /* ty=Tensor[(1, 1352), float32] */;
  %351 = @func_1379(%349, %350) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) */;
  %352 = @func_1854() /* ty=Tensor[(13, 10, 7), float32] */;
  %353 = cast(%352, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  %354 = cosh(%353) /* ty=Tensor[(13, 10, 7), float32] */;
  %355 = cast(%352, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %356 = shape_of(%354, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%354, dtype="bool") /* ty=Tensor[(13, 10, 7), bool] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %359 = cast(meta[relay.Constant][24] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %360 = cast(meta[relay.Constant][25] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %361 = reshape(%359, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %362 = reshape(%360, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %363 = %351.6;
  %364 = equal(%357, %358) /* ty=Tensor[(13, 10, 7), bool] */;
  %365 = @func_64(%361, %362) /* ty=Tensor[(4, 7, 5), bool] */;
  (%363, meta[relay.Constant][23] /* ty=Tensor[(8), float64] */, %var_2150, %364, %365, meta[relay.Constant][24] /* ty=Tensor[(20), bool] */, meta[relay.Constant][25] /* ty=Tensor[(140), bool] */)
}

def @func_2409() -> Tensor[(20), bool] {
  @func_2407() /* ty=Tensor[(20), bool] */
}

def @func_3565() -> Tensor[(16, 2, 14), float64] {
  @func_877() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_2188(%var_2186: Tensor[(1352), float32]) -> (Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), bool], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool]) {
  @func_2185(%var_2186) /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), bool], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool]) */
}

def @func_3220(%var_3211: Tensor[(16, 2, 14), float64]) -> (Tensor[(16, 2, 14), bool],) {
  %366 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %367 = %366.0;
  %368 = cast(%var_3211, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %372 = logical_and(%370, %371) /* ty=Tensor[(16, 2, 14), bool] */;
  (%372,)
}

def @func_4131(%var_4129: float64, %var_4130: Tensor[(11, 15, 2), float64]) -> (Tensor[(11, 15, 2), float64],) {
  %376 = fn (%var_4122: float64, %var_4123: Tensor[(11, 15, 2), float64]) -> (Tensor[(11, 15, 2), float64],) {
    %373 = cast(%var_4122, dtype="float64") /* ty=float64 */;
    %374 = cast(%var_4123, dtype="float64") /* ty=Tensor[(11, 15, 2), float64] */;
    %375 = floor_divide(%373, %374) /* ty=Tensor[(11, 15, 2), float64] */;
    (%375,)
  };
  %376(%var_4129, %var_4130) /* ty=(Tensor[(11, 15, 2), float64],) */
}

def @func_5245() -> (Tensor[(448), float64],) {
  @func_5243() /* ty=(Tensor[(448), float64],) */
}

def @func_4459(%var_4456: Tensor[(16, 13, 16), int8], %var_4457: Tensor[(16, 13, 16), int8], %var_4458: Tensor[(15, 4), bool]) -> (Tensor[(5, 28), bool], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(16, 13, 16), uint32], Tensor[(16, 13, 16), bool]) {
  %398 = fn (%var_4407: Tensor[(16, 13, 16), int8], %var_4408: Tensor[(16, 13, 16), int8], %var_4415: Tensor[(15, 4), bool]) -> (Tensor[(5, 28), bool], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(16, 13, 16), uint32], Tensor[(16, 13, 16), bool]) {
    %377 = cast(%var_4415, dtype="bool") /* ty=Tensor[(15, 4), bool] */;
    %378 = cast(meta[relay.Constant][26] /* ty=Tensor[(140), float64] */, dtype="float64") /* ty=Tensor[(140), float64] */;
    %379 = reshape(%377, newshape=[60]) /* ty=Tensor[(60), bool] */;
    %380 = reshape(%378, newshape=[5, 28]) /* ty=Tensor[(5, 28), float64] */;
    %381 = @func_1900(%379, %380) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(60), bool], Tensor[(5, 28), bool], Tensor[(5, 28), float32]) */;
    %382 = cast(%var_4408, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
    %383 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%var_4407, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %386 = less_equal(%384, %385) /* ty=Tensor[(16, 13, 16), bool] */;
    %387 = cast(%386, dtype="uint32") /* ty=Tensor[(16, 13, 16), uint32] */;
    %388 = shape_of(%var_4408, dtype="int32") /* ty=Tensor[(3), int32] */;
    %389 = cast(%var_4408, dtype="uint32") /* ty=Tensor[(16, 13, 16), uint32] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %391 = cast(%var_4408, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
    %392 = shape_of(%var_4407, dtype="int32") /* ty=Tensor[(3), int32] */;
    %393 = cast(%var_4407, dtype="bool") /* ty=Tensor[(16, 13, 16), bool] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %395 = %381.3;
    %396 = multiply(%389, %390) /* ty=Tensor[(16, 13, 16), uint32] */;
    %397 = not_equal(%393, %394) /* ty=Tensor[(16, 13, 16), bool] */;
    (%395, %var_4415, meta[relay.Constant][26] /* ty=Tensor[(140), float64] */, %396, %397)
  };
  %398(%var_4456, %var_4457, %var_4458) /* ty=(Tensor[(5, 28), bool], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(16, 13, 16), uint32], Tensor[(16, 13, 16), bool]) */
}

def @func_3316(%var_3314: Tensor[(20), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(140), bool], float32, Tensor[(20), bool]) {
  @func_3313(%var_3314) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(140), bool], float32, Tensor[(20), bool]) */
}

def @func_5783() -> Tensor[(16, 2, 14), int32] {
  %400 = fn () -> Tensor[(16, 2, 14), int32] {
    %399 = @func_2477() /* ty=(Tensor[(16, 2, 14), int32],) */;
    %399.0
  };
  %400() /* ty=Tensor[(16, 2, 14), int32] */
}

def @func_3734(%var_3732: Tensor[(13, 10, 7), float32]) -> (Tensor[(13, 10, 7), int8], Tensor[(4, 7, 5), bool], Tensor[(1352), float32]) {
  @func_3731(%var_3732) /* ty=(Tensor[(13, 10, 7), int8], Tensor[(4, 7, 5), bool], Tensor[(1352), float32]) */
}

def @func_1622(%var_1620: Tensor[(13, 8, 5), float32], %var_1621: Tensor[(56), uint32]) -> (Tensor[(13, 8, 5), int32], Tensor[(13, 8, 5), bool], Tensor[(7, 4, 2), uint32], uint32, Tensor[(56), uint32]) {
  @func_1618(%var_1620, %var_1621) /* ty=(Tensor[(13, 8, 5), int32], Tensor[(13, 8, 5), bool], Tensor[(7, 4, 2), uint32], uint32, Tensor[(56), uint32]) */
}

def @func_3497() -> (Tensor[(13, 10, 7), float64], Tensor[(8), float64]) {
  %405 = fn () -> (Tensor[(13, 10, 7), float64], Tensor[(8), float64]) {
    %401 = @func_2725() /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) */;
    %402 = @func_2935() /* ty=(Tensor[(8), float64],) */;
    %403 = %401.3;
    %404 = %402.0;
    (%403, %404)
  };
  %405() /* ty=(Tensor[(13, 10, 7), float64], Tensor[(8), float64]) */
}

def @func_3273() -> (Tensor[(8), float64],) {
  %408 = fn () -> (Tensor[(8), float64],) {
    %406 = @func_3150() /* ty=(Tensor[(8), float64], Tensor[(8), float64]) */;
    %407 = %406.0;
    (%407,)
  };
  %408() /* ty=(Tensor[(8), float64],) */
}

def @main() -> (Tensor[(13, 10, 7), float32], Tensor[(448), float64], Tensor[(16, 2, 14), bool]) {
  %409 = @func_2388() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %410 = @func_5245() /* ty=(Tensor[(448), float64],) */;
  %411 = @func_2902() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %412 = %411.0;
  %413 = cast(meta[relay.Constant][27] /* ty=Tensor[(16, 2, 14), float64] */, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%412, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %417 = %409.0;
  %418 = %410.0;
  %419 = less(%415, %416) /* ty=Tensor[(16, 2, 14), bool] */;
  (%417, %418, %419)
}

def @func_4198(%var_4196: Tensor[(1352), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(16, 2, 14), float32]) {
  @func_4195(%var_4196) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(338, 4), float32], Tensor[(1352), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_1489(%var_1487: Tensor[(20), bool], %var_1488: Tensor[(60), bool]) -> (Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(60), bool], Tensor[(13, 10, 7), bool]) {
  @func_1485(%var_1487, %var_1488) /* ty=(Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(60), bool], Tensor[(13, 10, 7), bool]) */
}

def @func_2521(%var_2519: Tensor[(5, 8, 11), bool], %var_2520: Tensor[(5, 8, 11), bool]) -> Tensor[(5, 8, 11), bool] {
  %424 = fn (%var_2505: Tensor[(5, 8, 11), bool], %var_2506: Tensor[(5, 8, 11), bool]) -> Tensor[(5, 8, 11), bool] {
    %420 = cast(%var_2506, dtype="bool") /* ty=Tensor[(5, 8, 11), bool] */;
    %421 = shape_of(%var_2505, dtype="int32") /* ty=Tensor[(3), int32] */;
    %422 = cast(%var_2505, dtype="bool") /* ty=Tensor[(5, 8, 11), bool] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%422, %423) /* ty=Tensor[(5, 8, 11), bool] */
  };
  %424(%var_2519, %var_2520) /* ty=Tensor[(5, 8, 11), bool] */
}

def @func_3833(%var_3832: Tensor[(10, 7, 5), float32]) -> (Tensor[(10, 7, 5), float32], Tensor[(13, 10, 7), float32]) {
  %428 = fn (%var_3822: Tensor[(10, 7, 5), float32]) -> (Tensor[(10, 7, 5), float32], Tensor[(13, 10, 7), float32]) {
    %425 = cast(%var_3822, dtype="float32") /* ty=Tensor[(10, 7, 5), float32] */;
    %426 = tan(%425) /* ty=Tensor[(10, 7, 5), float32] */;
    %427 = @func_3417() /* ty=Tensor[(13, 10, 7), float32] */;
    (%426, %427)
  };
  %428(%var_3832) /* ty=(Tensor[(10, 7, 5), float32], Tensor[(13, 10, 7), float32]) */
}

def @func_2364(%var_2362: Tensor[(10, 16, 7), float32], %var_2363: Tensor[(60), bool]) -> (Tensor[(10, 16, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(20), bool], Tensor[(60), bool]) {
  @func_2360(%var_2362, %var_2363) /* ty=(Tensor[(10, 16, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(20), bool], Tensor[(60), bool]) */
}

def @func_1331(%var_1304: Tensor[(60), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), float32], Tensor[(364), float64], Tensor[(60), bool], Tensor[(13, 10, 7), float32]) {
  %429 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %430 = cast(meta[relay.Constant][28] /* ty=Tensor[(364), float64] */, dtype="float64") /* ty=Tensor[(364), float64] */;
  %431 = cast(%var_1304, dtype="bool") /* ty=Tensor[(60), bool] */;
  %432 = reshape(%430, newshape=[4, 13, 7]) /* ty=Tensor[(4, 13, 7), float64] */;
  %433 = reshape(%431, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %434 = @func_569(%432, %433) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(140), bool], Tensor[(60), bool], Tensor[(4, 13, 7), int32]) */;
  %435 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %436 = %429.0;
  %437 = %434.0;
  %438 = %435.1;
  (%436, %437, meta[relay.Constant][28] /* ty=Tensor[(364), float64] */, %var_1304, %438)
}

def @func_2937() -> (Tensor[(8), float64],) {
  @func_2935() /* ty=(Tensor[(8), float64],) */
}

def @func_1721() -> (Tensor[(16, 2, 14), float64],) {
  @func_1719() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_4688() -> (Tensor[(8), float64], Tensor[(13, 10, 7), float32], Tensor[(300, 1), uint16], Tensor[(300), uint16]) {
  %439 = @func_3150() /* ty=(Tensor[(8), float64], Tensor[(8), float64]) */;
  %440 = cast(meta[relay.Constant][29] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %441 = cast(meta[relay.Constant][29] /* ty=Tensor[(300), uint16] */, dtype="uint16") /* ty=Tensor[(300), uint16] */;
  %442 = reshape(%440, newshape=[300, 1]) /* ty=Tensor[(300, 1), uint16] */;
  %443 = reshape(%441, newshape=[15, 10, 2]) /* ty=Tensor[(15, 10, 2), uint16] */;
  %444 = @func_3003(%442, %443) /* ty=(Tensor[(140), bool], Tensor[(300, 1), uint16], Tensor[(15, 10, 2), bool]) */;
  %445 = %439.0;
  %446 = @func_1667() /* ty=Tensor[(13, 10, 7), float32] */;
  %447 = %444.1;
  (%445, %446, %447, meta[relay.Constant][29] /* ty=Tensor[(300), uint16] */)
}

def @func_5472() -> Tensor[(16, 2, 14), int32] {
  %448 = @func_2477() /* ty=(Tensor[(16, 2, 14), int32],) */;
  %448.0
}

def @func_5711(%var_5698: Tensor[(16, 2, 14), float64]) -> (Tensor[(16, 2, 14), bool],) {
  %449 = @func_3565() /* ty=Tensor[(16, 2, 14), float64] */;
  %450 = cast(%var_5698, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %454 = equal(%452, %453) /* ty=Tensor[(16, 2, 14), bool] */;
  (%454,)
}

def @func_2726() -> (Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) {
  %464 = fn () -> (Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) {
    %455 = cast(meta[relay.Constant][30] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
    %456 = cast(meta[relay.Constant][31] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
    %457 = reshape(%455, newshape=[8]) /* ty=Tensor[(8), float64] */;
    %458 = reshape(%456, newshape=[1, 1352]) /* ty=Tensor[(1, 1352), float32] */;
    %459 = @func_1379(%457, %458) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) */;
    %460 = @func_1667() /* ty=Tensor[(13, 10, 7), float32] */;
    %461 = cast(%460, dtype="float64") /* ty=Tensor[(13, 10, 7), float64] */;
    %462 = %459.6;
    %463 = asinh(%461) /* ty=Tensor[(13, 10, 7), float64] */;
    (%462, meta[relay.Constant][30] /* ty=Tensor[(8), float64] */, meta[relay.Constant][31] /* ty=Tensor[(1352), float32] */, %463)
  };
  %464() /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) */
}

def @func_5243() -> (Tensor[(448), float64],) {
  %465 = @func_4097() /* ty=(Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64]) */;
  %466 = %465.2;
  (%466,)
}

def @func_1230(%var_1228: uint32, %var_1229: Tensor[(7, 4, 2), uint32]) -> Tensor[(7, 4, 2), uint32] {
  @func_1226(%var_1228, %var_1229) /* ty=Tensor[(7, 4, 2), uint32] */
}

def @func_5669(%var_5667: Tensor[(9), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(1, 9), float32], Tensor[(9), float32]) {
  @func_5666(%var_5667) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 9), float32], Tensor[(9), float32]) */
}

def @func_1142() -> (Tensor[(16, 2, 14), float64],) {
  @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_1841(%var_1839: Tensor[(15, 10, 2), uint16], %var_1840: Tensor[(15, 10, 2), uint16]) -> Tensor[(15, 10, 2), uint16] {
  %471 = fn (%var_1831: Tensor[(15, 10, 2), uint16], %var_1832: Tensor[(15, 10, 2), uint16]) -> Tensor[(15, 10, 2), uint16] {
    %467 = cast(%var_1832, dtype="uint16") /* ty=Tensor[(15, 10, 2), uint16] */;
    %468 = shape_of(%var_1831, dtype="int32") /* ty=Tensor[(3), int32] */;
    %469 = cast(%var_1831, dtype="uint16") /* ty=Tensor[(15, 10, 2), uint16] */;
    %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_or(%469, %470) /* ty=Tensor[(15, 10, 2), uint16] */
  };
  %471(%var_1839, %var_1840) /* ty=Tensor[(15, 10, 2), uint16] */
}

def @func_572(%var_570: Tensor[(4, 13, 7), float64], %var_571: Tensor[(60), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(140), bool], Tensor[(60), bool], Tensor[(4, 13, 7), int32]) {
  %497 = fn (%var_484: Tensor[(4, 13, 7), float64], %var_526: Tensor[(60), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(140), bool], Tensor[(60), bool], Tensor[(4, 13, 7), int32]) {
    %472 = cast(meta[relay.Constant][32] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %473 = cast(%var_526, dtype="bool") /* ty=Tensor[(60), bool] */;
    %474 = reshape(%472, newshape=[140]) /* ty=Tensor[(140), bool] */;
    %475 = reshape(%473, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
    %476 = @func_476(%474, %475) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
    %477 = cast(%var_484, dtype="float64") /* ty=Tensor[(4, 13, 7), float64] */;
    %478 = sqrt(%477) /* ty=Tensor[(4, 13, 7), float64] */;
    %479 = cast(%478, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
    %480 = shape_of(%var_484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %481 = cast(%var_484, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
    %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %483 = not_equal(%481, %482) /* ty=Tensor[(4, 13, 7), bool] */;
    %484 = cast(%483, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
    %485 = shape_of(%var_484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %486 = cast(%var_484, dtype="bool") /* ty=Tensor[(4, 13, 7), bool] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %488 = equal(%486, %487) /* ty=Tensor[(4, 13, 7), bool] */;
    %489 = cast(%488, dtype="float32") /* ty=Tensor[(4, 13, 7), float32] */;
    %490 = atan(%489) /* ty=Tensor[(4, 13, 7), float32] */;
    %491 = cast(%478, dtype="int32") /* ty=Tensor[(4, 13, 7), int32] */;
    %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
    %493 = cast(%490, dtype="int32") /* ty=Tensor[(4, 13, 7), int32] */;
    %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %495 = %476.0;
    %496 = bitwise_or(%493, %494) /* ty=Tensor[(4, 13, 7), int32] */;
    (%495, meta[relay.Constant][32] /* ty=Tensor[(140), bool] */, %var_526, %496)
  };
  %497(%var_570, %var_571) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(140), bool], Tensor[(60), bool], Tensor[(4, 13, 7), int32]) */
}

def @func_1111(%var_1109: Tensor[(16, 2, 14), float64]) -> Tensor[(16, 2, 14), uint64] {
  @func_1108(%var_1109) /* ty=Tensor[(16, 2, 14), uint64] */
}

def @func_1080(%var_1072: Tensor[(60), bool]) -> (Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) {
  %498 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %499 = %498.6;
  %500 = cast(%499, dtype="bool") /* ty=Tensor[(140), bool] */;
  %501 = cast(%var_1072, dtype="bool") /* ty=Tensor[(60), bool] */;
  %502 = reshape(%500, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %503 = reshape(%501, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %504 = @func_894(%502, %503) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) */;
  %505 = %504.0;
  (%499, %505, %var_1072)
}

def @func_4099() -> (Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64]) {
  @func_4097() /* ty=(Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), uint64], Tensor[(448), float64]) */
}

def @func_5666(%var_5654: Tensor[(9), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(1, 9), float32], Tensor[(9), float32]) {
  %506 = @func_1574() /* ty=Tensor[(16, 2, 14), float64] */;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %508 = cast(%var_5654, dtype="float32") /* ty=Tensor[(9), float32] */;
  %509 = reshape(%508, newshape=[1, 9]) /* ty=Tensor[(1, 9), float32] */;
  %510 = @func_4646(%509) /* ty=(Tensor[(1, 9), float32], Tensor[(140), bool]) */;
  %511 = atan(%507) /* ty=Tensor[(16, 2, 14), float64] */;
  %512 = %510.0;
  (%511, %512, %var_5654)
}

def @func_3419() -> Tensor[(13, 10, 7), float32] {
  @func_3417() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_6381(%var_6338: float64, %var_6349: Tensor[(2, 8, 8), float64], %var_6356: Tensor[(2, 8, 8), float64], %var_6364: Tensor[(140), float64]) -> (Tensor[(2, 8, 8), float64], Tensor[(2, 8, 8), bool], Tensor[(2, 8, 8), float64], Tensor[(2, 8, 8), bool], Tensor[(60), bool], Tensor[(360), float64], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(2, 8, 8), float64]) {
  %513 = cast(%var_6338, dtype="float64") /* ty=float64 */;
  %514 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %515 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 8, 8), float64] */, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %516 = cast(%var_6338, dtype="bool") /* ty=bool */;
  %517 = cast(%var_6349, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %518 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(2, 8, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 8, 8), float64] */, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %521 = cast(%var_6356, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %522 = shape_of(%var_6349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%var_6349, dtype="bool") /* ty=Tensor[(2, 8, 8), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = cast(meta[relay.Constant][34] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %526 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 4), bool] */, dtype="bool") /* ty=Tensor[(15, 4), bool] */;
  %527 = cast(%var_6364, dtype="float64") /* ty=Tensor[(140), float64] */;
  %528 = reshape(%525, newshape=[9, 4, 10]) /* ty=Tensor[(9, 4, 10), float64] */;
  %529 = reshape(%526, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %530 = reshape(%527, newshape=[140]) /* ty=Tensor[(140), float64] */;
  %531 = @func_6213(%528, %529, %530) /* ty=(Tensor[(9, 4, 10), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(140), float64], Tensor[(16, 2, 14), float64]) */;
  %532 = cast(%var_6349, dtype="float64") /* ty=Tensor[(2, 8, 8), float64] */;
  %533 = power(%513, %514) /* ty=Tensor[(2, 8, 8), float64] */;
  %534 = less(%515, %516) /* ty=Tensor[(2, 8, 8), bool] */;
  %535 = floor_mod(%519, %520) /* ty=Tensor[(2, 8, 8), float64] */;
  %536 = greater_equal(%523, %524) /* ty=Tensor[(2, 8, 8), bool] */;
  %537 = %531.2;
  %538 = cos(%532) /* ty=Tensor[(2, 8, 8), float64] */;
  (%533, %534, %535, %536, %537, meta[relay.Constant][34] /* ty=Tensor[(360), float64] */, meta[relay.Constant][35] /* ty=Tensor[(15, 4), bool] */, %var_6364, %538)
}

def @func_391(%var_388: float32, %var_389: Tensor[(20, 1), bool], %var_390: Tensor[(5, 28), bool]) -> (Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) {
  @func_386(%var_388, %var_389, %var_390) /* ty=(Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) */
}

def @func_6564() -> Tensor[(16, 2, 14), uint64] {
  %539 = @func_2725() /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), float64]) */;
  %539.0
}

def @func_4648(%var_4647: Tensor[(1, 9), float32]) -> (Tensor[(1, 9), float32], Tensor[(140), bool]) {
  %544 = fn (%var_4622: Tensor[(1, 9), float32]) -> (Tensor[(1, 9), float32], Tensor[(140), bool]) {
    %540 = cast(%var_4622, dtype="float32") /* ty=Tensor[(1, 9), float32] */;
    %541 = @func_2687() /* ty=(Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) */;
    %542 = acosh(%540) /* ty=Tensor[(1, 9), float32] */;
    %543 = %541.1;
    (%542, %543)
  };
  %544(%var_4647) /* ty=(Tensor[(1, 9), float32], Tensor[(140), bool]) */
}

def @func_2388() -> (Tensor[(13, 10, 7), float32],) {
  @func_2386() /* ty=(Tensor[(13, 10, 7), float32],) */
}

def @func_2041(%var_2037: float64, %var_2038: Tensor[(20), bool], %var_2039: Tensor[(1352), float32], %var_2040: Tensor[(56), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(15, 6, 9), float64], Tensor[(810), float64], Tensor[(6, 20), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(60), bool], Tensor[(7, 4, 2), uint32], Tensor[(56), uint32], Tensor[(20), bool], Tensor[(13, 10, 7), uint64], Tensor[(13, 10, 7), float32], Tensor[(8), float64], Tensor[(140), bool], float64) {
  %624 = fn (%var_1930: float64, %var_1932: Tensor[(20), bool], %var_1933: Tensor[(1352), float32], %var_1973: Tensor[(56), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(15, 6, 9), float64], Tensor[(810), float64], Tensor[(6, 20), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(60), bool], Tensor[(7, 4, 2), uint32], Tensor[(56), uint32], Tensor[(20), bool], Tensor[(13, 10, 7), uint64], Tensor[(13, 10, 7), float32], Tensor[(8), float64], Tensor[(140), bool], float64) {
    %545 = cast(meta[relay.Constant][36] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
    %546 = reshape(%545, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
    %547 = @func_600(%546) /* ty=(Tensor[(15, 6, 9), float64],) */;
    %548 = cast(meta[relay.Constant][39] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
    %549 = cast(meta[relay.Constant][40] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
    %550 = reshape(%548, newshape=[140]) /* ty=Tensor[(140), bool] */;
    %551 = reshape(%549, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
    %552 = @func_894(%550, %551) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) */;
    %553 = cast(%var_1930, dtype="uint32") /* ty=uint32 */;
    %554 = cast(%var_1973, dtype="uint32") /* ty=Tensor[(56), uint32] */;
    %555 = reshape(%553, newshape=[]) /* ty=uint32 */;
    %556 = reshape(%554, newshape=[7, 4, 2]) /* ty=Tensor[(7, 4, 2), uint32] */;
    %557 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
    %558 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
    %559 = cast(%var_1930, dtype="float64") /* ty=float64 */;
    %560 = cast(meta[relay.Constant][38] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
    %561 = cast(%var_1932, dtype="bool") /* ty=Tensor[(20), bool] */;
    %562 = cast(%var_1933, dtype="float32") /* ty=Tensor[(1352), float32] */;
    %563 = reshape(%557, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
    %564 = reshape(%558, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
    %565 = reshape(%559, newshape=[]) /* ty=float64 */;
    %566 = reshape(%560, newshape=[8]) /* ty=Tensor[(8), float64] */;
    %567 = reshape(%561, newshape=[20]) /* ty=Tensor[(20), bool] */;
    %568 = reshape(%562, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
    %569 = @func_1288(%563, %564, %565, %566, %567, %568) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) */;
    %570 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
    %571 = %570.0;
    %572 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
    %573 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
    %574 = cast(%var_1930, dtype="float64") /* ty=float64 */;
    %575 = cast(meta[relay.Constant][38] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
    %576 = cast(%var_1932, dtype="bool") /* ty=Tensor[(20), bool] */;
    %577 = cast(%var_1933, dtype="float32") /* ty=Tensor[(1352), float32] */;
    %578 = reshape(%572, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
    %579 = reshape(%573, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
    %580 = reshape(%574, newshape=[]) /* ty=float64 */;
    %581 = reshape(%575, newshape=[8]) /* ty=Tensor[(8), float64] */;
    %582 = reshape(%576, newshape=[20]) /* ty=Tensor[(20), bool] */;
    %583 = reshape(%577, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
    %584 = @func_1288(%578, %579, %580, %581, %582, %583) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) */;
    %585 = %584.7;
    %586 = cast(%585, dtype="uint64") /* ty=Tensor[(13, 10, 7), uint64] */;
    %587 = shape_of(%571, dtype="int32") /* ty=Tensor[(3), int32] */;
    %588 = cast(%571, dtype="uint64") /* ty=Tensor[(13, 10, 7), uint64] */;
    %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %590 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
    %591 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
    %592 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 20), int16] */, dtype="int16") /* ty=Tensor[(6, 20), int16] */;
    %593 = cast(%var_1930, dtype="float64") /* ty=float64 */;
    %594 = cast(meta[relay.Constant][38] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
    %595 = %569.1;
    %596 = cast(%595, dtype="bool") /* ty=Tensor[(20), bool] */;
    %597 = cast(%var_1933, dtype="float32") /* ty=Tensor[(1352), float32] */;
    %598 = reshape(%591, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
    %599 = reshape(%592, newshape=[5, 6, 4]) /* ty=Tensor[(5, 6, 4), int16] */;
    %600 = reshape(%593, newshape=[]) /* ty=float64 */;
    %601 = reshape(%594, newshape=[8]) /* ty=Tensor[(8), float64] */;
    %602 = reshape(%596, newshape=[20]) /* ty=Tensor[(20), bool] */;
    %603 = reshape(%597, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
    %604 = @func_1288(%598, %599, %600, %601, %602, %603) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(20), bool], Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(5, 6, 4), bool], Tensor[(5, 6, 4), float32], Tensor[(13, 10, 7), float32]) */;
    %605 = %552.1;
    %606 = cast(%605, dtype="bool") /* ty=Tensor[(4, 7, 5), bool] */;
    %607 = cast(meta[relay.Constant][40] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
    %608 = reshape(%606, newshape=[140]) /* ty=Tensor[(140), bool] */;
    %609 = reshape(%607, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
    %610 = @func_894(%608, %609) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(3, 20), bool]) */;
    %611 = cast(meta[relay.Constant][38] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
    %612 = cast(%var_1933, dtype="float32") /* ty=Tensor[(1352), float32] */;
    %613 = reshape(%611, newshape=[8]) /* ty=Tensor[(8), float64] */;
    %614 = reshape(%612, newshape=[1, 1352]) /* ty=Tensor[(1, 1352), float32] */;
    %615 = @func_1379(%613, %614) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) */;
    %616 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
    %617 = %547.0;
    %618 = @func_1226(%555, %556) /* ty=Tensor[(7, 4, 2), uint32] */;
    %619 = subtract(%588, %589) /* ty=Tensor[(13, 10, 7), uint64] */;
    %620 = %590.0;
    %621 = %604.2;
    %622 = %610.2;
    %623 = %615.2;
    (%616, %617, meta[relay.Constant][36] /* ty=Tensor[(810), float64] */, meta[relay.Constant][37] /* ty=Tensor[(6, 20), int16] */, %var_1930, meta[relay.Constant][38] /* ty=Tensor[(8), float64] */, %var_1932, %var_1933, %605, meta[relay.Constant][39] /* ty=Tensor[(140), bool] */, meta[relay.Constant][40] /* ty=Tensor[(60), bool] */, %618, %var_1973, %595, %619, %620, %621, %622, %623)
  };
  %624(%var_2037, %var_2038, %var_2039, %var_2040) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 6, 9), float64], Tensor[(810), float64], Tensor[(6, 20), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(60), bool], Tensor[(7, 4, 2), uint32], Tensor[(56), uint32], Tensor[(20), bool], Tensor[(13, 10, 7), uint64], Tensor[(13, 10, 7), float32], Tensor[(8), float64], Tensor[(140), bool], float64) */
}

def @func_2809() -> (Tensor[(16, 2, 14), float64],) {
  @func_2807() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_4482() -> Tensor[(13, 10, 7), float32] {
  %625 = fn () -> Tensor[(13, 10, 7), float32] {
    @func_1854() /* ty=Tensor[(13, 10, 7), float32] */
  };
  %625() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_1700(%var_1693: float32, %var_1694: Tensor[(5, 4), bool]) -> (Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float32, Tensor[(5, 4), bool], Tensor[(140), bool]) {
  %626 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %627 = cast(%var_1693, dtype="float32") /* ty=float32 */;
  %628 = cast(%var_1694, dtype="bool") /* ty=Tensor[(5, 4), bool] */;
  %629 = cast(meta[relay.Constant][41] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %630 = reshape(%627, newshape=[]) /* ty=float32 */;
  %631 = reshape(%628, newshape=[20, 1]) /* ty=Tensor[(20, 1), bool] */;
  %632 = reshape(%629, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
  %633 = @func_386(%630, %631, %632) /* ty=(Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) */;
  %634 = %626.0;
  %635 = %633.9;
  (%634, %635, %var_1693, %var_1694, meta[relay.Constant][41] /* ty=Tensor[(140), bool] */)
}

def @func_2360(%var_2334: Tensor[(10, 16, 7), float32], %var_2348: Tensor[(60), bool]) -> (Tensor[(10, 16, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(20), bool], Tensor[(60), bool]) {
  %636 = cast(%var_2334, dtype="float32") /* ty=Tensor[(10, 16, 7), float32] */;
  %637 = acos(%636) /* ty=Tensor[(10, 16, 7), float32] */;
  %638 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 16, 7), float32] */, dtype="uint8") /* ty=Tensor[(10, 16, 7), uint8] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="uint8") /* ty=Tensor[(10, 16, 7), uint8] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %642 = logical_xor(%640, %641) /* ty=Tensor[(10, 16, 7), uint8] */;
  %643 = cast(%642, dtype="float32") /* ty=Tensor[(10, 16, 7), float32] */;
  %644 = cast(meta[relay.Constant][43] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %645 = cast(%var_2348, dtype="bool") /* ty=Tensor[(60), bool] */;
  %646 = reshape(%644, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %647 = reshape(%645, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %648 = @func_1485(%646, %647) /* ty=(Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(13, 10, 7), float32], Tensor[(16, 2, 14), float64], Tensor[(60), bool], Tensor[(13, 10, 7), bool]) */;
  %649 = cosh(%643) /* ty=Tensor[(10, 16, 7), float32] */;
  %650 = %648.4;
  (%649, %650, meta[relay.Constant][43] /* ty=Tensor[(20), bool] */, %var_2348)
}

def @func_1798(%var_1796: Tensor[(2, 13, 10), float32], %var_1797: Tensor[(8), float64]) -> (Tensor[(2, 13, 10), float32], Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(15, 6, 9), float64], Tensor[(3, 270), float64]) {
  @func_1794(%var_1796, %var_1797) /* ty=(Tensor[(2, 13, 10), float32], Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1352), float32], Tensor[(15, 6, 9), float64], Tensor[(3, 270), float64]) */
}

def @func_2254() -> (Tensor[(16, 2, 14), float32],) {
  %651 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %652 = %651.0;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %654 = log(%653) /* ty=Tensor[(16, 2, 14), float32] */;
  (%654,)
}

def @func_6086() -> (Tensor[(8), float64], Tensor[(16, 2, 14), float64], Tensor[(60, 1), bool]) {
  @func_6084() /* ty=(Tensor[(8), float64], Tensor[(16, 2, 14), float64], Tensor[(60, 1), bool]) */
}

def @func_1575() -> Tensor[(16, 2, 14), float64] {
  %656 = fn () -> Tensor[(16, 2, 14), float64] {
    %655 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %655.0
  };
  %656() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_5067() -> (Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), int8]) {
  %662 = fn () -> (Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), int8]) {
    %657 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
    %658 = cast(%657, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
    %659 = reshape(%658, newshape=[13, 10, 7]) /* ty=Tensor[(13, 10, 7), float32] */;
    %660 = @func_3731(%659) /* ty=(Tensor[(13, 10, 7), int8], Tensor[(4, 7, 5), bool], Tensor[(1352), float32]) */;
    %661 = %660.0;
    (%657, %661)
  };
  %662() /* ty=(Tensor[(13, 10, 7), float32], Tensor[(13, 10, 7), int8]) */
}

def @func_193(%var_188: float32, %var_189: Tensor[(8, 13, 13), float32]) -> (Tensor[(8, 13, 13), float32],) {
  %663 = cast(%var_188, dtype="float32") /* ty=float32 */;
  %664 = cast(%var_189, dtype="float32") /* ty=Tensor[(8, 13, 13), float32] */;
  %665 = floor_mod(%663, %664) /* ty=Tensor[(8, 13, 13), float32] */;
  (%665,)
}

def @func_4324(%var_4323: Tensor[(12, 5, 1), float64]) -> (Tensor[(12, 5, ?), float32], Tensor[(8), float64], Tensor[(12, 5, ?), float32], Tensor[(16, 2, 14), float64]) {
  %682 = fn (%var_4299: Tensor[(12, 5, 1), float64]) -> (Tensor[(12, 5, ?), float32], Tensor[(8), float64], Tensor[(12, 5, ?), float32], Tensor[(16, 2, 14), float64]) {
    %666 = cast(%var_4299, dtype="float64") /* ty=Tensor[(12, 5, 1), float64] */;
    %667 = acos(%666) /* ty=Tensor[(12, 5, 1), float64] */;
    %668 = cast(%var_4299, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
    %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%667, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %672 = @func_2935() /* ty=(Tensor[(8), float64],) */;
    %673 = cast(%667, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
    %674 = shape_of(%var_4299, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%var_4299, dtype="float32") /* ty=Tensor[(12, 5, 1), float32] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %677 = @func_1719() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %678 = power(%670, %671) /* ty=Tensor[(12, 5, ?), float32] */;
    %679 = %672.0;
    %680 = divide(%675, %676) /* ty=Tensor[(12, 5, ?), float32] */;
    %681 = %677.0;
    (%678, %679, %680, %681)
  };
  %682(%var_4323) /* ty=(Tensor[(12, 5, ?), float32], Tensor[(8), float64], Tensor[(12, 5, ?), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_2687() -> (Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) {
  %683 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %684 = cast(meta[relay.Constant][44] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %685 = reshape(%684, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %686 = @func_2185(%685) /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), bool], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool]) */;
  %687 = cast(meta[relay.Constant][44] /* ty=Tensor[(1352), float32] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %688 = %683.2;
  %689 = %686.6;
  %690 = cosh(%687) /* ty=Tensor[(1352), float64] */;
  (%688, %689, %690)
}

def @func_3782() -> (Tensor[(16, 2, 14), float32], Tensor[(140), bool], Tensor[(1352), float32]) {
  %691 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %692 = %691.0;
  %693 = cast(%692, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %694 = cast(meta[relay.Constant][45] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %695 = reshape(%694, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %696 = @func_3400(%695) /* ty=(Tensor[(8), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(140), bool], float64, Tensor[(1352), float32], Tensor[(20, 60), int8]) */;
  %697 = cos(%693) /* ty=Tensor[(16, 2, 14), float32] */;
  %698 = %696.3;
  (%697, %698, meta[relay.Constant][45] /* ty=Tensor[(1352), float32] */)
}

def @func_5121(%var_5120: Tensor[(810), float64]) -> (Tensor[(13, 10, 7), float32], Tensor[(15, 6, 9), float64], Tensor[(810), float64]) {
  %705 = fn (%var_5114: Tensor[(810), float64]) -> (Tensor[(13, 10, 7), float32], Tensor[(15, 6, 9), float64], Tensor[(810), float64]) {
    %699 = @func_2386() /* ty=(Tensor[(13, 10, 7), float32],) */;
    %700 = cast(%var_5114, dtype="float64") /* ty=Tensor[(810), float64] */;
    %701 = reshape(%700, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
    %702 = @func_600(%701) /* ty=(Tensor[(15, 6, 9), float64],) */;
    %703 = %699.0;
    %704 = %702.0;
    (%703, %704, %var_5114)
  };
  %705(%var_5120) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(15, 6, 9), float64], Tensor[(810), float64]) */
}

def @func_6103(%var_6092: Tensor[(9, 2, 3), uint64]) -> Tensor[(9, 2, 3), uint64] {
  %706 = cast(%var_6092, dtype="uint64") /* ty=Tensor[(9, 2, 3), uint64] */;
  %707 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(9, 2, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 2, 3), uint64] */, dtype="uint64") /* ty=Tensor[(9, 2, 3), uint64] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%708, %709) /* ty=Tensor[(9, 2, 3), uint64] */
}

def @func_755(%var_730: float64, %var_731: Tensor[(1, 8), float64], %var_739: Tensor[(20), bool], %var_749: Tensor[(1352), float32]) -> (Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) {
  %710 = cast(%var_730, dtype="float64") /* ty=float64 */;
  %711 = cast(%var_731, dtype="float64") /* ty=Tensor[(1, 8), float64] */;
  %712 = cast(%var_739, dtype="bool") /* ty=Tensor[(20), bool] */;
  %713 = cast(meta[relay.Constant][47] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %714 = reshape(%712, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
  %715 = reshape(%713, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
  %716 = cast(%var_730, dtype="float32") /* ty=float32 */;
  %717 = cast(%var_749, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %718 = reshape(%716, newshape=[]) /* ty=float32 */;
  %719 = reshape(%717, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float32] */;
  %720 = @func_193(%718, %719) /* ty=(Tensor[(8, 13, 13), float32],) */;
  %721 = floor_divide(%710, %711) /* ty=Tensor[(1, 8), float64] */;
  %722 = @func_64(%714, %715) /* ty=Tensor[(4, 7, 5), bool] */;
  %723 = %720.0;
  (%721, %722, %var_739, meta[relay.Constant][47] /* ty=Tensor[(140), bool] */, %723, %var_749)
}

def @func_5336(%var_5335: Tensor[(60, 1), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(60, 140), bool], Tensor[(60, 140), float32]) {
  %737 = fn (%var_5305: Tensor[(60, 1), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(60, 140), bool], Tensor[(60, 140), float32]) {
    %724 = cast(%var_5305, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
    %725 = reshape(%724, newshape=[60]) /* ty=Tensor[(60), bool] */;
    %726 = @func_1080(%725) /* ty=(Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) */;
    %727 = %726.0;
    %728 = cast(%727, dtype="bool") /* ty=Tensor[(140), bool] */;
    %729 = cast(%var_5305, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
    %730 = cast(%727, dtype="float32") /* ty=Tensor[(140), float32] */;
    %731 = cast(%var_5305, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
    %732 = floor_mod(%730, %731) /* ty=Tensor[(60, 140), float32] */;
    %733 = cast(%732, dtype="float32") /* ty=Tensor[(60, 140), float32] */;
    %734 = @func_4481() /* ty=Tensor[(13, 10, 7), float32] */;
    %735 = not_equal(%728, %729) /* ty=Tensor[(60, 140), bool] */;
    %736 = rsqrt(%733) /* ty=Tensor[(60, 140), float32] */;
    (%734, %735, %736)
  };
  %737(%var_5335) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(60, 140), bool], Tensor[(60, 140), float32]) */
}

def @func_3262(%var_3260: Tensor[(3, 6, 12), float64]) -> (Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool]) {
  @func_3259(%var_3260) /* ty=(Tensor[(3, 6, 12), float32], Tensor[(3, 6, 12), bool]) */
}

def @func_2807() -> (Tensor[(16, 2, 14), float64],) {
  %738 = @func_1140() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %739 = %738.0;
  (%739,)
}

def @func_5457() -> (Tensor[(13, 10, 7), float32],) {
  %740 = @func_1159() /* ty=(Tensor[(13, 10, 7), float32],) */;
  %741 = %740.0;
  (%741,)
}

def @func_5474() -> Tensor[(16, 2, 14), int32] {
  @func_5472() /* ty=Tensor[(16, 2, 14), int32] */
}

def @func_3438() -> (Tensor[(13, 10, 7), float32], Tensor[(9, 15, 6), float64], Tensor[(810), float64]) {
  @func_3436() /* ty=(Tensor[(13, 10, 7), float32], Tensor[(9, 15, 6), float64], Tensor[(810), float64]) */
}

def @func_1855() -> Tensor[(13, 10, 7), float32] {
  %742 = fn () -> Tensor[(13, 10, 7), float32] {
    @func_1667() /* ty=Tensor[(13, 10, 7), float32] */
  };
  %742() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_6297(%var_6294: Tensor[(60), bool], %var_6295: Tensor[(350, 1), float32], %var_6296: Tensor[(10, 2), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(140), uint64], Tensor[(60), bool], Tensor[(10, 7, 5), float32], Tensor[(350, 1), float32], Tensor[(13, 10, 7), float32], Tensor[(20, 1), bool], float32, Tensor[(10, 2), bool]) {
  %762 = fn (%var_6257: Tensor[(60), bool], %var_6274: Tensor[(350, 1), float32], %var_6282: Tensor[(10, 2), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(140), uint64], Tensor[(60), bool], Tensor[(10, 7, 5), float32], Tensor[(350, 1), float32], Tensor[(13, 10, 7), float32], Tensor[(20, 1), bool], float32, Tensor[(10, 2), bool]) {
    %743 = @func_2386() /* ty=(Tensor[(13, 10, 7), float32],) */;
    %744 = cast(%var_6257, dtype="bool") /* ty=Tensor[(60), bool] */;
    %745 = reshape(%744, newshape=[60]) /* ty=Tensor[(60), bool] */;
    %746 = @func_1080(%745) /* ty=(Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) */;
    %747 = cast(%var_6274, dtype="float32") /* ty=Tensor[(350, 1), float32] */;
    %748 = reshape(%747, newshape=[10, 7, 5]) /* ty=Tensor[(10, 7, 5), float32] */;
    %749 = @func_3831(%748) /* ty=(Tensor[(10, 7, 5), float32], Tensor[(13, 10, 7), float32]) */;
    %750 = cast(9.33362f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %751 = cast(%var_6282, dtype="bool") /* ty=Tensor[(10, 2), bool] */;
    %752 = %746.0;
    %753 = cast(%752, dtype="bool") /* ty=Tensor[(140), bool] */;
    %754 = reshape(%750, newshape=[]) /* ty=float32 */;
    %755 = reshape(%751, newshape=[20, 1]) /* ty=Tensor[(20, 1), bool] */;
    %756 = reshape(%753, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
    %757 = @func_386(%754, %755, %756) /* ty=(Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) */;
    %758 = %743.0;
    %759 = %749.0;
    %760 = @func_2323() /* ty=Tensor[(13, 10, 7), float32] */;
    %761 = %757.4;
    (%758, %752, %var_6257, %759, %var_6274, %760, %761, 9.33362f /* ty=float32 */, %var_6282)
  };
  %762(%var_6294, %var_6295, %var_6296) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(140), uint64], Tensor[(60), bool], Tensor[(10, 7, 5), float32], Tensor[(350, 1), float32], Tensor[(13, 10, 7), float32], Tensor[(20, 1), bool], float32, Tensor[(10, 2), bool]) */
}

def @func_197(%var_195: float32, %var_196: Tensor[(8, 13, 13), float32]) -> (Tensor[(8, 13, 13), float32],) {
  @func_193(%var_195, %var_196) /* ty=(Tensor[(8, 13, 13), float32],) */
}

def @func_2658(%var_2656: Tensor[(338, 4), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(8), float64], Tensor[(120, 1), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(338, 4), float32]) {
  @func_2655(%var_2656) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8), float64], Tensor[(120, 1), int16], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(338, 4), float32]) */
}

def @func_1382(%var_1380: Tensor[(8), float64], %var_1381: Tensor[(1, 1352), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) {
  %777 = fn (%var_1347: Tensor[(8), float64], %var_1349: Tensor[(1, 1352), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) {
    %763 = cast(4.7627f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %764 = cast(%var_1347, dtype="float64") /* ty=Tensor[(8), float64] */;
    %765 = cast(meta[relay.Constant][48] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
    %766 = cast(%var_1349, dtype="float32") /* ty=Tensor[(1, 1352), float32] */;
    %767 = reshape(%763, newshape=[]) /* ty=float64 */;
    %768 = reshape(%764, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
    %769 = reshape(%765, newshape=[20]) /* ty=Tensor[(20), bool] */;
    %770 = reshape(%766, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
    %771 = @func_755(%767, %768, %769, %770) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
    %772 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
    %773 = cast(%772, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
    %774 = reshape(%773, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
    %775 = %771.4;
    %776 = @func_1108(%774) /* ty=Tensor[(16, 2, 14), uint64] */;
    (%772, %775, 4.7627f64 /* ty=float64 */, %var_1347, meta[relay.Constant][48] /* ty=Tensor[(20), bool] */, %var_1349, %776)
  };
  %777(%var_1380, %var_1381) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(8, 13, 13), float32], float64, Tensor[(8), float64], Tensor[(20), bool], Tensor[(1, 1352), float32], Tensor[(16, 2, 14), uint64]) */
}

def @func_761(%var_757: float64, %var_758: Tensor[(1, 8), float64], %var_759: Tensor[(20), bool], %var_760: Tensor[(1352), float32]) -> (Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) {
  @func_755(%var_757, %var_758, %var_759, %var_760) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */
}

def @func_6442() -> (Tensor[(8), float64],) {
  %780 = fn () -> (Tensor[(8), float64],) {
    %778 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
    %779 = %778.0;
    (%779,)
  };
  %780() /* ty=(Tensor[(8), float64],) */
}

def @func_879() -> Tensor[(16, 2, 14), float64] {
  @func_877() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_3150() -> (Tensor[(8), float64], Tensor[(8), float64]) {
  %781 = @func_2935() /* ty=(Tensor[(8), float64],) */;
  %782 = @func_2935() /* ty=(Tensor[(8), float64],) */;
  %783 = %781.0;
  %784 = %782.0;
  (%783, %784)
}

def @func_1745() -> Tensor[(13, 10, 7), float32] {
  %785 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
  log2(%786) /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_2407() -> Tensor[(20), bool] {
  %787 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
  %787.5
}

def @func_5609() -> (Tensor[(13, 10, 7), float32],) {
  @func_5607() /* ty=(Tensor[(13, 10, 7), float32],) */
}

def @func_5771() -> (Tensor[(8), float64], Tensor[(13, 10, 7), float32], Tensor[(60, 1), bool], float64, Tensor[(13, 104), float32]) {
  %800 = fn () -> (Tensor[(8), float64], Tensor[(13, 10, 7), float32], Tensor[(60, 1), bool], float64, Tensor[(13, 104), float32]) {
    %788 = @func_3750() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32]) */;
    %789 = cast(meta[relay.Constant][49] /* ty=Tensor[(60, 1), bool] */, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
    %790 = cast(-5.08884f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %791 = %788.0;
    %792 = cast(%791, dtype="float64") /* ty=Tensor[(8), float64] */;
    %793 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 104), float32] */, dtype="float32") /* ty=Tensor[(13, 104), float32] */;
    %794 = reshape(%789, newshape=[60]) /* ty=Tensor[(60), bool] */;
    %795 = reshape(%790, newshape=[]) /* ty=float64 */;
    %796 = reshape(%792, newshape=[8, 1]) /* ty=Tensor[(8, 1), float64] */;
    %797 = reshape(%793, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
    %798 = @func_2116(%794, %795, %796, %797) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(1, 140), bool], Tensor[(60), bool], Tensor[(1352), float32], float64, Tensor[(8, 1), float64], Tensor[(20), bool], Tensor[(1352), float32]) */;
    %799 = %798.0;
    (%791, %799, meta[relay.Constant][49] /* ty=Tensor[(60, 1), bool] */, -5.08884f64 /* ty=float64 */, meta[relay.Constant][50] /* ty=Tensor[(13, 104), float32] */)
  };
  %800() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32], Tensor[(60, 1), bool], float64, Tensor[(13, 104), float32]) */
}

def @func_4798() -> (Tensor[(20), bool], Tensor[(13, 10, 7), float32], Tensor[(5, 8, 11), bool], Tensor[(440), bool], Tensor[(16, 13, 16), bool], Tensor[(3328), int8], Tensor[(60), bool]) {
  %817 = fn () -> (Tensor[(20), bool], Tensor[(13, 10, 7), float32], Tensor[(5, 8, 11), bool], Tensor[(440), bool], Tensor[(16, 13, 16), bool], Tensor[(3328), int8], Tensor[(60), bool]) {
    %801 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
    %802 = cast(meta[relay.Constant][51] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
    %803 = cast(meta[relay.Constant][51] /* ty=Tensor[(440), bool] */, dtype="bool") /* ty=Tensor[(440), bool] */;
    %804 = reshape(%802, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), bool] */;
    %805 = reshape(%803, newshape=[5, 8, 11]) /* ty=Tensor[(5, 8, 11), bool] */;
    %806 = cast(meta[relay.Constant][52] /* ty=Tensor[(3328), int8] */, dtype="int8") /* ty=Tensor[(3328), int8] */;
    %807 = cast(meta[relay.Constant][52] /* ty=Tensor[(3328), int8] */, dtype="int8") /* ty=Tensor[(3328), int8] */;
    %808 = cast(meta[relay.Constant][53] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
    %809 = reshape(%806, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
    %810 = reshape(%807, newshape=[16, 13, 16]) /* ty=Tensor[(16, 13, 16), int8] */;
    %811 = reshape(%808, newshape=[15, 4]) /* ty=Tensor[(15, 4), bool] */;
    %812 = @func_4455(%809, %810, %811) /* ty=(Tensor[(5, 28), bool], Tensor[(15, 4), bool], Tensor[(140), float64], Tensor[(16, 13, 16), uint32], Tensor[(16, 13, 16), bool]) */;
    %813 = @func_2407() /* ty=Tensor[(20), bool] */;
    %814 = %801.3;
    %815 = @func_2518(%804, %805) /* ty=Tensor[(5, 8, 11), bool] */;
    %816 = %812.4;
    (%813, %814, %815, meta[relay.Constant][51] /* ty=Tensor[(440), bool] */, %816, meta[relay.Constant][52] /* ty=Tensor[(3328), int8] */, meta[relay.Constant][53] /* ty=Tensor[(60), bool] */)
  };
  %817() /* ty=(Tensor[(20), bool], Tensor[(13, 10, 7), float32], Tensor[(5, 8, 11), bool], Tensor[(440), bool], Tensor[(16, 13, 16), bool], Tensor[(3328), int8], Tensor[(60), bool]) */
}

def @func_2256() -> (Tensor[(16, 2, 14), float32],) {
  @func_2254() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_1418() -> Tensor[(13, 10, 7), float32] {
  %819 = fn () -> Tensor[(13, 10, 7), float32] {
    %818 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
    %818.1
  };
  %819() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_1036() -> (Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) {
  %820 = cast(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %821 = cast(meta[relay.Constant][55] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %822 = reshape(%820, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %823 = reshape(%821, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %824 = @func_476(%822, %823) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %825 = cast(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %826 = cast(meta[relay.Constant][55] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %827 = reshape(%825, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %828 = reshape(%826, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %829 = @func_476(%827, %828) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %830 = cast(5.89218f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %831 = cast(meta[relay.Constant][56] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %832 = cast(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %833 = reshape(%830, newshape=[]) /* ty=float32 */;
  %834 = reshape(%831, newshape=[20, 1]) /* ty=Tensor[(20, 1), bool] */;
  %835 = reshape(%832, newshape=[5, 28]) /* ty=Tensor[(5, 28), bool] */;
  %836 = @func_386(%833, %834, %835) /* ty=(Tensor[(8, 13, 13), float32], float32, Tensor[(13, 104), float32], Tensor[(4, 7, 5), bool], Tensor[(20, 1), bool], Tensor[(5, 28), bool], Tensor[(13, 12, 9), uint8], Tensor[(4, 7, 5), bool], Tensor[(13, 12, 9), float32], Tensor[(4, 7, 5), bool], Tensor[(8, 13, 13), float32]) */;
  %837 = %836.3;
  %838 = cast(%837, dtype="uint64") /* ty=Tensor[(4, 7, 5), uint64] */;
  %839 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %840 = cast(meta[relay.Constant][54] /* ty=Tensor[(140), bool] */, dtype="uint64") /* ty=Tensor[(140), uint64] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %842 = @func_877() /* ty=Tensor[(16, 2, 14), float64] */;
  %843 = %824.0;
  %844 = %829.0;
  %845 = subtract(%840, %841) /* ty=Tensor[(140), uint64] */;
  (%842, %843, meta[relay.Constant][55] /* ty=Tensor[(60), bool] */, %844, 5.89218f /* ty=float32 */, meta[relay.Constant][56] /* ty=Tensor[(20), bool] */, %845)
}

def @func_600(%var_595: Tensor[(15, 6, 9), float64]) -> (Tensor[(15, 6, 9), float64],) {
  %846 = cast(%var_595, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  %847 = sin(%846) /* ty=Tensor[(15, 6, 9), float64] */;
  (%847,)
}

def @func_6146() -> Tensor[(1352), float32] {
  @func_6144() /* ty=Tensor[(1352), float32] */
}

def @func_1160() -> (Tensor[(13, 10, 7), float32],) {
  %850 = fn () -> (Tensor[(13, 10, 7), float32],) {
    %848 = @func_1036() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 10, 7), float32], Tensor[(60), bool], Tensor[(13, 10, 7), float32], float32, Tensor[(20), bool], Tensor[(140), uint64]) */;
    %849 = %848.3;
    (%849,)
  };
  %850() /* ty=(Tensor[(13, 10, 7), float32],) */
}

def @func_5380() -> (Tensor[(16, 2, 14), float64],) {
  @func_5378() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_2323() -> Tensor[(13, 10, 7), float32] {
  @func_1667() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_67(%var_65: Tensor[(4, 1, 5), bool], %var_66: Tensor[(4, 7, 5), bool]) -> Tensor[(4, 7, 5), bool] {
  %858 = fn (%var_0: Tensor[(4, 1, 5), bool], %var_1: Tensor[(4, 7, 5), bool]) -> Tensor[(4, 7, 5), bool] {
    %851 = cast(%var_0, dtype="bool") /* ty=Tensor[(4, 1, 5), bool] */;
    %852 = cast(%var_1, dtype="bool") /* ty=Tensor[(4, 7, 5), bool] */;
    %853 = logical_and(%851, %852) /* ty=Tensor[(4, 7, 5), bool] */;
    %854 = cast(%var_0, dtype="float32") /* ty=Tensor[(4, 1, 5), float32] */;
    %855 = sigmoid(%854) /* ty=Tensor[(4, 1, 5), float32] */;
    %856 = cast(%853, dtype="bool") /* ty=Tensor[(4, 7, 5), bool] */;
    %857 = cast(%855, dtype="bool") /* ty=Tensor[(4, 1, 5), bool] */;
    equal(%856, %857) /* ty=Tensor[(4, 7, 5), bool] */
  };
  %858(%var_65, %var_66) /* ty=Tensor[(4, 7, 5), bool] */
}

def @func_3539(%var_3538: Tensor[(13, 10, 7), float32]) -> (Tensor[(13, 10, 7), int64], Tensor[(13, 10, 7), float32]) {
  %873 = fn (%var_3521: Tensor[(13, 10, 7), float32]) -> (Tensor[(13, 10, 7), int64], Tensor[(13, 10, 7), float32]) {
    %859 = @func_2386() /* ty=(Tensor[(13, 10, 7), float32],) */;
    %860 = %859.0;
    %861 = cast(%var_3521, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
    %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
    %863 = cast(%860, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
    %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %865 = cast(%var_3521, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
    %866 = asin(%865) /* ty=Tensor[(13, 10, 7), float32] */;
    %867 = cast(%860, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
    %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
    %869 = cast(%866, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
    %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %871 = bitwise_xor(%863, %864) /* ty=Tensor[(13, 10, 7), int64] */;
    %872 = mod(%869, %870) /* ty=Tensor[(13, 10, 7), float32] */;
    (%871, %872)
  };
  %873(%var_3538) /* ty=(Tensor[(13, 10, 7), int64], Tensor[(13, 10, 7), float32]) */
}

def @func_1900(%var_1879: Tensor[(60), bool], %var_1883: Tensor[(5, 28), float64]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(60), bool], Tensor[(5, 28), bool], Tensor[(5, 28), float32]) {
  %874 = cast(meta[relay.Constant][57] /* ty=Tensor[(5, 28), bool] */, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %875 = cast(%var_1879, dtype="bool") /* ty=Tensor[(60), bool] */;
  %876 = reshape(%874, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %877 = reshape(%875, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %878 = @func_476(%876, %877) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %879 = cast(meta[relay.Constant][57] /* ty=Tensor[(5, 28), bool] */, dtype="float64") /* ty=Tensor[(5, 28), float64] */;
  %880 = acos(%879) /* ty=Tensor[(5, 28), float64] */;
  %881 = cast(%var_1883, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(2), int32] */;
  %883 = cast(%880, dtype="bool") /* ty=Tensor[(5, 28), bool] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %885 = cast(%880, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %886 = sigmoid(%885) /* ty=Tensor[(5, 28), float32] */;
  %887 = cast(%886, dtype="float32") /* ty=Tensor[(5, 28), float32] */;
  %888 = @func_1417() /* ty=Tensor[(13, 10, 7), float32] */;
  %889 = %878.1;
  %890 = greater(%883, %884) /* ty=Tensor[(5, 28), bool] */;
  %891 = sinh(%887) /* ty=Tensor[(5, 28), float32] */;
  (%888, %889, %var_1879, %890, %891)
}

def @func_4987(%var_4985: Tensor[(20), bool]) -> Tensor[(20), float64] {
  @func_4984(%var_4985) /* ty=Tensor[(20), float64] */
}

def @func_479(%var_477: Tensor[(140), bool], %var_478: Tensor[(3, 20), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) {
  %909 = fn (%var_442: Tensor[(140), bool], %var_452: Tensor[(3, 20), bool]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) {
    %892 = cast(meta[relay.Constant][58] /* ty=Tensor[(13, 10, 7), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 7), float32] */;
    %893 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 20), bool] */, dtype="bool") /* ty=Tensor[(1, 20), bool] */;
    %894 = cast(%var_452, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
    %895 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 20), bool] */, dtype="bool") /* ty=Tensor[(1, 20), bool] */;
    %896 = cast(%var_442, dtype="bool") /* ty=Tensor[(140), bool] */;
    %897 = reshape(%895, newshape=[4, 1, 5]) /* ty=Tensor[(4, 1, 5), bool] */;
    %898 = reshape(%896, newshape=[4, 7, 5]) /* ty=Tensor[(4, 7, 5), bool] */;
    %899 = @func_64(%897, %898) /* ty=Tensor[(4, 7, 5), bool] */;
    %900 = cast(%var_442, dtype="int64") /* ty=Tensor[(140), int64] */;
    %901 = shape_of(%899, dtype="int32") /* ty=Tensor[(3), int32] */;
    %902 = cast(%899, dtype="int64") /* ty=Tensor[(4, 7, 5), int64] */;
    %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %904 = bitwise_or(%902, %903) /* ty=Tensor[(4, 7, 5), int64] */;
    %905 = cast(%904, dtype="float64") /* ty=Tensor[(4, 7, 5), float64] */;
    %906 = log10(%892) /* ty=Tensor[(13, 10, 7), float32] */;
    %907 = greater_equal(%893, %894) /* ty=Tensor[(3, 20), bool] */;
    %908 = sinh(%905) /* ty=Tensor[(4, 7, 5), float64] */;
    (%906, %907, %908)
  };
  %909(%var_477, %var_478) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */
}

def @func_3731(%var_3720: Tensor[(13, 10, 7), float32]) -> (Tensor[(13, 10, 7), int8], Tensor[(4, 7, 5), bool], Tensor[(1352), float32]) {
  %910 = @func_3417() /* ty=Tensor[(13, 10, 7), float32] */;
  %911 = cast(%var_3720, dtype="int8") /* ty=Tensor[(13, 10, 7), int8] */;
  %912 = shape_of(%910, dtype="int32") /* ty=Tensor[(3), int32] */;
  %913 = cast(%910, dtype="int8") /* ty=Tensor[(13, 10, 7), int8] */;
  %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %915 = cast(meta[relay.Constant][60] /* ty=Tensor[(1352), float32] */, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %916 = reshape(%915, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %917 = @func_2185(%916) /* ty=(Tensor[(16, 2, 14), uint64], Tensor[(8), float64], Tensor[(1352), float32], Tensor[(13, 10, 7), bool], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool]) */;
  %918 = logical_xor(%913, %914) /* ty=Tensor[(13, 10, 7), int8] */;
  %919 = %917.4;
  (%918, %919, meta[relay.Constant][60] /* ty=Tensor[(1352), float32] */)
}

def @func_6084() -> (Tensor[(8), float64], Tensor[(16, 2, 14), float64], Tensor[(60, 1), bool]) {
  %920 = cast(meta[relay.Constant][61] /* ty=Tensor[(60, 1), bool] */, dtype="bool") /* ty=Tensor[(60, 1), bool] */;
  %921 = reshape(%920, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %922 = @func_1080(%921) /* ty=(Tensor[(140), uint64], Tensor[(16, 2, 14), float64], Tensor[(60), bool]) */;
  %923 = @func_5449() /* ty=Tensor[(8), float64] */;
  %924 = %922.1;
  (%923, %924, meta[relay.Constant][61] /* ty=Tensor[(60, 1), bool] */)
}

def @func_1704(%var_1702: float32, %var_1703: Tensor[(5, 4), bool]) -> (Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float32, Tensor[(5, 4), bool], Tensor[(140), bool]) {
  @func_1700(%var_1702, %var_1703) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 7, 5), bool], float32, Tensor[(5, 4), bool], Tensor[(140), bool]) */
}

def @func_2116(%var_2102: Tensor[(60), bool], %var_2111: float64, %var_2112: Tensor[(8, 1), float64], %var_2114: Tensor[(1352), float32]) -> (Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(1, 140), bool], Tensor[(60), bool], Tensor[(1352), float32], float64, Tensor[(8, 1), float64], Tensor[(20), bool], Tensor[(1352), float32]) {
  %925 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 140), bool] */, dtype="bool") /* ty=Tensor[(1, 140), bool] */;
  %926 = cast(%var_2102, dtype="bool") /* ty=Tensor[(60), bool] */;
  %927 = reshape(%925, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %928 = reshape(%926, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %929 = @func_476(%927, %928) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %930 = cast(%var_2111, dtype="float64") /* ty=float64 */;
  %931 = cast(%var_2112, dtype="float64") /* ty=Tensor[(8, 1), float64] */;
  %932 = cast(meta[relay.Constant][63] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %933 = cast(%var_2114, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %934 = reshape(%930, newshape=[]) /* ty=float64 */;
  %935 = reshape(%931, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
  %936 = reshape(%932, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %937 = reshape(%933, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %938 = @func_755(%934, %935, %936, %937) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
  %939 = @func_1854() /* ty=Tensor[(13, 10, 7), float32] */;
  %940 = %929.1;
  %941 = %938.5;
  (%939, %940, meta[relay.Constant][62] /* ty=Tensor[(1, 140), bool] */, %var_2102, %941, %var_2111, %var_2112, meta[relay.Constant][63] /* ty=Tensor[(20), bool] */, %var_2114)
}

def @func_3400(%var_3384: Tensor[(1352), float32]) -> (Tensor[(8), float64], Tensor[(4, 7, 5), float64], Tensor[(140), bool], Tensor[(140), bool], float64, Tensor[(1352), float32], Tensor[(20, 60), int8]) {
  %942 = @func_3272() /* ty=(Tensor[(8), float64],) */;
  %943 = cast(meta[relay.Constant][64] /* ty=Tensor[(140), bool] */, dtype="bool") /* ty=Tensor[(140), bool] */;
  %944 = cast(meta[relay.Constant][65] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %945 = reshape(%943, newshape=[140]) /* ty=Tensor[(140), bool] */;
  %946 = reshape(%944, newshape=[3, 20]) /* ty=Tensor[(3, 20), bool] */;
  %947 = @func_476(%945, %946) /* ty=(Tensor[(13, 10, 7), float32], Tensor[(3, 20), bool], Tensor[(4, 7, 5), float64]) */;
  %948 = cast(-6.48876f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %949 = %942.0;
  %950 = cast(%949, dtype="float64") /* ty=Tensor[(8), float64] */;
  %951 = cast(meta[relay.Constant][66] /* ty=Tensor[(20, 1), bool] */, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %952 = cast(%var_3384, dtype="float32") /* ty=Tensor[(1352), float32] */;
  %953 = reshape(%948, newshape=[]) /* ty=float64 */;
  %954 = reshape(%950, newshape=[1, 8]) /* ty=Tensor[(1, 8), float64] */;
  %955 = reshape(%951, newshape=[20]) /* ty=Tensor[(20), bool] */;
  %956 = reshape(%952, newshape=[1352]) /* ty=Tensor[(1352), float32] */;
  %957 = @func_755(%953, %954, %955, %956) /* ty=(Tensor[(1, 8), float64], Tensor[(4, 7, 5), bool], Tensor[(20), bool], Tensor[(140), bool], Tensor[(8, 13, 13), float32], Tensor[(1352), float32]) */;
  %958 = cast(meta[relay.Constant][65] /* ty=Tensor[(60), bool] */, dtype="int8") /* ty=Tensor[(60), int8] */;
  %959 = cast(meta[relay.Constant][66] /* ty=Tensor[(20, 1), bool] */, dtype="int8") /* ty=Tensor[(20, 1), int8] */;
  %960 = %947.2;
  %961 = %957.3;
  %962 = multiply(%958, %959) /* ty=Tensor[(20, 60), int8] */;
  (%949, %960, meta[relay.Constant][64] /* ty=Tensor[(140), bool] */, %961, -6.48876f64 /* ty=float64 */, %var_3384, %962)
}

def @func_3195() -> Tensor[(16, 2, 14), int32] {
  %964 = fn () -> Tensor[(16, 2, 14), int32] {
    %963 = @func_2477() /* ty=(Tensor[(16, 2, 14), int32],) */;
    %963.0
  };
  %964() /* ty=Tensor[(16, 2, 14), int32] */
}

def @func_6001(%var_6000: Tensor[(5, 5, 16), float64]) -> (Tensor[(5, 5, 16), float64], Tensor[(13, 10, 7), float32]) {
  %968 = fn (%var_5938: Tensor[(5, 5, 16), float64]) -> (Tensor[(5, 5, 16), float64], Tensor[(13, 10, 7), float32]) {
    %965 = cast(%var_5938, dtype="float64") /* ty=Tensor[(5, 5, 16), float64] */;
    %966 = tan(%965) /* ty=Tensor[(5, 5, 16), float64] */;
    %967 = @func_3654() /* ty=Tensor[(13, 10, 7), float32] */;
    (%966, %967)
  };
  %968(%var_6000) /* ty=(Tensor[(5, 5, 16), float64], Tensor[(13, 10, 7), float32]) */
}

def @func_2689() -> (Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) {
  @func_2687() /* ty=(Tensor[(60), bool], Tensor[(140), bool], Tensor[(1352), float64]) */
}

def @func_2843(%var_2842: Tensor[(13, 10, 7), float32]) -> (Tensor[(13, 10, 7), int64], Tensor[(8, 13, 13), float32], float32, Tensor[(676, 2), float32]) {
  %981 = fn (%var_2831: Tensor[(13, 10, 7), float32]) -> (Tensor[(13, 10, 7), int64], Tensor[(8, 13, 13), float32], float32, Tensor[(676, 2), float32]) {
    %969 = @func_1745() /* ty=Tensor[(13, 10, 7), float32] */;
    %970 = cast(%var_2831, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
    %971 = shape_of(%969, dtype="int32") /* ty=Tensor[(3), int32] */;
    %972 = cast(%969, dtype="int64") /* ty=Tensor[(13, 10, 7), int64] */;
    %973 = dyn.reshape(%970, %971, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %974 = cast(6.20708f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %975 = cast(meta[relay.Constant][67] /* ty=Tensor[(676, 2), float32] */, dtype="float32") /* ty=Tensor[(676, 2), float32] */;
    %976 = reshape(%974, newshape=[]) /* ty=float32 */;
    %977 = reshape(%975, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), float32] */;
    %978 = @func_193(%976, %977) /* ty=(Tensor[(8, 13, 13), float32],) */;
    %979 = right_shift(%972, %973) /* ty=Tensor[(13, 10, 7), int64] */;
    %980 = %978.0;
    (%979, %980, 6.20708f /* ty=float32 */, meta[relay.Constant][67] /* ty=Tensor[(676, 2), float32] */)
  };
  %981(%var_2842) /* ty=(Tensor[(13, 10, 7), int64], Tensor[(8, 13, 13), float32], float32, Tensor[(676, 2), float32]) */
}

def @func_4844() -> (Tensor[(20), bool],) {
  @func_4842() /* ty=(Tensor[(20), bool],) */
}

def @func_1668() -> Tensor[(13, 10, 7), float32] {
  %982 = fn () -> Tensor[(13, 10, 7), float32] {
    @func_1417() /* ty=Tensor[(13, 10, 7), float32] */
  };
  %982() /* ty=Tensor[(13, 10, 7), float32] */
}

def @func_4842() -> (Tensor[(20), bool],) {
  %983 = @func_2407() /* ty=Tensor[(20), bool] */;
  (%983,)
}

def @func_3859(%var_3854: Tensor[(2, 9, 10), float32]) -> Tensor[(2, 9, 10), float32] {
  %984 = cast(%var_3854, dtype="float32") /* ty=Tensor[(2, 9, 10), float32] */;
  log10(%984) /* ty=Tensor[(2, 9, 10), float32] */
}

def @func_3567() -> Tensor[(16, 2, 14), float64] {
  @func_3565() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_2528(%var_2527: Tensor[(9, 15, 6), float64]) -> (Tensor[(9, 15, 6), float64],) {
  %987 = fn (%var_2523: Tensor[(9, 15, 6), float64]) -> (Tensor[(9, 15, 6), float64],) {
    %985 = cast(%var_2523, dtype="float64") /* ty=Tensor[(9, 15, 6), float64] */;
    %986 = log(%985) /* ty=Tensor[(9, 15, 6), float64] */;
    (%986,)
  };
  %987(%var_2527) /* ty=(Tensor[(9, 15, 6), float64],) */
}

def @func_2902() -> (Tensor[(16, 2, 14), float64],) {
  %990 = fn () -> (Tensor[(16, 2, 14), float64],) {
    %988 = @func_1719() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %989 = %988.0;
    (%989,)
  };
  %990() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_877() -> Tensor[(16, 2, 14), float64] {
  %991 = cast(meta[relay.Constant][68] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %992 = acosh(%991) /* ty=Tensor[(16, 2, 14), float32] */;
  %993 = cast(meta[relay.Constant][68] /* ty=Tensor[(16, 2, 14), float32] */, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %994 = shape_of(%992, dtype="int32") /* ty=Tensor[(3), int32] */;
  %995 = cast(%992, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  minimum(%995, %996) /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_3862(%var_3860: Tensor[(2, 9, 10), float32]) -> Tensor[(2, 9, 10), float32] {
  @func_3859(%var_3860) /* ty=Tensor[(2, 9, 10), float32] */
}

def @func_5919() -> (Tensor[(13, 10, 7), float32],) {
  @func_5917() /* ty=(Tensor[(13, 10, 7), float32],) */
}

def @func_4690() -> (Tensor[(8), float64], Tensor[(13, 10, 7), float32], Tensor[(300, 1), uint16], Tensor[(300), uint16]) {
  @func_4688() /* ty=(Tensor[(8), float64], Tensor[(13, 10, 7), float32], Tensor[(300, 1), uint16], Tensor[(300), uint16]) */
}

def @func_3656() -> Tensor[(13, 10, 7), float32] {
  @func_3654() /* ty=Tensor[(13, 10, 7), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen177/build/output.py", line 2457, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:55:09] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

