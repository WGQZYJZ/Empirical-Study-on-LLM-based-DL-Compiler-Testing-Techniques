pointless_cumsum_replacement_5.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()

    def forward(self, x1):
        b = {}
        a = {}
        b['dtype'] = torch.float64
        b['layout'] = torch.strided
        b['device'] = torch.device('cpu')
        a['dtype'] = torch.float32
        a['layout'] = torch.strided
        a['device'] = torch.device('cpu')
        a['dtype_to'] = torch.float16
        a['dtype_from'] = torch.float32
        b['dtype_to'] = torch.float64
        b['dtype_from'] = torch.float16
        t1 = torch.full([1024, 256, 1024], 1, dtype=b['dtype'], layout=b['layout'], device=b['device'], pin_memory=False)
        t2 = t1.to(dtype=a['dtype'])
        t3 = torch.cumsum(t2, 1)
        return t3



func = Model().to('cpu')


x1 = torch.randn(1024, 256, 1024, device='cpu')

test_inputs = [x1]

unary=23_3.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv_transpose2 = torch.nn.ConvTranspose2d(200, 200, kernel_size=[147, 147])

    def forward(self, x1):
        v1 = self.conv_transpose2(x1)
        v2 = torch.tanh(v1)
        return v2



func = Model().to('cpu')


x1 = torch.randn(1, 200, 213, 213)

test_inputs = [x1]

unary=26_3.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self, negative_slope):
        super().__init__()
        self.negative_slope = negative_slope
        self.conv_t1 = torch.nn.ConvTranspose2d(768, 624, 3, stride=1, dilation=3, padding=3)
        self.conv_t2 = torch.nn.ConvTranspose2d(624, 768, 1, stride=1)
        self.conv_t3 = torch.nn.ConvTranspose2d(768, 768, 3, stride=2)

    def forward(self, x1):
        x2 = self.conv_t1(x1)
        x3 = self.conv_t2(x2)
        x4 = self.conv_t3(x3)
        x5 = x4 > 0
        x6 = x4 * self.negative_slope
        x7 = torch.where(x5, x4, x6)
        return x7


negative_slope = 0.1

func = Model(negative_slope).to('cpu')


x1 = torch.randn(16, 768, 56, 56)

test_inputs = [x1]

unary=26_5.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self, negative_slope):
        super().__init__()
        self.negative_slope = negative_slope
        self.conv_t = torch.nn.ConvTranspose2d(393216, 11, 3, stride=1, dilation=2, padding=2)

    def forward(self, x1):
        x2 = self.conv_t(x1)
        x3 = x2 > 0
        x4 = x2 * self.negative_slope
        x5 = torch.where(x3, x2, x4)
        x6 = torch.nn.functional.adaptive_avg_pool2d(x5, (1, 1))
        return torch.nn.functional.adaptive_avg_pool2d(x6, (1, 1))


negative_slope = 0.2

func = Model(negative_slope).to('cpu')


x1 = torch.randn(16, 393216, 16, 16)

test_inputs = [x1]

unary=5_5.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv_transpose = torch.nn.ConvTranspose3d(6, 12, (6, 6, 6))

    def forward(self, x1):
        v1 = self.conv_transpose(x1)
        v2 = v1 * 0.5
        v3 = v1 * 0.7071067811865476
        v4 = torch.erf(v3)
        v5 = v4 + 1
        v6 = v2 * v5
        return v6



func = Model().to('cpu')


x1 = torch.randn(3, 6, 128, 128, 128)

test_inputs = [x1]

