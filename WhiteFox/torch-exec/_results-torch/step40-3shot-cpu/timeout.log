replace_fx_9.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.key = torch.nn.Parameter(torch.randn(3073, 2137, 2371))

    def forward(self, x1):
        q = x1
        k = x1
        inv_scale = math.sqrt(k.size(1))
        scaled_dot_product = torch.matmul(q, k.transpose(-2, -1)) / inv_scale
        scaled_dot_product.softmax(dim=-1).matmul(k).softmax(dim=-1)
        scaled_dot_product.softmax(dim=-1)
        return scaled_dot_product.softmax(dim=-1)



func = Model().to('cpu')


x1 = torch.randn(23, 3, 1522, 29)

test_inputs = [x1]

sfdp=0_6.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.key = torch.nn.Parameter(torch.randn(3, 3, 384))

    def forward(self, x1):
        q = x1
        k = x1
        v = x1
        inv_scale = math.sqrt(k.size(1))
        scaled_dot_product = torch.matmul(q, k.transpose(-2, -1)) / inv_scale
        attention_weights = scaled_dot_product.softmax(dim=-1)
        output = attention_weights.matmul(v)
        return output



func = Model().to('cpu')


x1 = torch.randn(1337, 84, 74, 19)

test_inputs = [x1]

sfdp=4_9.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 128
        self.seq_len = 2048
        self.dim = 768 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.0, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(2, 128, 4096, 768)

key = torch.randn(2, 128, 4096, 768)

value = torch.randn(2, 128, 4096, 768)

attn_mask = torch.randn(2, 1, 4096, 4096)

test_inputs = [query, key, value, attn_mask]

sfdp=5_1.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 78
        self.seq_len = 2916
        self.dim = 786 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.5, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 78, 2916, 786)

key = torch.randn(1, 78, 2916, 786)

value = torch.randn(1, 78, 2916, 786)

attn_mask = torch.randn(1, 1, 2916, 2916)

test_inputs = [query, key, value, attn_mask]

sfdp=5_2.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 2
        self.seq_len = 16384
        self.dim = 6400 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.3, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 2, 16384, 6400)

key = torch.randn(1, 2, 16384, 6400)

value = torch.randn(1, 2, 16384, 6400)

attn_mask = torch.randn(1, 1, 16384, 16384)

test_inputs = [query, key, value, attn_mask]

sfdp=5_3.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 2
        self.seq_len = 16384
        self.dim = 6400 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.3, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 2, 16384, 6400)

key = torch.randn(1, 2, 16384, 6400)

value = torch.randn(1, 2, 16384, 6400)

attn_mask = torch.randn(1, 1, 16384, 16384)

test_inputs = [query, key, value, attn_mask]

sfdp=5_8.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 256
        self.seq_len = 1024
        self.dim = 768 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.5, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 256, 1024, 768)

key = torch.randn(1, 256, 1024, 768)

value = torch.randn(1, 256, 1024, 768)

attn_mask = torch.randn(1, 1, 1024, 1024)

test_inputs = [query, key, value, attn_mask]

unary=17_1.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv_1 = nn.ConvTranspose2d(3, 64, 3, stride=2)
        self.conv_2 = nn.ConvTranspose2d(64, 128, 3, stride=2)
        self.conv_3 = nn.ConvTranspose2d(128, 256, 3, stride=2)
        self.conv_4 = nn.ConvTranspose2d(256, 512, 3, stride=2)
        self.conv_5 = nn.ConvTranspose2d(512, 1, 3, stride=1)

    def forward(self, x1):
        v1 = self.conv_1(x1)
        v2 = F.relu(v1)
        v3 = self.conv_2(v2)
        v4 = F.relu(v3)
        v5 = self.conv_3(v4)
        v6 = F.relu(v5)
        v7 = self.conv_4(v6)
        v8 = F.relu(v7)
        v9 = self.conv_5(v8)
        return v9



func = Model().to('cpu')


x1 = torch.randn(1, 3, 64, 64)

test_inputs = [x1]

unary=17_2.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv1 = torch.nn.ConvTranspose2d(3, 32, 1, stride=1)
        self.conv2 = torch.nn.ConvTranspose2d(32, 64, 2, stride=2)
        self.conv3 = torch.nn.ConvTranspose2d(64, 128, 2, stride=2)
        self.conv4 = torch.nn.ConvTranspose2d(128, 256, 7, stride=1, padding=3)

    def forward(self, x1):
        v1 = self.conv1(x1)
        v2 = F.relu(v1)
        v3 = self.conv2(v2)
        v4 = F.relu(v3)
        v5 = self.conv3(v4)
        v6 = F.relu(v5)
        v7 = self.conv4(v6)
        return v7



func = Model().to('cpu')


x1 = torch.randn(1, 3, 224, 224)

test_inputs = [x1]

unary=25_9.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv_t = torch.nn.ConvTranspose3d(94, 83, (5, 2, 7), stride=(1, 2, 3), padding=(2, 0, 4), output_padding=(0, 1, 2), bias=False)

    def forward(self, x8):
        v1 = self.conv_t(x8)
        v2 = v1 > 0
        v3 = v1 * 0.382
        v4 = torch.where(v2, v1, v3)
        return v4



func = Model().to('cpu')


x8 = torch.randn(9, 94, 20, 60, 98)

test_inputs = [x8]

unary=29_10.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self, min_value=0, max_value=0):
        super().__init__()
        self.relu6 = torch.nn.ReLU6()
        self.conv_transpose = torch.nn.ConvTranspose2d(16, 3, 232, stride=1, padding=1, dilation=1, output_padding=0, groups=1, bias=False, padding_mode='zeros')
        self.min_value = min_value
        self.max_value = max_value

    def forward(self, x1):
        v1 = self.conv_transpose(x1)
        v2 = torch.clamp_min(v1, self.min_value)
        v3 = torch.clamp_max(v2, self.max_value)
        v4 = self.relu6(v3)
        return v4



func = Model().to('cpu')


x1 = torch.randn(1, 16, 281, 281)

test_inputs = [x1]

unary=3_6.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv1 = torch.nn.Conv2d(352, 512, (11, 20), stride=1, padding=(0, 0))
        self.conv2 = torch.nn.Conv2d(512, 389, 7, stride=1, padding=0)
        self.conv3 = torch.nn.Conv2d(389, 273, (6, 13), stride=1, padding=(1, 0))
        self.conv4 = torch.nn.Conv2d(273, 165, (13, 12), stride=1, padding=(1, 3))
        self.conv5 = torch.nn.Conv2d(166, 93, (8, 15), stride=1, padding=(3, 2))

    def forward(self, x1):
        v1 = self.conv1(x1)
        v2 = v1 * 0.5
        v3 = v1 * 0.7071067811865476
        v4 = torch.erf(v3)
        v5 = v4 + 1
        v6 = v2 * v5
        v7 = self.conv2(v6)
        v8 = v7 * 0.5
        v9 = v7 * 0.7071067811865476
        v10 = torch.erf(v9)
        v11 = v10 + 1
        v12 = v8 * v11
        v13 = self.conv3(v12)
        v14 = self.conv4(v13)
        v15 = v14 * 0.5
        v16 = v14 * 0.7071067811865476
        v17 = torch.erf(v16)
        v18 = v17 + 1
        v19 = v15 * v18
        v20 = self.conv5(v19)
        return v20



func = Model().to('cpu')


x1 = torch.randn(1, 352, 236, 432)

test_inputs = [x1]

