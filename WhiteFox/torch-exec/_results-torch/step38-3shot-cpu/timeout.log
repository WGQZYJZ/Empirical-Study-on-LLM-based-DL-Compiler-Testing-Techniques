pointless_cumsum_replacement_5.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()

    def forward(self, x1):
        b = {}
        a = {}
        b['dtype'] = torch.uint8
        b['layout'] = torch.strided
        b['device'] = torch.device('cpu:0')
        a['dtype'] = torch.uint8
        a['layout'] = torch.strided
        a['device'] = torch.device('cuda:0')
        a['dtype_to'] = torch.uint8
        a['dtype_from'] = torch.float32
        b['dtype_to'] = torch.float32
        b['dtype_from'] = torch.uint8
        t1 = torch.full([498500, 1920], 1, dtype=b['dtype'], layout=b['layout'], device=b['device'], pin_memory=False)
        t2 = t1.to(dtype=a['dtype'])
        t3 = torch.cumsum(t2, 0)
        return t3



func = Model().to('cpu')

x1 = 1

test_inputs = [x1]

sfdp=5_10.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 4096
        self.seq_len = 3072
        self.dim = 4 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.5088136429351068, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 16, 3072, 4)

key = torch.randn(1, 16, 3072, 4)

value = torch.randn(1, 16, 3072, 4)

attn_mask = torch.randn(1, 1, 3072, 3072)

test_inputs = [query, key, value, attn_mask]

sfdp=5_5.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 4096
        self.seq_len = 2
        self.dim = 128

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.6050939852564436, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 4608, 256, 128)

key = torch.randn(1, 4608, 256, 128)

value = torch.randn(1, 4608, 256, 128)

attn_mask = torch.randn(1, 1, 256, 256)

test_inputs = [query, key, value, attn_mask]

sfdp=5_6.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 65536
        self.seq_len = 256
        self.dim = 2048 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.0, False)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 256, 256, 2048)

key = torch.randn(1, 256, 256, 2048)

value = torch.randn(1, 256, 256, 2048)

attn_mask = torch.randn(1, 256, 256, 256)

test_inputs = [query, key, value, attn_mask]

unary=17_5.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv = torch.nn.ConvTranspose2d(3, 1024, 7, stride=7, padding=0)
        self.conv1 = torch.nn.ConvTranspose2d(1024, 512, 21, stride=5, padding=0)
        self.conv2 = torch.nn.ConvTranspose2d(512, 256, 51, stride=15, padding=0)
        self.conv3 = torch.nn.ConvTranspose2d(256, 256, 101, stride=15, padding=0)
        self.conv4 = torch.nn.ConvTranspose2d(256, 128, 201, stride=7, padding=0)
        self.conv5 = torch.nn.ConvTranspose2d(128, 64, 56, stride=1, padding=0)
        self.conv6 = torch.nn.ConvTranspose2d(64, 32, 16, stride=4, padding=0)
        self.conv7 = torch.nn.ConvTranspose2d(32, 32, 5, stride=2, padding=0)
        self.conv8 = torch.nn.ConvTranspose2d(32, 16, 3, stride=2, padding=0)
        self.conv9 = torch.nn.ConvTranspose2d(16, 1, 3, stride=1, padding=1)

    def forward(self, x1):
        v1 = self.conv(x1)
        v2 = torch.relu(v1)
        v3 = self.conv1(v2)
        v4 = torch.relu(v3)
        v5 = self.conv2(v4)
        v6 = torch.relu(v5)
        v7 = self.conv3(v6)
        v8 = torch.relu(v7)
        v9 = self.conv4(v8)
        v10 = torch.relu(v9)
        v11 = self.conv5(v10)
        v12 = torch.relu(v11)
        v13 = self.conv6(v12)
        v14 = torch.relu(v13)
        v15 = self.conv7(v14)
        v16 = self.conv8(v15)
        v17 = self.conv9(v16)
        return v17



func = Model().to('cpu')


x1 = torch.randn(1, 3, 64, 64)

test_inputs = [x1]

unary=21_2.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class ModelTanh(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv = torch.nn.Conv2d(16, 256, kernel_size=1)
        self.conv_1 = torch.nn.Conv2d(256, 1024, 1)
        self.conv_2 = torch.nn.Conv2d(1024, 5, 1)
        self.sig = torch.nn.Sigmoid()

    def forward(self, x):
        v1 = self.conv_1(self.conv(x))
        v2 = torch.tanh(v1)
        self.conv_2(v2)
        v3 = torch.tanh(v2)
        v4 = self.sig(self.conv_2(v3)).squeeze(1)
        return v4



func = ModelTanh().to('cpu')


x = torch.randn(128, 16, 256, 256)

test_inputs = [x]

unary=8_5.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv_transpose = torch.nn.ConvTranspose3d(32, 32, (2, 1, 1), stride=(2, 1, 1), padding=0)

    def forward(self, x1):
        v1 = self.conv_transpose(x1)
        v2 = v1 + 3
        v3 = torch.clamp(v2, min=0)
        v4 = torch.clamp(v3, max=6)
        v5 = v1 * v4
        v6 = v5 / 6
        return v6



func = Model().to('cpu')


x1 = torch.randn(1, 32, 100, 200, 300)

test_inputs = [x1]

