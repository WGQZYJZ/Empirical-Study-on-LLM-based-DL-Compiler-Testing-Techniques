sfdp=4_9.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 91
        self.seq_len = 1359
        self.dim = 725 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.1, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 91, 1359, 725)

key = torch.randn(1, 91, 1359, 725)

value = torch.randn(1, 91, 1359, 725)

attn_mask = torch.randn(1, 1, 1359, 1359)

test_inputs = [query, key, value, attn_mask]

sfdp=5_2.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 719
        self.seq_len = 1024
        self.dim = 1036 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.0, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 719, 1024, 1036)

key = torch.randn(1, 719, 1024, 1036)

value = torch.randn(1, 719, 1024, 1036)

attn_mask = torch.randn(1, 1, 1024, 1024)

test_inputs = [query, key, value, attn_mask]

sfdp=5_4.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 137
        self.seq_len = 2001
        self.dim = 209 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.5, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 137, 2001, 209)

key = torch.randn(1, 137, 2001, 209)

value = torch.randn(1, 137, 2001, 209)

attn_mask = torch.randn(1, 1, 2001, 2001)

test_inputs = [query, key, value, attn_mask]

sfdp=5_5.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 19
        self.seq_len = 7035
        self.dim = 1568 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.4, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 19, 7035, 1568)

key = torch.randn(1, 19, 7035, 1568)

value = torch.randn(1, 19, 7035, 1568)

attn_mask = torch.randn(1, 1, 7035, 7035)

test_inputs = [query, key, value, attn_mask]

sfdp=5_6.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 75
        self.seq_len = 1684
        self.dim = 978 // self.heads

    def forward(self, query, key, value, attn_mask):
        qk = query @ key.transpose(-2, -1) / math.sqrt(query.size(-1))
        qk = qk + attn_mask
        attn_weight = torch.softmax(qk, dim=-1)
        attn_weight = torch.dropout(attn_weight, 0.7, True)
        output = attn_weight @ value
        return output



func = Model().to('cpu')


query = torch.randn(1, 75, 1684, 978)

key = torch.randn(1, 75, 1684, 978)

value = torch.randn(1, 75, 1684, 978)

attn_mask = torch.randn(1, 1, 1684, 1684)

test_inputs = [query, key, value, attn_mask]

unary=4_9.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg

class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.conv_transpose = torch.nn.ConvTranspose2d(3, 128, 3, stride=16, padding=4)

    def forward(self, x1):
        v1 = self.conv_transpose(x1)
        v2 = v1 * 0.5
        v3 = v1 * 0.7071067811865476
        v4 = torch.erf(v3)
        v5 = v4 + 1
        v6 = v2 * v5
        return v6



func = Model().to('cpu')


x1 = torch.randn(1, 3, 224, 224)

test_inputs = [x1]

