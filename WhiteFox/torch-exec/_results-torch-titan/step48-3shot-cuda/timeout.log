cat_mm_3.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg



class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()

    def forward(self, x1, x2):
        x1 = x1.detach()
        x2 = x2.detach()
        b = []
        for loopVar1 in range(130):
            for loopVar2 in range(130):
                v1 = torch.mm(x1, x2)
                b.append(v1)
        return torch.stack(b, 1)




func = Model().to('cuda')



x1 = torch.randn(3, 3)



x2 = torch.randn(3, 3)


test_inputs = [x1, x2]

sfdp=5_1.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg



class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.num_layers = 4
        self.heads = 262149
        self.seq_len = 515
        self.intermediate_dim = 83352
        self.dim = (833 // self.heads)

    def forward(self, query, key, value, attn_mask):
        input = query
        for _ in range(self.num_layers):
            output = self.multi_head_attention(input, key, value, attn_mask)
            input = (input + output)
        return input

    def multi_head_attention(self, query, key, value, attn_mask):
        qk = ((query @ key.transpose((- 2), (- 1))) / math.sqrt(query.size((- 1))))
        qk = (qk + attn_mask)
        attn_weight = torch.softmax(qk, dim=(- 1))
        attn_weight = torch.dropout(attn_weight, 0.01, True)
        output = (attn_weight @ value)
        return output




func = Model().to('cuda')



query = torch.randn(1, 327, 256, 256)



key = torch.randn(1, 327, 256, 256)



value = torch.randn(1, 327, 256, 256)



attn_mask = torch.randn(1, 1, 256, 256)


test_inputs = [query, key, value, attn_mask]

sfdp=5_6.py TIMEOUT
import os
import torch
import torch.nn.functional as F
import torch.nn as nn
import numpy as np
from torch.autograd import Variable
import math
import torch as th
import torch.linalg as la
from torch.nn import Parameter
import torch.linalg as linalg



class Model(torch.nn.Module):

    def __init__(self):
        super().__init__()
        self.heads = 857
        self.seq_len = 1847
        self.dim = (689 // self.heads)

    def forward(self, query, key, value, attn_mask):
        qk = ((query @ key.transpose((- 2), (- 1))) / math.sqrt(query.size((- 1))))
        qk = (qk + attn_mask)
        attn_weight = torch.softmax(qk, dim=(- 1))
        attn_weight = torch.dropout(attn_weight, 0.4, True)
        output = (attn_weight @ value)
        return output




func = Model().to('cuda')



query = torch.randn(1, 857, 1847, 689)



key = torch.randn(1, 857, 1847, 689)



value = torch.randn(1, 857, 1847, 689)



attn_mask = torch.randn(1, 1, 1847, 1847)


test_inputs = [query, key, value, attn_mask]

