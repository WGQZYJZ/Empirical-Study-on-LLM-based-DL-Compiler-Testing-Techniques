
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1a = torch.nn.quantized.ConvReLU2d(256, 544, (1, 7), stride=1, padding=(0, 3))
        self.conv1r = torch.nn.quantized.Conv2d(256, 384, (1, 5), stride=1, padding=(0, 2))
        self.conv2a = torch.nn.quantized.ConvReLU2d(384, 512, (3, 3), stride=1, padding=(1, 1))
        self.conv2r = torch.nn.quantized.Conv2d(384, 256, (1, 3), stride=1, padding=(0, 1))
    def forward(self, x1):
        v1 = self.conv1a(x1)
        v2 = self.conv1r(x1)
        v3 = v1 * 0.5
        v4 = v2 * 0.5
        v5 = v3 * 0.7071067811865476
        v6 = v4 * 0.7071067811865476
        v7 = torch.erf(v5)
        v8 = v7 + 1
        v9 = torch.erf(v6)
        v10 = v8 * v9
        v11 = v2 * 0.5
        v12 = v1 * 0.5
        v13 = v12 * 0.7071067811865476
        v14 = v11 * 0.7071067811865476
        v15 = torch.erf(v13)
        v16 = v15 + 1
        v17 = torch.erf(v14)
        v18 = v16 * v17
        v19 = v10 + v18
        v20 = v3 * 0.5
        v21 = v4 * 0.5
        v22 = v20 * 0.7071067811865476
        v23 = v21 * 0.7071067811865476
        v24 = torch.erf(v22)
        v25 = v24 + 1
        v26 = torch.erf(v23)
        v27 = v25 * v26
        v28 = v27 + v20
        v29 = v22 + 1
        v30 = v23 + 1
        v31 = torch.erf(v30)
        v32 = v31 * v32
        v33 = v32 + v23
        v34 = v22 - 1
        v35 = torch.exp(v34)
        v36 = v35 + 1
        v37 = v23 - 1
        v38 = torch.exp(v37)
        v39 = v38 + 1
        v40 = v38 / v39
        v41 = v36 * v40
        v42 = v27 * v25
        v43 = v20 * v16
        v44 = v21 * v15
        v45 = v42 + v41
        v46 = v21 - 1
        v47 = torch.exp(v46)
        v48 = v47 + 1
        v49 = v20 - 1
        v50 = torch.exp(v49)
        v51 = v50 + 1
        v52 = v32 / v51
        v53 = v48 * v52
        v54 = v18 * v10
        v55 = v12 * v8
        v56 = v44 + v33
        v57 = v43 + v54
        v58 = v11 - 1
        v59 = torch.exp(v58)
        v60 = v59 + 1
        v61 = v33 / v60
        v62 = v13 - 1
        v63 = torch.exp(v62)
        v64 = v63 + 1
        v65 = v64 / v61
        v66 = v9 * v65
        v67 = v66 + v55
        v68 = v8 * v53
        v69 = v65 * v63
        v70 = v56 + v68
        v71 = torch.quantize_per_tensor(v67, 0.0, 122.0, torch.quint8)
        v72 = torch.quantize_per_tensor(v70, 0.0, 98.0, torch.quint8)
        v73 = torch.dequantize(v71)
        v74 = torch.dequantize(v72)
        v75 = self.conv2a(v73)
        v76 = self.conv2r(v74)
        v77 = v75 * 0.5
        v78 = v76 * 0.5
        v79 = v77 * 0.7071067811865476
        v80 = v78 * 0.7071067811865476
        v81 = torch.erf(v79)
        v82 = v81 + 1
        v83 = torch.erf(v80)
        v84 = torch.quantize_per_tensor(v82, 0.0, 122.0, torch.quint8)
        v85 = torch.quantize_per_tensor(v83, 0.0, 122.0, torch.quint8)
        v86 = torch.dequantize(v84)
        v87 = torch.dequantize(v85)
        v88 = v78 + 1.0
        v89 = v77 + 1.0
        v90 = v78 - 1.0
        v91 = torch.exp(v90)
        v92 = v91 + 1
        v93 = v77 - 1.0
        v94 = torch.exp(v93)
        v95 = v94 + 1
        v96 = v89 / v95
        v97 = v92 * v96
        v98 = v82 * v83
        v99 = v98 * 0.5
        v100 = v88 * 0.5
        v101 = v99 * 0.7071067811865476
        v102 = v100 * 0.7071067811865476
        v103 = torch.erf(v101)
        v104 = v103 + 1
        v105 = torch.erf(v102)
        v106 = v94 / v105
        v107 = v91 / v106
        v108 = v97 + v107 * v104
        v109 = v108 * 123.0
        v110 = v101 + 1
        v111 = v99 + 1
        v112 = torch.erf(v111)
        v113 = v112 * v113
        v114 = v113 - 1.0
        v115 = torch.exp(v114)
        v116 = v115 + 1
        v117 = v115 / v100
        v118 = v110 * v117
        v119 = v103 - 1.0
        v120 = torch.exp(v119)
        v121 = v120 + 1
        v122 = v120 / v99
        v123 = v122 * 123.0
        v124 = v104 + 1.0
        v125 = v100 + 1.0
        v126 = torch.erf(v125)
        v127 = v126 * v127
        v128 = v102 + 1.0
        v129 = v102 - 1.0
        v130 = torch.exp(v129)
        v131 = v130 + 1
        v132 = v131 / v101
        v133 = v132 / v88
        v134 = v79 + 1.0
        v135 = v134 + 1.0
        v136 = torch.erf(v135)
        v137 = v136 * v137
        v138 = v129 - 1.0
        v139 = torch.exp(v138)
        v140 = v139 + 1
        v141 = v139 / v77
        v142 = v88 * v102
        v143 = v142 * v122
        v144 = v128 / v133
        v145 = v143 + v123
        v146 = v141 / v140
        v147 = v131 * v146
        v148 = v78 / v144
        v149 = v148 * v97
        v150 = v147 + v144
        v151 = v91 * v90
        v152 = v151 + 1
        v153 = v121 / v150
        v154 = v147 * 123.0
        v155 = v124 * v120
        v156 = v79 - 1.0
        v157 = torch.exp(v156)
        v158 = v157 + 1
        v159 = v157 - 1.0
        v160 = torch.exp(v159)
        v161 = v160 + 1
        v162 = v160 / v134
        v163 = v93 / v162
        v164 = v163 * 123.0
        v165 = v124 * v110
        v166 = v158 * v116
        v167 = v158 * v119
        v168 = v165 + v166
        v169 = v157 * v117
        v170 = v129 * v137
        v171 = v169 * 123.0
        v172 = v168 * 123.0
        v173 = v134 * v132
        v174 = v173 * v170
        v175 = v153 * 123.0
        v176 = v90 * v162
        v177 = v153 * v159
        v178 = v143 + v167
        v179 = v141 / v155
        v180 = v179 / v164
        v181 = v155 * v151
        v182 = v175 + v133 * v161
        v183 = v171 + v172
        v184 = v170 + v178
        v185 = v174 + v180 * v181
        v186 = self.conv2a(v183)
        v187 = self.conv2r(v184)
        v188 = v186 * 0.5
        v189 = v187 * 0.5
        v190 = v188 * 0.7071067811865476
        v191 = v189 * 0.7071067811865476
        v192 = torch.erf(v190)
        v193 = v192 + 1
        v194 = torch.erf(v191)
        v195 = v193 + v181 * 123.0
        v196 = torch.quantize_per_tensor(v195, 0.0, 122.0, torch.quint8)
        v197 = torch.dequantize(v196)
        v198 = self.conv2a(v188)
        v199 = self.conv2r(v191)
        v200 = v198 * 0.5
        v201 = v199 * 0.5
        v202 = v200 * 0.7071067811865476
        v203 = v201 * 0.7071067811865476
        v204 = torch.erf(v202)
        v205 = v204 + 1
        v206 = torch.erf(v203)
        v207 = v205 + v180 * 123.0
        v208 = v206 / 123.0
        v209 = v195 * v188
        v210 = torch.quantize_per_tensor(v209, 0.0, 122.0, torch.quint8)
        v211 = torch.dequantize(v210)
        v212 = v195 * v191
        v213 = torch.quantize_per_tensor(v212, 0.0, 122.0, torch.quint8)
        v214 = torch.dequantize(v213)
        v215 = v208 + v211
        v216 = v208 + v214
        v217 = v211 + v214
        v218 = self.conv2a(v215)
        v219 = self.conv2r(v217)
        v220 = v218 * 0.5
        v221 = v219 * 0.5
        v222 = v220 * 0.7071067811865476
        v223 = v221 * 0.7071067811865476
        v224 = torch.erf(v222)
        v225 = v224 + 1
        v226 = torch.erf(v223)
        v227 = v225 + v180 * 33.0
        v228 = torch.quantize_per_tensor(v227, 0.0, 122.0, torch.quint8)
        v229 = torch.dequantize(v228)
        v230 = self.conv2a(v220)
        v231 = self.conv2r(v223)
        v232 = v230 * 0.5
        v233 = v231 * 0.5
        v234 = v232 * 0.7071067811865476
        v235 = v233 * 0.7071067811865476
        v236 = torch.erf(v234)
        v237 = v236 + 1
        v238 = torch.erf(v235)
        v239 = v237 + v181 * 123.0
        v240 = v238 / 123.0
        v241 = v227 * v220
        v242 = torch.quantize_per_tensor(v241, 0.0, 122.0, torch.quint8)
        v243 = torch.dequantize(v242)
        v244 = v227 * v223
        v245 = torch.quantize_per_tensor(v244, 0.0, 122.0, torch.quint8)
        v246 = torch.dequantize(v245)
        v247 = v240 + v243
        v248 = v240 + v246
        v249 = v243 + v246
        v250 = self.conv2a(v247)
        v251 = self.conv2r(v249)
        v252 = v250 * 0.5
        v253 = v251 * 0.5
        v254 = v252 * 0.7071067811865476
        v255 = v253 * 0.7071067811865476
        v256 = torch.erf(v254)
        v257 = v256 + 1
        v258 = torch.erf(v255)
        v259 = v257 + v180 * 33.0
        v260 = torch.quantize_per_tensor(v259, 0.0, 122.0, torch.quint8)
        v261 = torch.dequantize(v260)
        v260 = self.conv2a(v252)
        v261 = self.conv2r(v255)
        v262 = v260 * 0.5
        v263 = v261 * 0.5
        v264 = v262 * 0.7071067811865476
        v265 = v263 * 0.7071067811865476
        v266 = torch.erf(v264)
        v267 = v266 + 1
        v268 = torch.erf(v265)
        v269 = v267 + v181 * 123.0
        v270 = v268 / 123.0
        x = v270
        return x
# Inputs to the model
x1 = torch.randn([1, 256, 88, 88])
