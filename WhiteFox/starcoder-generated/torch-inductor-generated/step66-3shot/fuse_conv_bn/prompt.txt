### Please generate different valid PyTorch models with public PyTorch APIs that meets the specified requirements. Plus, please also generate the input tensor for the newly generated model. Be creative when generating new models to explore different possibilities that trigger the pattern. Feel free to leverage various PyTorch APIs, uncommon arguments, and input tensors with different shapes and data types.

# Description of requirements:
The model should contain the following pattern:
```
conv = torch.nn.ConvXd(...) # X can be 1, 2, or 3 representing the dimension
bn = torch.nn.BatchNormXd(...) # X should match with ConvXd
output = bn(conv(input_tensor))
```
This pattern characterizes scenarios where a convolution layer (`torch.nn.ConvXd`) is followed by a batch normalization layer (`torch.nn.BatchNormXd`). The output of the convolution layer is used as the input to the batch normalization layer. 

The `fuse_conv_bn` optimization is triggered when the convolution and batch normalization layers are in evaluation mode (not in training mode), and the batch normalization layer is tracking running statistics. 

After the optimization, the convolution and batch normalization layers are fused into a single convolution layer, and the batch normalization layer is removed from the graph. If the output of the convolution layer is used by other nodes, the optimization will not be performed. 

The optimization also applies to the functional API equivalent of the above pattern, where `torch.nn.functional.convXd` and `torch.nn.functional.batch_norm` are used instead of the module API. The constraints for the functional API pattern are similar to the module API pattern.

# Model begins
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = torch.nn.Conv2d(7, 7, 2)
        self.bn1 = torch.nn.BatchNorm2d(7)
        self.conv2 = torch.nn.Conv2d(7, 7, 2)
        self.bn2 = torch.nn.BatchNorm2d(7)
        self.conv3 = torch.nn.Conv2d(7, 3, 1)
    def forward(self, x):
        x1 = self.conv1(x)
        x2 = self.conv2(x1)
        x3 = self.bn2(x2)
        x4 = self.bn2(x1)
        x5 = self.conv3(x4)
        return x5
# Inputs to the model
x = torch.randn(1, 7, 4, 4)
# Model ends

# Model begins
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = torch.nn.Conv2d(2, 2, 1)
        self.conv2 = torch.nn.Conv2d(2, 2, 3)
        self.bn = torch.nn.BatchNorm2d(2)
        self.relu = torch.nn.ReLU()
    def forward(self, x):
        x = self.conv1(x)
        x = self.relu(x)
        x = self.conv2(x)
        x = self.bn(x)
        return x
# Inputs to the model
x = torch.randn(1, 2, 4, 4)
# Model ends

# Model begins
class Model(nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.layer = nn.Sequential(nn.Conv2d(3, 3, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(3, eps=1e-05, momentum=0.1, affine=True))
    def forward(self, x):
        return self.layer(x)
# Inputs to the model
x = torch.randn(1, 3, 4, 4)
# Model ends

# Model begins