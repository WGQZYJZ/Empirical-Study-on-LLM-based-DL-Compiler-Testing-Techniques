
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.conv2d = torch.nn.Conv2d(1, 1, kernel_size=[2, 1])
        self.conv2d_1 = torch.nn.Conv2d(1, 1, kernel_size=[2, 2])
        self.permute = torch.Tensor.permute
        self.mul = torch.Tensor.mul
        self.sub = torch.sub
        self.split = torch.split
        self.add = torch.Tensor.add
        self.view = torch.Tensor.view
        self.max_pool2d = torch.nn.MaxPool2d(kernel_size=[2, 2], stride=1, padding=0, dilation=1, ceil_mode=False)
        self.squeeze = torch.squeeze
        self.expand_as = torch.Tensor.expand_as
        self.cat = torch.cat
    def forward(self, x1):
        x2 = torch.nn.functional.sigmoid(self.conv2d(x1))
        x2 = self.max_pool2d(x2)
        x2 = torch.nn.functional.sigmoid(self.conv2d_1(x2))
        x2 = x2.permute(0, 2, 1)
        v1 = x2.unsqueeze(1)
        v2 = (torch.reshape(v1, (-1, 1))).squeeze()
        x8 = -((torch.reshape(v1, (-1, 1))).squeeze() - 1)
        x5 = torch.split(x8, split_size_or_sections=(x8.size(2)), dim=1)
        x6 = torch.reshape(v1, (-1, 1)).squeeze()
        x4 = torch.cat((x5), 0)
        x7 = self.conv2d(x2)
        x7 = self.max_pool2d(x7)
        x7 = self.conv2d_1(x7)
        x7 = self.permute(x7, [0, 2, 1])
        x7 = x7.unsqueeze(1)
        v3 = (torch.reshape(x7, (-1, 1))).squeeze()
        x9 = (torch.reshape(x7, (-1, 1))).squeeze() - 1
        x12 = self.sub(1., (torch.reshape(x7, (-1, 1))).squeeze())
        x10 = torch.split(x12, split_size_or_sections=x12.size(2), dim=1)
        x13 = self.sub(x13, 1)
        x1 = torch.cat((x10), 0)
        x14 = torch.cat((v1, v2), 0)
        x11 = x2.unsqueeze(1)
        v4 = torch.matmul(x14, self.conv2d.weight)
        x15 = v4.squeeze() * self.conv2d.bias
        x17 = v2 - x11
        x18 = torch.cat((x17), 0)
        v5 = self.conv2d.weight.unsqueeze(1)
        x9 = self.expand_as(x9, (torch.reshape(v5, (-1, 1))).squeeze())
        v6 = torch.matmul(x9, v5)
        v7 = v6.squeeze()
        v8 = torch.matmul(v7, self.conv2d_1.weight.squeeze())
        x7 = torch.cat((v7), 0)
        x3 = torch.cat((x7), 0)
        x16 = torch.cat((v8, self.conv2d_1.bias), 0)
        x20 = torch.split(x6, split_size_or_sections=x6.size(2), dim=1)
        x19 = torch.cat((x20), 0)
        x8 = torch.cat((x4, x13))
        x22 = torch.reshape(v2, (-1, 1)).squeeze()
        x23 = torch.split(self.conv2d.weight, split_size_or_sections=self.conv2d.weight.size(2), dim=1)
        v9 = torch.cat((v3, x22), 0)
        x27 = torch.cat((x6), 0)
        v10 = -((torch.reshape(v3, (-1, 1))).squeeze() - 1)
        x28 = self.conv2d(x7)
        x28 = self.max_pool2d(x28)
        x28 = self.conv2d_1(x28)
        x28 = self.permute(x28, [0, 2, 1])
        x28 = x28.unsqueeze(1)
        v11 = torch.reshape(x28, (-1, 1)).squeeze()
        x25 = self.sub(1., (torch.reshape(x28, (-1, 1))).squeeze())
        x24 = torch.split(x25, split_size_or_sections=x25.size(2), dim=1)
        x26 = torch.cat((x27, v11), 0)
        v12 = torch.matmul(x6, self.conv2d.weight)
        x29 = v12.squeeze() * self.conv2d.bias
        x31 = torch.cat((x29), 0)
        v13 = torch.matmul(x26, self.conv2d_1.weight.squeeze())
        x21 = torch.cat((v13), 0)
        x16 = torch.cat((v10, x21), 0)
        x4 = torch.cat((x24), 0)
        x2 = torch.cat((x8), 0)
        v14 = torch.matmul(x31, self.conv2d.weight)
        x32 = v14.squeeze() * self.conv2d.bias
        x32 = torch.cat((x32, v1), 0)
        x15 = torch.cat((x26, x32))
        x33 = torch.split(x16, split_size_or_sections=x16.size(2), dim=1)
        x0 = torch.matmul(1. / x33, x15)
        v15 = self.conv2d.weight.unsqueeze(1)
        x34 = torch.matmul(x0, v15)
        x35 = torch.nn.functional.sigmoid(x34)
        x36 = torch.nn.functional.relu(x35)
        x37 = torch.nn.functional.linear(x36, self.conv2d.weight, self.conv2d.bias)
        x38 = x37.permute(1, 0, 2, 3)
        x38 = x38.unsqueeze(0)
        v16 = x38.permute(0, 2, 1)
        v17 = torch.nn.functional.conv2d(v16, self.conv2d_1.weight, self.conv2d_1.bias, self.conv2d_1.stride, self.conv2d_1.padding)
        x39 = v17.squeeze()
        x40 = torch.split(x39, split_size_or_sections=1)
        x41 = x42.unsqueeze(0)
        x41 = x41.expand(1, 4, 1, 1)
        v18 = (x41).permute(0, 2, 1)
        v19 = torch.nn.functional.conv2d(v18, self.conv2d_1.weight, self.conv2d_1.bias, self.conv2d_1.stride, self.conv2d_1.padding)
        v20 = (v19).squeeze()
        x44 = torch.cat((v16), 1)
        x44 = torch.cat((x44, v19.unsqueeze(0)), 1)
        v21 = torch.pow(x40, 2)
        v22 = v21.unsqueeze(0)
        x44 = x44**v22
        v23 = self.conv2d.weight.unsqueeze(1)
        v24 = self.conv2d_1.weight.unsqueeze(1)
        x45 = torch.matmul(v22, v23)
        x46 = x45.expand((1, 1, 4, 1))
        v25 = v1 - x46.permute(0, 2, 1)
        v26 = v25.unsqueeze(0)
        v27 = v24.expand((1, 1, 1, 4))
        x47 = v20 * v26
        v28 = x47.permute(4, 0, 3, 1, 2)
        v29 = v28.permute(0, 2, 3, 4, 1)
        v30 = self.conv2d.weight.unsqueeze(1)
        x50 = torch.matmul(v30, v29)
        v31 = torch.matmul(v23, v24)
        v32 = torch.matmul(v20, v31)
        x49 = x50.squeeze()
        v33 = self.conv2d.weight.unsqueeze(1)
        x52 = torch.matmul(v22, v33)
        x52 = x52 * self.conv2d.bias
        x51 = x50.squeeze()
        v34 = v20 * self.conv2d.weight
        v35 = torch.matmul(v34, v24)
        v36 = v35 * self.conv2d.bias
        v37 = torch.matmul(self.conv2d.weight, self.conv2d.weight)
        v38 = torch.cat((v27), 1)
        v39 = self.conv2d.weight.expand(1, 3, 1, 1, 1)
        v40 = torch.matmul(v39, v26)
        v41 = torch.reshape(v40, (-1, 12))
        v42 = v35 * self.conv2d.bias
        v43 = torch.cat((v42), 1)
        v44 = torch.cat((1., (v22).t()), 0)
        v45 = 2 * v44.pow(v42)
        v46 = self.conv2d.weight.squeeze()
        v47 = torch.cat((1., (v40).t().flatten()), 0)
        v48 = 2 * v47.pow(self.conv2d.bias)
        v49 = self.conv2d.weight.expand(1, 3, 1, 1, 1)
        v50 = torch.matmul(v49, v27)
        v51 = torch.reshape(v50, (-1, 12))
        v52 = torch.matmul((v40.squeeze()), v1)
        v53 = torch.cat((self.conv2d.weight), 1)
        v54 = 2 * v53.mul((v52).unsqueeze(1))
        v55 = v48 * v51
        v56 = torch.cat((v20, v20), 1)
        v57 = v56 * v41
        v58 = torch.cat((v57), 0)
        v59 = torch.nn.functional.linear(x44, self.conv2d.weight, self.conv2d.bias)
        v60 = v59.permute(1, 0, 2, 3)
        x60 = v45 * torch.cat((v60), 0)
        x60 = v60 / ((v24 + v36).squeeze())
        x60 = torch.cat((x60), 0)
        v61 = torch.nn.functional.linear(x44, self.conv2d_1.weight, self.conv2d_1.bias)
        x61 = v58.permute(0, 3, 2, 1)
        x61 = v61.permute(0, 3, 1, 2)
        x54 = v33 * v51
        v62 = v58.permute(0, 2, 3, 1)
        v63 = x51 * v62
        v64 = v63.permute(0, 4, 3, 2, 1)
        v65 = torch.nn.functional.linear(v64, self.conv2d.weight, self.conv2d.bias)
        v66 = v65.permute(0, 4, 1, 2, 3)
        x66 = v45 * torch.cat((v66), 0)
        x66 = v66.div((v38.squeeze()).unsqueeze(0))
        v67 = torch.cat((self.conv2d.weight), 1)
        x65 = x66.permute(3, 2, 0, 1)
        x68 = v64 * v67.unsqueeze(1)
        v68 = torch.nn.functional.linear(x68, self.conv2d_1.weight, self.conv2d_1.bias)
        x69 = torch.reshape((v68.squeeze()), (-1, 8))
        x54 = torch.cat((x54), 0)
        x70 = torch.cat((v54, self.conv2d.bias), 0)
        v71 = torch.cat((1., (v67).expand(7 * 1, 8)), 0)
        v72 = torch.cat((1., (v31).squeeze()), 0)
        v73 = torch.cat((1., (v68).squeeze(0).t().flatten()), 0)
        v74 = 2 * v72.unsqueeze(1).pow(v36 * v57)
        v75 = torch.cat((1., (x66).flatten()), 0)
        v76 = v6 - v34
        v77 = torch.cat((1., (v76).t().flatten()), 0)
        v78 = 2 * v77.unsqueeze(1).pow(x52)
        v79 = torch.cat((1., (v76).t().flatten()), 0)
        v80 = v2 - x51
        v81 = torch.cat((1., (v80).t().flatten()), 0)
        v82 = v81.mul((v80).t())
        v83 = 2 * torch.matmul(v82, self.conv2d.weight)
        v84 = torch.nn.functional.linear(torch.matmul(v81, self.conv2d.weight), self.conv2d.weight, self.conv2d.bias)
        v85 = v2 + torch.exp(v81)
        v86 = torch.cat((torch.cat((v84.unsqueeze(0)), 0).flatten()), 0)
        x64 = x58.permute(0, 2, 1)
        v87 = x64 * v56
        v88 = v87.permute(0, 2, 3, 1)
        v89 = torch.cat((v61), 0).t().unsqueeze(1)
        v90 = (torch.nn.functional.linear(v88, self.conv2d.weight, self.conv2d.bias)).permute(0, 2, 1)
        x63 = x63 * v90.squeeze()
        v91 = torch.cat((x63), 0)
        x62 = x70 * 1 - v83
        x54 = x54 * self.conv2d.bias
        v92 = torch.pow(self.conv2d.bias, 2)
        v93 = torch.nn.functional.linear(torch.pow(v91, 2), self.conv2d.weight, self.conv2d.bias)
        v94 = self.conv2d.bias.unsqueeze(1)
        v95 = 2 * v94 * v37
        v96 = torch.nn.functional.linear(torch.pow(x70, 2), self.conv2d.weight)
        v97 = self.conv2d.bias * v37
        v98 = 2 * v95 * self.conv2d.bias
        v99 = v37 + (x54 * v96).squeeze().t()
        x67 = v99 + v15.expand(1, 3, 4, 1).squeeze()
        x67 = torch.reshape(x67, (-1, 24))
        x70 = torch.reshape(x70, (-1, 3))
        v100 = torch.nn.functional.linear(x47, self.conv2d.weight)
        v101 = v79.unsqueeze(1).pow(v75.unsqueeze(0))
        x53 = v100 * x52
        v101 = x70 * v101
        v102 = x53 + ((v97 + v91).t())
        x62 = -(v102.t())
        x62 = v6 - v4 - v98 / v62 + v20.t() - v95 * v92
        x62 = x70 * x62.t() + self.conv2d.bias
        v103 = torch.pow(v66, 2)
        v104 = torch.nn.functional.linear(v103, self.conv2d_1.weight, self.conv2d_1.bias)
        x57 = v85 * v43
        v86 = v86.t().unsqueeze(1)
        x57 = (v83 * v104).t() + v83 + v86 + v96 * 2
        x40, x61 = torch.max((torch.nn.functional.linear(v78, self.conv2d.weight, self.conv2d.bias.unsque