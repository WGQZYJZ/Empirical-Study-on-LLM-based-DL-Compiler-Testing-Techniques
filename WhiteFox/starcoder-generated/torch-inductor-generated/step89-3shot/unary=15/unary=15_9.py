
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = torch.nn.Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3))
        self.conv2 = torch.nn.Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv3 = torch.nn.Conv2d(64, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.conv4 = torch.nn.Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv5 = torch.nn.Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.conv6 = torch.nn.Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv7 = torch.nn.Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.conv8 = torch.nn.Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv9 = torch.nn.Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.conv10 = torch.nn.Conv2d(96, 96, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv11 = torch.nn.Conv2d(96, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.conv19 = torch.nn.Conv2d(192, 384, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        self.conv20 = torch.nn.Conv2d(384, 384, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv21 = torch.nn.Conv2d(384, 256, kernel_size=(3,3), stride=(2, 2), padding=(1, 1))
        self.conv22 = torch.nn.Conv2d(256, 256, kernel_size=(1,1) stride=(1, 1), padding=(0, 0))
        self.conv23 = torch.nn.Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        self.conv24 = torch.nn.Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv25 = torch.nn.Conv2d(384, 448, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv26 = torch.nn.Conv2d(448, 512, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv27 = torch.nn.Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
        self.conv28 = torch.nn.Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), padding=(0, 0))
    def forward(self, x1):
        v1 = self.conv1(x1)
        v1a = torch.relu(v1)
        v1b = torch.relu(v1)
        v1c = torch.relu(v1)
        v1_pool = self.pool(v1a, kernel_size=3, stride=2, padding=0, ceil_mode=False, count_include_pad=True)
        v2 = self.conv2(v1_pool)
        v2_pool = self.pool(v2, kernel_size=3, stride=2, padding=0, ceil_mode=False, count_include_pad=True)
        v3 = self.conv3(v2_pool)
        v4 = self.conv4(v3)
        v5 = self.conv5(v4)
        v6 = self.conv6(v5)
        v7 = torch.relu(v6)
        v7_pool = self.pool(v7, kernel_size=3, stride=2, padding=0, ceil_mode=False, count_include_pad=True)
        v8 = self.conv7(v7_pool)
        v9 = self.conv8(v8)
        v10 = self.conv9(v9)
        v11 = self.conv10(v10)
        v12 = torch.relu(v11)
        v12_pool = self.pool(v12, kernel_size=3, stride=2, padding=0, ceil_mode=False, count_include_pad=True)
        v13 = self.conv11(v12_pool)
        v13_pool_pad = F.pad(v13, (1, 1, 1, 1))
        v13_pool = self.pool(v13_pool_pad, kernel_size=3, stride=2, padding=0, ceil_mode=False, count_include_pad=True)
        v14 = torch.cat([v13_pool,v7_pool], 1)
        v15 = self.conv19(v14)
        v16 = self.conv21(v15)
        v16_1 = torch.relu(v16)
        v17 = F.pad(v16_1, (1, 1, 1, 1))
        v18 = self.conv20(v17)
        v18_pool = self.pool(v18, kernel_size=3, stride=2, padding=0, ceil_mode=False, count_include_pad=True)
        v19 = torch.cat([v18_pool,v2_pool,v1], 1)
        v20 = self.conv22(v19)
        v21 = F.pad(v20, (1, 1, 1, 1))
        v22 = self.conv23(v21)
        v23 = self.conv25(v22)
        v24 = self.conv26(v23)
        v24_pool = self.pool(v24, kernel_size=3, stride=(1,1), padding=0, ceil_mode=False, count_include_pad=True)
        v25 = self.conv24(v24_pool)
        v26 = self.conv28(v25)
        v26_fc = v26.mean(3).mean(2)
        v27 = torch.squeeze(v26_fc)
        v28 = torch.relu(v27)
        return v28
    def pool(self, x, kernel_size, stride, padding, ceil_mode=False, count_include_pad=True):
        result = F.avg_pool2d(F.pad(x, (padding, padding, padding, padding)), (kernel_size, kernel_size), stride=stride, padding=(0, 0), ceil_mode=ceil_mode, count_include_pad=count_include_pad)
        return result
# Inputs to the model
x1 = torch.randn(1, 3, 224, 224)
