
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.conv1 = torch.nn.Conv2d(3, 8, 1, stride=1, padding=1)
        self.conv2 = torch.nn.Conv2d(3, 3, 1, stride=1, padding=1)
        self.conv3 = torch.nn.Conv2d(3, 8, 1, stride=1, padding=1)
        self.bn1 = torch.nn.BatchNorm2d(8)
        self.bn2 = torch.nn.BatchNorm2d(8)
        self.bn3 = torch.nn.BatchNorm2d(3)
        self.bn4 = torch.nn.BatchNorm2d(8)
        self.conv4 = torch.nn.Conv2d(8, 8, 1, stride=1, padding=1)
        self.conv5 = torch.nn.Conv2d(8, 8, 5, stride=1, padding=2)
        self.conv6 = torch.nn.Conv2d(8, 8, 3, stride=1, padding=0)
    def forward(self, x1, x2):
        v1 = self.conv1(x1)
        v2 = self.bn2(v1)
        v3 = torch.sigmoid(v2)
        v4 = self.conv2(v3)
        v5 = self.bn3(v4)
        v6 = self.relu(v5)
        v7 = self.conv3(x1)
        v8 = self.conv4(v7)
        v9 = self.bn4(v8)
        v10 = torch.sigmoid(v9)
        v11 = self.conv5(v10)
        v12 = self.conv6(v10)
        v13 = self.pad(v12)
        v14 = self.conv3(v13)
        v17 = self.conv5(v14)
        v15 = self.bn4(v17)
        v18 = torch.sigmoid(v15)
        v19 = self.conv6(v18)
        v26 = torch.conv2d(x1, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)
        v20 = self.bn4(v26)
        v21 = torch.sigmoid(v20)
        return v21
# Inputs to the model
x1 = torch.randn(1, 3, 64, 64)
x2 = torch.randn(1, 3, 64, 64)
