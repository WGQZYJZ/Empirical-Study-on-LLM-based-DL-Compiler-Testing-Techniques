
class Model(torch.nn.Module):
    def __init__(self):
        super(Model, self).__init__()
        self.conv = torch.nn.Conv2d(1, 64, kernel_size=(4, 4), padding=(2, 2), groups=1)
        self.bn1 = torch.nn.BatchNorm2d(64)
        self.conv1_dw = torch.nn.Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
        self.bn2 = torch.nn.BatchNorm2d(64)
        self.conv2_dw = torch.nn.Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
        self.bn3 = torch.nn.BatchNorm2d(64)
        self.conv3_dw = torch.nn.Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
        self.bn4 = torch.nn.BatchNorm2d(64)
        self.conv4_dw = torch.nn.Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
        self.bn5 = torch.nn.BatchNorm2d(64)
        self.conv5_dw = torch.nn.Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
        self.bn6 = torch.nn.BatchNorm2d(64)
        self.conv6_dw = torch.nn.Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
        self.bn7 = torch.nn.BatchNorm2d(64)
        self.conv7_dw = torch.nn.Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
        self.bn8 = torch.nn.BatchNorm2d(64)
    def forward(self, input_1):
        v0 = torch.sigmoid(input_1)
        v1 = self.conv(v0)
        v2 = self.bn1(v1)
        v3 = self.conv1_dw(v2)
        v4 = self.bn2(v3)
        v5 = self.conv2_dw(v4)
        v6 = self.bn3(v5)
        v7 = self.conv3_dw(v6)
        v8 = self.bn4(v7)
        v9 = self.conv4_dw(v8)
        v10 = self.bn5(v9)
        v11 = self.conv5_dw(v10)
        v12 = self.bn6(v11)
        v13 = self.conv6_dw(v12)
        v14 = self.bn7(v13)
        v15 = self.conv7_dw(v14)
        v16 = self.bn8(v15)
        v1 = torch.nn.Conv2d(64, 2, kernel_size=(1, 1), groups=1)
        v17 = v1(v16)
        v18 = torch.sigmoid(v17)
        return v18
# Inputs to the model
input_1 = torch.randn(1, 1, 224, 224)
