
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.features = torch.nn.Sequential(torch.nn.Conv2d(3, 32, 3, 1, 1), torch.nn.Conv2d(32, 3, 3, 1, 1))
        self.split1 = torch.nn.Sequential(torch.nn.MaxPool2d(3, 1, 0, 0), torch.nn.MaxPool2d(5, 1, 2, 2))
        self.split2 = torch.nn.Sequential(torch.nn.MaxPool2d(2, 4, 1, 1), torch.nn.MaxPool2d(2, 4, 2, 2))
        self.split3 = torch.nn.Sequential(torch.nn.MaxPool2d(4, 4, 0, 0), torch.nn.MaxPool2d(2, 2, 2, 2))
        self.split4 = torch.nn.Sequential(torch.nn.MaxPool2d(1, 2, 1, 1))
        self.split5 = torch.nn.Sequential(torch.nn.MaxPool2d(2, 2, 1, 1), torch.nn.MaxPool2d(3, 2, 1, 1))
        self.split6 = torch.nn.Sequential(torch.nn.MaxPool2d(2, 2, 0, 0))
        self.split7 = torch.nn.Sequential(torch.nn.MaxPool2d(5, 2, 0, 0))
        self.split8 = torch.nn.Sequential(torch.nn.MaxPool2d(5, 4, 1, 1))
        self.split9 = torch.nn.Sequential(torch.nn.MaxPool2d(4, 2, 1, 1))
        self.split10 = torch.nn.Sequential(torch.nn.Conv2d(3, 64, 4, 4))
        self.fc1 = torch.nn.Linear(64, 10)
    def forward(self, x1):
        v1_1 = self.features(x1)
        v1_2 = self.features(x1)
        split_tensors1 = torch.split(v1_1, [1, 1, 1], dim=1)
        split_tensors2 = torch.split(v1_2, [2, 1, 1], dim=1)
        v1_3 = self.split1(v1_1)
        v1_4 = self.split2(v1_1)
        v1_5 = self.split3(v1_2)
        v1_1 = self.split4(v1_1)
        v1_6 = self.split5(v1_3)
        v1_7 = self.split6(v1_5)
        v1_8 = self.split7(v1_4)
        v1_9 = self.split8(v1_1)
        v1_4 = self.split9(v1_1)
        v1_2 = self.split10(v1_2)
        concatenated_tensor1 = torch.cat(split_tensors1, dim=1)
        concatenated_tensor2 = torch.cat(split_tensors2, dim=1)
        return (concatenated_tensor1, concatenated_tensor2, torch.stack([v1_1, v1_3, v1_4, v1_6, v1_7, v1_8, v1_9]))
# Inputs to the model
x1 = torch.randn(1, 3, 8, 8)
