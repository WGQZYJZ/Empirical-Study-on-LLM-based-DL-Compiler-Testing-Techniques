
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.linear = torch.nn.Linear(24, 1)
 
    def forward(self, x1, x2, x3):
        v1 = self.linear(x1)
        v2 = v1 - x2 
        v3 = torch.nn.ReLU()(v2)
        return v3

# Initializing the model
m = Model()

# Inputs to the model
x1 = torch.randn(1, 24) # The shape of the first dimension must be the same as the shape of the first dimension of the input tensor.
x2 = torch.randn(1) # The shape of the output of the linear transformation can be identical to the shape of the output tensor generated by the network.
x3 = torch.randn(1, 1) # The shape can be different from the shape of the previous input and the previous output.
