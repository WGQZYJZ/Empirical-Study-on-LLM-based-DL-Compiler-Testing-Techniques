
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.conv_transpose_1 = torch.nn.ConvTranspose2d(3, 8, 7, 2, 2)
        self.conv_transpose_2 = torch.nn.ConvTranspose2d(8, 11, 3, 1, 1, bias = False)
        self.conv = torch.nn.Conv2d(11, 16, 3, 1, 1)
        self.linear_1 = torch.nn.Linear(12544,512)
        self.linear_2 = torch.nn.Linear(512,2)
        self.relu_1 = torch.nn.ReLU()
        self.relu_2 = torch.nn.ReLU()
        self.relu_3 = torch.nn.ReLU()
        self.relu_4 = torch.nn.ReLU()
        self.relu_5 = torch.nn.ReLU()
        self.relu_6 = torch.nn.ReLU()
        self.gelu_1 = torch.nn.GELU()
        self.gelu_2 = torch.nn.GELU()
        self.gelu_3 = torch.nn.GELU()
        self.gelu_4 = torch.nn.GELU()
        self.gelu_5 = torch.nn.GELU()
        self.sigmoid = torch.nn.Sigmoid()
        self.dropout_1 = torch.nn.Dropout(p=0.5)
        self.dropout_2 = torch.nn.Dropout(p=0.5)
        self.dropout_3 = torch.nn.Dropout(p=0.5)
    def forward(self, x1):
        v1 = self.conv_transpose_1(x1)
        v2 = torch.relu(v1)
        v3 = self.conv_transpose_2(v2)
        v4 = torch.sigmoid(v3)
        v5 = self.conv(v4)
        v6 = self.linear_1(v5.reshape((1,-1)))
        v7 = self.relu_1(v6)
        v8 = self.dropout_1(v7)
        v9 = self.linear_2(v8)
        v10 = self.sigmoid(v9)
        #v9 = self.linear_2(v2)
        #v10 = self.sigmoid(v9)
        return v10
# Inputs to the model
x1 = torch.randn(1, 3, 224, 224)
