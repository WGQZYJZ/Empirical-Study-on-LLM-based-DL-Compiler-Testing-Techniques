
class Model(torch.nn.Module):
    def __init__(self, min, max):
        super().__init__()
        self.conv1 = torch.nn.Conv2d(1, 1, 5, stride=1, padding=0)
        self.conv2 = torch.nn.Conv2d(1, 1, 3, stride=1, padding=1)
        self.conv3 = torch.nn.Conv2d(1, 1, 3, stride=1, padding=1)
        self.conv4 = torch.nn.Conv2d(1, 1, 3, stride=2, padding=1)
        self.conv5 = torch.nn.Conv2d(1, 1, 3, stride=2, padding=1)
        self.conv6 = torch.nn.ConvTranspose2d(1, 1, 2, stride=1, padding=1)
        self.conv7 = torch.nn.Conv2d(1, 1, 5, stride=2, padding=3)
        self.conv8 = torch.nn.Conv2d(1, 1, 3, stride=1, padding=0)
        self.conv9 = torch.nn.ConvTranspose2d(1, 12, 2, stride=2)
        self.conv10 = torch.nn.Conv2d(1, 8, 3, stride=1, padding=0)
        self.conv11 = torch.nn.Conv2d(12, 1, 1, stride=1, padding=0)
        self.in_features = 0
        self.min = min
        self.max = max
    def forward(self, x):
        x1 = self.conv1(x)
        a = x1.size()[1]
        b = x1.size()[2]
        a = 1
        b = 3
        c = x1.size()[3]
        d = 1
        e = x1.size()[4]
        f = x1.size()[5]
        x1 = self.conv2(x)
        a = x1.size()[1]
        b = x1.size()[2]
        a = 1
        b = 3
        c = x1.size()[3]
        d = 1
        e = x1.size()[4]
        f = x1.size()[5]
        x1 = self.conv3(x1)
        a = x1.size()[1]
        b = x1.size()[2]
        a = 1
        b = 3
        c = x1.size()[3]
        d = 1
        e = x1.size()[4]
        f = x1.size()[5]
        x2 = self.conv4(x1)
        a = x2.size()[1]
        b = x2.size()[2]
        a = 1
        b = 3
        c = x2.size()[3]
        d = 1
        e = x2.size()[4]
        f = x2.size()[5]
        x1 = self.conv5(x2)
        a = x1.size()[1]
        b = x1.size()[2]
        a = 1
        b = 3
        c = x1.size()[3]
        d = 1
        e = x1.size()[4]
        f = x1.size()[5]
        x2 = self.conv6(x1)
        a = x2.size()[1]
        b = x2.size()[2]
        a = 1
        b = 3
        c = x2.size()[3]
        d = 1
        e = x2.size()[4]
        f = x2.size()[5]
        x3 = x2.size()[6]
        a = torch.Size([x.size()[0], 1, 5, 14])
        b = x3
        x2 = self.conv7(x2)
        a = x2.size()[1]
        b = x2.size()[2]
        a = 1
        b = 3
        c = x2.size()[3]
        d = 1
        e = x2.size()[4]
        f = x2.size()[5]
        x1 = self.conv8(x2)
        a = x1.size()[1]
        b = x1.size()[2]
        a = 1
        b = 3
        c = x1.size()[3]
        d = 1
        e = x1.size()[4]
        f = x1.size()[5]
        x2 = self.conv9(x1)
        a = x2.size()[1]
        b = x2.size()[2]
        a = 1
        b = 3
        c = x2.size()[3]
        d = 1
        e = x2.size()[4]
        f = x2.size()[5]
        x1 = self.conv10(x2)
        a = x1.size()[1]
        b = x1.size()[2]
        a = 1
        b = 2
        c = x1.size()[3]
        d = 1
        e = x1.size()[4]
        f = x1.size()[5]
        x2 = self.conv11(x1)
        x3 = self.in_features
        x4 = x2.size()[2]
        x5 = x2.size()[3]
        x5 = x2.size()[3]
        x2 = self.max
        x2 = self.min
        v1 = self.conv1(x)
        a = v1.size()[1]
        b = v1.size()[2]
        c = v1.size()[3]
        v2 = v1.size()[4]
        a = 1
        c = 3
        b = 3
        v3 = self.conv2(v1)
        a = v3.size()[1]
        b = v3.size()[2]
        c = v3.size()[3]
        v4 = v3.size()[4]
        a = 1
        c = 3
        b = 6
        v5 = torch.clamp_min(v4, self.min)
        v6 = torch.clamp_max(v5, self.max)
        v7 = self.conv3(v6)
        v8 = torch.clamp_min(v7, self.min)
        v10 = torch.clamp_max(v8, self.max)
        v10 = v1
        v10 = v2
        v10 = v3
        v10 = v4
        v10 = v5
        v3 = v6
        v4 = v7
        v10 = v5
        v10 = v6
        v10 = v7
        v10 = v3
        v2 = self.conv4(v3)
        v1 = self.conv5(v2)
        v1 = v1
        v1 = v1
        v1 = v1
        v2 = v2
        v1 = v1
        v1 = v1
        v1 = v1
        v1 = v1
        v1 = v1
        v1 = self.conv6(v1)
        v1 = v4
        v1 = v5
        v1 = v3
        v1 = v4
        v1 = v2
        v1 = v5
        v1 = v1
        v1 = v2
        v1 = v5
        v1 = v6
        v1 = self.conv7(v1)
        v1 = v7
        v1 = v8
        v1 = v3
        v1 = v2
        v1 = v5
        v1 = v8
        v1 = v1
        v1 = v2
        v1 = v7
        v1 = v4
        v1 = v2
        v1 = v3
        v1 = v5
        v1 = v1
        v1 = v2
        v1 = v6
        v1 = v2
        v1 = v3
        v1 = v3
        v1 = v6
        v2 = self.conv8(v1)
        v1 = v6
        v1 = v3
        v1 = v4
        v1 = v5
        v1 = v7
        v1 = v8
        v1 = v2
        v1 = v3
        v1 = v8
        v1 = self.in_features
        v1 = v2
        v1 = self.conv9(v1)
        v1 = v8
        v1 = v2
        v1 = self.conv10(v1)
        v1 = v7
        v2 = v1.size()[2]
        v3 = v1.size()[3]
        v4 = v1.size()[4]
        v3 = 1
        v4 = 1
        v2 = 2
        v5 = 3
        v2 = v4
        v2 = v3
        v1 = self.conv11(v1)
        v9 = v5
        v3 = v2
        v3 = self.conv1(v1)
        v2 = a
        v2 = v3
        v3 = b
        v4 = c
        v1 = v4
        v1 = v3
        v1 = a
        v1 = b
        v2 = d
        v4 = e
        v1 = v3
        v3 = c
        v1 = v2
        v1 = v1
        v1 = e
        v1 = d
        v1 = e
        v1 = f
        v2 = v4
        v1 = v2
        v1 = v1
        v1 = v1
        v1 = v1
        v1 = 1
        v2 = 0
        v2 = max
        v1 = v3
        v3 = v2
        v1 = v3
min = 10
max = 20
# Inputs to the model
x = torch.randn(1, 1, 10, 10)
