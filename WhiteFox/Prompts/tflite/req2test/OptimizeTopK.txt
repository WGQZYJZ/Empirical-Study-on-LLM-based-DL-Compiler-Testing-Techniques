### Please generate a valid TensorFlow model with public TensorFlow APIs. When converted to TensorFlow Lite model, the model should be able to trigger the optimization pass `FuseFullyConnectedAndMul`. Additionally, please generate valid input tensors for the model and pass to the model.

# Description
The model should contain the following pattern:
```
filter = tf.Variable([...]) # a constant tensor
cst = tf.Variable([...]) # a constant tensor, shape = [1, 1, ..., 1, last_dim]
y = tf.matmul(input_tensor, filter) * cst # Mul is applied on the output of FullyConnectedOp
```
This pattern characterizes scenarios where a FullyConnectedOp is invoked on a tensor and a constant filter input, and then a Mul operation is invoked on the output tensor and a constant tensor. The FullyConnected operation should have the following properties:
   - The filter input should be a constant tensor.
   - The bias input should either be of NoneType or a constant tensor.
   - The fused activation function should be "NONE".
The constant tensor from the Mul operation should have all dimensions equal to 1, except for the last dimension. The constant tensor from the Mul operation should be broadcastable with the filter tensor of the FullyConnected operation after reshaping and transposing the constant tensor.


# Model
```python
class Model(tf.keras.Model):

  def __init__(self):
    super(Model, self).__init__()
    self.w1 = tf.Variable([[3., 4.], [5., 6.]])
    self.m1 = tf.Variable([7., 8.])

  def call(self, x1):
    return tf.matmul(x1, self.w1) * self.m1

# Initializing the model
m = Model()

# Inputs to the model
input_shape = [1, 2]
x1 = tf.constant([1., 2.], shape=input_shape)

# Call model
y1 = m(x1)
```

### Please generate a valid TensorFlow model with public TensorFlow APIs. When converted to TensorFlow Lite model, the model should be able to trigger the optimization pass `OptimizeTopK`. Additionally, please generate valid input tensors for the model and pass to the model.

# Description
The model should contain the following pattern:
```python
values, indices = tf.math.top_k(input_tensor, K)
values_slice = tf.slice(values, [0]*len(values.shape), [dim_size]*len(values.shape[:-1])+[k])
indices_slice = tf.slice(indices, [0]*len(indices.shape), [dim_size]*len(indices.shape[:-1])+[k])
```
This pattern characterizes scenarios where a TopKV2Op is invoked on a tensor and then a Slice operation is invoked on the output tensors (values and indices). The Slice operation should have the following properties:
   - The begin tensor should be a zero tensor.
   - The size tensor should be equal to the input tensor shape except for the last dimension, which should be `k`.
   - The number of elements in the input tensor divided by the size of the last dimension of the input tensor times `k` should be equal to the number of elements in the output tensor of the Slice operation.
   - The size of the last dimension of the Slice operation should not be 0.
The output tensors of the TopKV2Op (values and indices) should either have only one use or no use. If both values and indices are used, the size of the last dimension of the Slice operation should be the same for both.

# Model
```python