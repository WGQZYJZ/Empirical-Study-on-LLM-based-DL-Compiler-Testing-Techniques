### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value. Please do not include any undefined behavior in your code. The code you generated will be used to test the correctness of the optimization.

# Description of requirements

The C++ code should contain the following pattern:
```
// no va_arg in stdarg.h is used

// define one function which has variable arguments
static int varargs_func(int x, ...) {
    RANDOM_CODE; // Do something here with input arguments, but don't generate the codes contain va_args
    int result = x OPERATOR ANY_VALUE; // result is related to x
    return result;
}

int main() {
    RANDOM_CODE;  // declare some variables
    int x = ANY_VALUE; // declare variable x
    ANY_TYPE y = ANY_VALUE; // declare y
    ANY_TYPE z = ANY_VALUE; // declare z
    // invoke the func varargs_func
    int result = varargs_func(x, y, z, ANY_VALUE, ANY_VALUE); // you can pass the arguments with any number, any type
    return result;
}
```
This pattern characterizes scenarios where within the `main` function, there exists a call to `varargs_func`, and the result of this call is being used. `varargs_func` is marked as variable function, which accepts variable arguments, then returns a single `ANY_TYPE` value that is determined by the first argument. The first argument can be any type, e.g. `int`, `float`, `ptr` `struct`, and so on. The functions must be `static`(which will be translated into ir function with internel attribute), no vastart intrinsic(such as `va_arg` in `stdarg.h`). The `main` function must return a value related to this optimization for further comparison.

# C++ Code begins 

```cpp
#include <vector>
#include <string>
#include <iostream>
#include <map>

int a, b, c, d, e, f, g, h, i;
int x;
long j;
static long *k = &j;
long *const l = &j;
int m() {
  if (b)
    return 1;
  if (c & a)
    return 1;
  return 0;
}

static int varargs_func(int x, ...) {
  f = 3;
  for (; f >= 0; f--) {
    e = 0;
    for (; e <= 3; e++) {
      d = 3;
      for (; d >= 0; d--) {
        g = 0;
        for (; g <= 3; g++) {
          i = 0;
          for (; i <= 3; i++)
            *l = m() + (int)*k + h + *k + x;
        }
      }
    }
  }
  return *l;
}

int main() { 
  std::vector<int> vec = {0, 1, 2, 3};
  for (int i = 0; i < vec.size(); i++) { // Avoid out-of-bound access
    vec[i] = i * 2;
  }
  x = 3;
  return varargs_func(x, a, b, c);
}
```

# C++ Code ends

### Please generate a valid C++ Code that meets the requirements below. The code should contain a `main` function. And the main function gives back an output value. Please initialize all the variables you define with a value. Please do not include any undefined behavior in your code. The code you generated will be used to test the correctness of the optimization.

# Description of requirements

The C++ code should contain the following pattern:

```cpp
int main() {
    int x = ANY_VALUE; // declare variable x
    int y = ANY_VALUE; // declare y
    int z = ANY_VALUE; // declare z
    while (CONDITION) { // CONDITION is a constant expression that can be evaluated at compile time
        RANDOM_CODE; // Do something here with x, y, z
        if (ANOTHER_CONSTANT_CONDITION) { // ANOTHER_CONSTANT_CONDITION is a constant expression that can be evaluated at compile time
            break;
        }
    }
    return 0;
}
```

This pattern characterizes scenarios where within the `main` function, there exists a `while` loop with a constant condition that can be evaluated at compile time. Inside the loop, there is an `if` statement with a constant condition that can also be evaluated at compile time. The `while` loop must be a single latch loop, meaning it only has one exit point. The `main` function must return a value related to this optimization for further comparison.

# C++ Code begins
