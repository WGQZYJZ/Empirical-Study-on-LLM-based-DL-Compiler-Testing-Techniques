### Please generate a valid PyTorch model example with public PyTorch APIs meets the specified requirements. Plus, please also generate the input tensor for the newly generated model.

# Description of requirements
The model should contain the following pattern:
```
t1 = input_tensor.permute(...) # Permute the input tensor
t2 = torch.nn.functional.linear(t1, ...) # Apply linear transformation to the permuted tensor.
```
This pattern characterizes scenarios where the tensor method 'permute' is invoked first, and then the `torch.nn.functional.linear` function is invoked on the permuted tensor.
The permute method is invoked on an input tensor with more than 2 dimensions, and it swaps the last two dimensions of this tensor. This modified tensor is then used as the main input for the linear function.

# Model
class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        self.linear = torch.nn.Linear(2, 2)

    def forward(self, x1):
        v1 = x1.permute(0, 2, 1)
        v2 = torch.nn.functional.linear(v1, self.linear.weight, self.linear.bias)
        return v2

# Initializing the model
m = Model()

# Inputs to the model
x1 = torch.randn(1, 2, 2)
__output__ = m(x1)

### Please generate a valid PyTorch model example with public PyTorch APIs meets the specified requirements. Plus, please also generate the input tensor for the newly generated model. The model should be different from the previous one.

# Description of requirements
The model should contain the following pattern:
```
conv = torch.nn.ConvXd(...) # X can be 1, 2, or 3 representing the dimension
bn = torch.nn.BatchNormXd(...) # X should match with ConvXd
output = bn(conv(input_tensor))
```
This pattern characterizes scenarios where a convolution layer (`torch.nn.ConvXd`) is followed by a batch normalization layer (`torch.nn.BatchNormXd`). The output of the convolution layer is used as the input to the batch normalization layer. 

The `fuse_conv_bn` optimization is triggered when the convolution and batch normalization layers are in evaluation mode (not in training mode), and the batch normalization layer is tracking running statistics. 

After the optimization, the convolution and batch normalization layers are fused into a single convolution layer, and the batch normalization layer is removed from the graph. If the output of the convolution layer is used by other nodes, the optimization will not be performed. 

The optimization also applies to the functional API equivalent of the above pattern, where `torch.nn.functional.convXd` and `torch.nn.functional.batch_norm` are used instead of the module API. The constraints for the functional API pattern are similar to the module API pattern.

# Model