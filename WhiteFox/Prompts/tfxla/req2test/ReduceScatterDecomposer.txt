### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `ReshapeReshapeForwarding` in TensorFlow XLA.

# Description
The model should contain the following pattern:
```
t1 = tf.reshape(input_tensor, ...)
t2 = tf.reshape(t1, input_tensor.shape)
```
The pattern describes that there are two reshape operators in the model. The first `reshape` operator transforms a tensor input `input_tensor` from `input_tensor.shape` to any new shape, and the second `reshape` operator transforms the output of first `reshape` back to `input_tensor.shape`.


# Model
class Model(tf.keras.Model):

  def __init__(self):
    super(Model, self).__init__()

  def call(self, x1):
    x2 = tf.reshape(x1, [2,2])
    return tf.reshape(x2, [4])

# Initializing the model
m = Model()

# Inputs to the model
input_shape = [4]
x1 = tf.constant([4.,5.,6.,7.], shape=input_shape)

# Call model
y = m(x1)


### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `ReduceScatterDecomposer` in TensorFlow XLA.

# Description
The model should contain a `HloReduceScatterInstruction` that is an array. This instruction is a collective operation that combines values across multiple devices and scatters the result. 

The pattern in the model would look something like this:

```python
# Assume `input_tensor` is a distributed tensor across multiple devices
reduced_scatter = tf.xla.experimental.reduce_scatter(input_tensor, ...)
```

In this pattern, `reduce_scatter` is a `HloReduceScatterInstruction` that operates on `input_tensor`. The `reduce_scatter` operation combines values of `input_tensor` across multiple devices and scatters the result. 

The optimization pass `ReduceScatterDecomposer` is triggered when such a `HloReduceScatterInstruction` is found in the model. The optimization pass decomposes the `reduce_scatter` operation into an all-reduce operation followed by a dynamic slice operation. This decomposition can potentially improve the performance of the model by reducing the amount of data that needs to be communicated across devices.

# Model