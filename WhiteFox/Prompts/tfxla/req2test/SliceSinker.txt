### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `ReshapeReshapeForwarding` in TensorFlow XLA.

# Description
The model should contain the following pattern:
```
t1 = tf.reshape(input_tensor, ...)
t2 = tf.reshape(t1, input_tensor.shape)
```
The pattern describes that there are two reshape operators in the model. The first `reshape` operator transforms a tensor input `input_tensor` from `input_tensor.shape` to any new shape, and the second `reshape` operator transforms the output of first `reshape` back to `input_tensor.shape`.


# Model
class Model(tf.keras.Model):

  def __init__(self):
    super(Model, self).__init__()

  def call(self, x1):
    x2 = tf.reshape(x1, [2,2])
    return tf.reshape(x2, [4])

# Initializing the model
m = Model()

# Inputs to the model
input_shape = [4]
x1 = tf.constant([4.,5.,6.,7.], shape=input_shape)

# Call model
y = m(x1)


### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `SliceSinker` in TensorFlow XLA.

# Description
The model should contain the following pattern to trigger the `SliceSinker` optimization pass:

```
t1 = tf.slice(input_tensor1, ...)
t2 = tf.slice(input_tensor2, ...)
t3 = elementwise_op(t1, t2)
```

The pattern describes that there are two slice operators in the model. The first `slice` operator extracts a portion of a tensor `input_tensor1` and the second `slice` operator extracts a portion of another tensor `input_tensor2`. Then, an elementwise operation is performed on the results of these two slices.

The conditions to trigger the `SliceSinker` optimization pass are:

1. All operands of the elementwise operation are slices.
2. All slices are from the same indices of slice sources with compatible shapes.
3. The elementwise operation and its operands have not been transformed before (their user count is not 0).
4. The elementwise operation and its operands have the same opcode and result element type.
5. The accumulated size of the group of operations is not less than the size of such a bigger tensor. This is a heuristic to ensure that the transformation never causes us to do more elementwise operations.

If these conditions are met, the `SliceSinker` optimization pass will be triggered and the function `SliceSinker::Run` will return true.

# Model