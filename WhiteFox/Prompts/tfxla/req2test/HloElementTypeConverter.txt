### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `ReshapeReshapeForwarding` in TensorFlow XLA.

# Description
The model should contain the following pattern:
```
t1 = tf.reshape(input_tensor, ...)
t2 = tf.reshape(t1, input_tensor.shape)
```
The pattern describes that there are two reshape operators in the model. The first `reshape` operator transforms a tensor input `input_tensor` from `input_tensor.shape` to any new shape, and the second `reshape` operator transforms the output of first `reshape` back to `input_tensor.shape`.


# Model
class Model(tf.keras.Model):

  def __init__(self):
    super(Model, self).__init__()

  def call(self, x1):
    x2 = tf.reshape(x1, [2,2])
    return tf.reshape(x2, [4])

# Initializing the model
m = Model()

# Inputs to the model
input_shape = [4]
x1 = tf.constant([4.,5.,6.,7.], shape=input_shape)

# Call model
y = m(x1)


### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `HloElementTypeConverter` in TensorFlow XLA.

# Description
The TensorFlow model should contain operations that use a specific primitive type that needs to be eliminated and replaced with another primitive type. The `HloElementTypeConverter` optimization pass is triggered when the model contains operations that use the `eliminate_type_` and these operations are not among the ones that are excluded from conversion (e.g., `kParameter`, `kConstant`, `kTuple`, `kConvert`, `kBitcastConvert`, `kGetTupleElement`, `kInfeed`, `kOutfeed`, `kCustomCall`, `kWhile`, `kCall`, `kAllReduce`, `kReduceScatter`, `kAllReduceStart`, `kFusion`, `kMap`, `kReduce`, `kReduceWindow`, `kScatter`, `kSelectAndScatter`, `kSort`, `kConditional`). 

The model should also contain operations that perform arithmetic operations and contain operands with `eliminate_type_`. These operands are converted to `replace_with_type_` and the result of the new instruction is converted back to match the result type of the original instruction. If the result of the original instruction is a tuple, the elements of the result of the new instruction are converted to produce a new tuple with the same shape as the original tuple.

Here is an example of a model that would trigger this optimization pass:

```python
x = tf.constant([1, 2, 3], dtype=tf.float32)
y = tf.constant([4, 5, 6], dtype=tf.float32)
z = tf.add(x, y)
```

In this example, if `eliminate_type_` is `tf.float32` and `replace_with_type_` is `tf.int32`, the `HloElementTypeConverter` optimization pass would be triggered to convert the `tf.float32` operands of the `tf.add` operation to `tf.int32`.

# Model