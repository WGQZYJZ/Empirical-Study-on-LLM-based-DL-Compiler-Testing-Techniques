### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `ReshapeReshapeForwarding` in TensorFlow XLA.

# Description
The model should contain the following pattern:
```
t1 = tf.reshape(input_tensor, ...)
t2 = tf.reshape(t1, input_tensor.shape)
```
The pattern describes that there are two reshape operators in the model. The first `reshape` operator transforms a tensor input `input_tensor` from `input_tensor.shape` to any new shape, and the second `reshape` operator transforms the output of first `reshape` back to `input_tensor.shape`.


# Model
class Model(tf.keras.Model):

  def __init__(self):
    super(Model, self).__init__()

  def call(self, x1):
    x2 = tf.reshape(x1, [2,2])
    return tf.reshape(x2, [4])

# Initializing the model
m = Model()

# Inputs to the model
input_shape = [4]
x1 = tf.constant([4.,5.,6.,7.], shape=input_shape)

# Call model
y = m(x1)


### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `ReduceScatterReassociate` in TensorFlow XLA.

# Description
The model should contain the following pattern:
```
t1 = tf.raw_ops.ReduceScatter(input_tensor1, ...)
t2 = tf.raw_ops.ReduceScatter(input_tensor2, ...)
t3 = tf.some_operation(t1, t2)
```
The pattern describes that there are two `ReduceScatter` operations in the model, and their outputs are used as inputs to another operation. The `ReduceScatter` operations must be compatible, meaning they belong to the same domain, have the same reduction kind, and have the same scatter dimension. The operation that uses the outputs of the `ReduceScatter` operations must be a reduction operation. 

The model should not contain any `ReduceScatter` operations with constrained layouts. 

The `ReduceScatter` operations should only have one user. If they have more than one user, the optimization pass will not be triggered. 

The optimization pass `ReduceScatterReassociate` will transform the pattern into:
```
t1 = tf.some_operation(input_tensor1, input_tensor2)
t2 = tf.raw_ops.ReduceScatter(t1, ...)
```
This means that the operation is performed before the `ReduceScatter` operation, instead of after.

# Model