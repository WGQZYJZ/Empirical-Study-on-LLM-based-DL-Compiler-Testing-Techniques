### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `ReshapeReshapeForwarding` in TensorFlow XLA.

# Description
The model should contain the following pattern:
```
t1 = tf.reshape(input_tensor, ...)
t2 = tf.reshape(t1, input_tensor.shape)
```
The pattern describes that there are two reshape operators in the model. The first `reshape` operator transforms a tensor input `input_tensor` from `input_tensor.shape` to any new shape, and the second `reshape` operator transforms the output of first `reshape` back to `input_tensor.shape`.


# Model
class Model(tf.keras.Model):

  def __init__(self):
    super(Model, self).__init__()

  def call(self, x1):
    x2 = tf.reshape(x1, [2,2])
    return tf.reshape(x2, [4])

# Initializing the model
m = Model()

# Inputs to the model
input_shape = [4]
x1 = tf.constant([4.,5.,6.,7.], shape=input_shape)

# Call model
y = m(x1)


### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `ConvertMover` in TensorFlow XLA.

# Description
The model should contain the following patterns:

1. Increase precision "down" the graph:
   ```
   t1 = tf.convert_to_dtype(input_tensor, higher_precision_dtype)
   t2 = tf.op(t1)
   ```
   The pattern describes that there is a `convert` operator that increases the precision of a tensor `input_tensor` from a lower precision data type to a higher precision data type (`higher_precision_dtype`). This `convert` operator is followed by an operation `op` that commutes with the `convert` operation. The operations that commute with `convert` are `Concatenate`, `Pad`, `Reshape`, `Slice`, and `Transpose`.

2. Decrease precision "up" the graph:
   ```
   t1 = tf.op(input_tensor)
   t2 = tf.convert_to_dtype(t1, lower_precision_dtype)
   ```
   The pattern describes that there is an operation `op` that commutes with the `convert` operation and is followed by a `convert` operator that decreases the precision of a tensor from a higher precision data type to a lower precision data type (`lower_precision_dtype`). The operations that commute with `convert` are `Concatenate`, `Pad`, `Reshape`, `Slice`, and `Transpose`.

In both patterns, the `convert` operator should only have one user. For the first pattern, if the input to the operation `op` is a constant, it should be losslessly convertible to the lower precision data type.

# Model