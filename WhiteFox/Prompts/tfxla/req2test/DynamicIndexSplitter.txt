### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `ReshapeReshapeForwarding` in TensorFlow XLA.

# Description
The model should contain the following pattern:
```
t1 = tf.reshape(input_tensor, ...)
t2 = tf.reshape(t1, input_tensor.shape)
```
The pattern describes that there are two reshape operators in the model. The first `reshape` operator transforms a tensor input `input_tensor` from `input_tensor.shape` to any new shape, and the second `reshape` operator transforms the output of first `reshape` back to `input_tensor.shape`.


# Model
class Model(tf.keras.Model):

  def __init__(self):
    super(Model, self).__init__()

  def call(self, x1):
    x2 = tf.reshape(x1, [2,2])
    return tf.reshape(x2, [4])

# Initializing the model
m = Model()

# Inputs to the model
input_shape = [4]
x1 = tf.constant([4.,5.,6.,7.], shape=input_shape)

# Call model
y = m(x1)


### Please generate one valid TensorFlow model that satisfies requirements below.
You should only use public TensorFlow APIs. The model can be used as the input to trigger the optimization pass `DynamicIndexSplitter` in TensorFlow XLA.

# Description
The model should contain the following pattern:
```
t1 = tf.dynamic_slice(input_tensor, start_indices, slice_sizes)
```
or
```
t1 = tf.dynamic_update_slice(input_tensor, update, start_indices)
```
The pattern describes that there are dynamic slice or dynamic update slice operators in the model. The `tf.dynamic_slice` operator extracts a slice of size `slice_sizes` from a tensor `input_tensor` starting at the locations specified by `start_indices`. The `tf.dynamic_update_slice` operator updates a slice of `input_tensor` with `update` tensor starting at the locations specified by `start_indices`.

The optimization pass `DynamicIndexSplitter` is triggered when the rank of the `start_indices` tensor is not a scalar (i.e., it is a vector or higher-dimensional tensor). The pass splits the indices into separate scalar tensors, and replaces the original dynamic slice or dynamic update slice operation with a new one that uses these scalar tensors as indices. This optimization can improve the performance of the model by reducing the complexity of the index computations.

# Model