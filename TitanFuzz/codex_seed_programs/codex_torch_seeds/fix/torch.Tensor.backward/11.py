'\nTask 1: import PyTorch\nTask 2: Generate input data\nTask 3: Call the API torch.Tensor.backward\ntorch.Tensor.backward(_input_tensor, gradient=None, retain_graph=None, create_graph=False, inputs=None)\n'
import torch
import numpy as np
x = torch.tensor(1.0, requires_grad=True)
w = torch.tensor(2.0, requires_grad=True)
b = torch.tensor(3.0, requires_grad=True)
y = ((w * x) + b)
y.backward()
print(x.grad)
print(w.grad)
print(b.grad)
x = torch.randn(10, 3)
y = torch.randn(10, 2)
linear = torch.nn.Linear(3, 2)
print('w: ', linear.weight)
print('b: ', linear.bias)
criterion = torch.nn.MSELoss()
optimizer = torch.optim.SGD(linear.parameters(), lr=0.01)
pred = linear(x)
loss = criterion(pred, y)
print('loss: ', loss.item())
loss.backward()
print('dL/dw: ', linear.weight.grad)